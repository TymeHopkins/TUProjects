
Hopkins_Project4_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a08  0800b038  0800b038  0001b038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca40  0800ca40  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca40  0800ca40  0001ca40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca48  0800ca48  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca48  0800ca48  0001ca48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800ca50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a7e8  20000208  0800cc58  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a9f0  0800cc58  0002a9f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012278  00000000  00000000  0002027b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea6  00000000  00000000  000324f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b97  00000000  00000000  000362e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e12  00000000  00000000  00036e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b07  00000000  00000000  0005ec89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed6e1  00000000  00000000  00072790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000540c  00000000  00000000  0015fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00165280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b020 	.word	0x0800b020

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0800b020 	.word	0x0800b020

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2uiz>:
 8000bfc:	004a      	lsls	r2, r1, #1
 8000bfe:	d211      	bcs.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c04:	d211      	bcs.n	8000c2a <__aeabi_d2uiz+0x2e>
 8000c06:	d50d      	bpl.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c10:	d40e      	bmi.n	8000c30 <__aeabi_d2uiz+0x34>
 8000c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2e:	d102      	bne.n	8000c36 <__aeabi_d2uiz+0x3a>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2f>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c44:	bf24      	itt	cs
 8000c46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4e:	d90d      	bls.n	8000c6c <__aeabi_d2f+0x30>
 8000c50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c64:	bf08      	it	eq
 8000c66:	f020 0001 	biceq.w	r0, r0, #1
 8000c6a:	4770      	bx	lr
 8000c6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c70:	d121      	bne.n	8000cb6 <__aeabi_d2f+0x7a>
 8000c72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c76:	bfbc      	itt	lt
 8000c78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	4770      	bxlt	lr
 8000c7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c86:	f1c2 0218 	rsb	r2, r2, #24
 8000c8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c92:	fa20 f002 	lsr.w	r0, r0, r2
 8000c96:	bf18      	it	ne
 8000c98:	f040 0001 	orrne.w	r0, r0, #1
 8000c9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca8:	ea40 000c 	orr.w	r0, r0, ip
 8000cac:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb4:	e7cc      	b.n	8000c50 <__aeabi_d2f+0x14>
 8000cb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cba:	d107      	bne.n	8000ccc <__aeabi_d2f+0x90>
 8000cbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cca:	4770      	bxne	lr
 8000ccc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_uldivmod>:
 8000cdc:	b953      	cbnz	r3, 8000cf4 <__aeabi_uldivmod+0x18>
 8000cde:	b94a      	cbnz	r2, 8000cf4 <__aeabi_uldivmod+0x18>
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	2800      	cmpeq	r0, #0
 8000ce6:	bf1c      	itt	ne
 8000ce8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cf0:	f000 b9a6 	b.w	8001040 <__aeabi_idiv0>
 8000cf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cfc:	f000 f83c 	bl	8000d78 <__udivmoddi4>
 8000d00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d08:	b004      	add	sp, #16
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_d2lz>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2300      	movs	r3, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	460d      	mov	r5, r1
 8000d16:	f7ff ff0b 	bl	8000b30 <__aeabi_dcmplt>
 8000d1a:	b928      	cbnz	r0, 8000d28 <__aeabi_d2lz+0x1c>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4629      	mov	r1, r5
 8000d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d24:	f000 b80a 	b.w	8000d3c <__aeabi_d2ulz>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2e:	f000 f805 	bl	8000d3c <__aeabi_d2ulz>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
 8000d3a:	bf00      	nop

08000d3c <__aeabi_d2ulz>:
 8000d3c:	b5d0      	push	{r4, r6, r7, lr}
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__aeabi_d2ulz+0x34>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	4606      	mov	r6, r0
 8000d44:	460f      	mov	r7, r1
 8000d46:	f7ff fc81 	bl	800064c <__aeabi_dmul>
 8000d4a:	f7ff ff57 	bl	8000bfc <__aeabi_d2uiz>
 8000d4e:	4604      	mov	r4, r0
 8000d50:	f7ff fc02 	bl	8000558 <__aeabi_ui2d>
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <__aeabi_d2ulz+0x38>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f7ff fc78 	bl	800064c <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4630      	mov	r0, r6
 8000d62:	4639      	mov	r1, r7
 8000d64:	f7ff faba 	bl	80002dc <__aeabi_dsub>
 8000d68:	f7ff ff48 	bl	8000bfc <__aeabi_d2uiz>
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d70:	3df00000 	.word	0x3df00000
 8000d74:	41f00000 	.word	0x41f00000

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0xe2>
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	b143      	cbz	r3, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	f1c3 0220 	rsb	r2, r3, #32
 8000d9c:	409f      	lsls	r7, r3
 8000d9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000da2:	4317      	orrs	r7, r2
 8000da4:	409c      	lsls	r4, r3
 8000da6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000daa:	fa1f f58c 	uxth.w	r5, ip
 8000dae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db2:	0c22      	lsrs	r2, r4, #16
 8000db4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dbc:	fb01 f005 	mul.w	r0, r1, r5
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dcc:	f080 811c 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	f240 8119 	bls.w	8001008 <__udivmoddi4+0x290>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	4462      	add	r2, ip
 8000dda:	1a12      	subs	r2, r2, r0
 8000ddc:	b2a4      	uxth	r4, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dea:	fb00 f505 	mul.w	r5, r0, r5
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x90>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x294>
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x294>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11e      	cbz	r6, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40dc      	lsrs	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0xbc>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80ed 	beq.w	8001002 <__udivmoddi4+0x28a>
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	fab3 f183 	clz	r1, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d149      	bne.n	8000ed0 <__udivmoddi4+0x158>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d302      	bcc.n	8000e46 <__udivmoddi4+0xce>
 8000e40:	4282      	cmp	r2, r0
 8000e42:	f200 80f8 	bhi.w	8001036 <__udivmoddi4+0x2be>
 8000e46:	1a84      	subs	r4, r0, r2
 8000e48:	eb65 0203 	sbc.w	r2, r5, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4617      	mov	r7, r2
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d0e2      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	e9c6 4700 	strd	r4, r7, [r6]
 8000e58:	e7df      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e5a:	b902      	cbnz	r2, 8000e5e <__udivmoddi4+0xe6>
 8000e5c:	deff      	udf	#255	; 0xff
 8000e5e:	fab2 f382 	clz	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2101      	movs	r1, #1
 8000e74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e78:	fb07 2015 	mls	r0, r7, r5, r2
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e82:	fb0e f005 	mul.w	r0, lr, r5
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2b8>
 8000e9a:	4645      	mov	r5, r8
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x14e>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x14c>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2c2>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ece:	e79f      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ed0:	f1c1 0720 	rsb	r7, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee6:	40fd      	lsrs	r5, r7
 8000ee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	fb09 5518 	mls	r5, r9, r8, r5
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	fb08 f50e 	mul.w	r5, r8, lr
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2b4>
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2b4>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4464      	add	r4, ip
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	b29d      	uxth	r5, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2ac>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2ac>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46ae      	mov	lr, r5
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x29c>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x298>
 8000f68:	b156      	cbz	r6, 8000f80 <__udivmoddi4+0x208>
 8000f6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f72:	fa04 f707 	lsl.w	r7, r4, r7
 8000f76:	40ca      	lsrs	r2, r1
 8000f78:	40cc      	lsrs	r4, r1
 8000f7a:	4317      	orrs	r7, r2
 8000f7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	f1c3 0120 	rsb	r1, r3, #32
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	fa20 f201 	lsr.w	r2, r0, r1
 8000f94:	fa25 f101 	lsr.w	r1, r5, r1
 8000f98:	409d      	lsls	r5, r3
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x258>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000fc8:	428d      	cmp	r5, r1
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1b49      	subs	r1, r1, r5
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x282>
 8000fe8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000ff6:	3d02      	subs	r5, #2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0xfc>
 8001002:	4631      	mov	r1, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e708      	b.n	8000e1a <__udivmoddi4+0xa2>
 8001008:	4639      	mov	r1, r7
 800100a:	e6e6      	b.n	8000dda <__udivmoddi4+0x62>
 800100c:	4610      	mov	r0, r2
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x90>
 8001010:	4548      	cmp	r0, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb65 0e0c 	sbc.w	lr, r5, ip
 800101c:	3b01      	subs	r3, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f0>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x282>
 8001024:	462b      	mov	r3, r5
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x258>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b0>
 8001030:	3d02      	subs	r5, #2
 8001032:	4462      	add	r2, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x124>
 8001036:	4608      	mov	r0, r1
 8001038:	e70a      	b.n	8000e50 <__udivmoddi4+0xd8>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x14e>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <getTitleScreen>:
void savedPassword();
void enterPassword();
char screenClr();

void getTitleScreen()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af02      	add	r7, sp, #8
	//INITIALIZE TITLE SCREEN UI/UX
	ILI9163_init(0);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fae8 	bl	8001620 <ILI9163_init>
	HAL_Delay(1000);
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	f001 fdd8 	bl	8002c08 <HAL_Delay>
	ILI9163_newFrame();
 8001058:	f000 fbca 	bl	80017f0 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 800105c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	22a0      	movs	r2, #160	; 0xa0
 8001066:	2100      	movs	r1, #0
 8001068:	2000      	movs	r0, #0
 800106a:	f000 fc2f 	bl	80018cc <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(36, 5, Font_11x18, WHITE, "Password");
 800106e:	4b6e      	ldr	r3, [pc, #440]	; (8001228 <getTitleScreen+0x1e4>)
 8001070:	4a6e      	ldr	r2, [pc, #440]	; (800122c <getTitleScreen+0x1e8>)
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	cb0c      	ldmia	r3, {r2, r3}
 800107c:	2105      	movs	r1, #5
 800107e:	2024      	movs	r0, #36	; 0x24
 8001080:	f000 fd21 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(14, 25, Font_11x18, WHITE, "Keypad Guide");
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <getTitleScreen+0x1e4>)
 8001086:	4a6a      	ldr	r2, [pc, #424]	; (8001230 <getTitleScreen+0x1ec>)
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	cb0c      	ldmia	r3, {r2, r3}
 8001092:	2119      	movs	r1, #25
 8001094:	200e      	movs	r0, #14
 8001096:	f000 fd16 	bl	8001ac6 <ILI9163_drawStringF>

	//RECTANGLE BOARDER
	ILI9163_drawRect(5, 45, 155, 123, 3, BLACK);
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	2303      	movs	r3, #3
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	237b      	movs	r3, #123	; 0x7b
 80010a4:	229b      	movs	r2, #155	; 0x9b
 80010a6:	212d      	movs	r1, #45	; 0x2d
 80010a8:	2005      	movs	r0, #5
 80010aa:	f000 fc3d 	bl	8001928 <ILI9163_drawRect>

	//CALCULATOR KEY PAD ROW 1
	ILI9163_drawStringF(10, 50, Font_11x18, WHITE, "1");
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <getTitleScreen+0x1e4>)
 80010b0:	4a60      	ldr	r2, [pc, #384]	; (8001234 <getTitleScreen+0x1f0>)
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	cb0c      	ldmia	r3, {r2, r3}
 80010bc:	2132      	movs	r1, #50	; 0x32
 80010be:	200a      	movs	r0, #10
 80010c0:	f000 fd01 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 50, Font_11x18, WHITE, "2");
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <getTitleScreen+0x1e4>)
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <getTitleScreen+0x1f4>)
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	cb0c      	ldmia	r3, {r2, r3}
 80010d2:	2132      	movs	r1, #50	; 0x32
 80010d4:	202f      	movs	r0, #47	; 0x2f
 80010d6:	f000 fcf6 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 50, Font_11x18, WHITE, "3");
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <getTitleScreen+0x1e4>)
 80010dc:	4a57      	ldr	r2, [pc, #348]	; (800123c <getTitleScreen+0x1f8>)
 80010de:	9201      	str	r2, [sp, #4]
 80010e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	cb0c      	ldmia	r3, {r2, r3}
 80010e8:	2132      	movs	r1, #50	; 0x32
 80010ea:	205a      	movs	r0, #90	; 0x5a
 80010ec:	f000 fceb 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 50, Font_11x18, WHITE, "A");
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <getTitleScreen+0x1e4>)
 80010f2:	4a53      	ldr	r2, [pc, #332]	; (8001240 <getTitleScreen+0x1fc>)
 80010f4:	9201      	str	r2, [sp, #4]
 80010f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fa:	9200      	str	r2, [sp, #0]
 80010fc:	cb0c      	ldmia	r3, {r2, r3}
 80010fe:	2132      	movs	r1, #50	; 0x32
 8001100:	2084      	movs	r0, #132	; 0x84
 8001102:	f000 fce0 	bl	8001ac6 <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 2
	ILI9163_drawStringF(10, 68, Font_11x18, WHITE, "4");
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <getTitleScreen+0x1e4>)
 8001108:	4a4e      	ldr	r2, [pc, #312]	; (8001244 <getTitleScreen+0x200>)
 800110a:	9201      	str	r2, [sp, #4]
 800110c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	cb0c      	ldmia	r3, {r2, r3}
 8001114:	2144      	movs	r1, #68	; 0x44
 8001116:	200a      	movs	r0, #10
 8001118:	f000 fcd5 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 68, Font_11x18, WHITE, "5");
 800111c:	4b42      	ldr	r3, [pc, #264]	; (8001228 <getTitleScreen+0x1e4>)
 800111e:	4a4a      	ldr	r2, [pc, #296]	; (8001248 <getTitleScreen+0x204>)
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	cb0c      	ldmia	r3, {r2, r3}
 800112a:	2144      	movs	r1, #68	; 0x44
 800112c:	202f      	movs	r0, #47	; 0x2f
 800112e:	f000 fcca 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 68, Font_11x18, WHITE, "6");
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <getTitleScreen+0x1e4>)
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <getTitleScreen+0x208>)
 8001136:	9201      	str	r2, [sp, #4]
 8001138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	cb0c      	ldmia	r3, {r2, r3}
 8001140:	2144      	movs	r1, #68	; 0x44
 8001142:	205a      	movs	r0, #90	; 0x5a
 8001144:	f000 fcbf 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 68, Font_11x18, WHITE, "B");
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <getTitleScreen+0x1e4>)
 800114a:	4a41      	ldr	r2, [pc, #260]	; (8001250 <getTitleScreen+0x20c>)
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	9200      	str	r2, [sp, #0]
 8001154:	cb0c      	ldmia	r3, {r2, r3}
 8001156:	2144      	movs	r1, #68	; 0x44
 8001158:	2084      	movs	r0, #132	; 0x84
 800115a:	f000 fcb4 	bl	8001ac6 <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 3
	ILI9163_drawStringF(10, 86, Font_11x18, WHITE, "7");
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <getTitleScreen+0x1e4>)
 8001160:	4a3c      	ldr	r2, [pc, #240]	; (8001254 <getTitleScreen+0x210>)
 8001162:	9201      	str	r2, [sp, #4]
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	9200      	str	r2, [sp, #0]
 800116a:	cb0c      	ldmia	r3, {r2, r3}
 800116c:	2156      	movs	r1, #86	; 0x56
 800116e:	200a      	movs	r0, #10
 8001170:	f000 fca9 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 86, Font_11x18, WHITE, "8");
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <getTitleScreen+0x1e4>)
 8001176:	4a38      	ldr	r2, [pc, #224]	; (8001258 <getTitleScreen+0x214>)
 8001178:	9201      	str	r2, [sp, #4]
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	cb0c      	ldmia	r3, {r2, r3}
 8001182:	2156      	movs	r1, #86	; 0x56
 8001184:	202f      	movs	r0, #47	; 0x2f
 8001186:	f000 fc9e 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 86, Font_11x18, WHITE, "9");
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <getTitleScreen+0x1e4>)
 800118c:	4a33      	ldr	r2, [pc, #204]	; (800125c <getTitleScreen+0x218>)
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	cb0c      	ldmia	r3, {r2, r3}
 8001198:	2156      	movs	r1, #86	; 0x56
 800119a:	205a      	movs	r0, #90	; 0x5a
 800119c:	f000 fc93 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 86, Font_11x18, WHITE, "C");
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <getTitleScreen+0x1e4>)
 80011a2:	4a2f      	ldr	r2, [pc, #188]	; (8001260 <getTitleScreen+0x21c>)
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	cb0c      	ldmia	r3, {r2, r3}
 80011ae:	2156      	movs	r1, #86	; 0x56
 80011b0:	2084      	movs	r0, #132	; 0x84
 80011b2:	f000 fc88 	bl	8001ac6 <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 4
	ILI9163_drawString(10, 107, Font_7x10, WHITE, "sft");
 80011b6:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <getTitleScreen+0x220>)
 80011b8:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <getTitleScreen+0x224>)
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	cb0c      	ldmia	r3, {r2, r3}
 80011c4:	216b      	movs	r1, #107	; 0x6b
 80011c6:	200a      	movs	r0, #10
 80011c8:	f000 fc3c 	bl	8001a44 <ILI9163_drawString>
	ILI9163_drawStringF(47, 104, Font_11x18, WHITE, "0");
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <getTitleScreen+0x1e4>)
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <getTitleScreen+0x228>)
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	cb0c      	ldmia	r3, {r2, r3}
 80011da:	2168      	movs	r1, #104	; 0x68
 80011dc:	202f      	movs	r0, #47	; 0x2f
 80011de:	f000 fc72 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 107, Font_7x10, WHITE, "set");
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <getTitleScreen+0x220>)
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <getTitleScreen+0x22c>)
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ec:	9200      	str	r2, [sp, #0]
 80011ee:	cb0c      	ldmia	r3, {r2, r3}
 80011f0:	216b      	movs	r1, #107	; 0x6b
 80011f2:	205a      	movs	r0, #90	; 0x5a
 80011f4:	f000 fc67 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 104, Font_11x18, WHITE, "D");
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <getTitleScreen+0x1e4>)
 80011fa:	4a1e      	ldr	r2, [pc, #120]	; (8001274 <getTitleScreen+0x230>)
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	cb0c      	ldmia	r3, {r2, r3}
 8001206:	2168      	movs	r1, #104	; 0x68
 8001208:	2084      	movs	r0, #132	; 0x84
 800120a:	f000 fc5c 	bl	8001ac6 <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(50);
 800120e:	2032      	movs	r0, #50	; 0x32
 8001210:	f001 fcfa 	bl	8002c08 <HAL_Delay>
	ILI9163_render();
 8001214:	f000 fb08 	bl	8001828 <ILI9163_render>
	HAL_Delay(1000);
 8001218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121c:	f001 fcf4 	bl	8002c08 <HAL_Delay>
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	0800b038 	.word	0x0800b038
 8001230:	0800b044 	.word	0x0800b044
 8001234:	0800b054 	.word	0x0800b054
 8001238:	0800b058 	.word	0x0800b058
 800123c:	0800b05c 	.word	0x0800b05c
 8001240:	0800b060 	.word	0x0800b060
 8001244:	0800b064 	.word	0x0800b064
 8001248:	0800b068 	.word	0x0800b068
 800124c:	0800b06c 	.word	0x0800b06c
 8001250:	0800b070 	.word	0x0800b070
 8001254:	0800b074 	.word	0x0800b074
 8001258:	0800b078 	.word	0x0800b078
 800125c:	0800b07c 	.word	0x0800b07c
 8001260:	0800b080 	.word	0x0800b080
 8001264:	20000000 	.word	0x20000000
 8001268:	0800b084 	.word	0x0800b084
 800126c:	0800b088 	.word	0x0800b088
 8001270:	0800b08c 	.word	0x0800b08c
 8001274:	0800b090 	.word	0x0800b090

08001278 <displayInput>:
	ILI9163_render();
	HAL_Delay(3000);
}

void displayInput()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af02      	add	r7, sp, #8
	keyChar = 0;
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <displayInput+0x30>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
	ILI9163_newFrame();
 8001284:	f000 fab4 	bl	80017f0 <ILI9163_newFrame>
	ILI9163_drawStringF(5, 5, Font_11x18, BLUE, input);
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <displayInput+0x34>)
 800128a:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <displayInput+0x38>)
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	cb0c      	ldmia	r3, {r2, r3}
 8001296:	2105      	movs	r1, #5
 8001298:	2005      	movs	r0, #5
 800129a:	f000 fc14 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_render();
 800129e:	f000 fac3 	bl	8001828 <ILI9163_render>
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000a878 	.word	0x2000a878
 80012ac:	20000008 	.word	0x20000008
 80012b0:	2000a884 	.word	0x2000a884

080012b4 <correctPassword>:

void correctPassword()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f9b0 	bl	8001620 <ILI9163_init>
	HAL_Delay(1000);
 80012c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012c4:	f001 fca0 	bl	8002c08 <HAL_Delay>
	ILI9163_newFrame();
 80012c8:	f000 fa92 	bl	80017f0 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, GREEN);
 80012cc:	230c      	movs	r3, #12
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	22a0      	movs	r2, #160	; 0xa0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 faf8 	bl	80018cc <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(41.5, 71, Font_11x18, WHITE, "Correct");
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <correctPassword+0x58>)
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <correctPassword+0x5c>)
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	cb0c      	ldmia	r3, {r2, r3}
 80012ea:	2147      	movs	r1, #71	; 0x47
 80012ec:	2029      	movs	r0, #41	; 0x29
 80012ee:	f000 fbea 	bl	8001ac6 <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 80012f2:	2064      	movs	r0, #100	; 0x64
 80012f4:	f001 fc88 	bl	8002c08 <HAL_Delay>
	ILI9163_render();
 80012f8:	f000 fa96 	bl	8001828 <ILI9163_render>
	HAL_Delay(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f001 fc82 	bl	8002c08 <HAL_Delay>
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008
 8001310:	0800b0c0 	.word	0x0800b0c0

08001314 <incorrectPassword>:

void incorrectPassword()
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f980 	bl	8001620 <ILI9163_init>
	HAL_Delay(1000);
 8001320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001324:	f001 fc70 	bl	8002c08 <HAL_Delay>
	ILI9163_newFrame();
 8001328:	f000 fa62 	bl	80017f0 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, RED);
 800132c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	22a0      	movs	r2, #160	; 0xa0
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f000 fac7 	bl	80018cc <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(30.5, 41, Font_11x18, WHITE, "Incorrect");
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <incorrectPassword+0x70>)
 8001340:	4a11      	ldr	r2, [pc, #68]	; (8001388 <incorrectPassword+0x74>)
 8001342:	9201      	str	r2, [sp, #4]
 8001344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	cb0c      	ldmia	r3, {r2, r3}
 800134c:	2129      	movs	r1, #41	; 0x29
 800134e:	201e      	movs	r0, #30
 8001350:	f000 fbb9 	bl	8001ac6 <ILI9163_drawStringF>
	ILI9163_drawStringF(14, 64, Font_11x18, WHITE, "Please retry");
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <incorrectPassword+0x70>)
 8001356:	4a0d      	ldr	r2, [pc, #52]	; (800138c <incorrectPassword+0x78>)
 8001358:	9201      	str	r2, [sp, #4]
 800135a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	cb0c      	ldmia	r3, {r2, r3}
 8001362:	2140      	movs	r1, #64	; 0x40
 8001364:	200e      	movs	r0, #14
 8001366:	f000 fbae 	bl	8001ac6 <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 800136a:	2064      	movs	r0, #100	; 0x64
 800136c:	f001 fc4c 	bl	8002c08 <HAL_Delay>
	ILI9163_render();
 8001370:	f000 fa5a 	bl	8001828 <ILI9163_render>
	HAL_Delay(1000);
 8001374:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001378:	f001 fc46 	bl	8002c08 <HAL_Delay>
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008
 8001388:	0800b0c8 	.word	0x0800b0c8
 800138c:	0800b0d4 	.word	0x0800b0d4

08001390 <savedPassword>:

//void --> can't remember what I was going to put here

void savedPassword()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f942 	bl	8001620 <ILI9163_init>
	HAL_Delay(1000);
 800139c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a0:	f001 fc32 	bl	8002c08 <HAL_Delay>
	ILI9163_newFrame();
 80013a4:	f000 fa24 	bl	80017f0 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 80013a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	22a0      	movs	r2, #160	; 0xa0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 fa89 	bl	80018cc <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawString(3, 41, Font_11x18, WHITE, "A new password");
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <savedPassword+0x70>)
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <savedPassword+0x74>)
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	cb0c      	ldmia	r3, {r2, r3}
 80013c8:	2129      	movs	r1, #41	; 0x29
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 fb3a 	bl	8001a44 <ILI9163_drawString>
	ILI9163_drawString(3, 64, Font_11x18, WHITE, "has been saved");
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <savedPassword+0x70>)
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <savedPassword+0x78>)
 80013d4:	9201      	str	r2, [sp, #4]
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	cb0c      	ldmia	r3, {r2, r3}
 80013de:	2140      	movs	r1, #64	; 0x40
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 fb2f 	bl	8001a44 <ILI9163_drawString>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 80013e6:	2064      	movs	r0, #100	; 0x64
 80013e8:	f001 fc0e 	bl	8002c08 <HAL_Delay>
	ILI9163_render();
 80013ec:	f000 fa1c 	bl	8001828 <ILI9163_render>
	HAL_Delay(3000);
 80013f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013f4:	f001 fc08 	bl	8002c08 <HAL_Delay>
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	0800b0e4 	.word	0x0800b0e4
 8001408:	0800b0f4 	.word	0x0800b0f4

0800140c <enterPassword>:

void enterPassword()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f904 	bl	8001620 <ILI9163_init>
	HAL_Delay(1000);
 8001418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141c:	f001 fbf4 	bl	8002c08 <HAL_Delay>
	ILI9163_newFrame();
 8001420:	f000 f9e6 	bl	80017f0 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 8001424:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	22a0      	movs	r2, #160	; 0xa0
 800142e:	2100      	movs	r1, #0
 8001430:	2000      	movs	r0, #0
 8001432:	f000 fa4b 	bl	80018cc <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawString(3, 41, Font_11x18, WHITE, "Enter password");
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <enterPassword+0x70>)
 8001438:	4a11      	ldr	r2, [pc, #68]	; (8001480 <enterPassword+0x74>)
 800143a:	9201      	str	r2, [sp, #4]
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	9200      	str	r2, [sp, #0]
 8001442:	cb0c      	ldmia	r3, {r2, r3}
 8001444:	2129      	movs	r1, #41	; 0x29
 8001446:	2003      	movs	r0, #3
 8001448:	f000 fafc 	bl	8001a44 <ILI9163_drawString>
	ILI9163_drawString(36, 64, Font_11x18, WHITE, "to login");
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <enterPassword+0x70>)
 800144e:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <enterPassword+0x78>)
 8001450:	9201      	str	r2, [sp, #4]
 8001452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001456:	9200      	str	r2, [sp, #0]
 8001458:	cb0c      	ldmia	r3, {r2, r3}
 800145a:	2140      	movs	r1, #64	; 0x40
 800145c:	2024      	movs	r0, #36	; 0x24
 800145e:	f000 faf1 	bl	8001a44 <ILI9163_drawString>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f001 fbd0 	bl	8002c08 <HAL_Delay>
	ILI9163_render();
 8001468:	f000 f9de 	bl	8001828 <ILI9163_render>
	HAL_Delay(3000);
 800146c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001470:	f001 fbca 	bl	8002c08 <HAL_Delay>
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	0800b104 	.word	0x0800b104
 8001484:	0800b114 	.word	0x0800b114

08001488 <screenClr>:
//    ILI9163_drawStringF(5, 55, Font_11x18, BLUE, writeString);
//    ILI9163_render();
//}

char screenClr()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	input[0] = '\0';
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <screenClr+0x18>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	ILI9163_newFrame();
 8001492:	f000 f9ad 	bl	80017f0 <ILI9163_newFrame>
	ILI9163_render();
 8001496:	f000 f9c7 	bl	8001828 <ILI9163_render>
	return 0;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000a884 	.word	0x2000a884

080014a4 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <ILI9163_writeCommand+0x44>)
 80014b6:	f002 fa89 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <ILI9163_writeCommand+0x44>)
 80014c2:	f002 fa83 	bl	80039cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80014c6:	1df9      	adds	r1, r7, #7
 80014c8:	2300      	movs	r3, #0
 80014ca:	2201      	movs	r2, #1
 80014cc:	4807      	ldr	r0, [pc, #28]	; (80014ec <ILI9163_writeCommand+0x48>)
 80014ce:	f003 fd92 	bl	8004ff6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <ILI9163_writeCommand+0x44>)
 80014da:	f002 fa77 	bl	80039cc <HAL_GPIO_WritePin>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020400 	.word	0x40020400
 80014ec:	2000a224 	.word	0x2000a224

080014f0 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	480c      	ldr	r0, [pc, #48]	; (8001534 <ILI9163_writeData+0x44>)
 8001502:	f002 fa63 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <ILI9163_writeData+0x44>)
 800150e:	f002 fa5d 	bl	80039cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 8001512:	1df9      	adds	r1, r7, #7
 8001514:	2300      	movs	r3, #0
 8001516:	2201      	movs	r2, #1
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <ILI9163_writeData+0x48>)
 800151a:	f003 fd6c 	bl	8004ff6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001524:	4803      	ldr	r0, [pc, #12]	; (8001534 <ILI9163_writeData+0x44>)
 8001526:	f002 fa51 	bl	80039cc <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020400 	.word	0x40020400
 8001538:	2000a224 	.word	0x2000a224

0800153c <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154c:	4810      	ldr	r0, [pc, #64]	; (8001590 <ILI9163_writeData16+0x54>)
 800154e:	f002 fa3d 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <ILI9163_writeData16+0x54>)
 800155a:	f002 fa37 	bl	80039cc <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	b29b      	uxth	r3, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	733b      	strb	r3, [r7, #12]
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 800156e:	f107 010c 	add.w	r1, r7, #12
 8001572:	2300      	movs	r3, #0
 8001574:	2202      	movs	r2, #2
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <ILI9163_writeData16+0x58>)
 8001578:	f003 fd3d 	bl	8004ff6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001582:	4803      	ldr	r0, [pc, #12]	; (8001590 <ILI9163_writeData16+0x54>)
 8001584:	f002 fa22 	bl	80039cc <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40020400 	.word	0x40020400
 8001594:	2000a224 	.word	0x2000a224

08001598 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4604      	mov	r4, r0
 80015a0:	4608      	mov	r0, r1
 80015a2:	4611      	mov	r1, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	4623      	mov	r3, r4
 80015a8:	80fb      	strh	r3, [r7, #6]
 80015aa:	4603      	mov	r3, r0
 80015ac:	80bb      	strh	r3, [r7, #4]
 80015ae:	460b      	mov	r3, r1
 80015b0:	807b      	strh	r3, [r7, #2]
 80015b2:	4613      	mov	r3, r2
 80015b4:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80015b6:	202a      	movs	r0, #42	; 0x2a
 80015b8:	f7ff ff74 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ffbc 	bl	800153c <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80015c4:	887b      	ldrh	r3, [r7, #2]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ffb8 	bl	800153c <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80015cc:	202b      	movs	r0, #43	; 0x2b
 80015ce:	f7ff ff69 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ffb1 	bl	800153c <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80015da:	883b      	ldrh	r3, [r7, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ffad 	bl	800153c <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80015e2:	202c      	movs	r0, #44	; 0x2c
 80015e4:	f7ff ff5e 	bl	80014a4 <ILI9163_writeCommand>
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}

080015f0 <ILI9163_reset>:

void ILI9163_reset(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fa:	4808      	ldr	r0, [pc, #32]	; (800161c <ILI9163_reset+0x2c>)
 80015fc:	f002 f9e6 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001600:	2032      	movs	r0, #50	; 0x32
 8001602:	f001 fb01 	bl	8002c08 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <ILI9163_reset+0x2c>)
 800160e:	f002 f9dd 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001612:	2064      	movs	r0, #100	; 0x64
 8001614:	f001 faf8 	bl	8002c08 <HAL_Delay>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020c00 	.word	0x40020c00

08001620 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162e:	486e      	ldr	r0, [pc, #440]	; (80017e8 <ILI9163_init+0x1c8>)
 8001630:	f002 f9cc 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800163a:	486c      	ldr	r0, [pc, #432]	; (80017ec <ILI9163_init+0x1cc>)
 800163c:	f002 f9c6 	bl	80039cc <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8001640:	f7ff ffd6 	bl	80015f0 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8001644:	2011      	movs	r0, #17
 8001646:	f7ff ff2d 	bl	80014a4 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 800164a:	2005      	movs	r0, #5
 800164c:	f001 fadc 	bl	8002c08 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8001650:	203a      	movs	r0, #58	; 0x3a
 8001652:	f7ff ff27 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8001656:	2005      	movs	r0, #5
 8001658:	f7ff ff4a 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 800165c:	2026      	movs	r0, #38	; 0x26
 800165e:	f7ff ff21 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 8001662:	2004      	movs	r0, #4
 8001664:	f7ff ff44 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8001668:	20f2      	movs	r0, #242	; 0xf2
 800166a:	f7ff ff1b 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff ff3e 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8001674:	20e0      	movs	r0, #224	; 0xe0
 8001676:	f7ff ff15 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 800167a:	203f      	movs	r0, #63	; 0x3f
 800167c:	f7ff ff38 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8001680:	2025      	movs	r0, #37	; 0x25
 8001682:	f7ff ff35 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8001686:	201c      	movs	r0, #28
 8001688:	f7ff ff32 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 800168c:	201e      	movs	r0, #30
 800168e:	f7ff ff2f 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8001692:	2020      	movs	r0, #32
 8001694:	f7ff ff2c 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8001698:	2012      	movs	r0, #18
 800169a:	f7ff ff29 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800169e:	202a      	movs	r0, #42	; 0x2a
 80016a0:	f7ff ff26 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80016a4:	2090      	movs	r0, #144	; 0x90
 80016a6:	f7ff ff23 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80016aa:	2024      	movs	r0, #36	; 0x24
 80016ac:	f7ff ff20 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80016b0:	2011      	movs	r0, #17
 80016b2:	f7ff ff1d 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff ff1a 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff ff17 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff ff14 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f7ff ff11 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff ff0e 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80016d4:	20e1      	movs	r0, #225	; 0xe1
 80016d6:	f7ff fee5 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80016da:	2020      	movs	r0, #32
 80016dc:	f7ff ff08 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80016e0:	2020      	movs	r0, #32
 80016e2:	f7ff ff05 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80016e6:	2020      	movs	r0, #32
 80016e8:	f7ff ff02 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80016ec:	2020      	movs	r0, #32
 80016ee:	f7ff feff 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80016f2:	2005      	movs	r0, #5
 80016f4:	f7ff fefc 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff fef9 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80016fe:	2015      	movs	r0, #21
 8001700:	f7ff fef6 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 8001704:	20a7      	movs	r0, #167	; 0xa7
 8001706:	f7ff fef3 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 800170a:	203d      	movs	r0, #61	; 0x3d
 800170c:	f7ff fef0 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8001710:	2018      	movs	r0, #24
 8001712:	f7ff feed 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8001716:	2025      	movs	r0, #37	; 0x25
 8001718:	f7ff feea 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800171c:	202a      	movs	r0, #42	; 0x2a
 800171e:	f7ff fee7 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8001722:	202b      	movs	r0, #43	; 0x2b
 8001724:	f7ff fee4 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8001728:	202b      	movs	r0, #43	; 0x2b
 800172a:	f7ff fee1 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 800172e:	203a      	movs	r0, #58	; 0x3a
 8001730:	f7ff fede 	bl	80014f0 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8001734:	20b1      	movs	r0, #177	; 0xb1
 8001736:	f7ff feb5 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800173a:	2008      	movs	r0, #8
 800173c:	f7ff fed8 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8001740:	2002      	movs	r0, #2
 8001742:	f7ff fed5 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8001746:	20b2      	movs	r0, #178	; 0xb2
 8001748:	f7ff feac 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800174c:	2008      	movs	r0, #8
 800174e:	f7ff fecf 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff fecc 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8001758:	20b3      	movs	r0, #179	; 0xb3
 800175a:	f7ff fea3 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800175e:	2008      	movs	r0, #8
 8001760:	f7ff fec6 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8001764:	2002      	movs	r0, #2
 8001766:	f7ff fec3 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 800176a:	20b4      	movs	r0, #180	; 0xb4
 800176c:	f7ff fe9a 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8001770:	2007      	movs	r0, #7
 8001772:	f7ff febd 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8001776:	202a      	movs	r0, #42	; 0x2a
 8001778:	f7ff fe94 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff feb7 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 8001782:	2000      	movs	r0, #0
 8001784:	f7ff feb4 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff feb1 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800178e:	207f      	movs	r0, #127	; 0x7f
 8001790:	f7ff feae 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8001794:	202b      	movs	r0, #43	; 0x2b
 8001796:	f7ff fe85 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fea8 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fea5 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fea2 	bl	80014f0 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80017ac:	209f      	movs	r0, #159	; 0x9f
 80017ae:	f7ff fe9f 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80017b2:	2036      	movs	r0, #54	; 0x36
 80017b4:	f7ff fe76 	bl	80014a4 <ILI9163_writeCommand>
	if(rotation)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80017be:	20a8      	movs	r0, #168	; 0xa8
 80017c0:	f7ff fe96 	bl	80014f0 <ILI9163_writeData>
 80017c4:	e002      	b.n	80017cc <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80017c6:	2068      	movs	r0, #104	; 0x68
 80017c8:	f7ff fe92 	bl	80014f0 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80017cc:	2013      	movs	r0, #19
 80017ce:	f7ff fe69 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80017d2:	2029      	movs	r0, #41	; 0x29
 80017d4:	f7ff fe66 	bl	80014a4 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80017d8:	202c      	movs	r0, #44	; 0x2c
 80017da:	f7ff fe63 	bl	80014a4 <ILI9163_writeCommand>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	e008      	b.n	800180e <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <ILI9163_newFrame+0x34>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001804:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3301      	adds	r3, #1
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001814:	d3f2      	bcc.n	80017fc <ILI9163_newFrame+0xc>

}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20000224 	.word	0x20000224

08001828 <ILI9163_render>:

void ILI9163_render()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	22a0      	movs	r2, #160	; 0xa0
 8001830:	2100      	movs	r1, #0
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff feb0 	bl	8001598 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <ILI9163_render+0x4c>)
 8001840:	f002 f8c4 	bl	80039cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8001844:	2201      	movs	r2, #1
 8001846:	f44f 7100 	mov.w	r1, #512	; 0x200
 800184a:	480a      	ldr	r0, [pc, #40]	; (8001874 <ILI9163_render+0x4c>)
 800184c:	f002 f8be 	bl	80039cc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 8001850:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001854:	4908      	ldr	r1, [pc, #32]	; (8001878 <ILI9163_render+0x50>)
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <ILI9163_render+0x54>)
 8001858:	f003 fd3c 	bl	80052d4 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <ILI9163_render+0x58>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
	while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 8001862:	bf00      	nop
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <ILI9163_render+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0fb      	beq.n	8001864 <ILI9163_render+0x3c>
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40020400 	.word	0x40020400
 8001878:	20000224 	.word	0x20000224
 800187c:	2000a224 	.word	0x2000a224
 8001880:	2000a89a 	.word	0x2000a89a

08001884 <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	460b      	mov	r3, r1
 8001890:	71bb      	strb	r3, [r7, #6]
 8001892:	4613      	mov	r3, r2
 8001894:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b9f      	cmp	r3, #159	; 0x9f
 800189a:	d80f      	bhi.n	80018bc <ILI9163_drawPixel+0x38>
 800189c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0b      	blt.n	80018bc <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80018a4:	79f9      	ldrb	r1, [r7, #7]
 80018a6:	79ba      	ldrb	r2, [r7, #6]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	015b      	lsls	r3, r3, #5
 80018b0:	440b      	add	r3, r1
 80018b2:	4905      	ldr	r1, [pc, #20]	; (80018c8 <ILI9163_drawPixel+0x44>)
 80018b4:	88ba      	ldrh	r2, [r7, #4]
 80018b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80018ba:	e000      	b.n	80018be <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80018bc:	bf00      	nop
}
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	20000224 	.word	0x20000224

080018cc <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	4603      	mov	r3, r0
 80018e0:	71bb      	strb	r3, [r7, #6]
 80018e2:	460b      	mov	r3, r1
 80018e4:	717b      	strb	r3, [r7, #5]
 80018e6:	4613      	mov	r3, r2
 80018e8:	713b      	strb	r3, [r7, #4]
	for(uint8_t x = x1; x < x2; x++)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	e012      	b.n	8001916 <ILI9163_fillRect+0x4a>
		for(uint8_t y = y1; y < y2; y++)
 80018f0:	79bb      	ldrb	r3, [r7, #6]
 80018f2:	73bb      	strb	r3, [r7, #14]
 80018f4:	e008      	b.n	8001908 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 80018f6:	8c3a      	ldrh	r2, [r7, #32]
 80018f8:	7bb9      	ldrb	r1, [r7, #14]
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ffc1 	bl	8001884 <ILI9163_drawPixel>
		for(uint8_t y = y1; y < y2; y++)
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	3301      	adds	r3, #1
 8001906:	73bb      	strb	r3, [r7, #14]
 8001908:	7bba      	ldrb	r2, [r7, #14]
 800190a:	793b      	ldrb	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3f2      	bcc.n	80018f6 <ILI9163_fillRect+0x2a>
	for(uint8_t x = x1; x < x2; x++)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	3301      	adds	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	797b      	ldrb	r3, [r7, #5]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3e8      	bcc.n	80018f0 <ILI9163_fillRect+0x24>
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bd90      	pop	{r4, r7, pc}

08001928 <ILI9163_drawRect>:

void ILI9163_drawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint8_t thickness, uint16_t color) {
 8001928:	b590      	push	{r4, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af02      	add	r7, sp, #8
 800192e:	4604      	mov	r4, r0
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4623      	mov	r3, r4
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	4603      	mov	r3, r0
 800193c:	71bb      	strb	r3, [r7, #6]
 800193e:	460b      	mov	r3, r1
 8001940:	717b      	strb	r3, [r7, #5]
 8001942:	4613      	mov	r3, r2
 8001944:	713b      	strb	r3, [r7, #4]
	ILI9163_fillRect(x1, y1, x2, y1+thickness, color);
 8001946:	79ba      	ldrb	r2, [r7, #6]
 8001948:	7e3b      	ldrb	r3, [r7, #24]
 800194a:	4413      	add	r3, r2
 800194c:	b2dc      	uxtb	r4, r3
 800194e:	797a      	ldrb	r2, [r7, #5]
 8001950:	79b9      	ldrb	r1, [r7, #6]
 8001952:	79f8      	ldrb	r0, [r7, #7]
 8001954:	8bbb      	ldrh	r3, [r7, #28]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4623      	mov	r3, r4
 800195a:	f7ff ffb7 	bl	80018cc <ILI9163_fillRect>
	ILI9163_fillRect(x1, y2-thickness, x2, y2, color);
 800195e:	793a      	ldrb	r2, [r7, #4]
 8001960:	7e3b      	ldrb	r3, [r7, #24]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	793c      	ldrb	r4, [r7, #4]
 8001968:	797a      	ldrb	r2, [r7, #5]
 800196a:	79f8      	ldrb	r0, [r7, #7]
 800196c:	8bbb      	ldrh	r3, [r7, #28]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4623      	mov	r3, r4
 8001972:	f7ff ffab 	bl	80018cc <ILI9163_fillRect>

	ILI9163_fillRect(x1, y1, x1+thickness, y2, color);
 8001976:	79fa      	ldrb	r2, [r7, #7]
 8001978:	7e3b      	ldrb	r3, [r7, #24]
 800197a:	4413      	add	r3, r2
 800197c:	b2da      	uxtb	r2, r3
 800197e:	793c      	ldrb	r4, [r7, #4]
 8001980:	79b9      	ldrb	r1, [r7, #6]
 8001982:	79f8      	ldrb	r0, [r7, #7]
 8001984:	8bbb      	ldrh	r3, [r7, #28]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	4623      	mov	r3, r4
 800198a:	f7ff ff9f 	bl	80018cc <ILI9163_fillRect>
	ILI9163_fillRect(x2-thickness, y1, x2, y2, color);
 800198e:	797a      	ldrb	r2, [r7, #5]
 8001990:	7e3b      	ldrb	r3, [r7, #24]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	b2d8      	uxtb	r0, r3
 8001996:	793c      	ldrb	r4, [r7, #4]
 8001998:	797a      	ldrb	r2, [r7, #5]
 800199a:	79b9      	ldrb	r1, [r7, #6]
 800199c:	8bbb      	ldrh	r3, [r7, #28]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	f7ff ff93 	bl	80018cc <ILI9163_fillRect>
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}

080019ae <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 80019ae:	b082      	sub	sp, #8
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	460b      	mov	r3, r1
 80019be:	71bb      	strb	r3, [r7, #6]
 80019c0:	4613      	mov	r3, r2
 80019c2:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	81fb      	strh	r3, [r7, #14]
 80019c8:	e02f      	b.n	8001a2a <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 80019ca:	6a3a      	ldr	r2, [r7, #32]
 80019cc:	797b      	ldrb	r3, [r7, #5]
 80019ce:	3b20      	subs	r3, #32
 80019d0:	7f79      	ldrb	r1, [r7, #29]
 80019d2:	fb03 f101 	mul.w	r1, r3, r1
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	440b      	add	r3, r1
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	81bb      	strh	r3, [r7, #12]
 80019e6:	e018      	b.n	8001a1a <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 80019e8:	897a      	ldrh	r2, [r7, #10]
 80019ea:	89bb      	ldrh	r3, [r7, #12]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00d      	beq.n	8001a14 <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 80019f8:	89bb      	ldrh	r3, [r7, #12]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4413      	add	r3, r2
 8001a00:	b2d8      	uxtb	r0, r3
 8001a02:	89fb      	ldrh	r3, [r7, #14]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff ff38 	bl	8001884 <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	3301      	adds	r3, #1
 8001a18:	81bb      	strh	r3, [r7, #12]
 8001a1a:	7f3b      	ldrb	r3, [r7, #28]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	89ba      	ldrh	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d3e1      	bcc.n	80019e8 <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	3301      	adds	r3, #1
 8001a28:	81fb      	strh	r3, [r7, #14]
 8001a2a:	7f7b      	ldrb	r3, [r7, #29]
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	89fa      	ldrh	r2, [r7, #14]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3ca      	bcc.n	80019ca <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a40:	b002      	add	sp, #8
 8001a42:	4770      	bx	lr

08001a44 <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	1d39      	adds	r1, r7, #4
 8001a50:	e881 000c 	stmia.w	r1, {r2, r3}
 8001a54:	4623      	mov	r3, r4
 8001a56:	73fb      	strb	r3, [r7, #15]
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8001a5c:	e029      	b.n	8001ab2 <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	793a      	ldrb	r2, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	2b9f      	cmp	r3, #159	; 0x9f
 8001a66:	dd12      	ble.n	8001a8e <ILI9163_drawString+0x4a>
			x = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8001a6c:	797a      	ldrb	r2, [r7, #5]
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	4413      	add	r3, r2
 8001a72:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	797a      	ldrb	r2, [r7, #5]
 8001a78:	4413      	add	r3, r2
 8001a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a7c:	dc1e      	bgt.n	8001abc <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b20      	cmp	r3, #32
 8001a84:	d103      	bne.n	8001a8e <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	3301      	adds	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8001a8c:	e011      	b.n	8001ab2 <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	7bb9      	ldrb	r1, [r7, #14]
 8001a94:	7bf8      	ldrb	r0, [r7, #15]
 8001a96:	8c3b      	ldrh	r3, [r7, #32]
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f7ff ff85 	bl	80019ae <ILI9163_drawChar>

		x += font.width;
 8001aa4:	793a      	ldrb	r2, [r7, #4]
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	73fb      	strb	r3, [r7, #15]
		string++;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	3301      	adds	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1d1      	bne.n	8001a5e <ILI9163_drawString+0x1a>
	}
}
 8001aba:	e000      	b.n	8001abe <ILI9163_drawString+0x7a>
				break;
 8001abc:	bf00      	nop
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}

08001ac6 <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8001ac6:	b590      	push	{r4, r7, lr}
 8001ac8:	b099      	sub	sp, #100	; 0x64
 8001aca:	af02      	add	r7, sp, #8
 8001acc:	4604      	mov	r4, r0
 8001ace:	4608      	mov	r0, r1
 8001ad0:	1d39      	adds	r1, r7, #4
 8001ad2:	e881 000c 	stmia.w	r1, {r2, r3}
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	4603      	mov	r3, r0
 8001adc:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8001ade:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ae2:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8001ae4:	f107 0018 	add.w	r0, r7, #24
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001aec:	213f      	movs	r1, #63	; 0x3f
 8001aee:	f006 fca3 	bl	8008438 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8001af2:	7bb9      	ldrb	r1, [r7, #14]
 8001af4:	7bf8      	ldrb	r0, [r7, #15]
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	cb0c      	ldmia	r3, {r2, r3}
 8001b06:	f7ff ff9d 	bl	8001a44 <ILI9163_drawString>
}
 8001b0a:	bf00      	nop
 8001b0c:	375c      	adds	r7, #92	; 0x5c
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd90      	pop	{r4, r7, pc}
	...

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b18:	f001 f819 	bl	8002b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1c:	f000 f846 	bl	8001bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b20:	f000 f966 	bl	8001df0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b24:	f000 f946 	bl	8001db4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b28:	f000 f916 	bl	8001d58 <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 8001b2c:	f000 f8e4 	bl	8001cf8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001b30:	f000 f8a4 	bl	8001c7c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  getTitleScreen(); //GUI Title function call
 8001b34:	f7ff fa86 	bl	8001044 <getTitleScreen>
//		default:
//			return keyChar = 0;
//			displayInput();
//			break;
//	}
	if (keyChar != 0) //if button is pressed
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <main+0x8c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <main+0x4a>
	{
		if (keyChar == '*')//if '*' button is pressed
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <main+0x8c>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b2a      	cmp	r3, #42	; 0x2a
 8001b46:	d105      	bne.n	8001b54 <main+0x40>
		{
			shiftFlag = 1;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <main+0x90>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
			//getShiftScreen();
			keyChar = 0;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <main+0x8c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
		}
		keyChar = 0;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <main+0x8c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
		displayInput(); //GUI to display button input
 8001b5a:	f7ff fb8d 	bl	8001278 <displayInput>
//	else
//	{
//		passwordFlag = 0;
//	}

	switch (passwordFlag)
 8001b5e:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <main+0x94>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b03      	cmp	r3, #3
 8001b64:	d011      	beq.n	8001b8a <main+0x76>
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	dc13      	bgt.n	8001b92 <main+0x7e>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d002      	beq.n	8001b74 <main+0x60>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d008      	beq.n	8001b84 <main+0x70>
			checkPassword();
			break;
		case 3:
			return screenClr();
		default:
			break;
 8001b72:	e00e      	b.n	8001b92 <main+0x7e>
			setPassword();
 8001b74:	f000 fa5c 	bl	8002030 <setPassword>
			return passwordFlag = 0;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <main+0x94>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <main+0x94>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	e00b      	b.n	8001b9c <main+0x88>
			checkPassword();
 8001b84:	f000 fa82 	bl	800208c <checkPassword>
			break;
 8001b88:	e004      	b.n	8001b94 <main+0x80>
			return screenClr();
 8001b8a:	f7ff fc7d 	bl	8001488 <screenClr>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	e004      	b.n	8001b9c <main+0x88>
			break;
 8001b92:	bf00      	nop
	}
	passwordFlag = 0;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <main+0x94>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
	if (keyChar != 0) //if button is pressed
 8001b9a:	e7cd      	b.n	8001b38 <main+0x24>
  }
  /* USER CODE END 3 */
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000a878 	.word	0x2000a878
 8001ba4:	2000a87c 	.word	0x2000a87c
 8001ba8:	2000a880 	.word	0x2000a880

08001bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b094      	sub	sp, #80	; 0x50
 8001bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	2230      	movs	r2, #48	; 0x30
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f006 fc5c 	bl	8008478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bd0:	f002 f89c 	bl	8003d0c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <SystemClock_Config+0xc8>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a26      	ldr	r2, [pc, #152]	; (8001c74 <SystemClock_Config+0xc8>)
 8001bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <SystemClock_Config+0xc8>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bec:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <SystemClock_Config+0xcc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <SystemClock_Config+0xcc>)
 8001bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <SystemClock_Config+0xcc>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001c0c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c12:	2302      	movs	r3, #2
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001c20:	2348      	movs	r3, #72	; 0x48
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 0320 	add.w	r3, r7, #32
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 f87b 	bl	8003d2c <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c3c:	f000 f9f2 	bl	8002024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c40:	230f      	movs	r3, #15
 8001c42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c44:	2302      	movs	r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f002 fb09 	bl	8004274 <HAL_RCC_ClockConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c68:	f000 f9dc 	bl	8002024 <Error_Handler>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3750      	adds	r7, #80	; 0x50
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40007000 	.word	0x40007000

08001c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <MX_SPI1_Init+0x78>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001c96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c9a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cca:	2207      	movs	r2, #7
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_SPI1_Init+0x74>)
 8001cdc:	f003 f8e0 	bl	8004ea0 <HAL_SPI_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f000 f99d 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000a224 	.word	0x2000a224
 8001cf4:	40013000 	.word	0x40013000

08001cf8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <MX_USART3_UART_Init+0x5c>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART3_UART_Init+0x58>)
 8001d3c:	f003 fe1c 	bl	8005978 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d46:	f000 f96d 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000a2e8 	.word	0x2000a2e8
 8001d54:	40004800 	.word	0x40004800

08001d58 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d5e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d66:	2206      	movs	r2, #6
 8001d68:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d78:	2202      	movs	r2, #2
 8001d7a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d9c:	f001 fe6d 	bl	8003a7a <HAL_PCD_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001da6:	f000 f93d 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000a370 	.word	0x2000a370

08001db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <MX_DMA_Init+0x38>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <MX_DMA_Init+0x38>)
 8001dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_DMA_Init+0x38>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	203b      	movs	r0, #59	; 0x3b
 8001dd8:	f001 f815 	bl	8002e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ddc:	203b      	movs	r0, #59	; 0x3b
 8001dde:	f001 f82e 	bl	8002e3e <HAL_NVIC_EnableIRQ>

}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df6:	f107 031c 	add.w	r3, r7, #28
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a71      	ldr	r2, [pc, #452]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b6f      	ldr	r3, [pc, #444]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	61bb      	str	r3, [r7, #24]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e1e:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a6b      	ldr	r2, [pc, #428]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	617b      	str	r3, [r7, #20]
 8001e34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b66      	ldr	r3, [pc, #408]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a65      	ldr	r2, [pc, #404]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a5f      	ldr	r2, [pc, #380]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e7e:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a53      	ldr	r2, [pc, #332]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <MX_GPIO_Init+0x1e0>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|LD3_Pin|GPIO_PIN_13
 8001e96:	2200      	movs	r2, #0
 8001e98:	f24a 3197 	movw	r1, #41879	; 0xa397
 8001e9c:	484d      	ldr	r0, [pc, #308]	; (8001fd4 <MX_GPIO_Init+0x1e4>)
 8001e9e:	f001 fd95 	bl	80039cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2140      	movs	r1, #64	; 0x40
 8001ea6:	484c      	ldr	r0, [pc, #304]	; (8001fd8 <MX_GPIO_Init+0x1e8>)
 8001ea8:	f001 fd90 	bl	80039cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4846      	ldr	r0, [pc, #280]	; (8001fdc <MX_GPIO_Init+0x1ec>)
 8001ec4:	f001 fbbe 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ec8:	2332      	movs	r3, #50	; 0x32
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ed8:	230b      	movs	r3, #11
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	483e      	ldr	r0, [pc, #248]	; (8001fdc <MX_GPIO_Init+0x1ec>)
 8001ee4:	f001 fbae 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ee8:	2386      	movs	r3, #134	; 0x86
 8001eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ef8:	230b      	movs	r3, #11
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	4619      	mov	r1, r3
 8001f02:	4837      	ldr	r0, [pc, #220]	; (8001fe0 <MX_GPIO_Init+0x1f0>)
 8001f04:	f001 fb9e 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001f08:	f240 3385 	movw	r3, #901	; 0x385
 8001f0c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	482c      	ldr	r0, [pc, #176]	; (8001fd4 <MX_GPIO_Init+0x1e4>)
 8001f22:	f001 fb8f 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB15 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4;
 8001f26:	f24a 0312 	movw	r3, #40978	; 0xa012
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f30:	2302      	movs	r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4825      	ldr	r0, [pc, #148]	; (8001fd4 <MX_GPIO_Init+0x1e4>)
 8001f40:	f001 fb80 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	481f      	ldr	r0, [pc, #124]	; (8001fd8 <MX_GPIO_Init+0x1e8>)
 8001f5c:	f001 fb72 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <MX_GPIO_Init+0x1e8>)
 8001f74:	f001 fb66 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f78:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4813      	ldr	r0, [pc, #76]	; (8001fdc <MX_GPIO_Init+0x1ec>)
 8001f90:	f001 fb58 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001f94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fa6:	230b      	movs	r3, #11
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <MX_GPIO_Init+0x1e8>)
 8001fb2:	f001 fb47 	bl	8003644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2017      	movs	r0, #23
 8001fbc:	f000 ff23 	bl	8002e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fc0:	2017      	movs	r0, #23
 8001fc2:	f000 ff3c 	bl	8002e3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020400 	.word	0x40020400
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020000 	.word	0x40020000

08001fe4 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t SPI_DMA_FL = 0;
 uint32_t SPI_DMA_CNT=1;
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_SPI_TxCpltCallback+0x34>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_SPI_TxCpltCallback+0x34>)
 8001ff4:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_SPI_TxCpltCallback+0x34>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d108      	bne.n	8002010 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi1);
 8001ffe:	4807      	ldr	r0, [pc, #28]	; (800201c <HAL_SPI_TxCpltCallback+0x38>)
 8002000:	f003 fa5c 	bl	80054bc <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <HAL_SPI_TxCpltCallback+0x34>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_SPI_TxCpltCallback+0x3c>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
	}
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000010 	.word	0x20000010
 800201c:	2000a224 	.word	0x2000a224
 8002020:	2000a89a 	.word	0x2000a89a

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202c:	e7fe      	b.n	800202c <Error_Handler+0x8>
	...

08002030 <setPassword>:

void setPassword();
void checkPassword();

void setPassword()
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
	for (int i = 0; i <= strlen(input); i++)
 8002036:	2300      	movs	r3, #0
 8002038:	607b      	str	r3, [r7, #4]
 800203a:	e00b      	b.n	8002054 <setPassword+0x24>
	{
		password[i] = input[i];
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <setPassword+0x54>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	7819      	ldrb	r1, [r3, #0]
 8002044:	4a10      	ldr	r2, [pc, #64]	; (8002088 <setPassword+0x58>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	460a      	mov	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= strlen(input); i++)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3301      	adds	r3, #1
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <setPassword+0x54>)
 8002056:	f7fe f92b 	bl	80002b0 <strlen>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	d2ec      	bcs.n	800203c <setPassword+0xc>
	}
	password[strlen(password)] = '\0'; //Converts the character array 'input' to a string
 8002062:	4809      	ldr	r0, [pc, #36]	; (8002088 <setPassword+0x58>)
 8002064:	f7fe f924 	bl	80002b0 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	4a07      	ldr	r2, [pc, #28]	; (8002088 <setPassword+0x58>)
 800206c:	2100      	movs	r1, #0
 800206e:	54d1      	strb	r1, [r2, r3]
	savedPassword(); //GUI to tell user their password has been saved
 8002070:	f7ff f98e 	bl	8001390 <savedPassword>
	enterPassword(); //GUI to tell user to enter a password to login
 8002074:	f7ff f9ca 	bl	800140c <enterPassword>
	//input[0] = '\0';
	screenClr();
 8002078:	f7ff fa06 	bl	8001488 <screenClr>
//	ILI9163_newFrame();
//	sprintf(passwordtemp, "Set Password: %s", &password);
//	ILI9163_drawStringF(5, 5, Font_11x18, BLUE, passwordtemp);
//	ILI9163_render();
}
 800207c:	bf00      	nop
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000a884 	.word	0x2000a884
 8002088:	2000a890 	.word	0x2000a890

0800208c <checkPassword>:

//Checks if the password is correct, incorrect, or needs to be entered
void checkPassword()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	//password[strlen(password)] = '\0';
	//input[strlen(input)] = '\0'; //Converts the character array 'input' to a string
	if(strcmp(password, input) == 0) //Need to create something that will save the newPassword and then I can type in the password to see if it matches
 8002090:	4911      	ldr	r1, [pc, #68]	; (80020d8 <checkPassword+0x4c>)
 8002092:	4812      	ldr	r0, [pc, #72]	; (80020dc <checkPassword+0x50>)
 8002094:	f7fe f914 	bl	80002c0 <strcmp>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10e      	bne.n	80020bc <checkPassword+0x30>
	{
		correctPassword(); //GUI to say "Password is Correct"
 800209e:	f7ff f909 	bl	80012b4 <correctPassword>
		enterPassword(); //GUI to tell user to enter a password to login
 80020a2:	f7ff f9b3 	bl	800140c <enterPassword>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0); //Flashes green light
 80020a6:	2101      	movs	r1, #1
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <checkPassword+0x54>)
 80020aa:	f001 fca8 	bl	80039fe <HAL_GPIO_TogglePin>
		HAL_Delay(3000); //Flashes green light for 3 seconds
 80020ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020b2:	f000 fda9 	bl	8002c08 <HAL_Delay>
		screenClr();
 80020b6:	f7ff f9e7 	bl	8001488 <screenClr>
		incorrectPassword(); //GUI to say "Password is Correct"
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2); //Flashes red light
		HAL_Delay(3000); //Flashes red light for 3 seconds
		screenClr();
	}
}
 80020ba:	e00b      	b.n	80020d4 <checkPassword+0x48>
		incorrectPassword(); //GUI to say "Password is Correct"
 80020bc:	f7ff f92a 	bl	8001314 <incorrectPassword>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2); //Flashes red light
 80020c0:	2104      	movs	r1, #4
 80020c2:	4807      	ldr	r0, [pc, #28]	; (80020e0 <checkPassword+0x54>)
 80020c4:	f001 fc9b 	bl	80039fe <HAL_GPIO_TogglePin>
		HAL_Delay(3000); //Flashes red light for 3 seconds
 80020c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80020cc:	f000 fd9c 	bl	8002c08 <HAL_Delay>
		screenClr();
 80020d0:	f7ff f9da 	bl	8001488 <screenClr>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000a884 	.word	0x2000a884
 80020dc:	2000a890 	.word	0x2000a890
 80020e0:	40020400 	.word	0x40020400

080020e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_MspInit+0x44>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_MspInit+0x44>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_MspInit+0x44>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_MspInit+0x44>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_MspInit+0x44>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_MspInit+0x44>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a41      	ldr	r2, [pc, #260]	; (8002250 <HAL_SPI_MspInit+0x124>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d17c      	bne.n	8002248 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_SPI_MspInit+0x128>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a40      	ldr	r2, [pc, #256]	; (8002254 <HAL_SPI_MspInit+0x128>)
 8002154:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b3e      	ldr	r3, [pc, #248]	; (8002254 <HAL_SPI_MspInit+0x128>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	4b3b      	ldr	r3, [pc, #236]	; (8002254 <HAL_SPI_MspInit+0x128>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <HAL_SPI_MspInit+0x128>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_SPI_MspInit+0x128>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	4b35      	ldr	r3, [pc, #212]	; (8002254 <HAL_SPI_MspInit+0x128>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a34      	ldr	r2, [pc, #208]	; (8002254 <HAL_SPI_MspInit+0x128>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_SPI_MspInit+0x128>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002196:	2360      	movs	r3, #96	; 0x60
 8002198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a2:	2303      	movs	r3, #3
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021a6:	2305      	movs	r3, #5
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021aa:	f107 0314 	add.w	r3, r7, #20
 80021ae:	4619      	mov	r1, r3
 80021b0:	4829      	ldr	r0, [pc, #164]	; (8002258 <HAL_SPI_MspInit+0x12c>)
 80021b2:	f001 fa47 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021b6:	2320      	movs	r3, #32
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c2:	2303      	movs	r3, #3
 80021c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c6:	2305      	movs	r3, #5
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4822      	ldr	r0, [pc, #136]	; (800225c <HAL_SPI_MspInit+0x130>)
 80021d2:	f001 fa37 	bl	8003644 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <HAL_SPI_MspInit+0x134>)
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_SPI_MspInit+0x138>)
 80021da:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80021dc:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_SPI_MspInit+0x134>)
 80021de:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80021e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <HAL_SPI_MspInit+0x134>)
 80021e6:	2240      	movs	r2, #64	; 0x40
 80021e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_SPI_MspInit+0x134>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_SPI_MspInit+0x134>)
 80021f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_SPI_MspInit+0x134>)
 80021fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002200:	4b17      	ldr	r3, [pc, #92]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002202:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002206:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_SPI_MspInit+0x134>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002210:	2200      	movs	r2, #0
 8002212:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002216:	2204      	movs	r2, #4
 8002218:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_SPI_MspInit+0x134>)
 800221c:	2201      	movs	r2, #1
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002222:	2200      	movs	r2, #0
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002228:	2200      	movs	r2, #0
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <HAL_SPI_MspInit+0x134>)
 800222e:	f000 fe21 	bl	8002e74 <HAL_DMA_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8002238:	f7ff fef4 	bl	8002024 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
 8002242:	4a07      	ldr	r2, [pc, #28]	; (8002260 <HAL_SPI_MspInit+0x134>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40013000 	.word	0x40013000
 8002254:	40023800 	.word	0x40023800
 8002258:	40020000 	.word	0x40020000
 800225c:	40020400 	.word	0x40020400
 8002260:	2000a288 	.word	0x2000a288
 8002264:	40026458 	.word	0x40026458

08002268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b0aa      	sub	sp, #168	; 0xa8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	2284      	movs	r2, #132	; 0x84
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f006 f8f5 	bl	8008478 <memset>
  if(huart->Instance==USART3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a22      	ldr	r2, [pc, #136]	; (800231c <HAL_UART_MspInit+0xb4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d13c      	bne.n	8002312 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800229c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800229e:	2300      	movs	r3, #0
 80022a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022a2:	f107 0310 	add.w	r3, r7, #16
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fa0a 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022b2:	f7ff feb7 	bl	8002024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <HAL_UART_MspInit+0xb8>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_UART_MspInit+0xb8>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	6413      	str	r3, [r2, #64]	; 0x40
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_UART_MspInit+0xb8>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_UART_MspInit+0xb8>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <HAL_UART_MspInit+0xb8>)
 80022d4:	f043 0308 	orr.w	r3, r3, #8
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_UART_MspInit+0xb8>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80022e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ee:	2302      	movs	r3, #2
 80022f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002300:	2307      	movs	r3, #7
 8002302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002306:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <HAL_UART_MspInit+0xbc>)
 800230e:	f001 f999 	bl	8003644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002312:	bf00      	nop
 8002314:	37a8      	adds	r7, #168	; 0xa8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004800 	.word	0x40004800
 8002320:	40023800 	.word	0x40023800
 8002324:	40020c00 	.word	0x40020c00

08002328 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0ac      	sub	sp, #176	; 0xb0
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	2284      	movs	r2, #132	; 0x84
 8002346:	2100      	movs	r1, #0
 8002348:	4618      	mov	r0, r3
 800234a:	f006 f895 	bl	8008478 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002356:	d159      	bne.n	800240c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002358:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800235c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002364:	f107 0318 	add.w	r3, r7, #24
 8002368:	4618      	mov	r0, r3
 800236a:	f002 f9a9 	bl	80046c0 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002374:	f7ff fe56 	bl	8002024 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_PCD_MspInit+0xec>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a25      	ldr	r2, [pc, #148]	; (8002414 <HAL_PCD_MspInit+0xec>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b23      	ldr	r3, [pc, #140]	; (8002414 <HAL_PCD_MspInit+0xec>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002390:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a4:	2303      	movs	r3, #3
 80023a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80023aa:	230a      	movs	r3, #10
 80023ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023b4:	4619      	mov	r1, r3
 80023b6:	4818      	ldr	r0, [pc, #96]	; (8002418 <HAL_PCD_MspInit+0xf0>)
 80023b8:	f001 f944 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80023bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023d4:	4619      	mov	r1, r3
 80023d6:	4810      	ldr	r0, [pc, #64]	; (8002418 <HAL_PCD_MspInit+0xf0>)
 80023d8:	f001 f934 	bl	8003644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023dc:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_PCD_MspInit+0xec>)
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_PCD_MspInit+0xec>)
 80023e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e6:	6353      	str	r3, [r2, #52]	; 0x34
 80023e8:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_PCD_MspInit+0xec>)
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <HAL_PCD_MspInit+0xec>)
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_PCD_MspInit+0xec>)
 80023fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fe:	6453      	str	r3, [r2, #68]	; 0x44
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_PCD_MspInit+0xec>)
 8002402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800240c:	bf00      	nop
 800240e:	37b0      	adds	r7, #176	; 0xb0
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	40020000 	.word	0x40020000

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <HardFault_Handler+0x4>

08002430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002434:	e7fe      	b.n	8002434 <MemManage_Handler+0x4>

08002436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243a:	e7fe      	b.n	800243a <BusFault_Handler+0x4>

0800243c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <UsageFault_Handler+0x4>

08002442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002470:	f000 fbaa 	bl	8002bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002474:	bf00      	nop
 8002476:	bd80      	pop	{r7, pc}

08002478 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 800247e:	4b61      	ldr	r3, [pc, #388]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 8002480:	2200      	movs	r2, #0
 8002482:	801a      	strh	r2, [r3, #0]
	for(uint8_t c=0 ; c<4 ; c++)
 8002484:	2300      	movs	r3, #0
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	e075      	b.n	8002576 <EXTI9_5_IRQHandler+0xfe>
	{
		for(uint8_t i=0 ; i<4 ; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	71bb      	strb	r3, [r7, #6]
 800248e:	e00e      	b.n	80024ae <EXTI9_5_IRQHandler+0x36>
		{
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8002490:	79bb      	ldrb	r3, [r7, #6]
 8002492:	4a5d      	ldr	r2, [pc, #372]	; (8002608 <EXTI9_5_IRQHandler+0x190>)
 8002494:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	4a5c      	ldr	r2, [pc, #368]	; (800260c <EXTI9_5_IRQHandler+0x194>)
 800249c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a0:	2201      	movs	r2, #1
 80024a2:	4619      	mov	r1, r3
 80024a4:	f001 fa92 	bl	80039cc <HAL_GPIO_WritePin>
		for(uint8_t i=0 ; i<4 ; i++)
 80024a8:	79bb      	ldrb	r3, [r7, #6]
 80024aa:	3301      	adds	r3, #1
 80024ac:	71bb      	strb	r3, [r7, #6]
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d9ed      	bls.n	8002490 <EXTI9_5_IRQHandler+0x18>
		}
		HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4a54      	ldr	r2, [pc, #336]	; (8002608 <EXTI9_5_IRQHandler+0x190>)
 80024b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	4a53      	ldr	r2, [pc, #332]	; (800260c <EXTI9_5_IRQHandler+0x194>)
 80024c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c4:	2200      	movs	r2, #0
 80024c6:	4619      	mov	r1, r3
 80024c8:	f001 fa80 	bl	80039cc <HAL_GPIO_WritePin>
		for(uint8_t r=0 ; r<4 ; r++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	717b      	strb	r3, [r7, #5]
 80024d0:	e04b      	b.n	800256a <EXTI9_5_IRQHandler+0xf2>
		{
			if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80024d2:	797b      	ldrb	r3, [r7, #5]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <EXTI9_5_IRQHandler+0x198>)
 80024d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024da:	797b      	ldrb	r3, [r7, #5]
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <EXTI9_5_IRQHandler+0x19c>)
 80024de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4610      	mov	r0, r2
 80024e6:	f001 fa59 	bl	800399c <HAL_GPIO_ReadPin>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d139      	bne.n	8002564 <EXTI9_5_IRQHandler+0xec>
			{
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	4a47      	ldr	r2, [pc, #284]	; (8002610 <EXTI9_5_IRQHandler+0x198>)
 80024f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024f8:	797b      	ldrb	r3, [r7, #5]
 80024fa:	4946      	ldr	r1, [pc, #280]	; (8002614 <EXTI9_5_IRQHandler+0x19c>)
 80024fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f001 fa4a 	bl	800399c <HAL_GPIO_ReadPin>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d12a      	bne.n	8002564 <EXTI9_5_IRQHandler+0xec>
				{
					key |= 1<<c;
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2201      	movs	r2, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	b21a      	sxth	r2, r3
 8002518:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	b21b      	sxth	r3, r3
 800251e:	4313      	orrs	r3, r2
 8002520:	b21b      	sxth	r3, r3
 8002522:	b29a      	uxth	r2, r3
 8002524:	4b37      	ldr	r3, [pc, #220]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 8002526:	801a      	strh	r2, [r3, #0]
					key |= 1<<(r+8);
 8002528:	797b      	ldrb	r3, [r7, #5]
 800252a:	3308      	adds	r3, #8
 800252c:	2201      	movs	r2, #1
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	b21a      	sxth	r2, r3
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b21b      	sxth	r3, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	b21b      	sxth	r3, r3
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b30      	ldr	r3, [pc, #192]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 8002542:	801a      	strh	r2, [r3, #0]
					while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8002544:	bf00      	nop
 8002546:	797b      	ldrb	r3, [r7, #5]
 8002548:	4a31      	ldr	r2, [pc, #196]	; (8002610 <EXTI9_5_IRQHandler+0x198>)
 800254a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800254e:	797b      	ldrb	r3, [r7, #5]
 8002550:	4930      	ldr	r1, [pc, #192]	; (8002614 <EXTI9_5_IRQHandler+0x19c>)
 8002552:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002556:	4619      	mov	r1, r3
 8002558:	4610      	mov	r0, r2
 800255a:	f001 fa1f 	bl	800399c <HAL_GPIO_ReadPin>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0f0      	beq.n	8002546 <EXTI9_5_IRQHandler+0xce>
		for(uint8_t r=0 ; r<4 ; r++)
 8002564:	797b      	ldrb	r3, [r7, #5]
 8002566:	3301      	adds	r3, #1
 8002568:	717b      	strb	r3, [r7, #5]
 800256a:	797b      	ldrb	r3, [r7, #5]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d9b0      	bls.n	80024d2 <EXTI9_5_IRQHandler+0x5a>
	for(uint8_t c=0 ; c<4 ; c++)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	3301      	adds	r3, #1
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2b03      	cmp	r3, #3
 800257a:	d986      	bls.n	800248a <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}
	}
	if (shiftFlag == 0)
 800257c:	4b26      	ldr	r3, [pc, #152]	; (8002618 <EXTI9_5_IRQHandler+0x1a0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d112      	bne.n	80025aa <EXTI9_5_IRQHandler+0x132>
	{
		keyChar = KeyPadGetChar(key);
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f857 	bl	800263c <KeyPadGetChar>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <EXTI9_5_IRQHandler+0x1a4>)
 8002594:	701a      	strb	r2, [r3, #0]
		appendInput(input, keyChar);
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <EXTI9_5_IRQHandler+0x1a4>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4820      	ldr	r0, [pc, #128]	; (8002620 <EXTI9_5_IRQHandler+0x1a8>)
 800259e:	f000 f9bf 	bl	8002920 <appendInput>
		key = 0;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	801a      	strh	r2, [r3, #0]
 80025a8:	e014      	b.n	80025d4 <EXTI9_5_IRQHandler+0x15c>
	}
	else
	{
		keyChar = KeyPadGetShift(key);
 80025aa:	4b16      	ldr	r3, [pc, #88]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f8fa 	bl	80027a8 <KeyPadGetShift>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b18      	ldr	r3, [pc, #96]	; (800261c <EXTI9_5_IRQHandler+0x1a4>)
 80025ba:	701a      	strb	r2, [r3, #0]
		appendInput(input, keyChar);
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <EXTI9_5_IRQHandler+0x1a4>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4817      	ldr	r0, [pc, #92]	; (8002620 <EXTI9_5_IRQHandler+0x1a8>)
 80025c4:	f000 f9ac 	bl	8002920 <appendInput>
		shiftFlag = 0;
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <EXTI9_5_IRQHandler+0x1a0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
		key = 0;
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <EXTI9_5_IRQHandler+0x18c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80025d4:	2200      	movs	r2, #0
 80025d6:	f24a 0112 	movw	r1, #40978	; 0xa012
 80025da:	4812      	ldr	r0, [pc, #72]	; (8002624 <EXTI9_5_IRQHandler+0x1ac>)
 80025dc:	f001 f9f6 	bl	80039cc <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80025e0:	2040      	movs	r0, #64	; 0x40
 80025e2:	f001 fa27 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80025e6:	2080      	movs	r0, #128	; 0x80
 80025e8:	f001 fa24 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80025ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80025f0:	f001 fa20 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80025f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025f8:	f001 fa1c 	bl	8003a34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	2000a87a 	.word	0x2000a87a
 8002608:	20000014 	.word	0x20000014
 800260c:	0800c5e8 	.word	0x0800c5e8
 8002610:	20000024 	.word	0x20000024
 8002614:	0800c5f0 	.word	0x0800c5f0
 8002618:	2000a87c 	.word	0x2000a87c
 800261c:	2000a878 	.word	0x2000a878
 8002620:	2000a884 	.word	0x2000a884
 8002624:	40020400 	.word	0x40020400

08002628 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMA2_Stream3_IRQHandler+0x10>)
 800262e:	f000 fd9f 	bl	8003170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000a288 	.word	0x2000a288

0800263c <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  switch(key)
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	f640 0208 	movw	r2, #2056	; 0x808
 800264c:	4293      	cmp	r3, r2
 800264e:	f300 80a2 	bgt.w	8002796 <KeyPadGetChar+0x15a>
 8002652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002656:	dc1a      	bgt.n	800268e <KeyPadGetChar+0x52>
 8002658:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800265c:	f300 809b 	bgt.w	8002796 <KeyPadGetChar+0x15a>
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002664:	dc2a      	bgt.n	80026bc <KeyPadGetChar+0x80>
 8002666:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800266a:	f300 8094 	bgt.w	8002796 <KeyPadGetChar+0x15a>
 800266e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002672:	dc3b      	bgt.n	80026ec <KeyPadGetChar+0xb0>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d069      	beq.n	800274c <KeyPadGetChar+0x110>
 8002678:	2b00      	cmp	r3, #0
 800267a:	f2c0 808c 	blt.w	8002796 <KeyPadGetChar+0x15a>
 800267e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8002682:	f300 8088 	bgt.w	8002796 <KeyPadGetChar+0x15a>
 8002686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268a:	dc47      	bgt.n	800271c <KeyPadGetChar+0xe0>
 800268c:	e083      	b.n	8002796 <KeyPadGetChar+0x15a>
 800268e:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8002692:	2b07      	cmp	r3, #7
 8002694:	d87f      	bhi.n	8002796 <KeyPadGetChar+0x15a>
 8002696:	a201      	add	r2, pc, #4	; (adr r2, 800269c <KeyPadGetChar+0x60>)
 8002698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269c:	0800275d 	.word	0x0800275d
 80026a0:	0800276d 	.word	0x0800276d
 80026a4:	08002797 	.word	0x08002797
 80026a8:	0800277d 	.word	0x0800277d
 80026ac:	08002797 	.word	0x08002797
 80026b0:	08002797 	.word	0x08002797
 80026b4:	08002797 	.word	0x08002797
 80026b8:	08002793 	.word	0x08002793
 80026bc:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80026c0:	2b07      	cmp	r3, #7
 80026c2:	d868      	bhi.n	8002796 <KeyPadGetChar+0x15a>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <KeyPadGetChar+0x90>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	08002759 	.word	0x08002759
 80026d0:	08002769 	.word	0x08002769
 80026d4:	08002797 	.word	0x08002797
 80026d8:	08002779 	.word	0x08002779
 80026dc:	08002797 	.word	0x08002797
 80026e0:	08002797 	.word	0x08002797
 80026e4:	08002797 	.word	0x08002797
 80026e8:	08002789 	.word	0x08002789
 80026ec:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80026f0:	2b07      	cmp	r3, #7
 80026f2:	d850      	bhi.n	8002796 <KeyPadGetChar+0x15a>
 80026f4:	a201      	add	r2, pc, #4	; (adr r2, 80026fc <KeyPadGetChar+0xc0>)
 80026f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fa:	bf00      	nop
 80026fc:	08002755 	.word	0x08002755
 8002700:	08002765 	.word	0x08002765
 8002704:	08002797 	.word	0x08002797
 8002708:	08002775 	.word	0x08002775
 800270c:	08002797 	.word	0x08002797
 8002710:	08002797 	.word	0x08002797
 8002714:	08002797 	.word	0x08002797
 8002718:	08002785 	.word	0x08002785
 800271c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002720:	2b07      	cmp	r3, #7
 8002722:	d838      	bhi.n	8002796 <KeyPadGetChar+0x15a>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <KeyPadGetChar+0xf0>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	08002751 	.word	0x08002751
 8002730:	08002761 	.word	0x08002761
 8002734:	08002797 	.word	0x08002797
 8002738:	08002771 	.word	0x08002771
 800273c:	08002797 	.word	0x08002797
 8002740:	08002797 	.word	0x08002797
 8002744:	08002797 	.word	0x08002797
 8002748:	08002781 	.word	0x08002781
  {
    case 0x0000:
    	return 0;
 800274c:	2300      	movs	r3, #0
 800274e:	e023      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0101:
		return '1';
 8002750:	2331      	movs	r3, #49	; 0x31
 8002752:	e021      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0201:
		return '2';
 8002754:	2332      	movs	r3, #50	; 0x32
 8002756:	e01f      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0401:
		return '3';
 8002758:	2333      	movs	r3, #51	; 0x33
 800275a:	e01d      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0801:
		return 'A';
 800275c:	2341      	movs	r3, #65	; 0x41
 800275e:	e01b      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0102:
		return '4';
 8002760:	2334      	movs	r3, #52	; 0x34
 8002762:	e019      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0202:
		return '5';
 8002764:	2335      	movs	r3, #53	; 0x35
 8002766:	e017      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0402:
		return '6';
 8002768:	2336      	movs	r3, #54	; 0x36
 800276a:	e015      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0802:
		return 'B';
 800276c:	2342      	movs	r3, #66	; 0x42
 800276e:	e013      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0104:
		return '7';
 8002770:	2337      	movs	r3, #55	; 0x37
 8002772:	e011      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0204:
		return '8';
 8002774:	2338      	movs	r3, #56	; 0x38
 8002776:	e00f      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0404:
		return '9';
 8002778:	2339      	movs	r3, #57	; 0x39
 800277a:	e00d      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0804:
		return 'C';
 800277c:	2343      	movs	r3, #67	; 0x43
 800277e:	e00b      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0108:
		return '*'; //Shift key
 8002780:	232a      	movs	r3, #42	; 0x2a
 8002782:	e009      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0208:
		return '0';
 8002784:	2330      	movs	r3, #48	; 0x30
 8002786:	e007      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0408:
		return passwordFlag = 1; //Calls setPassword() function
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <KeyPadGetChar+0x168>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	2301      	movs	r3, #1
 8002790:	e002      	b.n	8002798 <KeyPadGetChar+0x15c>
	case 0x0808:
		return 'D';
 8002792:	2344      	movs	r3, #68	; 0x44
 8002794:	e000      	b.n	8002798 <KeyPadGetChar+0x15c>
	default:
		return 0;
 8002796:	2300      	movs	r3, #0
	}
}
 8002798:	4618      	mov	r0, r3
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	2000a880 	.word	0x2000a880

080027a8 <KeyPadGetShift>:

char KeyPadGetShift(uint16_t key)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  switch(key)
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	f640 0208 	movw	r2, #2056	; 0x808
 80027b8:	4293      	cmp	r3, r2
 80027ba:	f300 80a7 	bgt.w	800290c <KeyPadGetShift+0x164>
 80027be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027c2:	dc1a      	bgt.n	80027fa <KeyPadGetShift+0x52>
 80027c4:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80027c8:	f300 80a0 	bgt.w	800290c <KeyPadGetShift+0x164>
 80027cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d0:	dc2c      	bgt.n	800282c <KeyPadGetShift+0x84>
 80027d2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80027d6:	f300 8099 	bgt.w	800290c <KeyPadGetShift+0x164>
 80027da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027de:	dc3d      	bgt.n	800285c <KeyPadGetShift+0xb4>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d06b      	beq.n	80028bc <KeyPadGetShift+0x114>
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f2c0 8091 	blt.w	800290c <KeyPadGetShift+0x164>
 80027ea:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80027ee:	f300 808d 	bgt.w	800290c <KeyPadGetShift+0x164>
 80027f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f6:	dc49      	bgt.n	800288c <KeyPadGetShift+0xe4>
 80027f8:	e088      	b.n	800290c <KeyPadGetShift+0x164>
 80027fa:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 80027fe:	2b07      	cmp	r3, #7
 8002800:	f200 8084 	bhi.w	800290c <KeyPadGetShift+0x164>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <KeyPadGetShift+0x64>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	080028cd 	.word	0x080028cd
 8002810:	080028dd 	.word	0x080028dd
 8002814:	0800290d 	.word	0x0800290d
 8002818:	080028ed 	.word	0x080028ed
 800281c:	0800290d 	.word	0x0800290d
 8002820:	0800290d 	.word	0x0800290d
 8002824:	0800290d 	.word	0x0800290d
 8002828:	08002909 	.word	0x08002909
 800282c:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002830:	2b07      	cmp	r3, #7
 8002832:	d86b      	bhi.n	800290c <KeyPadGetShift+0x164>
 8002834:	a201      	add	r2, pc, #4	; (adr r2, 800283c <KeyPadGetShift+0x94>)
 8002836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283a:	bf00      	nop
 800283c:	080028c9 	.word	0x080028c9
 8002840:	080028d9 	.word	0x080028d9
 8002844:	0800290d 	.word	0x0800290d
 8002848:	080028e9 	.word	0x080028e9
 800284c:	0800290d 	.word	0x0800290d
 8002850:	0800290d 	.word	0x0800290d
 8002854:	0800290d 	.word	0x0800290d
 8002858:	080028ff 	.word	0x080028ff
 800285c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002860:	2b07      	cmp	r3, #7
 8002862:	d853      	bhi.n	800290c <KeyPadGetShift+0x164>
 8002864:	a201      	add	r2, pc, #4	; (adr r2, 800286c <KeyPadGetShift+0xc4>)
 8002866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286a:	bf00      	nop
 800286c:	080028c5 	.word	0x080028c5
 8002870:	080028d5 	.word	0x080028d5
 8002874:	0800290d 	.word	0x0800290d
 8002878:	080028e5 	.word	0x080028e5
 800287c:	0800290d 	.word	0x0800290d
 8002880:	0800290d 	.word	0x0800290d
 8002884:	0800290d 	.word	0x0800290d
 8002888:	080028f5 	.word	0x080028f5
 800288c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002890:	2b07      	cmp	r3, #7
 8002892:	d83b      	bhi.n	800290c <KeyPadGetShift+0x164>
 8002894:	a201      	add	r2, pc, #4	; (adr r2, 800289c <KeyPadGetShift+0xf4>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028d1 	.word	0x080028d1
 80028a4:	0800290d 	.word	0x0800290d
 80028a8:	080028e1 	.word	0x080028e1
 80028ac:	0800290d 	.word	0x0800290d
 80028b0:	0800290d 	.word	0x0800290d
 80028b4:	0800290d 	.word	0x0800290d
 80028b8:	080028f1 	.word	0x080028f1
  {
    case 0x0000:
    	return 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	e026      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0101:
		return '1';
 80028c0:	2331      	movs	r3, #49	; 0x31
 80028c2:	e024      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0201:
		return '2';
 80028c4:	2332      	movs	r3, #50	; 0x32
 80028c6:	e022      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0401:
		return '3';
 80028c8:	2333      	movs	r3, #51	; 0x33
 80028ca:	e020      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0801:
		return '!'; //Was 'A' changed to '!'
 80028cc:	2321      	movs	r3, #33	; 0x21
 80028ce:	e01e      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0102:
		return '4';
 80028d0:	2334      	movs	r3, #52	; 0x34
 80028d2:	e01c      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0202:
		return '5';
 80028d4:	2335      	movs	r3, #53	; 0x35
 80028d6:	e01a      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0402:
		return '6';
 80028d8:	2336      	movs	r3, #54	; 0x36
 80028da:	e018      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0802:
		return '@'; //Was 'B' changed to '@'
 80028dc:	2340      	movs	r3, #64	; 0x40
 80028de:	e016      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0104:
		return '7';
 80028e0:	2337      	movs	r3, #55	; 0x37
 80028e2:	e014      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0204:
		return '8';
 80028e4:	2338      	movs	r3, #56	; 0x38
 80028e6:	e012      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0404:
		return '9';
 80028e8:	2339      	movs	r3, #57	; 0x39
 80028ea:	e010      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0804:
		return '$'; //Was 'C' changed to '$'
 80028ec:	2324      	movs	r3, #36	; 0x24
 80028ee:	e00e      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0108:
		return '*';
 80028f0:	232a      	movs	r3, #42	; 0x2a
 80028f2:	e00c      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0208:
		return passwordFlag = 2; //Calls checkPassword() function
 80028f4:	4b09      	ldr	r3, [pc, #36]	; (800291c <KeyPadGetShift+0x174>)
 80028f6:	2202      	movs	r2, #2
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	2302      	movs	r3, #2
 80028fc:	e007      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0408:
		return passwordFlag = 3; //Calls screenClr() function
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <KeyPadGetShift+0x174>)
 8002900:	2203      	movs	r2, #3
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	2303      	movs	r3, #3
 8002906:	e002      	b.n	800290e <KeyPadGetShift+0x166>
	case 0x0808:
		return '_'; //Was 'D' changed to '_'
 8002908:	235f      	movs	r3, #95	; 0x5f
 800290a:	e000      	b.n	800290e <KeyPadGetShift+0x166>
	default:
		return 0;
 800290c:	2300      	movs	r3, #0
	}
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000a880 	.word	0x2000a880

08002920 <appendInput>:

//appends keypad input into an array called "input"
void appendInput(char* input, char keyChar)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
	if (keyChar != '*')
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	2b2a      	cmp	r3, #42	; 0x2a
 8002930:	d009      	beq.n	8002946 <appendInput+0x26>
	{
		int len = strlen(input);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fd fcbc 	bl	80002b0 <strlen>
 8002938:	4603      	mov	r3, r0
 800293a:	60fb      	str	r3, [r7, #12]
		input[len] = keyChar;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	701a      	strb	r2, [r3, #0]
		//input[len + 1] = '\0';
	}
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0
  return 1;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_kill>:

int _kill(int pid, int sig)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002968:	f005 fd92 	bl	8008490 <__errno>
 800296c:	4603      	mov	r3, r0
 800296e:	2216      	movs	r2, #22
 8002970:	601a      	str	r2, [r3, #0]
  return -1;
 8002972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_exit>:

void _exit (int status)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffe7 	bl	800295e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002990:	e7fe      	b.n	8002990 <_exit+0x12>

08002992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e00a      	b.n	80029ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029a4:	f3af 8000 	nop.w
 80029a8:	4601      	mov	r1, r0
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	60ba      	str	r2, [r7, #8]
 80029b0:	b2ca      	uxtb	r2, r1
 80029b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	3301      	adds	r3, #1
 80029b8:	617b      	str	r3, [r7, #20]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	dbf0      	blt.n	80029a4 <_read+0x12>
  }

  return len;
 80029c2:	687b      	ldr	r3, [r7, #4]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e009      	b.n	80029f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	60ba      	str	r2, [r7, #8]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	3301      	adds	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	dbf1      	blt.n	80029de <_write+0x12>
  }
  return len;
 80029fa:	687b      	ldr	r3, [r7, #4]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <_close>:

int _close(int file)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a2c:	605a      	str	r2, [r3, #4]
  return 0;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <_isatty>:

int _isatty(int file)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a44:	2301      	movs	r3, #1
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a74:	4a14      	ldr	r2, [pc, #80]	; (8002ac8 <_sbrk+0x5c>)
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <_sbrk+0x60>)
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <_sbrk+0x64>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <_sbrk+0x64>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <_sbrk+0x68>)
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <_sbrk+0x64>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4413      	add	r3, r2
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d207      	bcs.n	8002aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a9c:	f005 fcf8 	bl	8008490 <__errno>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	220c      	movs	r2, #12
 8002aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aaa:	e009      	b.n	8002ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <_sbrk+0x64>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4413      	add	r3, r2
 8002aba:	4a05      	ldr	r2, [pc, #20]	; (8002ad0 <_sbrk+0x64>)
 8002abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002abe:	68fb      	ldr	r3, [r7, #12]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20050000 	.word	0x20050000
 8002acc:	00000400 	.word	0x00000400
 8002ad0:	2000a89c 	.word	0x2000a89c
 8002ad4:	2000a9f0 	.word	0x2000a9f0

08002ad8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <SystemInit+0x20>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <SystemInit+0x20>)
 8002ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b00:	480d      	ldr	r0, [pc, #52]	; (8002b38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b08:	e002      	b.n	8002b10 <LoopCopyDataInit>

08002b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b0e:	3304      	adds	r3, #4

08002b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b14:	d3f9      	bcc.n	8002b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b18:	4c0b      	ldr	r4, [pc, #44]	; (8002b48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b1c:	e001      	b.n	8002b22 <LoopFillZerobss>

08002b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b20:	3204      	adds	r2, #4

08002b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b24:	d3fb      	bcc.n	8002b1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b26:	f7ff ffd7 	bl	8002ad8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f005 fcb7 	bl	800849c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2e:	f7fe fff1 	bl	8001b14 <main>
  bx  lr    
 8002b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b3c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8002b40:	0800ca50 	.word	0x0800ca50
  ldr r2, =_sbss
 8002b44:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002b48:	2000a9f0 	.word	0x2000a9f0

08002b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b4c:	e7fe      	b.n	8002b4c <ADC_IRQHandler>

08002b4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b52:	2003      	movs	r0, #3
 8002b54:	f000 f94c 	bl	8002df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f000 f805 	bl	8002b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5e:	f7ff fac1 	bl	80020e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_InitTick+0x54>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <HAL_InitTick+0x58>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f967 	bl	8002e5a <HAL_SYSTICK_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00e      	b.n	8002bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d80a      	bhi.n	8002bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ba4:	f000 f92f 	bl	8002e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ba8:	4a06      	ldr	r2, [pc, #24]	; (8002bc4 <HAL_InitTick+0x5c>)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000034 	.word	0x20000034
 8002bc0:	2000003c 	.word	0x2000003c
 8002bc4:	20000038 	.word	0x20000038

08002bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_IncTick+0x20>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_IncTick+0x24>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <HAL_IncTick+0x24>)
 8002bda:	6013      	str	r3, [r2, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	2000003c 	.word	0x2000003c
 8002bec:	2000a8a0 	.word	0x2000a8a0

08002bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	; (8002c04 <HAL_GetTick+0x14>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	2000a8a0 	.word	0x2000a8a0

08002c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c10:	f7ff ffee 	bl	8002bf0 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c20:	d005      	beq.n	8002c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_Delay+0x44>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c2e:	bf00      	nop
 8002c30:	f7ff ffde 	bl	8002bf0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d8f7      	bhi.n	8002c30 <HAL_Delay+0x28>
  {
  }
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000003c 	.word	0x2000003c

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <__NVIC_SetPriorityGrouping+0x40>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x40>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00
 8002c94:	05fa0000 	.word	0x05fa0000

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	; (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dbc:	d301      	bcc.n	8002dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e00f      	b.n	8002de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <SysTick_Config+0x40>)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dca:	210f      	movs	r1, #15
 8002dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd0:	f7ff ff8e 	bl	8002cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <SysTick_Config+0x40>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <SysTick_Config+0x40>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	e000e010 	.word	0xe000e010

08002df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f7ff ff29 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002dfe:	bf00      	nop
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b086      	sub	sp, #24
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e18:	f7ff ff3e 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff ff8e 	bl	8002d44 <NVIC_EncodePriority>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff5d 	bl	8002cf0 <__NVIC_SetPriority>
}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff31 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffa2 	bl	8002dac <SysTick_Config>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff feb6 	bl	8002bf0 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e099      	b.n	8002fc4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb0:	e00f      	b.n	8002ed2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb2:	f7ff fe9d 	bl	8002bf0 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d908      	bls.n	8002ed2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2203      	movs	r2, #3
 8002eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e078      	b.n	8002fc4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e8      	bne.n	8002eb2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_DMA_Init+0x158>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d107      	bne.n	8002f3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	4313      	orrs	r3, r2
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f023 0307 	bic.w	r3, r3, #7
 8002f52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d117      	bne.n	8002f96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fae7 	bl	800354c <DMA_CheckFifoParam>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d008      	beq.n	8002f96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f92:	2301      	movs	r3, #1
 8002f94:	e016      	b.n	8002fc4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa9e 	bl	80034e0 <DMA_CalcBaseAndBitshift>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	223f      	movs	r2, #63	; 0x3f
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	f010803f 	.word	0xf010803f

08002fd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d101      	bne.n	8002ff6 <HAL_DMA_Start_IT+0x26>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e048      	b.n	8003088 <HAL_DMA_Start_IT+0xb8>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d137      	bne.n	800307a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2202      	movs	r2, #2
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 fa30 	bl	8003484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	223f      	movs	r2, #63	; 0x3f
 800302a:	409a      	lsls	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f042 0216 	orr.w	r2, r2, #22
 800303e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800304e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e005      	b.n	8003086 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7ff fda7 	bl	8002bf0 <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d008      	beq.n	80030c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e052      	b.n	8003168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_Abort+0x62>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003112:	e013      	b.n	800313c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003114:	f7ff fd6c 	bl	8002bf0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b05      	cmp	r3, #5
 8003120:	d90c      	bls.n	800313c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e015      	b.n	8003168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	223f      	movs	r2, #63	; 0x3f
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800317c:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_DMA_IRQHandler+0x248>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a8e      	ldr	r2, [pc, #568]	; (80033bc <HAL_DMA_IRQHandler+0x24c>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	2208      	movs	r2, #8
 800319c:	409a      	lsls	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	2208      	movs	r2, #8
 80031ca:	409a      	lsls	r2, r3
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	2201      	movs	r2, #1
 80031e2:	409a      	lsls	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d012      	beq.n	8003212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	2201      	movs	r2, #1
 8003200:	409a      	lsls	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	2204      	movs	r2, #4
 8003218:	409a      	lsls	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	2204      	movs	r2, #4
 8003236:	409a      	lsls	r2, r3
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0204 	orr.w	r2, r3, #4
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2210      	movs	r2, #16
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d043      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03c      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	2210      	movs	r2, #16
 800326c:	409a      	lsls	r2, r3
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d108      	bne.n	80032a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d024      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4798      	blx	r3
 800329e:	e01f      	b.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	4798      	blx	r3
 80032b0:	e016      	b.n	80032e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d107      	bne.n	80032d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0208 	bic.w	r2, r2, #8
 80032ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e4:	2220      	movs	r2, #32
 80032e6:	409a      	lsls	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 808f 	beq.w	8003410 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8087 	beq.w	8003410 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	2220      	movs	r2, #32
 8003308:	409a      	lsls	r2, r3
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b05      	cmp	r3, #5
 8003318:	d136      	bne.n	8003388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0216 	bic.w	r2, r2, #22
 8003328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d103      	bne.n	800334a <HAL_DMA_IRQHandler+0x1da>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003346:	2b00      	cmp	r3, #0
 8003348:	d007      	beq.n	800335a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0208 	bic.w	r2, r2, #8
 8003358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	223f      	movs	r2, #63	; 0x3f
 8003360:	409a      	lsls	r2, r3
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337a:	2b00      	cmp	r3, #0
 800337c:	d07e      	beq.n	800347c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	4798      	blx	r3
        }
        return;
 8003386:	e079      	b.n	800347c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01d      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10d      	bne.n	80033c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d031      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	4798      	blx	r3
 80033b4:	e02c      	b.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
 80033b6:	bf00      	nop
 80033b8:	20000034 	.word	0x20000034
 80033bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d023      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
 80033d0:	e01e      	b.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10f      	bne.n	8003400 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0210 	bic.w	r2, r2, #16
 80033ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	2b00      	cmp	r3, #0
 8003416:	d032      	beq.n	800347e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2205      	movs	r2, #5
 8003428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3301      	adds	r3, #1
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	d307      	bcc.n	8003458 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f2      	bne.n	800343c <HAL_DMA_IRQHandler+0x2cc>
 8003456:	e000      	b.n	800345a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003458:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	4798      	blx	r3
 800347a:	e000      	b.n	800347e <HAL_DMA_IRQHandler+0x30e>
        return;
 800347c:	bf00      	nop
    }
  }
}
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d108      	bne.n	80034c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034c2:	e007      	b.n	80034d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3b10      	subs	r3, #16
 80034f0:	4a13      	ldr	r2, [pc, #76]	; (8003540 <DMA_CalcBaseAndBitshift+0x60>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <DMA_CalcBaseAndBitshift+0x64>)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b03      	cmp	r3, #3
 800350c:	d908      	bls.n	8003520 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <DMA_CalcBaseAndBitshift+0x68>)
 8003516:	4013      	ands	r3, r2
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	659a      	str	r2, [r3, #88]	; 0x58
 800351e:	e006      	b.n	800352e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <DMA_CalcBaseAndBitshift+0x68>)
 8003528:	4013      	ands	r3, r2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	aaaaaaab 	.word	0xaaaaaaab
 8003544:	0800c610 	.word	0x0800c610
 8003548:	fffffc00 	.word	0xfffffc00

0800354c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11f      	bne.n	80035a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d856      	bhi.n	800361a <DMA_CheckFifoParam+0xce>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <DMA_CheckFifoParam+0x28>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003585 	.word	0x08003585
 8003578:	08003597 	.word	0x08003597
 800357c:	08003585 	.word	0x08003585
 8003580:	0800361b 	.word	0x0800361b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d046      	beq.n	800361e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003594:	e043      	b.n	800361e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800359e:	d140      	bne.n	8003622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e03d      	b.n	8003622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ae:	d121      	bne.n	80035f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d837      	bhi.n	8003626 <DMA_CheckFifoParam+0xda>
 80035b6:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <DMA_CheckFifoParam+0x70>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	080035cd 	.word	0x080035cd
 80035c0:	080035d3 	.word	0x080035d3
 80035c4:	080035cd 	.word	0x080035cd
 80035c8:	080035e5 	.word	0x080035e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	73fb      	strb	r3, [r7, #15]
      break;
 80035d0:	e030      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d025      	beq.n	800362a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e2:	e022      	b.n	800362a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035ec:	d11f      	bne.n	800362e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035f2:	e01c      	b.n	800362e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d903      	bls.n	8003602 <DMA_CheckFifoParam+0xb6>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d003      	beq.n	8003608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003600:	e018      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      break;
 8003606:	e015      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00e      	beq.n	8003632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e00b      	b.n	8003632 <DMA_CheckFifoParam+0xe6>
      break;
 800361a:	bf00      	nop
 800361c:	e00a      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 800361e:	bf00      	nop
 8003620:	e008      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 8003622:	bf00      	nop
 8003624:	e006      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 8003626:	bf00      	nop
 8003628:	e004      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 800362a:	bf00      	nop
 800362c:	e002      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;   
 800362e:	bf00      	nop
 8003630:	e000      	b.n	8003634 <DMA_CheckFifoParam+0xe8>
      break;
 8003632:	bf00      	nop
    }
  } 
  
  return status; 
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop

08003644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e175      	b.n	8003950 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003664:	2201      	movs	r2, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	f040 8164 	bne.w	800394a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_GPIO_Init+0x56>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b03      	cmp	r3, #3
 8003706:	d017      	beq.n	8003738 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d123      	bne.n	800378c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0203 	and.w	r2, r3, #3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80be 	beq.w	800394a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_GPIO_Init+0x324>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_GPIO_Init+0x324>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	; 0x44
 80037da:	4b63      	ldr	r3, [pc, #396]	; (8003968 <HAL_GPIO_Init+0x324>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037e6:	4a61      	ldr	r2, [pc, #388]	; (800396c <HAL_GPIO_Init+0x328>)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	3302      	adds	r3, #2
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a58      	ldr	r2, [pc, #352]	; (8003970 <HAL_GPIO_Init+0x32c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d037      	beq.n	8003882 <HAL_GPIO_Init+0x23e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_GPIO_Init+0x330>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_GPIO_Init+0x23a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a56      	ldr	r2, [pc, #344]	; (8003978 <HAL_GPIO_Init+0x334>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02b      	beq.n	800387a <HAL_GPIO_Init+0x236>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a55      	ldr	r2, [pc, #340]	; (800397c <HAL_GPIO_Init+0x338>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d025      	beq.n	8003876 <HAL_GPIO_Init+0x232>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a54      	ldr	r2, [pc, #336]	; (8003980 <HAL_GPIO_Init+0x33c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01f      	beq.n	8003872 <HAL_GPIO_Init+0x22e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a53      	ldr	r2, [pc, #332]	; (8003984 <HAL_GPIO_Init+0x340>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d019      	beq.n	800386e <HAL_GPIO_Init+0x22a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_GPIO_Init+0x344>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_GPIO_Init+0x226>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a51      	ldr	r2, [pc, #324]	; (800398c <HAL_GPIO_Init+0x348>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00d      	beq.n	8003866 <HAL_GPIO_Init+0x222>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a50      	ldr	r2, [pc, #320]	; (8003990 <HAL_GPIO_Init+0x34c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <HAL_GPIO_Init+0x21e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_GPIO_Init+0x350>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_GPIO_Init+0x21a>
 800385a:	2309      	movs	r3, #9
 800385c:	e012      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800385e:	230a      	movs	r3, #10
 8003860:	e010      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003862:	2308      	movs	r3, #8
 8003864:	e00e      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003866:	2307      	movs	r3, #7
 8003868:	e00c      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800386a:	2306      	movs	r3, #6
 800386c:	e00a      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800386e:	2305      	movs	r3, #5
 8003870:	e008      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003872:	2304      	movs	r3, #4
 8003874:	e006      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003876:	2303      	movs	r3, #3
 8003878:	e004      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800387a:	2302      	movs	r3, #2
 800387c:	e002      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003882:	2300      	movs	r3, #0
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f002 0203 	and.w	r2, r2, #3
 800388a:	0092      	lsls	r2, r2, #2
 800388c:	4093      	lsls	r3, r2
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003894:	4935      	ldr	r1, [pc, #212]	; (800396c <HAL_GPIO_Init+0x328>)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3302      	adds	r3, #2
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <HAL_GPIO_Init+0x354>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c6:	4a34      	ldr	r2, [pc, #208]	; (8003998 <HAL_GPIO_Init+0x354>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038cc:	4b32      	ldr	r3, [pc, #200]	; (8003998 <HAL_GPIO_Init+0x354>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f0:	4a29      	ldr	r2, [pc, #164]	; (8003998 <HAL_GPIO_Init+0x354>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f6:	4b28      	ldr	r3, [pc, #160]	; (8003998 <HAL_GPIO_Init+0x354>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391a:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_GPIO_Init+0x354>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_GPIO_Init+0x354>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003944:	4a14      	ldr	r2, [pc, #80]	; (8003998 <HAL_GPIO_Init+0x354>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	f67f ae86 	bls.w	8003664 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3724      	adds	r7, #36	; 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40013800 	.word	0x40013800
 8003970:	40020000 	.word	0x40020000
 8003974:	40020400 	.word	0x40020400
 8003978:	40020800 	.word	0x40020800
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40021000 	.word	0x40021000
 8003984:	40021400 	.word	0x40021400
 8003988:	40021800 	.word	0x40021800
 800398c:	40021c00 	.word	0x40021c00
 8003990:	40022000 	.word	0x40022000
 8003994:	40022400 	.word	0x40022400
 8003998:	40013c00 	.word	0x40013c00

0800399c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	887b      	ldrh	r3, [r7, #2]
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e001      	b.n	80039be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	807b      	strh	r3, [r7, #2]
 80039d8:	4613      	mov	r3, r2
 80039da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039e8:	e003      	b.n	80039f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039ea:	887b      	ldrh	r3, [r7, #2]
 80039ec:	041a      	lsls	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	619a      	str	r2, [r3, #24]
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	460b      	mov	r3, r1
 8003a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a10:	887a      	ldrh	r2, [r7, #2]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4013      	ands	r3, r2
 8003a16:	041a      	lsls	r2, r3, #16
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43d9      	mvns	r1, r3
 8003a1c:	887b      	ldrh	r3, [r7, #2]
 8003a1e:	400b      	ands	r3, r1
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	619a      	str	r2, [r3, #24]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a40:	695a      	ldr	r2, [r3, #20]
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a4a:	4a05      	ldr	r2, [pc, #20]	; (8003a60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f806 	bl	8003a64 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40013c00 	.word	0x40013c00

08003a64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a7c:	b08f      	sub	sp, #60	; 0x3c
 8003a7e:	af0a      	add	r7, sp, #40	; 0x28
 8003a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e116      	b.n	8003cba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe fc3e 	bl	8002328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f002 fbfe 	bl	80062cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	603b      	str	r3, [r7, #0]
 8003ad6:	687e      	ldr	r6, [r7, #4]
 8003ad8:	466d      	mov	r5, sp
 8003ada:	f106 0410 	add.w	r4, r6, #16
 8003ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aea:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aee:	1d33      	adds	r3, r6, #4
 8003af0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af2:	6838      	ldr	r0, [r7, #0]
 8003af4:	f002 fb92 	bl	800621c <USB_CoreInit>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0d7      	b.n	8003cba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f002 fbec 	bl	80062ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
 8003b1a:	e04a      	b.n	8003bb2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	333d      	adds	r3, #61	; 0x3d
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b30:	7bfa      	ldrb	r2, [r7, #15]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	333c      	adds	r3, #60	; 0x3c
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	b298      	uxth	r0, r3
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	; 0x44
 8003b58:	4602      	mov	r2, r0
 8003b5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3340      	adds	r3, #64	; 0x40
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3348      	adds	r3, #72	; 0x48
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	334c      	adds	r3, #76	; 0x4c
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3354      	adds	r3, #84	; 0x54
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d3af      	bcc.n	8003b1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	e044      	b.n	8003c4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bee:	7bfa      	ldrb	r2, [r7, #15]
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c1a:	7bfa      	ldrb	r2, [r7, #15]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4413      	add	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3b5      	bcc.n	8003bc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	687e      	ldr	r6, [r7, #4]
 8003c5e:	466d      	mov	r5, sp
 8003c60:	f106 0410 	add.w	r4, r6, #16
 8003c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c70:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c74:	1d33      	adds	r3, r6, #4
 8003c76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c78:	6838      	ldr	r0, [r7, #0]
 8003c7a:	f002 fb85 	bl	8006388 <USB_DevInit>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e014      	b.n	8003cba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d102      	bne.n	8003cae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f80b 	bl	8003cc4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fd43 	bl	800673e <USB_DevDisconnect>

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003cc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cf2:	4b05      	ldr	r3, [pc, #20]	; (8003d08 <HAL_PCDEx_ActivateLPM+0x44>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	10000003 	.word	0x10000003

08003d0c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1a:	6013      	str	r3, [r2, #0]
}
 8003d1c:	bf00      	nop
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40007000 	.word	0x40007000

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d34:	2300      	movs	r3, #0
 8003d36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e291      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8087 	beq.w	8003e5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d50:	4b96      	ldr	r3, [pc, #600]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d00c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d5c:	4b93      	ldr	r3, [pc, #588]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 030c 	and.w	r3, r3, #12
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	d112      	bne.n	8003d8e <HAL_RCC_OscConfig+0x62>
 8003d68:	4b90      	ldr	r3, [pc, #576]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b8d      	ldr	r3, [pc, #564]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d06c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x130>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d168      	bne.n	8003e5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e26b      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x7a>
 8003d98:	4b84      	ldr	r3, [pc, #528]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a83      	ldr	r2, [pc, #524]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0xd8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x9c>
 8003dae:	4b7f      	ldr	r3, [pc, #508]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a7e      	ldr	r2, [pc, #504]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b7c      	ldr	r3, [pc, #496]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7b      	ldr	r2, [pc, #492]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xd8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0xc0>
 8003dd2:	4b76      	ldr	r3, [pc, #472]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a75      	ldr	r2, [pc, #468]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b73      	ldr	r3, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a72      	ldr	r2, [pc, #456]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xd8>
 8003dec:	4b6f      	ldr	r3, [pc, #444]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6e      	ldr	r2, [pc, #440]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b6c      	ldr	r3, [pc, #432]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6b      	ldr	r2, [pc, #428]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fef0 	bl	8002bf0 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe feec 	bl	8002bf0 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e21f      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b61      	ldr	r3, [pc, #388]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xe8>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe fedc 	bl	8002bf0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fed8 	bl	8002bf0 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e20b      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x110>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d069      	beq.n	8003f3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e6a:	4b50      	ldr	r3, [pc, #320]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b4d      	ldr	r3, [pc, #308]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x190>
 8003e82:	4b4a      	ldr	r3, [pc, #296]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b47      	ldr	r3, [pc, #284]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x17a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1df      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b41      	ldr	r3, [pc, #260]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	493d      	ldr	r1, [pc, #244]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e040      	b.n	8003f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d023      	beq.n	8003f0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b39      	ldr	r3, [pc, #228]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a38      	ldr	r2, [pc, #224]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fe8e 	bl	8002bf0 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed8:	f7fe fe8a 	bl	8002bf0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1bd      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	4b2d      	ldr	r3, [pc, #180]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4929      	ldr	r1, [pc, #164]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
 8003f0a:	e018      	b.n	8003f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0c:	4b27      	ldr	r3, [pc, #156]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f18:	f7fe fe6a 	bl	8002bf0 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fe fe66 	bl	8002bf0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e199      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f32:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d038      	beq.n	8003fbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d019      	beq.n	8003f86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f52:	4b16      	ldr	r3, [pc, #88]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f58:	f043 0301 	orr.w	r3, r3, #1
 8003f5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fe fe47 	bl	8002bf0 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fe fe43 	bl	8002bf0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e176      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f78:	4b0c      	ldr	r3, [pc, #48]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x23a>
 8003f84:	e01a      	b.n	8003fbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8a:	4a08      	ldr	r2, [pc, #32]	; (8003fac <HAL_RCC_OscConfig+0x280>)
 8003f8c:	f023 0301 	bic.w	r3, r3, #1
 8003f90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fe fe2d 	bl	8002bf0 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fe29 	bl	8002bf0 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d903      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e15c      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
 8003fac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b91      	ldr	r3, [pc, #580]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ee      	bne.n	8003f9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a4 	beq.w	8004112 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fca:	4b8b      	ldr	r3, [pc, #556]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	4a87      	ldr	r2, [pc, #540]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe2:	4b85      	ldr	r3, [pc, #532]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff2:	4b82      	ldr	r3, [pc, #520]	; (80041fc <HAL_RCC_OscConfig+0x4d0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d118      	bne.n	8004030 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ffe:	4b7f      	ldr	r3, [pc, #508]	; (80041fc <HAL_RCC_OscConfig+0x4d0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7e      	ldr	r2, [pc, #504]	; (80041fc <HAL_RCC_OscConfig+0x4d0>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400a:	f7fe fdf1 	bl	8002bf0 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004010:	e008      	b.n	8004024 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004012:	f7fe fded 	bl	8002bf0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b64      	cmp	r3, #100	; 0x64
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e120      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004024:	4b75      	ldr	r3, [pc, #468]	; (80041fc <HAL_RCC_OscConfig+0x4d0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d106      	bne.n	8004046 <HAL_RCC_OscConfig+0x31a>
 8004038:	4b6f      	ldr	r3, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	4a6e      	ldr	r2, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6713      	str	r3, [r2, #112]	; 0x70
 8004044:	e02d      	b.n	80040a2 <HAL_RCC_OscConfig+0x376>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x33c>
 800404e:	4b6a      	ldr	r3, [pc, #424]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a69      	ldr	r2, [pc, #420]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	6713      	str	r3, [r2, #112]	; 0x70
 800405a:	4b67      	ldr	r3, [pc, #412]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405e:	4a66      	ldr	r2, [pc, #408]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	6713      	str	r3, [r2, #112]	; 0x70
 8004066:	e01c      	b.n	80040a2 <HAL_RCC_OscConfig+0x376>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b05      	cmp	r3, #5
 800406e:	d10c      	bne.n	800408a <HAL_RCC_OscConfig+0x35e>
 8004070:	4b61      	ldr	r3, [pc, #388]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	4a60      	ldr	r2, [pc, #384]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004076:	f043 0304 	orr.w	r3, r3, #4
 800407a:	6713      	str	r3, [r2, #112]	; 0x70
 800407c:	4b5e      	ldr	r3, [pc, #376]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004080:	4a5d      	ldr	r2, [pc, #372]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6713      	str	r3, [r2, #112]	; 0x70
 8004088:	e00b      	b.n	80040a2 <HAL_RCC_OscConfig+0x376>
 800408a:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	4a5a      	ldr	r2, [pc, #360]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004090:	f023 0301 	bic.w	r3, r3, #1
 8004094:	6713      	str	r3, [r2, #112]	; 0x70
 8004096:	4b58      	ldr	r3, [pc, #352]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409a:	4a57      	ldr	r2, [pc, #348]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800409c:	f023 0304 	bic.w	r3, r3, #4
 80040a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d015      	beq.n	80040d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040aa:	f7fe fda1 	bl	8002bf0 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b0:	e00a      	b.n	80040c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b2:	f7fe fd9d 	bl	8002bf0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0ce      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c8:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ee      	beq.n	80040b2 <HAL_RCC_OscConfig+0x386>
 80040d4:	e014      	b.n	8004100 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fe fd8b 	bl	8002bf0 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fe fd87 	bl	8002bf0 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f4:	4b40      	ldr	r3, [pc, #256]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ee      	bne.n	80040de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b3c      	ldr	r3, [pc, #240]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	4a3b      	ldr	r2, [pc, #236]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004110:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a4 	beq.w	8004264 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800411c:	4b36      	ldr	r3, [pc, #216]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d06b      	beq.n	8004200 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d149      	bne.n	80041c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004130:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a30      	ldr	r2, [pc, #192]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fe fd58 	bl	8002bf0 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fe fd54 	bl	8002bf0 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e087      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004156:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69da      	ldr	r2, [r3, #28]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	019b      	lsls	r3, r3, #6
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	3b01      	subs	r3, #1
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	4313      	orrs	r3, r2
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 800418a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800418e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004190:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 8004196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419c:	f7fe fd28 	bl	8002bf0 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe fd24 	bl	8002bf0 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e057      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x478>
 80041c2:	e04f      	b.n	8004264 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0b      	ldr	r2, [pc, #44]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80041ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fe fd0e 	bl	8002bf0 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d8:	f7fe fd0a 	bl	8002bf0 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e03d      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_RCC_OscConfig+0x4cc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4ac>
 80041f6:	e035      	b.n	8004264 <HAL_RCC_OscConfig+0x538>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <HAL_RCC_OscConfig+0x544>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d028      	beq.n	8004260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d121      	bne.n	8004260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d11a      	bne.n	8004260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004236:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004238:	4293      	cmp	r3, r2
 800423a:	d111      	bne.n	8004260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	085b      	lsrs	r3, r3, #1
 8004248:	3b01      	subs	r3, #1
 800424a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d107      	bne.n	8004260 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e000      	b.n	8004266 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023800 	.word	0x40023800

08004274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0d0      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b6a      	ldr	r3, [pc, #424]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d910      	bls.n	80042bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b67      	ldr	r3, [pc, #412]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 020f 	bic.w	r2, r3, #15
 80042a2:	4965      	ldr	r1, [pc, #404]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b63      	ldr	r3, [pc, #396]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0b8      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d020      	beq.n	800430a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d4:	4b59      	ldr	r3, [pc, #356]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a58      	ldr	r2, [pc, #352]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ec:	4b53      	ldr	r3, [pc, #332]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a52      	ldr	r2, [pc, #328]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f8:	4b50      	ldr	r3, [pc, #320]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	494d      	ldr	r1, [pc, #308]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d040      	beq.n	8004398 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431e:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d115      	bne.n	8004356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e07f      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b02      	cmp	r3, #2
 8004334:	d107      	bne.n	8004346 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	4b41      	ldr	r3, [pc, #260]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e073      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004346:	4b3d      	ldr	r3, [pc, #244]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e06b      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004356:	4b39      	ldr	r3, [pc, #228]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 0203 	bic.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	4936      	ldr	r1, [pc, #216]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004368:	f7fe fc42 	bl	8002bf0 <HAL_GetTick>
 800436c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	e00a      	b.n	8004386 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004370:	f7fe fc3e 	bl	8002bf0 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	; 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e053      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 020c 	and.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	429a      	cmp	r2, r3
 8004396:	d1eb      	bne.n	8004370 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d210      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a6:	4b24      	ldr	r3, [pc, #144]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 020f 	bic.w	r2, r3, #15
 80043ae:	4922      	ldr	r1, [pc, #136]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d001      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e032      	b.n	800442e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d4:	4b19      	ldr	r3, [pc, #100]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	4916      	ldr	r1, [pc, #88]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043f2:	4b12      	ldr	r3, [pc, #72]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	490e      	ldr	r1, [pc, #56]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004406:	f000 f821 	bl	800444c <HAL_RCC_GetSysClockFreq>
 800440a:	4602      	mov	r2, r0
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_ClockConfig+0x1c8>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	490a      	ldr	r1, [pc, #40]	; (8004440 <HAL_RCC_ClockConfig+0x1cc>)
 8004418:	5ccb      	ldrb	r3, [r1, r3]
 800441a:	fa22 f303 	lsr.w	r3, r2, r3
 800441e:	4a09      	ldr	r2, [pc, #36]	; (8004444 <HAL_RCC_ClockConfig+0x1d0>)
 8004420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_ClockConfig+0x1d4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fb9e 	bl	8002b68 <HAL_InitTick>

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023c00 	.word	0x40023c00
 800443c:	40023800 	.word	0x40023800
 8004440:	0800c5f8 	.word	0x0800c5f8
 8004444:	20000034 	.word	0x20000034
 8004448:	20000038 	.word	0x20000038

0800444c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800444c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004450:	b094      	sub	sp, #80	; 0x50
 8004452:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	647b      	str	r3, [r7, #68]	; 0x44
 8004458:	2300      	movs	r3, #0
 800445a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445c:	2300      	movs	r3, #0
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004464:	4b79      	ldr	r3, [pc, #484]	; (800464c <HAL_RCC_GetSysClockFreq+0x200>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b08      	cmp	r3, #8
 800446e:	d00d      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x40>
 8004470:	2b08      	cmp	r3, #8
 8004472:	f200 80e1 	bhi.w	8004638 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0x34>
 800447a:	2b04      	cmp	r3, #4
 800447c:	d003      	beq.n	8004486 <HAL_RCC_GetSysClockFreq+0x3a>
 800447e:	e0db      	b.n	8004638 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b73      	ldr	r3, [pc, #460]	; (8004650 <HAL_RCC_GetSysClockFreq+0x204>)
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004484:	e0db      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004486:	4b73      	ldr	r3, [pc, #460]	; (8004654 <HAL_RCC_GetSysClockFreq+0x208>)
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800448a:	e0d8      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800448c:	4b6f      	ldr	r3, [pc, #444]	; (800464c <HAL_RCC_GetSysClockFreq+0x200>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004494:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004496:	4b6d      	ldr	r3, [pc, #436]	; (800464c <HAL_RCC_GetSysClockFreq+0x200>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d063      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a2:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	2200      	movs	r2, #0
 80044aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
 80044b6:	2300      	movs	r3, #0
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044be:	4622      	mov	r2, r4
 80044c0:	462b      	mov	r3, r5
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	0159      	lsls	r1, r3, #5
 80044cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d0:	0150      	lsls	r0, r2, #5
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4621      	mov	r1, r4
 80044d8:	1a51      	subs	r1, r2, r1
 80044da:	6139      	str	r1, [r7, #16]
 80044dc:	4629      	mov	r1, r5
 80044de:	eb63 0301 	sbc.w	r3, r3, r1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f0:	4659      	mov	r1, fp
 80044f2:	018b      	lsls	r3, r1, #6
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044fa:	4651      	mov	r1, sl
 80044fc:	018a      	lsls	r2, r1, #6
 80044fe:	4651      	mov	r1, sl
 8004500:	ebb2 0801 	subs.w	r8, r2, r1
 8004504:	4659      	mov	r1, fp
 8004506:	eb63 0901 	sbc.w	r9, r3, r1
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	f04f 0300 	mov.w	r3, #0
 8004512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800451a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800451e:	4690      	mov	r8, r2
 8004520:	4699      	mov	r9, r3
 8004522:	4623      	mov	r3, r4
 8004524:	eb18 0303 	adds.w	r3, r8, r3
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	462b      	mov	r3, r5
 800452c:	eb49 0303 	adc.w	r3, r9, r3
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800453e:	4629      	mov	r1, r5
 8004540:	024b      	lsls	r3, r1, #9
 8004542:	4621      	mov	r1, r4
 8004544:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004548:	4621      	mov	r1, r4
 800454a:	024a      	lsls	r2, r1, #9
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004552:	2200      	movs	r2, #0
 8004554:	62bb      	str	r3, [r7, #40]	; 0x28
 8004556:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800455c:	f7fc fbbe 	bl	8000cdc <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004568:	e058      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <HAL_RCC_GetSysClockFreq+0x200>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	099b      	lsrs	r3, r3, #6
 8004570:	2200      	movs	r2, #0
 8004572:	4618      	mov	r0, r3
 8004574:	4611      	mov	r1, r2
 8004576:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	2300      	movs	r3, #0
 800457e:	627b      	str	r3, [r7, #36]	; 0x24
 8004580:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004584:	4642      	mov	r2, r8
 8004586:	464b      	mov	r3, r9
 8004588:	f04f 0000 	mov.w	r0, #0
 800458c:	f04f 0100 	mov.w	r1, #0
 8004590:	0159      	lsls	r1, r3, #5
 8004592:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004596:	0150      	lsls	r0, r2, #5
 8004598:	4602      	mov	r2, r0
 800459a:	460b      	mov	r3, r1
 800459c:	4641      	mov	r1, r8
 800459e:	ebb2 0a01 	subs.w	sl, r2, r1
 80045a2:	4649      	mov	r1, r9
 80045a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045bc:	ebb2 040a 	subs.w	r4, r2, sl
 80045c0:	eb63 050b 	sbc.w	r5, r3, fp
 80045c4:	f04f 0200 	mov.w	r2, #0
 80045c8:	f04f 0300 	mov.w	r3, #0
 80045cc:	00eb      	lsls	r3, r5, #3
 80045ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d2:	00e2      	lsls	r2, r4, #3
 80045d4:	4614      	mov	r4, r2
 80045d6:	461d      	mov	r5, r3
 80045d8:	4643      	mov	r3, r8
 80045da:	18e3      	adds	r3, r4, r3
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	464b      	mov	r3, r9
 80045e0:	eb45 0303 	adc.w	r3, r5, r3
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045f2:	4629      	mov	r1, r5
 80045f4:	028b      	lsls	r3, r1, #10
 80045f6:	4621      	mov	r1, r4
 80045f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045fc:	4621      	mov	r1, r4
 80045fe:	028a      	lsls	r2, r1, #10
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004606:	2200      	movs	r2, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	61fa      	str	r2, [r7, #28]
 800460c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004610:	f7fc fb64 	bl	8000cdc <__aeabi_uldivmod>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4613      	mov	r3, r2
 800461a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_GetSysClockFreq+0x200>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	3301      	adds	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800462c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004636:	e002      	b.n	800463e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <HAL_RCC_GetSysClockFreq+0x204>)
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800463c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800463e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004640:	4618      	mov	r0, r3
 8004642:	3750      	adds	r7, #80	; 0x50
 8004644:	46bd      	mov	sp, r7
 8004646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464a:	bf00      	nop
 800464c:	40023800 	.word	0x40023800
 8004650:	00f42400 	.word	0x00f42400
 8004654:	007a1200 	.word	0x007a1200

08004658 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_RCC_GetHCLKFreq+0x14>)
 800465e:	681b      	ldr	r3, [r3, #0]
}
 8004660:	4618      	mov	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	20000034 	.word	0x20000034

08004670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004674:	f7ff fff0 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 8004678:	4602      	mov	r2, r0
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	0a9b      	lsrs	r3, r3, #10
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	4903      	ldr	r1, [pc, #12]	; (8004694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004686:	5ccb      	ldrb	r3, [r1, r3]
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800468c:	4618      	mov	r0, r3
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40023800 	.word	0x40023800
 8004694:	0800c608 	.word	0x0800c608

08004698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800469c:	f7ff ffdc 	bl	8004658 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0b5b      	lsrs	r3, r3, #13
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	0800c608 	.word	0x0800c608

080046c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d012      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046e8:	4b69      	ldr	r3, [pc, #420]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4a68      	ldr	r2, [pc, #416]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046f2:	6093      	str	r3, [r2, #8]
 80046f4:	4b66      	ldr	r3, [pc, #408]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	4964      	ldr	r1, [pc, #400]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d017      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800471a:	4b5d      	ldr	r3, [pc, #372]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004728:	4959      	ldr	r1, [pc, #356]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004738:	d101      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d017      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004756:	4b4e      	ldr	r3, [pc, #312]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	494a      	ldr	r1, [pc, #296]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004774:	d101      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004782:	2301      	movs	r3, #1
 8004784:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004792:	2301      	movs	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 808b 	beq.w	80048ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047a4:	4b3a      	ldr	r3, [pc, #232]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	4a39      	ldr	r2, [pc, #228]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6413      	str	r3, [r2, #64]	; 0x40
 80047b0:	4b37      	ldr	r3, [pc, #220]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047bc:	4b35      	ldr	r3, [pc, #212]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a34      	ldr	r2, [pc, #208]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c8:	f7fe fa12 	bl	8002bf0 <HAL_GetTick>
 80047cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047d0:	f7fe fa0e 	bl	8002bf0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e357      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047e2:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ee:	4b28      	ldr	r3, [pc, #160]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d035      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	429a      	cmp	r2, r3
 800480a:	d02e      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004814:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004820:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a1a      	ldr	r2, [pc, #104]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800482c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800482e:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d114      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004840:	f7fe f9d6 	bl	8002bf0 <HAL_GetTick>
 8004844:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004846:	e00a      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004848:	f7fe f9d2 	bl	8002bf0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e319      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0ee      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004876:	d111      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004884:	4b04      	ldr	r3, [pc, #16]	; (8004898 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004886:	400b      	ands	r3, r1
 8004888:	4901      	ldr	r1, [pc, #4]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
 800488e:	e00b      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004890:	40023800 	.word	0x40023800
 8004894:	40007000 	.word	0x40007000
 8004898:	0ffffcff 	.word	0x0ffffcff
 800489c:	4baa      	ldr	r3, [pc, #680]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4aa9      	ldr	r2, [pc, #676]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048a6:	6093      	str	r3, [r2, #8]
 80048a8:	4ba7      	ldr	r3, [pc, #668]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b4:	49a4      	ldr	r1, [pc, #656]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048c6:	4ba0      	ldr	r3, [pc, #640]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048cc:	4a9e      	ldr	r2, [pc, #632]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048d6:	4b9c      	ldr	r3, [pc, #624]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	4999      	ldr	r1, [pc, #612]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f4:	4b94      	ldr	r3, [pc, #592]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004902:	4991      	ldr	r1, [pc, #580]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004916:	4b8c      	ldr	r3, [pc, #560]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004924:	4988      	ldr	r1, [pc, #544]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004938:	4b83      	ldr	r3, [pc, #524]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800493a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004946:	4980      	ldr	r1, [pc, #512]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800495a:	4b7b      	ldr	r3, [pc, #492]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	4977      	ldr	r1, [pc, #476]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800497c:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498a:	496f      	ldr	r1, [pc, #444]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800499e:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f023 020c 	bic.w	r2, r3, #12
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ac:	4966      	ldr	r1, [pc, #408]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049c0:	4b61      	ldr	r3, [pc, #388]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	495e      	ldr	r1, [pc, #376]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049e2:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f0:	4955      	ldr	r1, [pc, #340]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a04:	4b50      	ldr	r3, [pc, #320]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a12:	494d      	ldr	r1, [pc, #308]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a26:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a34:	4944      	ldr	r1, [pc, #272]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a48:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	493c      	ldr	r1, [pc, #240]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a6a:	4b37      	ldr	r3, [pc, #220]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	4933      	ldr	r1, [pc, #204]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a8c:	4b2e      	ldr	r3, [pc, #184]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9a:	492b      	ldr	r1, [pc, #172]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d011      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004aae:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004abc:	4922      	ldr	r1, [pc, #136]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aee:	4b16      	ldr	r3, [pc, #88]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afc:	4912      	ldr	r1, [pc, #72]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b20:	4909      	ldr	r1, [pc, #36]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d006      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80d9 	beq.w	8004cee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b3c:	4b02      	ldr	r3, [pc, #8]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a01      	ldr	r2, [pc, #4]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b46:	e001      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4e:	f7fe f84f 	bl	8002bf0 <HAL_GetTick>
 8004b52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b54:	e008      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b56:	f7fe f84b 	bl	8002bf0 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e194      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b68:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1f0      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d021      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11d      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b88:	4b64      	ldr	r3, [pc, #400]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b8e:	0c1b      	lsrs	r3, r3, #16
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b96:	4b61      	ldr	r3, [pc, #388]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	019a      	lsls	r2, r3, #6
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	061b      	lsls	r3, r3, #24
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	071b      	lsls	r3, r3, #28
 8004bbc:	4957      	ldr	r1, [pc, #348]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d02e      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bee:	d129      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bf0:	4b4a      	ldr	r3, [pc, #296]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bfe:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c04:	0f1b      	lsrs	r3, r3, #28
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	019a      	lsls	r2, r3, #6
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	061b      	lsls	r3, r3, #24
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	071b      	lsls	r3, r3, #28
 8004c24:	493d      	ldr	r1, [pc, #244]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c2c:	4b3b      	ldr	r3, [pc, #236]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c32:	f023 021f 	bic.w	r2, r3, #31
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	4937      	ldr	r1, [pc, #220]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01d      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c50:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c56:	0e1b      	lsrs	r3, r3, #24
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c64:	0f1b      	lsrs	r3, r3, #28
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	019a      	lsls	r2, r3, #6
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	041b      	lsls	r3, r3, #16
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	071b      	lsls	r3, r3, #28
 8004c84:	4925      	ldr	r1, [pc, #148]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d011      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	019a      	lsls	r2, r3, #6
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	071b      	lsls	r3, r3, #28
 8004cb4:	4919      	ldr	r1, [pc, #100]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cbc:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc8:	f7fd ff92 	bl	8002bf0 <HAL_GetTick>
 8004ccc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cd0:	f7fd ff8e 	bl	8002bf0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0d7      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	f040 80cd 	bne.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a08      	ldr	r2, [pc, #32]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d02:	f7fd ff75 	bl	8002bf0 <HAL_GetTick>
 8004d06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d0a:	f7fd ff71 	bl	8002bf0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b64      	cmp	r3, #100	; 0x64
 8004d16:	d903      	bls.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0ba      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d1c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d20:	4b5e      	ldr	r3, [pc, #376]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d2c:	d0ed      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d12a      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d56:	4b51      	ldr	r3, [pc, #324]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d64:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	0f1b      	lsrs	r3, r3, #28
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	019a      	lsls	r2, r3, #6
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	061b      	lsls	r3, r3, #24
 8004d84:	431a      	orrs	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	071b      	lsls	r3, r3, #28
 8004d8a:	4944      	ldr	r1, [pc, #272]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d92:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d98:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	3b01      	subs	r3, #1
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	493d      	ldr	r1, [pc, #244]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d022      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc0:	d11d      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dc2:	4b36      	ldr	r3, [pc, #216]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	0e1b      	lsrs	r3, r3, #24
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dd0:	4b32      	ldr	r3, [pc, #200]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	0f1b      	lsrs	r3, r3, #28
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	019a      	lsls	r2, r3, #6
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	041b      	lsls	r3, r3, #16
 8004dea:	431a      	orrs	r2, r3
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	431a      	orrs	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	4929      	ldr	r1, [pc, #164]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d028      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e0a:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	0e1b      	lsrs	r3, r3, #24
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e18:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	019a      	lsls	r2, r3, #6
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	431a      	orrs	r2, r3
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	061b      	lsls	r3, r3, #24
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	071b      	lsls	r3, r3, #28
 8004e3e:	4917      	ldr	r1, [pc, #92]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e46:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	4911      	ldr	r1, [pc, #68]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0e      	ldr	r2, [pc, #56]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e68:	f7fd fec2 	bl	8002bf0 <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e70:	f7fd febe 	bl	8002bf0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	; 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e007      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e82:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e8e:	d1ef      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023800 	.word	0x40023800

08004ea0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e09d      	b.n	8004fee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ec2:	d009      	beq.n	8004ed8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	61da      	str	r2, [r3, #28]
 8004eca:	e005      	b.n	8004ed8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fd f91a 	bl	800212c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f18:	d902      	bls.n	8004f20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	e002      	b.n	8004f26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f2e:	d007      	beq.n	8004f40 <HAL_SPI_Init+0xa0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f38:	d002      	beq.n	8004f40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
 8004f74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f82:	ea42 0103 	orr.w	r1, r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	f003 0204 	and.w	r2, r3, #4
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	f003 0308 	and.w	r3, r3, #8
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fbc:	ea42 0103 	orr.w	r1, r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69da      	ldr	r2, [r3, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b088      	sub	sp, #32
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	4613      	mov	r3, r2
 8005004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_SPI_Transmit+0x22>
 8005014:	2302      	movs	r3, #2
 8005016:	e158      	b.n	80052ca <HAL_SPI_Transmit+0x2d4>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005020:	f7fd fde6 	bl	8002bf0 <HAL_GetTick>
 8005024:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005026:	88fb      	ldrh	r3, [r7, #6]
 8005028:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d002      	beq.n	800503c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	77fb      	strb	r3, [r7, #31]
    goto error;
 800503a:	e13d      	b.n	80052b8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <HAL_SPI_Transmit+0x52>
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d102      	bne.n	800504e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800504c:	e134      	b.n	80052b8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2203      	movs	r2, #3
 8005052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	88fa      	ldrh	r2, [r7, #6]
 8005066:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005098:	d10f      	bne.n	80050ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d007      	beq.n	80050d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050e0:	d94b      	bls.n	800517a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_Transmit+0xfa>
 80050ea:	8afb      	ldrh	r3, [r7, #22]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d13e      	bne.n	800516e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	881a      	ldrh	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	1c9a      	adds	r2, r3, #2
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005114:	e02b      	b.n	800516e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	d112      	bne.n	800514a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	881a      	ldrh	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	1c9a      	adds	r2, r3, #2
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005148:	e011      	b.n	800516e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800514a:	f7fd fd51 	bl	8002bf0 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d803      	bhi.n	8005162 <HAL_SPI_Transmit+0x16c>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005160:	d102      	bne.n	8005168 <HAL_SPI_Transmit+0x172>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d102      	bne.n	800516e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800516c:	e0a4      	b.n	80052b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005172:	b29b      	uxth	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1ce      	bne.n	8005116 <HAL_SPI_Transmit+0x120>
 8005178:	e07c      	b.n	8005274 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0x192>
 8005182:	8afb      	ldrh	r3, [r7, #22]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d170      	bne.n	800526a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	d912      	bls.n	80051b8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	881a      	ldrh	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a2:	1c9a      	adds	r2, r3, #2
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b02      	subs	r3, #2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051b6:	e058      	b.n	800526a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	7812      	ldrb	r2, [r2, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051de:	e044      	b.n	800526a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d12b      	bne.n	8005246 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d912      	bls.n	800521e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	1c9a      	adds	r2, r3, #2
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b02      	subs	r3, #2
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800521c:	e025      	b.n	800526a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	330c      	adds	r3, #12
 8005228:	7812      	ldrb	r2, [r2, #0]
 800522a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005244:	e011      	b.n	800526a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005246:	f7fd fcd3 	bl	8002bf0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d803      	bhi.n	800525e <HAL_SPI_Transmit+0x268>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800525c:	d102      	bne.n	8005264 <HAL_SPI_Transmit+0x26e>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005268:	e026      	b.n	80052b8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1b5      	bne.n	80051e0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	6839      	ldr	r1, [r7, #0]
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f000 fb13 	bl	80058a4 <SPI_EndRxTxTransaction>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10a      	bne.n	80052a8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	77fb      	strb	r3, [r7, #31]
 80052b4:	e000      	b.n	80052b8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80052b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b086      	sub	sp, #24
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	4613      	mov	r3, r2
 80052e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_SPI_Transmit_DMA+0x20>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e0d8      	b.n	80054a6 <HAL_SPI_Transmit_DMA+0x1d2>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d002      	beq.n	800530e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005308:	2302      	movs	r3, #2
 800530a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800530c:	e0c6      	b.n	800549c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_SPI_Transmit_DMA+0x46>
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800531e:	e0bd      	b.n	800549c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2203      	movs	r2, #3
 8005324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	88fa      	ldrh	r2, [r7, #6]
 8005338:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536a:	d10f      	bne.n	800538c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800537a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800538a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	4a47      	ldr	r2, [pc, #284]	; (80054b0 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005392:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005398:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <HAL_SPI_Transmit_DMA+0x1e0>)
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	4a45      	ldr	r2, [pc, #276]	; (80054b8 <HAL_SPI_Transmit_DMA+0x1e4>)
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	2200      	movs	r2, #0
 80053aa:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053ba:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053c4:	d82d      	bhi.n	8005422 <HAL_SPI_Transmit_DMA+0x14e>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d0:	d127      	bne.n	8005422 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10f      	bne.n	8005400 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053ee:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fe:	e010      	b.n	8005422 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800540e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005414:	b29b      	uxth	r3, r3
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	3301      	adds	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542a:	4619      	mov	r1, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005438:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800543a:	f7fd fdc9 	bl	8002fd0 <HAL_DMA_Start_IT>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00c      	beq.n	800545e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005448:	f043 0210 	orr.w	r2, r3, #16
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800545c:	e01e      	b.n	800549c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0220 	orr.w	r2, r2, #32
 800548a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0202 	orr.w	r2, r2, #2
 800549a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	0800560b 	.word	0x0800560b
 80054b4:	08005563 	.word	0x08005563
 80054b8:	08005627 	.word	0x08005627

080054bc <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00f      	beq.n	80054f0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fd fddb 	bl	8003090 <HAL_DMA_Abort>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d007      	beq.n	80054f0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e4:	f043 0210 	orr.w	r2, r3, #16
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00f      	beq.n	8005518 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fd fdc7 	bl	8003090 <HAL_DMA_Abort>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550c:	f043 0210 	orr.w	r2, r3, #16
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0203 	bic.w	r2, r2, #3
 8005526:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8005530:	7bfb      	ldrb	r3, [r7, #15]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b086      	sub	sp, #24
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005570:	f7fd fb3e 	bl	8002bf0 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005584:	d03b      	beq.n	80055fe <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0220 	bic.w	r2, r2, #32
 8005594:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0202 	bic.w	r2, r2, #2
 80055a4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	2164      	movs	r1, #100	; 0x64
 80055aa:	6978      	ldr	r0, [r7, #20]
 80055ac:	f000 f97a 	bl	80058a4 <SPI_EndRxTxTransaction>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10a      	bne.n	80055e0 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	60fb      	str	r3, [r7, #12]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f7ff ffa9 	bl	800554e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055fc:	e002      	b.n	8005604 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80055fe:	6978      	ldr	r0, [r7, #20]
 8005600:	f7fc fcf0 	bl	8001fe4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f7ff ff8e 	bl	800553a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800561e:	bf00      	nop
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0203 	bic.w	r2, r2, #3
 8005642:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	f043 0210 	orr.w	r2, r3, #16
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f7ff ff78 	bl	800554e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005678:	f7fd faba 	bl	8002bf0 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005688:	f7fd fab2 	bl	8002bf0 <HAL_GetTick>
 800568c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800568e:	4b39      	ldr	r3, [pc, #228]	; (8005774 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	015b      	lsls	r3, r3, #5
 8005694:	0d1b      	lsrs	r3, r3, #20
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	fb02 f303 	mul.w	r3, r2, r3
 800569c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800569e:	e054      	b.n	800574a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a6:	d050      	beq.n	800574a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a8:	f7fd faa2 	bl	8002bf0 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d902      	bls.n	80056be <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d13d      	bne.n	800573a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d6:	d111      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e0:	d004      	beq.n	80056ec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ea:	d107      	bne.n	80056fc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d10f      	bne.n	8005726 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005724:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e017      	b.n	800576a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	3b01      	subs	r3, #1
 8005748:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4013      	ands	r3, r2
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	429a      	cmp	r2, r3
 8005758:	bf0c      	ite	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	2300      	movne	r3, #0
 800575e:	b2db      	uxtb	r3, r3
 8005760:	461a      	mov	r2, r3
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	429a      	cmp	r2, r3
 8005766:	d19b      	bne.n	80056a0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000034 	.word	0x20000034

08005778 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800578a:	f7fd fa31 	bl	8002bf0 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	4413      	add	r3, r2
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800579a:	f7fd fa29 	bl	8002bf0 <HAL_GetTick>
 800579e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057a8:	4b3d      	ldr	r3, [pc, #244]	; (80058a0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4613      	mov	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4413      	add	r3, r2
 80057b2:	00da      	lsls	r2, r3, #3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	0d1b      	lsrs	r3, r3, #20
 80057b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057c0:	e060      	b.n	8005884 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80057c8:	d107      	bne.n	80057da <SPI_WaitFifoStateUntilTimeout+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e0:	d050      	beq.n	8005884 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057e2:	f7fd fa05 	bl	8002bf0 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d902      	bls.n	80057f8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d13d      	bne.n	8005874 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005806:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005810:	d111      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d004      	beq.n	8005826 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d107      	bne.n	8005836 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005834:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	d10f      	bne.n	8005860 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800585e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e010      	b.n	8005896 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	3b01      	subs	r3, #1
 8005882:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d196      	bne.n	80057c2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005894:	2300      	movs	r3, #0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3728      	adds	r7, #40	; 0x28
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000034 	.word	0x20000034

080058a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f7ff ff5b 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d007      	beq.n	80058d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058cc:	f043 0220 	orr.w	r2, r3, #32
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e046      	b.n	8005966 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058d8:	4b25      	ldr	r3, [pc, #148]	; (8005970 <SPI_EndRxTxTransaction+0xcc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a25      	ldr	r2, [pc, #148]	; (8005974 <SPI_EndRxTxTransaction+0xd0>)
 80058de:	fba2 2303 	umull	r2, r3, r2, r3
 80058e2:	0d5b      	lsrs	r3, r3, #21
 80058e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f6:	d112      	bne.n	800591e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	2180      	movs	r1, #128	; 0x80
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff feb0 	bl	8005668 <SPI_WaitFlagStateUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d016      	beq.n	800593c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e023      	b.n	8005966 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	3b01      	subs	r3, #1
 8005928:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d0f2      	beq.n	800591e <SPI_EndRxTxTransaction+0x7a>
 8005938:	e000      	b.n	800593c <SPI_EndRxTxTransaction+0x98>
        break;
 800593a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f7ff ff15 	bl	8005778 <SPI_WaitFifoStateUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005958:	f043 0220 	orr.w	r2, r3, #32
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e000      	b.n	8005966 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000034 	.word	0x20000034
 8005974:	165e9f81 	.word	0x165e9f81

08005978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e040      	b.n	8005a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fc fc64 	bl	8002268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2224      	movs	r2, #36	; 0x24
 80059a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f82c 	bl	8005a14 <UART_SetConfig>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e022      	b.n	8005a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fa84 	bl	8005edc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb0b 	bl	8006020 <UART_CheckIdleState>
 8005a0a:	4603      	mov	r3, r0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4ba6      	ldr	r3, [pc, #664]	; (8005cd8 <UART_SetConfig+0x2c4>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	6979      	ldr	r1, [r7, #20]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a94      	ldr	r2, [pc, #592]	; (8005cdc <UART_SetConfig+0x2c8>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d120      	bne.n	8005ad2 <UART_SetConfig+0xbe>
 8005a90:	4b93      	ldr	r3, [pc, #588]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	d816      	bhi.n	8005acc <UART_SetConfig+0xb8>
 8005a9e:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <UART_SetConfig+0x90>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ab5 	.word	0x08005ab5
 8005aa8:	08005ac1 	.word	0x08005ac1
 8005aac:	08005abb 	.word	0x08005abb
 8005ab0:	08005ac7 	.word	0x08005ac7
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]
 8005ab8:	e150      	b.n	8005d5c <UART_SetConfig+0x348>
 8005aba:	2302      	movs	r3, #2
 8005abc:	77fb      	strb	r3, [r7, #31]
 8005abe:	e14d      	b.n	8005d5c <UART_SetConfig+0x348>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	77fb      	strb	r3, [r7, #31]
 8005ac4:	e14a      	b.n	8005d5c <UART_SetConfig+0x348>
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	77fb      	strb	r3, [r7, #31]
 8005aca:	e147      	b.n	8005d5c <UART_SetConfig+0x348>
 8005acc:	2310      	movs	r3, #16
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e144      	b.n	8005d5c <UART_SetConfig+0x348>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a83      	ldr	r2, [pc, #524]	; (8005ce4 <UART_SetConfig+0x2d0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d132      	bne.n	8005b42 <UART_SetConfig+0x12e>
 8005adc:	4b80      	ldr	r3, [pc, #512]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f003 030c 	and.w	r3, r3, #12
 8005ae6:	2b0c      	cmp	r3, #12
 8005ae8:	d828      	bhi.n	8005b3c <UART_SetConfig+0x128>
 8005aea:	a201      	add	r2, pc, #4	; (adr r2, 8005af0 <UART_SetConfig+0xdc>)
 8005aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005b3d 	.word	0x08005b3d
 8005af8:	08005b3d 	.word	0x08005b3d
 8005afc:	08005b3d 	.word	0x08005b3d
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b3d 	.word	0x08005b3d
 8005b08:	08005b3d 	.word	0x08005b3d
 8005b0c:	08005b3d 	.word	0x08005b3d
 8005b10:	08005b2b 	.word	0x08005b2b
 8005b14:	08005b3d 	.word	0x08005b3d
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b3d 	.word	0x08005b3d
 8005b20:	08005b37 	.word	0x08005b37
 8005b24:	2300      	movs	r3, #0
 8005b26:	77fb      	strb	r3, [r7, #31]
 8005b28:	e118      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	77fb      	strb	r3, [r7, #31]
 8005b2e:	e115      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b30:	2304      	movs	r3, #4
 8005b32:	77fb      	strb	r3, [r7, #31]
 8005b34:	e112      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b36:	2308      	movs	r3, #8
 8005b38:	77fb      	strb	r3, [r7, #31]
 8005b3a:	e10f      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b3c:	2310      	movs	r3, #16
 8005b3e:	77fb      	strb	r3, [r7, #31]
 8005b40:	e10c      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a68      	ldr	r2, [pc, #416]	; (8005ce8 <UART_SetConfig+0x2d4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d120      	bne.n	8005b8e <UART_SetConfig+0x17a>
 8005b4c:	4b64      	ldr	r3, [pc, #400]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b56:	2b30      	cmp	r3, #48	; 0x30
 8005b58:	d013      	beq.n	8005b82 <UART_SetConfig+0x16e>
 8005b5a:	2b30      	cmp	r3, #48	; 0x30
 8005b5c:	d814      	bhi.n	8005b88 <UART_SetConfig+0x174>
 8005b5e:	2b20      	cmp	r3, #32
 8005b60:	d009      	beq.n	8005b76 <UART_SetConfig+0x162>
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d810      	bhi.n	8005b88 <UART_SetConfig+0x174>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <UART_SetConfig+0x15c>
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d006      	beq.n	8005b7c <UART_SetConfig+0x168>
 8005b6e:	e00b      	b.n	8005b88 <UART_SetConfig+0x174>
 8005b70:	2300      	movs	r3, #0
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e0f2      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b76:	2302      	movs	r3, #2
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e0ef      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	77fb      	strb	r3, [r7, #31]
 8005b80:	e0ec      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b82:	2308      	movs	r3, #8
 8005b84:	77fb      	strb	r3, [r7, #31]
 8005b86:	e0e9      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e0e6      	b.n	8005d5c <UART_SetConfig+0x348>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a56      	ldr	r2, [pc, #344]	; (8005cec <UART_SetConfig+0x2d8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d120      	bne.n	8005bda <UART_SetConfig+0x1c6>
 8005b98:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ba4:	d013      	beq.n	8005bce <UART_SetConfig+0x1ba>
 8005ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ba8:	d814      	bhi.n	8005bd4 <UART_SetConfig+0x1c0>
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d009      	beq.n	8005bc2 <UART_SetConfig+0x1ae>
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d810      	bhi.n	8005bd4 <UART_SetConfig+0x1c0>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <UART_SetConfig+0x1a8>
 8005bb6:	2b40      	cmp	r3, #64	; 0x40
 8005bb8:	d006      	beq.n	8005bc8 <UART_SetConfig+0x1b4>
 8005bba:	e00b      	b.n	8005bd4 <UART_SetConfig+0x1c0>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e0cc      	b.n	8005d5c <UART_SetConfig+0x348>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e0c9      	b.n	8005d5c <UART_SetConfig+0x348>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e0c6      	b.n	8005d5c <UART_SetConfig+0x348>
 8005bce:	2308      	movs	r3, #8
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e0c3      	b.n	8005d5c <UART_SetConfig+0x348>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e0c0      	b.n	8005d5c <UART_SetConfig+0x348>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a44      	ldr	r2, [pc, #272]	; (8005cf0 <UART_SetConfig+0x2dc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d125      	bne.n	8005c30 <UART_SetConfig+0x21c>
 8005be4:	4b3e      	ldr	r3, [pc, #248]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf2:	d017      	beq.n	8005c24 <UART_SetConfig+0x210>
 8005bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf8:	d817      	bhi.n	8005c2a <UART_SetConfig+0x216>
 8005bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bfe:	d00b      	beq.n	8005c18 <UART_SetConfig+0x204>
 8005c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c04:	d811      	bhi.n	8005c2a <UART_SetConfig+0x216>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <UART_SetConfig+0x1fe>
 8005c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0e:	d006      	beq.n	8005c1e <UART_SetConfig+0x20a>
 8005c10:	e00b      	b.n	8005c2a <UART_SetConfig+0x216>
 8005c12:	2300      	movs	r3, #0
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e0a1      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e09e      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e09b      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c24:	2308      	movs	r3, #8
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e098      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c2a:	2310      	movs	r3, #16
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e095      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <UART_SetConfig+0x2e0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d125      	bne.n	8005c86 <UART_SetConfig+0x272>
 8005c3a:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c48:	d017      	beq.n	8005c7a <UART_SetConfig+0x266>
 8005c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c4e:	d817      	bhi.n	8005c80 <UART_SetConfig+0x26c>
 8005c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c54:	d00b      	beq.n	8005c6e <UART_SetConfig+0x25a>
 8005c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5a:	d811      	bhi.n	8005c80 <UART_SetConfig+0x26c>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <UART_SetConfig+0x254>
 8005c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c64:	d006      	beq.n	8005c74 <UART_SetConfig+0x260>
 8005c66:	e00b      	b.n	8005c80 <UART_SetConfig+0x26c>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e076      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e073      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c74:	2304      	movs	r3, #4
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e070      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e06d      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c80:	2310      	movs	r3, #16
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e06a      	b.n	8005d5c <UART_SetConfig+0x348>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1b      	ldr	r2, [pc, #108]	; (8005cf8 <UART_SetConfig+0x2e4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d138      	bne.n	8005d02 <UART_SetConfig+0x2ee>
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c9e:	d017      	beq.n	8005cd0 <UART_SetConfig+0x2bc>
 8005ca0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ca4:	d82a      	bhi.n	8005cfc <UART_SetConfig+0x2e8>
 8005ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005caa:	d00b      	beq.n	8005cc4 <UART_SetConfig+0x2b0>
 8005cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb0:	d824      	bhi.n	8005cfc <UART_SetConfig+0x2e8>
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <UART_SetConfig+0x2aa>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cba:	d006      	beq.n	8005cca <UART_SetConfig+0x2b6>
 8005cbc:	e01e      	b.n	8005cfc <UART_SetConfig+0x2e8>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	77fb      	strb	r3, [r7, #31]
 8005cc2:	e04b      	b.n	8005d5c <UART_SetConfig+0x348>
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e048      	b.n	8005d5c <UART_SetConfig+0x348>
 8005cca:	2304      	movs	r3, #4
 8005ccc:	77fb      	strb	r3, [r7, #31]
 8005cce:	e045      	b.n	8005d5c <UART_SetConfig+0x348>
 8005cd0:	2308      	movs	r3, #8
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e042      	b.n	8005d5c <UART_SetConfig+0x348>
 8005cd6:	bf00      	nop
 8005cd8:	efff69f3 	.word	0xefff69f3
 8005cdc:	40011000 	.word	0x40011000
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40004400 	.word	0x40004400
 8005ce8:	40004800 	.word	0x40004800
 8005cec:	40004c00 	.word	0x40004c00
 8005cf0:	40005000 	.word	0x40005000
 8005cf4:	40011400 	.word	0x40011400
 8005cf8:	40007800 	.word	0x40007800
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e02c      	b.n	8005d5c <UART_SetConfig+0x348>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a72      	ldr	r2, [pc, #456]	; (8005ed0 <UART_SetConfig+0x4bc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d125      	bne.n	8005d58 <UART_SetConfig+0x344>
 8005d0c:	4b71      	ldr	r3, [pc, #452]	; (8005ed4 <UART_SetConfig+0x4c0>)
 8005d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d1a:	d017      	beq.n	8005d4c <UART_SetConfig+0x338>
 8005d1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d20:	d817      	bhi.n	8005d52 <UART_SetConfig+0x33e>
 8005d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d26:	d00b      	beq.n	8005d40 <UART_SetConfig+0x32c>
 8005d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d2c:	d811      	bhi.n	8005d52 <UART_SetConfig+0x33e>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <UART_SetConfig+0x326>
 8005d32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d36:	d006      	beq.n	8005d46 <UART_SetConfig+0x332>
 8005d38:	e00b      	b.n	8005d52 <UART_SetConfig+0x33e>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	77fb      	strb	r3, [r7, #31]
 8005d3e:	e00d      	b.n	8005d5c <UART_SetConfig+0x348>
 8005d40:	2302      	movs	r3, #2
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	e00a      	b.n	8005d5c <UART_SetConfig+0x348>
 8005d46:	2304      	movs	r3, #4
 8005d48:	77fb      	strb	r3, [r7, #31]
 8005d4a:	e007      	b.n	8005d5c <UART_SetConfig+0x348>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	77fb      	strb	r3, [r7, #31]
 8005d50:	e004      	b.n	8005d5c <UART_SetConfig+0x348>
 8005d52:	2310      	movs	r3, #16
 8005d54:	77fb      	strb	r3, [r7, #31]
 8005d56:	e001      	b.n	8005d5c <UART_SetConfig+0x348>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d64:	d15b      	bne.n	8005e1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d828      	bhi.n	8005dbe <UART_SetConfig+0x3aa>
 8005d6c:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x360>)
 8005d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d72:	bf00      	nop
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fe fc6a 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8005d9c:	61b8      	str	r0, [r7, #24]
        break;
 8005d9e:	e013      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe fc7a 	bl	8004698 <HAL_RCC_GetPCLK2Freq>
 8005da4:	61b8      	str	r0, [r7, #24]
        break;
 8005da6:	e00f      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <UART_SetConfig+0x4c4>)
 8005daa:	61bb      	str	r3, [r7, #24]
        break;
 8005dac:	e00c      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fe fb4d 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8005db2:	61b8      	str	r0, [r7, #24]
        break;
 8005db4:	e008      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	61bb      	str	r3, [r7, #24]
        break;
 8005dbc:	e004      	b.n	8005dc8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005dc6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d074      	beq.n	8005eb8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	005a      	lsls	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d916      	bls.n	8005e18 <UART_SetConfig+0x404>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df0:	d212      	bcs.n	8005e18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f023 030f 	bic.w	r3, r3, #15
 8005dfa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	085b      	lsrs	r3, r3, #1
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	89fb      	ldrh	r3, [r7, #14]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	89fa      	ldrh	r2, [r7, #14]
 8005e14:	60da      	str	r2, [r3, #12]
 8005e16:	e04f      	b.n	8005eb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	77bb      	strb	r3, [r7, #30]
 8005e1c:	e04c      	b.n	8005eb8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e1e:	7ffb      	ldrb	r3, [r7, #31]
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d828      	bhi.n	8005e76 <UART_SetConfig+0x462>
 8005e24:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <UART_SetConfig+0x418>)
 8005e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2a:	bf00      	nop
 8005e2c:	08005e51 	.word	0x08005e51
 8005e30:	08005e59 	.word	0x08005e59
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	08005e77 	.word	0x08005e77
 8005e3c:	08005e67 	.word	0x08005e67
 8005e40:	08005e77 	.word	0x08005e77
 8005e44:	08005e77 	.word	0x08005e77
 8005e48:	08005e77 	.word	0x08005e77
 8005e4c:	08005e6f 	.word	0x08005e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e50:	f7fe fc0e 	bl	8004670 <HAL_RCC_GetPCLK1Freq>
 8005e54:	61b8      	str	r0, [r7, #24]
        break;
 8005e56:	e013      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e58:	f7fe fc1e 	bl	8004698 <HAL_RCC_GetPCLK2Freq>
 8005e5c:	61b8      	str	r0, [r7, #24]
        break;
 8005e5e:	e00f      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e60:	4b1d      	ldr	r3, [pc, #116]	; (8005ed8 <UART_SetConfig+0x4c4>)
 8005e62:	61bb      	str	r3, [r7, #24]
        break;
 8005e64:	e00c      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e66:	f7fe faf1 	bl	800444c <HAL_RCC_GetSysClockFreq>
 8005e6a:	61b8      	str	r0, [r7, #24]
        break;
 8005e6c:	e008      	b.n	8005e80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	61bb      	str	r3, [r7, #24]
        break;
 8005e74:	e004      	b.n	8005e80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e7e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d018      	beq.n	8005eb8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	085a      	lsrs	r2, r3, #1
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	441a      	add	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b0f      	cmp	r3, #15
 8005e9e:	d909      	bls.n	8005eb4 <UART_SetConfig+0x4a0>
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea6:	d205      	bcs.n	8005eb4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60da      	str	r2, [r3, #12]
 8005eb2:	e001      	b.n	8005eb8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005ec4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40007c00 	.word	0x40007c00
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	00f42400 	.word	0x00f42400

08005edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	430a      	orrs	r2, r1
 8005f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	f003 0320 	and.w	r3, r3, #32
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01a      	beq.n	8005ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fda:	d10a      	bne.n	8005ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af02      	add	r7, sp, #8
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006030:	f7fc fdde 	bl	8002bf0 <HAL_GetTick>
 8006034:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0308 	and.w	r3, r3, #8
 8006040:	2b08      	cmp	r3, #8
 8006042:	d10e      	bne.n	8006062 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f81b 	bl	800608e <UART_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e011      	b.n	8006086 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2220      	movs	r2, #32
 800606c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b09c      	sub	sp, #112	; 0x70
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	603b      	str	r3, [r7, #0]
 800609a:	4613      	mov	r3, r2
 800609c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609e:	e0a7      	b.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a6:	f000 80a3 	beq.w	80061f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060aa:	f7fc fda1 	bl	8002bf0 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d302      	bcc.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80060ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d13f      	bne.n	8006140 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060d4:	667b      	str	r3, [r7, #100]	; 0x64
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e6      	bne.n	80060c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3308      	adds	r3, #8
 80060f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	f023 0301 	bic.w	r3, r3, #1
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3308      	adds	r3, #8
 8006110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006112:	64ba      	str	r2, [r7, #72]	; 0x48
 8006114:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e5      	bne.n	80060f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2220      	movs	r2, #32
 800612a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e068      	b.n	8006212 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d050      	beq.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69db      	ldr	r3, [r3, #28]
 8006154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006158:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800615c:	d148      	bne.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006166:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800617c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
 8006188:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800618c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1e6      	bne.n	8006168 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3308      	adds	r3, #8
 80061a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	613b      	str	r3, [r7, #16]
   return(result);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061ba:	623a      	str	r2, [r7, #32]
 80061bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	69f9      	ldr	r1, [r7, #28]
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e5      	bne.n	800619a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e010      	b.n	8006212 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	69da      	ldr	r2, [r3, #28]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4013      	ands	r3, r2
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	bf0c      	ite	eq
 8006200:	2301      	moveq	r3, #1
 8006202:	2300      	movne	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	461a      	mov	r2, r3
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	429a      	cmp	r2, r3
 800620c:	f43f af48 	beq.w	80060a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3770      	adds	r7, #112	; 0x70
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800621c:	b084      	sub	sp, #16
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	f107 001c 	add.w	r0, r7, #28
 800622a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b01      	cmp	r3, #1
 8006232:	d120      	bne.n	8006276 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <USB_CoreInit+0xac>)
 8006246:	4013      	ands	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d105      	bne.n	800626a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa96 	bl	800679c <USB_CoreReset>
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
 8006274:	e010      	b.n	8006298 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa8a 	bl	800679c <USB_CoreReset>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10b      	bne.n	80062b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f043 0206 	orr.w	r2, r3, #6
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f043 0220 	orr.w	r2, r3, #32
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062c2:	b004      	add	sp, #16
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	ffbdffbf 	.word	0xffbdffbf

080062cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 0201 	bic.w	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b084      	sub	sp, #16
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d115      	bne.n	800633c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800631c:	2001      	movs	r0, #1
 800631e:	f7fc fc73 	bl	8002c08 <HAL_Delay>
      ms++;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fa29 	bl	8006780 <USB_GetMode>
 800632e:	4603      	mov	r3, r0
 8006330:	2b01      	cmp	r3, #1
 8006332:	d01e      	beq.n	8006372 <USB_SetCurrentMode+0x84>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b31      	cmp	r3, #49	; 0x31
 8006338:	d9f0      	bls.n	800631c <USB_SetCurrentMode+0x2e>
 800633a:	e01a      	b.n	8006372 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d115      	bne.n	800636e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800634e:	2001      	movs	r0, #1
 8006350:	f7fc fc5a 	bl	8002c08 <HAL_Delay>
      ms++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fa10 	bl	8006780 <USB_GetMode>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <USB_SetCurrentMode+0x84>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b31      	cmp	r3, #49	; 0x31
 800636a:	d9f0      	bls.n	800634e <USB_SetCurrentMode+0x60>
 800636c:	e001      	b.n	8006372 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e005      	b.n	800637e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b32      	cmp	r3, #50	; 0x32
 8006376:	d101      	bne.n	800637c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
	...

08006388 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006388:	b084      	sub	sp, #16
 800638a:	b580      	push	{r7, lr}
 800638c:	b086      	sub	sp, #24
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063a2:	2300      	movs	r3, #0
 80063a4:	613b      	str	r3, [r7, #16]
 80063a6:	e009      	b.n	80063bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	3340      	adds	r3, #64	; 0x40
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	2200      	movs	r2, #0
 80063b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b0e      	cmp	r3, #14
 80063c0:	d9f2      	bls.n	80063a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11c      	bne.n	8006402 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d6:	f043 0302 	orr.w	r3, r3, #2
 80063da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	601a      	str	r2, [r3, #0]
 8006400:	e005      	b.n	800640e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006414:	461a      	mov	r2, r3
 8006416:	2300      	movs	r3, #0
 8006418:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006420:	4619      	mov	r1, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	461a      	mov	r2, r3
 800642a:	680b      	ldr	r3, [r1, #0]
 800642c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800642e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006430:	2b01      	cmp	r3, #1
 8006432:	d10c      	bne.n	800644e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d104      	bne.n	8006444 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800643a:	2100      	movs	r1, #0
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f965 	bl	800670c <USB_SetDevSpeed>
 8006442:	e008      	b.n	8006456 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006444:	2101      	movs	r1, #1
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f960 	bl	800670c <USB_SetDevSpeed>
 800644c:	e003      	b.n	8006456 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800644e:	2103      	movs	r1, #3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f95b 	bl	800670c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006456:	2110      	movs	r1, #16
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f8f3 	bl	8006644 <USB_FlushTxFifo>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f91f 	bl	80066ac <USB_FlushRxFifo>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	461a      	mov	r2, r3
 8006480:	2300      	movs	r3, #0
 8006482:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648a:	461a      	mov	r2, r3
 800648c:	2300      	movs	r3, #0
 800648e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006496:	461a      	mov	r2, r3
 8006498:	2300      	movs	r3, #0
 800649a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	e043      	b.n	800652a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b8:	d118      	bne.n	80064ec <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	461a      	mov	r2, r3
 80064ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e013      	b.n	80064fe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e2:	461a      	mov	r2, r3
 80064e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064e8:	6013      	str	r3, [r2, #0]
 80064ea:	e008      	b.n	80064fe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	015a      	lsls	r2, r3, #5
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4413      	add	r3, r2
 80064f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f8:	461a      	mov	r2, r3
 80064fa:	2300      	movs	r3, #0
 80064fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650a:	461a      	mov	r2, r3
 800650c:	2300      	movs	r3, #0
 800650e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4413      	add	r3, r2
 8006518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651c:	461a      	mov	r2, r3
 800651e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006522:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	3301      	adds	r3, #1
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	d3b7      	bcc.n	80064a2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	e043      	b.n	80065c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800654a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800654e:	d118      	bne.n	8006582 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10a      	bne.n	800656c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	015a      	lsls	r2, r3, #5
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006562:	461a      	mov	r2, r3
 8006564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e013      	b.n	8006594 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4413      	add	r3, r2
 8006574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006578:	461a      	mov	r2, r3
 800657a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e008      	b.n	8006594 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658e:	461a      	mov	r2, r3
 8006590:	2300      	movs	r3, #0
 8006592:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	2300      	movs	r3, #0
 80065a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b2:	461a      	mov	r2, r3
 80065b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3301      	adds	r3, #1
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d3b7      	bcc.n	8006538 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f043 0210 	orr.w	r2, r3, #16
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <USB_DevInit+0x2b4>)
 8006602:	4313      	orrs	r3, r2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	f043 0208 	orr.w	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800661a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d105      	bne.n	800662c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699a      	ldr	r2, [r3, #24]
 8006624:	4b06      	ldr	r3, [pc, #24]	; (8006640 <USB_DevInit+0x2b8>)
 8006626:	4313      	orrs	r3, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006638:	b004      	add	sp, #16
 800663a:	4770      	bx	lr
 800663c:	803c3800 	.word	0x803c3800
 8006640:	40000004 	.word	0x40000004

08006644 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3301      	adds	r3, #1
 8006656:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a13      	ldr	r2, [pc, #76]	; (80066a8 <USB_FlushTxFifo+0x64>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d901      	bls.n	8006664 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e01b      	b.n	800669c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	daf2      	bge.n	8006652 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	019b      	lsls	r3, r3, #6
 8006674:	f043 0220 	orr.w	r2, r3, #32
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4a08      	ldr	r2, [pc, #32]	; (80066a8 <USB_FlushTxFifo+0x64>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d901      	bls.n	800668e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e006      	b.n	800669c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b20      	cmp	r3, #32
 8006698:	d0f0      	beq.n	800667c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3714      	adds	r7, #20
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	00030d40 	.word	0x00030d40

080066ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4a11      	ldr	r2, [pc, #68]	; (8006708 <USB_FlushRxFifo+0x5c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d901      	bls.n	80066ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e018      	b.n	80066fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	daf2      	bge.n	80066b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2210      	movs	r2, #16
 80066da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a08      	ldr	r2, [pc, #32]	; (8006708 <USB_FlushRxFifo+0x5c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e006      	b.n	80066fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b10      	cmp	r3, #16
 80066f8:	d0f0      	beq.n	80066dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	00030d40 	.word	0x00030d40

0800670c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	460b      	mov	r3, r1
 8006716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800672c:	4313      	orrs	r3, r2
 800672e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006758:	f023 0303 	bic.w	r3, r3, #3
 800675c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0301 	and.w	r3, r3, #1
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <USB_CoreReset+0x64>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e01b      	b.n	80067f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	daf2      	bge.n	80067a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	f043 0201 	orr.w	r2, r3, #1
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3301      	adds	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a09      	ldr	r2, [pc, #36]	; (8006800 <USB_CoreReset+0x64>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d901      	bls.n	80067e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e006      	b.n	80067f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d0f0      	beq.n	80067d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	00030d40 	.word	0x00030d40

08006804 <__cvt>:
 8006804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006808:	ec55 4b10 	vmov	r4, r5, d0
 800680c:	2d00      	cmp	r5, #0
 800680e:	460e      	mov	r6, r1
 8006810:	4619      	mov	r1, r3
 8006812:	462b      	mov	r3, r5
 8006814:	bfbb      	ittet	lt
 8006816:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800681a:	461d      	movlt	r5, r3
 800681c:	2300      	movge	r3, #0
 800681e:	232d      	movlt	r3, #45	; 0x2d
 8006820:	700b      	strb	r3, [r1, #0]
 8006822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006824:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006828:	4691      	mov	r9, r2
 800682a:	f023 0820 	bic.w	r8, r3, #32
 800682e:	bfbc      	itt	lt
 8006830:	4622      	movlt	r2, r4
 8006832:	4614      	movlt	r4, r2
 8006834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006838:	d005      	beq.n	8006846 <__cvt+0x42>
 800683a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800683e:	d100      	bne.n	8006842 <__cvt+0x3e>
 8006840:	3601      	adds	r6, #1
 8006842:	2102      	movs	r1, #2
 8006844:	e000      	b.n	8006848 <__cvt+0x44>
 8006846:	2103      	movs	r1, #3
 8006848:	ab03      	add	r3, sp, #12
 800684a:	9301      	str	r3, [sp, #4]
 800684c:	ab02      	add	r3, sp, #8
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	ec45 4b10 	vmov	d0, r4, r5
 8006854:	4653      	mov	r3, sl
 8006856:	4632      	mov	r2, r6
 8006858:	f001 feee 	bl	8008638 <_dtoa_r>
 800685c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006860:	4607      	mov	r7, r0
 8006862:	d102      	bne.n	800686a <__cvt+0x66>
 8006864:	f019 0f01 	tst.w	r9, #1
 8006868:	d022      	beq.n	80068b0 <__cvt+0xac>
 800686a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800686e:	eb07 0906 	add.w	r9, r7, r6
 8006872:	d110      	bne.n	8006896 <__cvt+0x92>
 8006874:	783b      	ldrb	r3, [r7, #0]
 8006876:	2b30      	cmp	r3, #48	; 0x30
 8006878:	d10a      	bne.n	8006890 <__cvt+0x8c>
 800687a:	2200      	movs	r2, #0
 800687c:	2300      	movs	r3, #0
 800687e:	4620      	mov	r0, r4
 8006880:	4629      	mov	r1, r5
 8006882:	f7fa f94b 	bl	8000b1c <__aeabi_dcmpeq>
 8006886:	b918      	cbnz	r0, 8006890 <__cvt+0x8c>
 8006888:	f1c6 0601 	rsb	r6, r6, #1
 800688c:	f8ca 6000 	str.w	r6, [sl]
 8006890:	f8da 3000 	ldr.w	r3, [sl]
 8006894:	4499      	add	r9, r3
 8006896:	2200      	movs	r2, #0
 8006898:	2300      	movs	r3, #0
 800689a:	4620      	mov	r0, r4
 800689c:	4629      	mov	r1, r5
 800689e:	f7fa f93d 	bl	8000b1c <__aeabi_dcmpeq>
 80068a2:	b108      	cbz	r0, 80068a8 <__cvt+0xa4>
 80068a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80068a8:	2230      	movs	r2, #48	; 0x30
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	454b      	cmp	r3, r9
 80068ae:	d307      	bcc.n	80068c0 <__cvt+0xbc>
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068b4:	1bdb      	subs	r3, r3, r7
 80068b6:	4638      	mov	r0, r7
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	b004      	add	sp, #16
 80068bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	9103      	str	r1, [sp, #12]
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	e7f0      	b.n	80068aa <__cvt+0xa6>

080068c8 <__exponent>:
 80068c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ca:	4603      	mov	r3, r0
 80068cc:	2900      	cmp	r1, #0
 80068ce:	bfb8      	it	lt
 80068d0:	4249      	neglt	r1, r1
 80068d2:	f803 2b02 	strb.w	r2, [r3], #2
 80068d6:	bfb4      	ite	lt
 80068d8:	222d      	movlt	r2, #45	; 0x2d
 80068da:	222b      	movge	r2, #43	; 0x2b
 80068dc:	2909      	cmp	r1, #9
 80068de:	7042      	strb	r2, [r0, #1]
 80068e0:	dd2a      	ble.n	8006938 <__exponent+0x70>
 80068e2:	f10d 0207 	add.w	r2, sp, #7
 80068e6:	4617      	mov	r7, r2
 80068e8:	260a      	movs	r6, #10
 80068ea:	4694      	mov	ip, r2
 80068ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80068f0:	fb06 1415 	mls	r4, r6, r5, r1
 80068f4:	3430      	adds	r4, #48	; 0x30
 80068f6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80068fa:	460c      	mov	r4, r1
 80068fc:	2c63      	cmp	r4, #99	; 0x63
 80068fe:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006902:	4629      	mov	r1, r5
 8006904:	dcf1      	bgt.n	80068ea <__exponent+0x22>
 8006906:	3130      	adds	r1, #48	; 0x30
 8006908:	f1ac 0402 	sub.w	r4, ip, #2
 800690c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006910:	1c41      	adds	r1, r0, #1
 8006912:	4622      	mov	r2, r4
 8006914:	42ba      	cmp	r2, r7
 8006916:	d30a      	bcc.n	800692e <__exponent+0x66>
 8006918:	f10d 0209 	add.w	r2, sp, #9
 800691c:	eba2 020c 	sub.w	r2, r2, ip
 8006920:	42bc      	cmp	r4, r7
 8006922:	bf88      	it	hi
 8006924:	2200      	movhi	r2, #0
 8006926:	4413      	add	r3, r2
 8006928:	1a18      	subs	r0, r3, r0
 800692a:	b003      	add	sp, #12
 800692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006932:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006936:	e7ed      	b.n	8006914 <__exponent+0x4c>
 8006938:	2330      	movs	r3, #48	; 0x30
 800693a:	3130      	adds	r1, #48	; 0x30
 800693c:	7083      	strb	r3, [r0, #2]
 800693e:	70c1      	strb	r1, [r0, #3]
 8006940:	1d03      	adds	r3, r0, #4
 8006942:	e7f1      	b.n	8006928 <__exponent+0x60>

08006944 <_printf_float>:
 8006944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006948:	ed2d 8b02 	vpush	{d8}
 800694c:	b08d      	sub	sp, #52	; 0x34
 800694e:	460c      	mov	r4, r1
 8006950:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006954:	4616      	mov	r6, r2
 8006956:	461f      	mov	r7, r3
 8006958:	4605      	mov	r5, r0
 800695a:	f001 fd95 	bl	8008488 <_localeconv_r>
 800695e:	f8d0 a000 	ldr.w	sl, [r0]
 8006962:	4650      	mov	r0, sl
 8006964:	f7f9 fca4 	bl	80002b0 <strlen>
 8006968:	2300      	movs	r3, #0
 800696a:	930a      	str	r3, [sp, #40]	; 0x28
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	9305      	str	r3, [sp, #20]
 8006970:	f8d8 3000 	ldr.w	r3, [r8]
 8006974:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006978:	3307      	adds	r3, #7
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	f103 0208 	add.w	r2, r3, #8
 8006982:	f8c8 2000 	str.w	r2, [r8]
 8006986:	e9d3 8900 	ldrd	r8, r9, [r3]
 800698a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800698e:	9307      	str	r3, [sp, #28]
 8006990:	f8cd 8018 	str.w	r8, [sp, #24]
 8006994:	ee08 0a10 	vmov	s16, r0
 8006998:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800699c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069a0:	4b9e      	ldr	r3, [pc, #632]	; (8006c1c <_printf_float+0x2d8>)
 80069a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069a6:	f7fa f8eb 	bl	8000b80 <__aeabi_dcmpun>
 80069aa:	bb88      	cbnz	r0, 8006a10 <_printf_float+0xcc>
 80069ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069b0:	4b9a      	ldr	r3, [pc, #616]	; (8006c1c <_printf_float+0x2d8>)
 80069b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069b6:	f7fa f8c5 	bl	8000b44 <__aeabi_dcmple>
 80069ba:	bb48      	cbnz	r0, 8006a10 <_printf_float+0xcc>
 80069bc:	2200      	movs	r2, #0
 80069be:	2300      	movs	r3, #0
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7fa f8b4 	bl	8000b30 <__aeabi_dcmplt>
 80069c8:	b110      	cbz	r0, 80069d0 <_printf_float+0x8c>
 80069ca:	232d      	movs	r3, #45	; 0x2d
 80069cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d0:	4a93      	ldr	r2, [pc, #588]	; (8006c20 <_printf_float+0x2dc>)
 80069d2:	4b94      	ldr	r3, [pc, #592]	; (8006c24 <_printf_float+0x2e0>)
 80069d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069d8:	bf94      	ite	ls
 80069da:	4690      	movls	r8, r2
 80069dc:	4698      	movhi	r8, r3
 80069de:	2303      	movs	r3, #3
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	9b05      	ldr	r3, [sp, #20]
 80069e4:	f023 0304 	bic.w	r3, r3, #4
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	f04f 0900 	mov.w	r9, #0
 80069ee:	9700      	str	r7, [sp, #0]
 80069f0:	4633      	mov	r3, r6
 80069f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80069f4:	4621      	mov	r1, r4
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 f9da 	bl	8006db0 <_printf_common>
 80069fc:	3001      	adds	r0, #1
 80069fe:	f040 8090 	bne.w	8006b22 <_printf_float+0x1de>
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a06:	b00d      	add	sp, #52	; 0x34
 8006a08:	ecbd 8b02 	vpop	{d8}
 8006a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a10:	4642      	mov	r2, r8
 8006a12:	464b      	mov	r3, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	4649      	mov	r1, r9
 8006a18:	f7fa f8b2 	bl	8000b80 <__aeabi_dcmpun>
 8006a1c:	b140      	cbz	r0, 8006a30 <_printf_float+0xec>
 8006a1e:	464b      	mov	r3, r9
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bfbc      	itt	lt
 8006a24:	232d      	movlt	r3, #45	; 0x2d
 8006a26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a2a:	4a7f      	ldr	r2, [pc, #508]	; (8006c28 <_printf_float+0x2e4>)
 8006a2c:	4b7f      	ldr	r3, [pc, #508]	; (8006c2c <_printf_float+0x2e8>)
 8006a2e:	e7d1      	b.n	80069d4 <_printf_float+0x90>
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a36:	9206      	str	r2, [sp, #24]
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	d13f      	bne.n	8006abc <_printf_float+0x178>
 8006a3c:	2306      	movs	r3, #6
 8006a3e:	6063      	str	r3, [r4, #4]
 8006a40:	9b05      	ldr	r3, [sp, #20]
 8006a42:	6861      	ldr	r1, [r4, #4]
 8006a44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9303      	str	r3, [sp, #12]
 8006a4c:	ab0a      	add	r3, sp, #40	; 0x28
 8006a4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a52:	ab09      	add	r3, sp, #36	; 0x24
 8006a54:	ec49 8b10 	vmov	d0, r8, r9
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	6022      	str	r2, [r4, #0]
 8006a5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a60:	4628      	mov	r0, r5
 8006a62:	f7ff fecf 	bl	8006804 <__cvt>
 8006a66:	9b06      	ldr	r3, [sp, #24]
 8006a68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a6a:	2b47      	cmp	r3, #71	; 0x47
 8006a6c:	4680      	mov	r8, r0
 8006a6e:	d108      	bne.n	8006a82 <_printf_float+0x13e>
 8006a70:	1cc8      	adds	r0, r1, #3
 8006a72:	db02      	blt.n	8006a7a <_printf_float+0x136>
 8006a74:	6863      	ldr	r3, [r4, #4]
 8006a76:	4299      	cmp	r1, r3
 8006a78:	dd41      	ble.n	8006afe <_printf_float+0x1ba>
 8006a7a:	f1ab 0302 	sub.w	r3, fp, #2
 8006a7e:	fa5f fb83 	uxtb.w	fp, r3
 8006a82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a86:	d820      	bhi.n	8006aca <_printf_float+0x186>
 8006a88:	3901      	subs	r1, #1
 8006a8a:	465a      	mov	r2, fp
 8006a8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a90:	9109      	str	r1, [sp, #36]	; 0x24
 8006a92:	f7ff ff19 	bl	80068c8 <__exponent>
 8006a96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a98:	1813      	adds	r3, r2, r0
 8006a9a:	2a01      	cmp	r2, #1
 8006a9c:	4681      	mov	r9, r0
 8006a9e:	6123      	str	r3, [r4, #16]
 8006aa0:	dc02      	bgt.n	8006aa8 <_printf_float+0x164>
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	07d2      	lsls	r2, r2, #31
 8006aa6:	d501      	bpl.n	8006aac <_printf_float+0x168>
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	6123      	str	r3, [r4, #16]
 8006aac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d09c      	beq.n	80069ee <_printf_float+0xaa>
 8006ab4:	232d      	movs	r3, #45	; 0x2d
 8006ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aba:	e798      	b.n	80069ee <_printf_float+0xaa>
 8006abc:	9a06      	ldr	r2, [sp, #24]
 8006abe:	2a47      	cmp	r2, #71	; 0x47
 8006ac0:	d1be      	bne.n	8006a40 <_printf_float+0xfc>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1bc      	bne.n	8006a40 <_printf_float+0xfc>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e7b9      	b.n	8006a3e <_printf_float+0xfa>
 8006aca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ace:	d118      	bne.n	8006b02 <_printf_float+0x1be>
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	6863      	ldr	r3, [r4, #4]
 8006ad4:	dd0b      	ble.n	8006aee <_printf_float+0x1aa>
 8006ad6:	6121      	str	r1, [r4, #16]
 8006ad8:	b913      	cbnz	r3, 8006ae0 <_printf_float+0x19c>
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	07d0      	lsls	r0, r2, #31
 8006ade:	d502      	bpl.n	8006ae6 <_printf_float+0x1a2>
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	440b      	add	r3, r1
 8006ae4:	6123      	str	r3, [r4, #16]
 8006ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ae8:	f04f 0900 	mov.w	r9, #0
 8006aec:	e7de      	b.n	8006aac <_printf_float+0x168>
 8006aee:	b913      	cbnz	r3, 8006af6 <_printf_float+0x1b2>
 8006af0:	6822      	ldr	r2, [r4, #0]
 8006af2:	07d2      	lsls	r2, r2, #31
 8006af4:	d501      	bpl.n	8006afa <_printf_float+0x1b6>
 8006af6:	3302      	adds	r3, #2
 8006af8:	e7f4      	b.n	8006ae4 <_printf_float+0x1a0>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e7f2      	b.n	8006ae4 <_printf_float+0x1a0>
 8006afe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b04:	4299      	cmp	r1, r3
 8006b06:	db05      	blt.n	8006b14 <_printf_float+0x1d0>
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	6121      	str	r1, [r4, #16]
 8006b0c:	07d8      	lsls	r0, r3, #31
 8006b0e:	d5ea      	bpl.n	8006ae6 <_printf_float+0x1a2>
 8006b10:	1c4b      	adds	r3, r1, #1
 8006b12:	e7e7      	b.n	8006ae4 <_printf_float+0x1a0>
 8006b14:	2900      	cmp	r1, #0
 8006b16:	bfd4      	ite	le
 8006b18:	f1c1 0202 	rsble	r2, r1, #2
 8006b1c:	2201      	movgt	r2, #1
 8006b1e:	4413      	add	r3, r2
 8006b20:	e7e0      	b.n	8006ae4 <_printf_float+0x1a0>
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	055a      	lsls	r2, r3, #21
 8006b26:	d407      	bmi.n	8006b38 <_printf_float+0x1f4>
 8006b28:	6923      	ldr	r3, [r4, #16]
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	d12c      	bne.n	8006b90 <_printf_float+0x24c>
 8006b36:	e764      	b.n	8006a02 <_printf_float+0xbe>
 8006b38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b3c:	f240 80e0 	bls.w	8006d00 <_printf_float+0x3bc>
 8006b40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b44:	2200      	movs	r2, #0
 8006b46:	2300      	movs	r3, #0
 8006b48:	f7f9 ffe8 	bl	8000b1c <__aeabi_dcmpeq>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d034      	beq.n	8006bba <_printf_float+0x276>
 8006b50:	4a37      	ldr	r2, [pc, #220]	; (8006c30 <_printf_float+0x2ec>)
 8006b52:	2301      	movs	r3, #1
 8006b54:	4631      	mov	r1, r6
 8006b56:	4628      	mov	r0, r5
 8006b58:	47b8      	blx	r7
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	f43f af51 	beq.w	8006a02 <_printf_float+0xbe>
 8006b60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b64:	429a      	cmp	r2, r3
 8006b66:	db02      	blt.n	8006b6e <_printf_float+0x22a>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	07d8      	lsls	r0, r3, #31
 8006b6c:	d510      	bpl.n	8006b90 <_printf_float+0x24c>
 8006b6e:	ee18 3a10 	vmov	r3, s16
 8006b72:	4652      	mov	r2, sl
 8006b74:	4631      	mov	r1, r6
 8006b76:	4628      	mov	r0, r5
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f af41 	beq.w	8006a02 <_printf_float+0xbe>
 8006b80:	f04f 0800 	mov.w	r8, #0
 8006b84:	f104 091a 	add.w	r9, r4, #26
 8006b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	4543      	cmp	r3, r8
 8006b8e:	dc09      	bgt.n	8006ba4 <_printf_float+0x260>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	079b      	lsls	r3, r3, #30
 8006b94:	f100 8107 	bmi.w	8006da6 <_printf_float+0x462>
 8006b98:	68e0      	ldr	r0, [r4, #12]
 8006b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b9c:	4298      	cmp	r0, r3
 8006b9e:	bfb8      	it	lt
 8006ba0:	4618      	movlt	r0, r3
 8006ba2:	e730      	b.n	8006a06 <_printf_float+0xc2>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	464a      	mov	r2, r9
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	f43f af27 	beq.w	8006a02 <_printf_float+0xbe>
 8006bb4:	f108 0801 	add.w	r8, r8, #1
 8006bb8:	e7e6      	b.n	8006b88 <_printf_float+0x244>
 8006bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	dc39      	bgt.n	8006c34 <_printf_float+0x2f0>
 8006bc0:	4a1b      	ldr	r2, [pc, #108]	; (8006c30 <_printf_float+0x2ec>)
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f af19 	beq.w	8006a02 <_printf_float+0xbe>
 8006bd0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	d102      	bne.n	8006bde <_printf_float+0x29a>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	07d9      	lsls	r1, r3, #31
 8006bdc:	d5d8      	bpl.n	8006b90 <_printf_float+0x24c>
 8006bde:	ee18 3a10 	vmov	r3, s16
 8006be2:	4652      	mov	r2, sl
 8006be4:	4631      	mov	r1, r6
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	f43f af09 	beq.w	8006a02 <_printf_float+0xbe>
 8006bf0:	f04f 0900 	mov.w	r9, #0
 8006bf4:	f104 0a1a 	add.w	sl, r4, #26
 8006bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfa:	425b      	negs	r3, r3
 8006bfc:	454b      	cmp	r3, r9
 8006bfe:	dc01      	bgt.n	8006c04 <_printf_float+0x2c0>
 8006c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c02:	e792      	b.n	8006b2a <_printf_float+0x1e6>
 8006c04:	2301      	movs	r3, #1
 8006c06:	4652      	mov	r2, sl
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	f43f aef7 	beq.w	8006a02 <_printf_float+0xbe>
 8006c14:	f109 0901 	add.w	r9, r9, #1
 8006c18:	e7ee      	b.n	8006bf8 <_printf_float+0x2b4>
 8006c1a:	bf00      	nop
 8006c1c:	7fefffff 	.word	0x7fefffff
 8006c20:	0800c618 	.word	0x0800c618
 8006c24:	0800c61c 	.word	0x0800c61c
 8006c28:	0800c620 	.word	0x0800c620
 8006c2c:	0800c624 	.word	0x0800c624
 8006c30:	0800c628 	.word	0x0800c628
 8006c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bfa8      	it	ge
 8006c3c:	461a      	movge	r2, r3
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	4691      	mov	r9, r2
 8006c42:	dc37      	bgt.n	8006cb4 <_printf_float+0x370>
 8006c44:	f04f 0b00 	mov.w	fp, #0
 8006c48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c4c:	f104 021a 	add.w	r2, r4, #26
 8006c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c52:	9305      	str	r3, [sp, #20]
 8006c54:	eba3 0309 	sub.w	r3, r3, r9
 8006c58:	455b      	cmp	r3, fp
 8006c5a:	dc33      	bgt.n	8006cc4 <_printf_float+0x380>
 8006c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c60:	429a      	cmp	r2, r3
 8006c62:	db3b      	blt.n	8006cdc <_printf_float+0x398>
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	07da      	lsls	r2, r3, #31
 8006c68:	d438      	bmi.n	8006cdc <_printf_float+0x398>
 8006c6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c6e:	eba2 0903 	sub.w	r9, r2, r3
 8006c72:	9b05      	ldr	r3, [sp, #20]
 8006c74:	1ad2      	subs	r2, r2, r3
 8006c76:	4591      	cmp	r9, r2
 8006c78:	bfa8      	it	ge
 8006c7a:	4691      	movge	r9, r2
 8006c7c:	f1b9 0f00 	cmp.w	r9, #0
 8006c80:	dc35      	bgt.n	8006cee <_printf_float+0x3aa>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c8a:	f104 0a1a 	add.w	sl, r4, #26
 8006c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	eba3 0309 	sub.w	r3, r3, r9
 8006c98:	4543      	cmp	r3, r8
 8006c9a:	f77f af79 	ble.w	8006b90 <_printf_float+0x24c>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4652      	mov	r2, sl
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f aeaa 	beq.w	8006a02 <_printf_float+0xbe>
 8006cae:	f108 0801 	add.w	r8, r8, #1
 8006cb2:	e7ec      	b.n	8006c8e <_printf_float+0x34a>
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4642      	mov	r2, r8
 8006cba:	4628      	mov	r0, r5
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	d1c0      	bne.n	8006c44 <_printf_float+0x300>
 8006cc2:	e69e      	b.n	8006a02 <_printf_float+0xbe>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	9205      	str	r2, [sp, #20]
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f ae97 	beq.w	8006a02 <_printf_float+0xbe>
 8006cd4:	9a05      	ldr	r2, [sp, #20]
 8006cd6:	f10b 0b01 	add.w	fp, fp, #1
 8006cda:	e7b9      	b.n	8006c50 <_printf_float+0x30c>
 8006cdc:	ee18 3a10 	vmov	r3, s16
 8006ce0:	4652      	mov	r2, sl
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d1be      	bne.n	8006c6a <_printf_float+0x326>
 8006cec:	e689      	b.n	8006a02 <_printf_float+0xbe>
 8006cee:	9a05      	ldr	r2, [sp, #20]
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	4442      	add	r2, r8
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d1c1      	bne.n	8006c82 <_printf_float+0x33e>
 8006cfe:	e680      	b.n	8006a02 <_printf_float+0xbe>
 8006d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d02:	2a01      	cmp	r2, #1
 8006d04:	dc01      	bgt.n	8006d0a <_printf_float+0x3c6>
 8006d06:	07db      	lsls	r3, r3, #31
 8006d08:	d53a      	bpl.n	8006d80 <_printf_float+0x43c>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b8      	blx	r7
 8006d14:	3001      	adds	r0, #1
 8006d16:	f43f ae74 	beq.w	8006a02 <_printf_float+0xbe>
 8006d1a:	ee18 3a10 	vmov	r3, s16
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	f43f ae6b 	beq.w	8006a02 <_printf_float+0xbe>
 8006d2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d30:	2200      	movs	r2, #0
 8006d32:	2300      	movs	r3, #0
 8006d34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006d38:	f7f9 fef0 	bl	8000b1c <__aeabi_dcmpeq>
 8006d3c:	b9d8      	cbnz	r0, 8006d76 <_printf_float+0x432>
 8006d3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006d42:	f108 0201 	add.w	r2, r8, #1
 8006d46:	4631      	mov	r1, r6
 8006d48:	4628      	mov	r0, r5
 8006d4a:	47b8      	blx	r7
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d10e      	bne.n	8006d6e <_printf_float+0x42a>
 8006d50:	e657      	b.n	8006a02 <_printf_float+0xbe>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4652      	mov	r2, sl
 8006d56:	4631      	mov	r1, r6
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	f43f ae50 	beq.w	8006a02 <_printf_float+0xbe>
 8006d62:	f108 0801 	add.w	r8, r8, #1
 8006d66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	4543      	cmp	r3, r8
 8006d6c:	dcf1      	bgt.n	8006d52 <_printf_float+0x40e>
 8006d6e:	464b      	mov	r3, r9
 8006d70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d74:	e6da      	b.n	8006b2c <_printf_float+0x1e8>
 8006d76:	f04f 0800 	mov.w	r8, #0
 8006d7a:	f104 0a1a 	add.w	sl, r4, #26
 8006d7e:	e7f2      	b.n	8006d66 <_printf_float+0x422>
 8006d80:	2301      	movs	r3, #1
 8006d82:	4642      	mov	r2, r8
 8006d84:	e7df      	b.n	8006d46 <_printf_float+0x402>
 8006d86:	2301      	movs	r3, #1
 8006d88:	464a      	mov	r2, r9
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	f43f ae36 	beq.w	8006a02 <_printf_float+0xbe>
 8006d96:	f108 0801 	add.w	r8, r8, #1
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d9e:	1a5b      	subs	r3, r3, r1
 8006da0:	4543      	cmp	r3, r8
 8006da2:	dcf0      	bgt.n	8006d86 <_printf_float+0x442>
 8006da4:	e6f8      	b.n	8006b98 <_printf_float+0x254>
 8006da6:	f04f 0800 	mov.w	r8, #0
 8006daa:	f104 0919 	add.w	r9, r4, #25
 8006dae:	e7f4      	b.n	8006d9a <_printf_float+0x456>

08006db0 <_printf_common>:
 8006db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	4616      	mov	r6, r2
 8006db6:	4699      	mov	r9, r3
 8006db8:	688a      	ldr	r2, [r1, #8]
 8006dba:	690b      	ldr	r3, [r1, #16]
 8006dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	bfb8      	it	lt
 8006dc4:	4613      	movlt	r3, r2
 8006dc6:	6033      	str	r3, [r6, #0]
 8006dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006dcc:	4607      	mov	r7, r0
 8006dce:	460c      	mov	r4, r1
 8006dd0:	b10a      	cbz	r2, 8006dd6 <_printf_common+0x26>
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	6033      	str	r3, [r6, #0]
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	0699      	lsls	r1, r3, #26
 8006dda:	bf42      	ittt	mi
 8006ddc:	6833      	ldrmi	r3, [r6, #0]
 8006dde:	3302      	addmi	r3, #2
 8006de0:	6033      	strmi	r3, [r6, #0]
 8006de2:	6825      	ldr	r5, [r4, #0]
 8006de4:	f015 0506 	ands.w	r5, r5, #6
 8006de8:	d106      	bne.n	8006df8 <_printf_common+0x48>
 8006dea:	f104 0a19 	add.w	sl, r4, #25
 8006dee:	68e3      	ldr	r3, [r4, #12]
 8006df0:	6832      	ldr	r2, [r6, #0]
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	42ab      	cmp	r3, r5
 8006df6:	dc26      	bgt.n	8006e46 <_printf_common+0x96>
 8006df8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dfc:	1e13      	subs	r3, r2, #0
 8006dfe:	6822      	ldr	r2, [r4, #0]
 8006e00:	bf18      	it	ne
 8006e02:	2301      	movne	r3, #1
 8006e04:	0692      	lsls	r2, r2, #26
 8006e06:	d42b      	bmi.n	8006e60 <_printf_common+0xb0>
 8006e08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	4638      	mov	r0, r7
 8006e10:	47c0      	blx	r8
 8006e12:	3001      	adds	r0, #1
 8006e14:	d01e      	beq.n	8006e54 <_printf_common+0xa4>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	6922      	ldr	r2, [r4, #16]
 8006e1a:	f003 0306 	and.w	r3, r3, #6
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	bf02      	ittt	eq
 8006e22:	68e5      	ldreq	r5, [r4, #12]
 8006e24:	6833      	ldreq	r3, [r6, #0]
 8006e26:	1aed      	subeq	r5, r5, r3
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	bf0c      	ite	eq
 8006e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e30:	2500      	movne	r5, #0
 8006e32:	4293      	cmp	r3, r2
 8006e34:	bfc4      	itt	gt
 8006e36:	1a9b      	subgt	r3, r3, r2
 8006e38:	18ed      	addgt	r5, r5, r3
 8006e3a:	2600      	movs	r6, #0
 8006e3c:	341a      	adds	r4, #26
 8006e3e:	42b5      	cmp	r5, r6
 8006e40:	d11a      	bne.n	8006e78 <_printf_common+0xc8>
 8006e42:	2000      	movs	r0, #0
 8006e44:	e008      	b.n	8006e58 <_printf_common+0xa8>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4652      	mov	r2, sl
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	47c0      	blx	r8
 8006e50:	3001      	adds	r0, #1
 8006e52:	d103      	bne.n	8006e5c <_printf_common+0xac>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	e7c6      	b.n	8006dee <_printf_common+0x3e>
 8006e60:	18e1      	adds	r1, r4, r3
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	2030      	movs	r0, #48	; 0x30
 8006e66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e6a:	4422      	add	r2, r4
 8006e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e74:	3302      	adds	r3, #2
 8006e76:	e7c7      	b.n	8006e08 <_printf_common+0x58>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	4638      	mov	r0, r7
 8006e80:	47c0      	blx	r8
 8006e82:	3001      	adds	r0, #1
 8006e84:	d0e6      	beq.n	8006e54 <_printf_common+0xa4>
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7d9      	b.n	8006e3e <_printf_common+0x8e>
	...

08006e8c <_printf_i>:
 8006e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e90:	7e0f      	ldrb	r7, [r1, #24]
 8006e92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e94:	2f78      	cmp	r7, #120	; 0x78
 8006e96:	4691      	mov	r9, r2
 8006e98:	4680      	mov	r8, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	469a      	mov	sl, r3
 8006e9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ea2:	d807      	bhi.n	8006eb4 <_printf_i+0x28>
 8006ea4:	2f62      	cmp	r7, #98	; 0x62
 8006ea6:	d80a      	bhi.n	8006ebe <_printf_i+0x32>
 8006ea8:	2f00      	cmp	r7, #0
 8006eaa:	f000 80d4 	beq.w	8007056 <_printf_i+0x1ca>
 8006eae:	2f58      	cmp	r7, #88	; 0x58
 8006eb0:	f000 80c0 	beq.w	8007034 <_printf_i+0x1a8>
 8006eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ebc:	e03a      	b.n	8006f34 <_printf_i+0xa8>
 8006ebe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006ec2:	2b15      	cmp	r3, #21
 8006ec4:	d8f6      	bhi.n	8006eb4 <_printf_i+0x28>
 8006ec6:	a101      	add	r1, pc, #4	; (adr r1, 8006ecc <_printf_i+0x40>)
 8006ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ecc:	08006f25 	.word	0x08006f25
 8006ed0:	08006f39 	.word	0x08006f39
 8006ed4:	08006eb5 	.word	0x08006eb5
 8006ed8:	08006eb5 	.word	0x08006eb5
 8006edc:	08006eb5 	.word	0x08006eb5
 8006ee0:	08006eb5 	.word	0x08006eb5
 8006ee4:	08006f39 	.word	0x08006f39
 8006ee8:	08006eb5 	.word	0x08006eb5
 8006eec:	08006eb5 	.word	0x08006eb5
 8006ef0:	08006eb5 	.word	0x08006eb5
 8006ef4:	08006eb5 	.word	0x08006eb5
 8006ef8:	0800703d 	.word	0x0800703d
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006ff7 	.word	0x08006ff7
 8006f04:	08006eb5 	.word	0x08006eb5
 8006f08:	08006eb5 	.word	0x08006eb5
 8006f0c:	0800705f 	.word	0x0800705f
 8006f10:	08006eb5 	.word	0x08006eb5
 8006f14:	08006f65 	.word	0x08006f65
 8006f18:	08006eb5 	.word	0x08006eb5
 8006f1c:	08006eb5 	.word	0x08006eb5
 8006f20:	08006fff 	.word	0x08006fff
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	1d1a      	adds	r2, r3, #4
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	602a      	str	r2, [r5, #0]
 8006f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f34:	2301      	movs	r3, #1
 8006f36:	e09f      	b.n	8007078 <_printf_i+0x1ec>
 8006f38:	6820      	ldr	r0, [r4, #0]
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	0607      	lsls	r7, r0, #24
 8006f3e:	f103 0104 	add.w	r1, r3, #4
 8006f42:	6029      	str	r1, [r5, #0]
 8006f44:	d501      	bpl.n	8006f4a <_printf_i+0xbe>
 8006f46:	681e      	ldr	r6, [r3, #0]
 8006f48:	e003      	b.n	8006f52 <_printf_i+0xc6>
 8006f4a:	0646      	lsls	r6, r0, #25
 8006f4c:	d5fb      	bpl.n	8006f46 <_printf_i+0xba>
 8006f4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	da03      	bge.n	8006f5e <_printf_i+0xd2>
 8006f56:	232d      	movs	r3, #45	; 0x2d
 8006f58:	4276      	negs	r6, r6
 8006f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5e:	485a      	ldr	r0, [pc, #360]	; (80070c8 <_printf_i+0x23c>)
 8006f60:	230a      	movs	r3, #10
 8006f62:	e012      	b.n	8006f8a <_printf_i+0xfe>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	6820      	ldr	r0, [r4, #0]
 8006f68:	1d19      	adds	r1, r3, #4
 8006f6a:	6029      	str	r1, [r5, #0]
 8006f6c:	0605      	lsls	r5, r0, #24
 8006f6e:	d501      	bpl.n	8006f74 <_printf_i+0xe8>
 8006f70:	681e      	ldr	r6, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <_printf_i+0xee>
 8006f74:	0641      	lsls	r1, r0, #25
 8006f76:	d5fb      	bpl.n	8006f70 <_printf_i+0xe4>
 8006f78:	881e      	ldrh	r6, [r3, #0]
 8006f7a:	4853      	ldr	r0, [pc, #332]	; (80070c8 <_printf_i+0x23c>)
 8006f7c:	2f6f      	cmp	r7, #111	; 0x6f
 8006f7e:	bf0c      	ite	eq
 8006f80:	2308      	moveq	r3, #8
 8006f82:	230a      	movne	r3, #10
 8006f84:	2100      	movs	r1, #0
 8006f86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f8a:	6865      	ldr	r5, [r4, #4]
 8006f8c:	60a5      	str	r5, [r4, #8]
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	bfa2      	ittt	ge
 8006f92:	6821      	ldrge	r1, [r4, #0]
 8006f94:	f021 0104 	bicge.w	r1, r1, #4
 8006f98:	6021      	strge	r1, [r4, #0]
 8006f9a:	b90e      	cbnz	r6, 8006fa0 <_printf_i+0x114>
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	d04b      	beq.n	8007038 <_printf_i+0x1ac>
 8006fa0:	4615      	mov	r5, r2
 8006fa2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fa6:	fb03 6711 	mls	r7, r3, r1, r6
 8006faa:	5dc7      	ldrb	r7, [r0, r7]
 8006fac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fb0:	4637      	mov	r7, r6
 8006fb2:	42bb      	cmp	r3, r7
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	d9f4      	bls.n	8006fa2 <_printf_i+0x116>
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d10b      	bne.n	8006fd4 <_printf_i+0x148>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	07de      	lsls	r6, r3, #31
 8006fc0:	d508      	bpl.n	8006fd4 <_printf_i+0x148>
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	6861      	ldr	r1, [r4, #4]
 8006fc6:	4299      	cmp	r1, r3
 8006fc8:	bfde      	ittt	le
 8006fca:	2330      	movle	r3, #48	; 0x30
 8006fcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006fd4:	1b52      	subs	r2, r2, r5
 8006fd6:	6122      	str	r2, [r4, #16]
 8006fd8:	f8cd a000 	str.w	sl, [sp]
 8006fdc:	464b      	mov	r3, r9
 8006fde:	aa03      	add	r2, sp, #12
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	f7ff fee4 	bl	8006db0 <_printf_common>
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d14a      	bne.n	8007082 <_printf_i+0x1f6>
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff0:	b004      	add	sp, #16
 8006ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f043 0320 	orr.w	r3, r3, #32
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	4833      	ldr	r0, [pc, #204]	; (80070cc <_printf_i+0x240>)
 8007000:	2778      	movs	r7, #120	; 0x78
 8007002:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	6829      	ldr	r1, [r5, #0]
 800700a:	061f      	lsls	r7, r3, #24
 800700c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007010:	d402      	bmi.n	8007018 <_printf_i+0x18c>
 8007012:	065f      	lsls	r7, r3, #25
 8007014:	bf48      	it	mi
 8007016:	b2b6      	uxthmi	r6, r6
 8007018:	07df      	lsls	r7, r3, #31
 800701a:	bf48      	it	mi
 800701c:	f043 0320 	orrmi.w	r3, r3, #32
 8007020:	6029      	str	r1, [r5, #0]
 8007022:	bf48      	it	mi
 8007024:	6023      	strmi	r3, [r4, #0]
 8007026:	b91e      	cbnz	r6, 8007030 <_printf_i+0x1a4>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	f023 0320 	bic.w	r3, r3, #32
 800702e:	6023      	str	r3, [r4, #0]
 8007030:	2310      	movs	r3, #16
 8007032:	e7a7      	b.n	8006f84 <_printf_i+0xf8>
 8007034:	4824      	ldr	r0, [pc, #144]	; (80070c8 <_printf_i+0x23c>)
 8007036:	e7e4      	b.n	8007002 <_printf_i+0x176>
 8007038:	4615      	mov	r5, r2
 800703a:	e7bd      	b.n	8006fb8 <_printf_i+0x12c>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	6826      	ldr	r6, [r4, #0]
 8007040:	6961      	ldr	r1, [r4, #20]
 8007042:	1d18      	adds	r0, r3, #4
 8007044:	6028      	str	r0, [r5, #0]
 8007046:	0635      	lsls	r5, r6, #24
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	d501      	bpl.n	8007050 <_printf_i+0x1c4>
 800704c:	6019      	str	r1, [r3, #0]
 800704e:	e002      	b.n	8007056 <_printf_i+0x1ca>
 8007050:	0670      	lsls	r0, r6, #25
 8007052:	d5fb      	bpl.n	800704c <_printf_i+0x1c0>
 8007054:	8019      	strh	r1, [r3, #0]
 8007056:	2300      	movs	r3, #0
 8007058:	6123      	str	r3, [r4, #16]
 800705a:	4615      	mov	r5, r2
 800705c:	e7bc      	b.n	8006fd8 <_printf_i+0x14c>
 800705e:	682b      	ldr	r3, [r5, #0]
 8007060:	1d1a      	adds	r2, r3, #4
 8007062:	602a      	str	r2, [r5, #0]
 8007064:	681d      	ldr	r5, [r3, #0]
 8007066:	6862      	ldr	r2, [r4, #4]
 8007068:	2100      	movs	r1, #0
 800706a:	4628      	mov	r0, r5
 800706c:	f7f9 f8d0 	bl	8000210 <memchr>
 8007070:	b108      	cbz	r0, 8007076 <_printf_i+0x1ea>
 8007072:	1b40      	subs	r0, r0, r5
 8007074:	6060      	str	r0, [r4, #4]
 8007076:	6863      	ldr	r3, [r4, #4]
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	2300      	movs	r3, #0
 800707c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007080:	e7aa      	b.n	8006fd8 <_printf_i+0x14c>
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	462a      	mov	r2, r5
 8007086:	4649      	mov	r1, r9
 8007088:	4640      	mov	r0, r8
 800708a:	47d0      	blx	sl
 800708c:	3001      	adds	r0, #1
 800708e:	d0ad      	beq.n	8006fec <_printf_i+0x160>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	079b      	lsls	r3, r3, #30
 8007094:	d413      	bmi.n	80070be <_printf_i+0x232>
 8007096:	68e0      	ldr	r0, [r4, #12]
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	4298      	cmp	r0, r3
 800709c:	bfb8      	it	lt
 800709e:	4618      	movlt	r0, r3
 80070a0:	e7a6      	b.n	8006ff0 <_printf_i+0x164>
 80070a2:	2301      	movs	r3, #1
 80070a4:	4632      	mov	r2, r6
 80070a6:	4649      	mov	r1, r9
 80070a8:	4640      	mov	r0, r8
 80070aa:	47d0      	blx	sl
 80070ac:	3001      	adds	r0, #1
 80070ae:	d09d      	beq.n	8006fec <_printf_i+0x160>
 80070b0:	3501      	adds	r5, #1
 80070b2:	68e3      	ldr	r3, [r4, #12]
 80070b4:	9903      	ldr	r1, [sp, #12]
 80070b6:	1a5b      	subs	r3, r3, r1
 80070b8:	42ab      	cmp	r3, r5
 80070ba:	dcf2      	bgt.n	80070a2 <_printf_i+0x216>
 80070bc:	e7eb      	b.n	8007096 <_printf_i+0x20a>
 80070be:	2500      	movs	r5, #0
 80070c0:	f104 0619 	add.w	r6, r4, #25
 80070c4:	e7f5      	b.n	80070b2 <_printf_i+0x226>
 80070c6:	bf00      	nop
 80070c8:	0800c62a 	.word	0x0800c62a
 80070cc:	0800c63b 	.word	0x0800c63b

080070d0 <_scanf_float>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	b087      	sub	sp, #28
 80070d6:	4617      	mov	r7, r2
 80070d8:	9303      	str	r3, [sp, #12]
 80070da:	688b      	ldr	r3, [r1, #8]
 80070dc:	1e5a      	subs	r2, r3, #1
 80070de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80070e2:	bf83      	ittte	hi
 80070e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80070e8:	195b      	addhi	r3, r3, r5
 80070ea:	9302      	strhi	r3, [sp, #8]
 80070ec:	2300      	movls	r3, #0
 80070ee:	bf86      	itte	hi
 80070f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80070f4:	608b      	strhi	r3, [r1, #8]
 80070f6:	9302      	strls	r3, [sp, #8]
 80070f8:	680b      	ldr	r3, [r1, #0]
 80070fa:	468b      	mov	fp, r1
 80070fc:	2500      	movs	r5, #0
 80070fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007102:	f84b 3b1c 	str.w	r3, [fp], #28
 8007106:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800710a:	4680      	mov	r8, r0
 800710c:	460c      	mov	r4, r1
 800710e:	465e      	mov	r6, fp
 8007110:	46aa      	mov	sl, r5
 8007112:	46a9      	mov	r9, r5
 8007114:	9501      	str	r5, [sp, #4]
 8007116:	68a2      	ldr	r2, [r4, #8]
 8007118:	b152      	cbz	r2, 8007130 <_scanf_float+0x60>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b4e      	cmp	r3, #78	; 0x4e
 8007120:	d864      	bhi.n	80071ec <_scanf_float+0x11c>
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d83c      	bhi.n	80071a0 <_scanf_float+0xd0>
 8007126:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800712a:	b2c8      	uxtb	r0, r1
 800712c:	280e      	cmp	r0, #14
 800712e:	d93a      	bls.n	80071a6 <_scanf_float+0xd6>
 8007130:	f1b9 0f00 	cmp.w	r9, #0
 8007134:	d003      	beq.n	800713e <_scanf_float+0x6e>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800713c:	6023      	str	r3, [r4, #0]
 800713e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007142:	f1ba 0f01 	cmp.w	sl, #1
 8007146:	f200 8113 	bhi.w	8007370 <_scanf_float+0x2a0>
 800714a:	455e      	cmp	r6, fp
 800714c:	f200 8105 	bhi.w	800735a <_scanf_float+0x28a>
 8007150:	2501      	movs	r5, #1
 8007152:	4628      	mov	r0, r5
 8007154:	b007      	add	sp, #28
 8007156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800715e:	2a0d      	cmp	r2, #13
 8007160:	d8e6      	bhi.n	8007130 <_scanf_float+0x60>
 8007162:	a101      	add	r1, pc, #4	; (adr r1, 8007168 <_scanf_float+0x98>)
 8007164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007168:	080072a7 	.word	0x080072a7
 800716c:	08007131 	.word	0x08007131
 8007170:	08007131 	.word	0x08007131
 8007174:	08007131 	.word	0x08007131
 8007178:	08007307 	.word	0x08007307
 800717c:	080072df 	.word	0x080072df
 8007180:	08007131 	.word	0x08007131
 8007184:	08007131 	.word	0x08007131
 8007188:	080072b5 	.word	0x080072b5
 800718c:	08007131 	.word	0x08007131
 8007190:	08007131 	.word	0x08007131
 8007194:	08007131 	.word	0x08007131
 8007198:	08007131 	.word	0x08007131
 800719c:	0800726d 	.word	0x0800726d
 80071a0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80071a4:	e7db      	b.n	800715e <_scanf_float+0x8e>
 80071a6:	290e      	cmp	r1, #14
 80071a8:	d8c2      	bhi.n	8007130 <_scanf_float+0x60>
 80071aa:	a001      	add	r0, pc, #4	; (adr r0, 80071b0 <_scanf_float+0xe0>)
 80071ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071b0:	0800725f 	.word	0x0800725f
 80071b4:	08007131 	.word	0x08007131
 80071b8:	0800725f 	.word	0x0800725f
 80071bc:	080072f3 	.word	0x080072f3
 80071c0:	08007131 	.word	0x08007131
 80071c4:	0800720d 	.word	0x0800720d
 80071c8:	08007249 	.word	0x08007249
 80071cc:	08007249 	.word	0x08007249
 80071d0:	08007249 	.word	0x08007249
 80071d4:	08007249 	.word	0x08007249
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007249 	.word	0x08007249
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007249 	.word	0x08007249
 80071ec:	2b6e      	cmp	r3, #110	; 0x6e
 80071ee:	d809      	bhi.n	8007204 <_scanf_float+0x134>
 80071f0:	2b60      	cmp	r3, #96	; 0x60
 80071f2:	d8b2      	bhi.n	800715a <_scanf_float+0x8a>
 80071f4:	2b54      	cmp	r3, #84	; 0x54
 80071f6:	d077      	beq.n	80072e8 <_scanf_float+0x218>
 80071f8:	2b59      	cmp	r3, #89	; 0x59
 80071fa:	d199      	bne.n	8007130 <_scanf_float+0x60>
 80071fc:	2d07      	cmp	r5, #7
 80071fe:	d197      	bne.n	8007130 <_scanf_float+0x60>
 8007200:	2508      	movs	r5, #8
 8007202:	e029      	b.n	8007258 <_scanf_float+0x188>
 8007204:	2b74      	cmp	r3, #116	; 0x74
 8007206:	d06f      	beq.n	80072e8 <_scanf_float+0x218>
 8007208:	2b79      	cmp	r3, #121	; 0x79
 800720a:	e7f6      	b.n	80071fa <_scanf_float+0x12a>
 800720c:	6821      	ldr	r1, [r4, #0]
 800720e:	05c8      	lsls	r0, r1, #23
 8007210:	d51a      	bpl.n	8007248 <_scanf_float+0x178>
 8007212:	9b02      	ldr	r3, [sp, #8]
 8007214:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007218:	6021      	str	r1, [r4, #0]
 800721a:	f109 0901 	add.w	r9, r9, #1
 800721e:	b11b      	cbz	r3, 8007228 <_scanf_float+0x158>
 8007220:	3b01      	subs	r3, #1
 8007222:	3201      	adds	r2, #1
 8007224:	9302      	str	r3, [sp, #8]
 8007226:	60a2      	str	r2, [r4, #8]
 8007228:	68a3      	ldr	r3, [r4, #8]
 800722a:	3b01      	subs	r3, #1
 800722c:	60a3      	str	r3, [r4, #8]
 800722e:	6923      	ldr	r3, [r4, #16]
 8007230:	3301      	adds	r3, #1
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	3b01      	subs	r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	f340 8084 	ble.w	8007348 <_scanf_float+0x278>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	3301      	adds	r3, #1
 8007244:	603b      	str	r3, [r7, #0]
 8007246:	e766      	b.n	8007116 <_scanf_float+0x46>
 8007248:	eb1a 0f05 	cmn.w	sl, r5
 800724c:	f47f af70 	bne.w	8007130 <_scanf_float+0x60>
 8007250:	6822      	ldr	r2, [r4, #0]
 8007252:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007256:	6022      	str	r2, [r4, #0]
 8007258:	f806 3b01 	strb.w	r3, [r6], #1
 800725c:	e7e4      	b.n	8007228 <_scanf_float+0x158>
 800725e:	6822      	ldr	r2, [r4, #0]
 8007260:	0610      	lsls	r0, r2, #24
 8007262:	f57f af65 	bpl.w	8007130 <_scanf_float+0x60>
 8007266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800726a:	e7f4      	b.n	8007256 <_scanf_float+0x186>
 800726c:	f1ba 0f00 	cmp.w	sl, #0
 8007270:	d10e      	bne.n	8007290 <_scanf_float+0x1c0>
 8007272:	f1b9 0f00 	cmp.w	r9, #0
 8007276:	d10e      	bne.n	8007296 <_scanf_float+0x1c6>
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800727e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007282:	d108      	bne.n	8007296 <_scanf_float+0x1c6>
 8007284:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007288:	6022      	str	r2, [r4, #0]
 800728a:	f04f 0a01 	mov.w	sl, #1
 800728e:	e7e3      	b.n	8007258 <_scanf_float+0x188>
 8007290:	f1ba 0f02 	cmp.w	sl, #2
 8007294:	d055      	beq.n	8007342 <_scanf_float+0x272>
 8007296:	2d01      	cmp	r5, #1
 8007298:	d002      	beq.n	80072a0 <_scanf_float+0x1d0>
 800729a:	2d04      	cmp	r5, #4
 800729c:	f47f af48 	bne.w	8007130 <_scanf_float+0x60>
 80072a0:	3501      	adds	r5, #1
 80072a2:	b2ed      	uxtb	r5, r5
 80072a4:	e7d8      	b.n	8007258 <_scanf_float+0x188>
 80072a6:	f1ba 0f01 	cmp.w	sl, #1
 80072aa:	f47f af41 	bne.w	8007130 <_scanf_float+0x60>
 80072ae:	f04f 0a02 	mov.w	sl, #2
 80072b2:	e7d1      	b.n	8007258 <_scanf_float+0x188>
 80072b4:	b97d      	cbnz	r5, 80072d6 <_scanf_float+0x206>
 80072b6:	f1b9 0f00 	cmp.w	r9, #0
 80072ba:	f47f af3c 	bne.w	8007136 <_scanf_float+0x66>
 80072be:	6822      	ldr	r2, [r4, #0]
 80072c0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072c4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072c8:	f47f af39 	bne.w	800713e <_scanf_float+0x6e>
 80072cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072d0:	6022      	str	r2, [r4, #0]
 80072d2:	2501      	movs	r5, #1
 80072d4:	e7c0      	b.n	8007258 <_scanf_float+0x188>
 80072d6:	2d03      	cmp	r5, #3
 80072d8:	d0e2      	beq.n	80072a0 <_scanf_float+0x1d0>
 80072da:	2d05      	cmp	r5, #5
 80072dc:	e7de      	b.n	800729c <_scanf_float+0x1cc>
 80072de:	2d02      	cmp	r5, #2
 80072e0:	f47f af26 	bne.w	8007130 <_scanf_float+0x60>
 80072e4:	2503      	movs	r5, #3
 80072e6:	e7b7      	b.n	8007258 <_scanf_float+0x188>
 80072e8:	2d06      	cmp	r5, #6
 80072ea:	f47f af21 	bne.w	8007130 <_scanf_float+0x60>
 80072ee:	2507      	movs	r5, #7
 80072f0:	e7b2      	b.n	8007258 <_scanf_float+0x188>
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	0591      	lsls	r1, r2, #22
 80072f6:	f57f af1b 	bpl.w	8007130 <_scanf_float+0x60>
 80072fa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80072fe:	6022      	str	r2, [r4, #0]
 8007300:	f8cd 9004 	str.w	r9, [sp, #4]
 8007304:	e7a8      	b.n	8007258 <_scanf_float+0x188>
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800730c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007310:	d006      	beq.n	8007320 <_scanf_float+0x250>
 8007312:	0550      	lsls	r0, r2, #21
 8007314:	f57f af0c 	bpl.w	8007130 <_scanf_float+0x60>
 8007318:	f1b9 0f00 	cmp.w	r9, #0
 800731c:	f43f af0f 	beq.w	800713e <_scanf_float+0x6e>
 8007320:	0591      	lsls	r1, r2, #22
 8007322:	bf58      	it	pl
 8007324:	9901      	ldrpl	r1, [sp, #4]
 8007326:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800732a:	bf58      	it	pl
 800732c:	eba9 0101 	subpl.w	r1, r9, r1
 8007330:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007334:	bf58      	it	pl
 8007336:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800733a:	6022      	str	r2, [r4, #0]
 800733c:	f04f 0900 	mov.w	r9, #0
 8007340:	e78a      	b.n	8007258 <_scanf_float+0x188>
 8007342:	f04f 0a03 	mov.w	sl, #3
 8007346:	e787      	b.n	8007258 <_scanf_float+0x188>
 8007348:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800734c:	4639      	mov	r1, r7
 800734e:	4640      	mov	r0, r8
 8007350:	4798      	blx	r3
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f aedf 	beq.w	8007116 <_scanf_float+0x46>
 8007358:	e6ea      	b.n	8007130 <_scanf_float+0x60>
 800735a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800735e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007362:	463a      	mov	r2, r7
 8007364:	4640      	mov	r0, r8
 8007366:	4798      	blx	r3
 8007368:	6923      	ldr	r3, [r4, #16]
 800736a:	3b01      	subs	r3, #1
 800736c:	6123      	str	r3, [r4, #16]
 800736e:	e6ec      	b.n	800714a <_scanf_float+0x7a>
 8007370:	1e6b      	subs	r3, r5, #1
 8007372:	2b06      	cmp	r3, #6
 8007374:	d825      	bhi.n	80073c2 <_scanf_float+0x2f2>
 8007376:	2d02      	cmp	r5, #2
 8007378:	d836      	bhi.n	80073e8 <_scanf_float+0x318>
 800737a:	455e      	cmp	r6, fp
 800737c:	f67f aee8 	bls.w	8007150 <_scanf_float+0x80>
 8007380:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007384:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007388:	463a      	mov	r2, r7
 800738a:	4640      	mov	r0, r8
 800738c:	4798      	blx	r3
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	3b01      	subs	r3, #1
 8007392:	6123      	str	r3, [r4, #16]
 8007394:	e7f1      	b.n	800737a <_scanf_float+0x2aa>
 8007396:	9802      	ldr	r0, [sp, #8]
 8007398:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800739c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80073a0:	9002      	str	r0, [sp, #8]
 80073a2:	463a      	mov	r2, r7
 80073a4:	4640      	mov	r0, r8
 80073a6:	4798      	blx	r3
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	6123      	str	r3, [r4, #16]
 80073ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80073b2:	fa5f fa8a 	uxtb.w	sl, sl
 80073b6:	f1ba 0f02 	cmp.w	sl, #2
 80073ba:	d1ec      	bne.n	8007396 <_scanf_float+0x2c6>
 80073bc:	3d03      	subs	r5, #3
 80073be:	b2ed      	uxtb	r5, r5
 80073c0:	1b76      	subs	r6, r6, r5
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	05da      	lsls	r2, r3, #23
 80073c6:	d52f      	bpl.n	8007428 <_scanf_float+0x358>
 80073c8:	055b      	lsls	r3, r3, #21
 80073ca:	d510      	bpl.n	80073ee <_scanf_float+0x31e>
 80073cc:	455e      	cmp	r6, fp
 80073ce:	f67f aebf 	bls.w	8007150 <_scanf_float+0x80>
 80073d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073da:	463a      	mov	r2, r7
 80073dc:	4640      	mov	r0, r8
 80073de:	4798      	blx	r3
 80073e0:	6923      	ldr	r3, [r4, #16]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	6123      	str	r3, [r4, #16]
 80073e6:	e7f1      	b.n	80073cc <_scanf_float+0x2fc>
 80073e8:	46aa      	mov	sl, r5
 80073ea:	9602      	str	r6, [sp, #8]
 80073ec:	e7df      	b.n	80073ae <_scanf_float+0x2de>
 80073ee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	2965      	cmp	r1, #101	; 0x65
 80073f6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80073fa:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80073fe:	6123      	str	r3, [r4, #16]
 8007400:	d00c      	beq.n	800741c <_scanf_float+0x34c>
 8007402:	2945      	cmp	r1, #69	; 0x45
 8007404:	d00a      	beq.n	800741c <_scanf_float+0x34c>
 8007406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800740a:	463a      	mov	r2, r7
 800740c:	4640      	mov	r0, r8
 800740e:	4798      	blx	r3
 8007410:	6923      	ldr	r3, [r4, #16]
 8007412:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007416:	3b01      	subs	r3, #1
 8007418:	1eb5      	subs	r5, r6, #2
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007420:	463a      	mov	r2, r7
 8007422:	4640      	mov	r0, r8
 8007424:	4798      	blx	r3
 8007426:	462e      	mov	r6, r5
 8007428:	6825      	ldr	r5, [r4, #0]
 800742a:	f015 0510 	ands.w	r5, r5, #16
 800742e:	d158      	bne.n	80074e2 <_scanf_float+0x412>
 8007430:	7035      	strb	r5, [r6, #0]
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743c:	d11c      	bne.n	8007478 <_scanf_float+0x3a8>
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	454b      	cmp	r3, r9
 8007442:	eba3 0209 	sub.w	r2, r3, r9
 8007446:	d124      	bne.n	8007492 <_scanf_float+0x3c2>
 8007448:	2200      	movs	r2, #0
 800744a:	4659      	mov	r1, fp
 800744c:	4640      	mov	r0, r8
 800744e:	f000 ff1f 	bl	8008290 <_strtod_r>
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	6821      	ldr	r1, [r4, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f011 0f02 	tst.w	r1, #2
 800745c:	ec57 6b10 	vmov	r6, r7, d0
 8007460:	f103 0204 	add.w	r2, r3, #4
 8007464:	d020      	beq.n	80074a8 <_scanf_float+0x3d8>
 8007466:	9903      	ldr	r1, [sp, #12]
 8007468:	600a      	str	r2, [r1, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	e9c3 6700 	strd	r6, r7, [r3]
 8007470:	68e3      	ldr	r3, [r4, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	60e3      	str	r3, [r4, #12]
 8007476:	e66c      	b.n	8007152 <_scanf_float+0x82>
 8007478:	9b04      	ldr	r3, [sp, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0e4      	beq.n	8007448 <_scanf_float+0x378>
 800747e:	9905      	ldr	r1, [sp, #20]
 8007480:	230a      	movs	r3, #10
 8007482:	462a      	mov	r2, r5
 8007484:	3101      	adds	r1, #1
 8007486:	4640      	mov	r0, r8
 8007488:	f000 ff8a 	bl	80083a0 <_strtol_r>
 800748c:	9b04      	ldr	r3, [sp, #16]
 800748e:	9e05      	ldr	r6, [sp, #20]
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007496:	429e      	cmp	r6, r3
 8007498:	bf28      	it	cs
 800749a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800749e:	4912      	ldr	r1, [pc, #72]	; (80074e8 <_scanf_float+0x418>)
 80074a0:	4630      	mov	r0, r6
 80074a2:	f000 f825 	bl	80074f0 <siprintf>
 80074a6:	e7cf      	b.n	8007448 <_scanf_float+0x378>
 80074a8:	f011 0f04 	tst.w	r1, #4
 80074ac:	9903      	ldr	r1, [sp, #12]
 80074ae:	600a      	str	r2, [r1, #0]
 80074b0:	d1db      	bne.n	800746a <_scanf_float+0x39a>
 80074b2:	f8d3 8000 	ldr.w	r8, [r3]
 80074b6:	ee10 2a10 	vmov	r2, s0
 80074ba:	ee10 0a10 	vmov	r0, s0
 80074be:	463b      	mov	r3, r7
 80074c0:	4639      	mov	r1, r7
 80074c2:	f7f9 fb5d 	bl	8000b80 <__aeabi_dcmpun>
 80074c6:	b128      	cbz	r0, 80074d4 <_scanf_float+0x404>
 80074c8:	4808      	ldr	r0, [pc, #32]	; (80074ec <_scanf_float+0x41c>)
 80074ca:	f001 f825 	bl	8008518 <nanf>
 80074ce:	ed88 0a00 	vstr	s0, [r8]
 80074d2:	e7cd      	b.n	8007470 <_scanf_float+0x3a0>
 80074d4:	4630      	mov	r0, r6
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 fbb0 	bl	8000c3c <__aeabi_d2f>
 80074dc:	f8c8 0000 	str.w	r0, [r8]
 80074e0:	e7c6      	b.n	8007470 <_scanf_float+0x3a0>
 80074e2:	2500      	movs	r5, #0
 80074e4:	e635      	b.n	8007152 <_scanf_float+0x82>
 80074e6:	bf00      	nop
 80074e8:	0800c64c 	.word	0x0800c64c
 80074ec:	0800ca3f 	.word	0x0800ca3f

080074f0 <siprintf>:
 80074f0:	b40e      	push	{r1, r2, r3}
 80074f2:	b500      	push	{lr}
 80074f4:	b09c      	sub	sp, #112	; 0x70
 80074f6:	ab1d      	add	r3, sp, #116	; 0x74
 80074f8:	9002      	str	r0, [sp, #8]
 80074fa:	9006      	str	r0, [sp, #24]
 80074fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007500:	4809      	ldr	r0, [pc, #36]	; (8007528 <siprintf+0x38>)
 8007502:	9107      	str	r1, [sp, #28]
 8007504:	9104      	str	r1, [sp, #16]
 8007506:	4909      	ldr	r1, [pc, #36]	; (800752c <siprintf+0x3c>)
 8007508:	f853 2b04 	ldr.w	r2, [r3], #4
 800750c:	9105      	str	r1, [sp, #20]
 800750e:	6800      	ldr	r0, [r0, #0]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	a902      	add	r1, sp, #8
 8007514:	f002 fa34 	bl	8009980 <_svfiprintf_r>
 8007518:	9b02      	ldr	r3, [sp, #8]
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	b01c      	add	sp, #112	; 0x70
 8007520:	f85d eb04 	ldr.w	lr, [sp], #4
 8007524:	b003      	add	sp, #12
 8007526:	4770      	bx	lr
 8007528:	20000204 	.word	0x20000204
 800752c:	ffff0208 	.word	0xffff0208

08007530 <std>:
 8007530:	2300      	movs	r3, #0
 8007532:	b510      	push	{r4, lr}
 8007534:	4604      	mov	r4, r0
 8007536:	e9c0 3300 	strd	r3, r3, [r0]
 800753a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800753e:	6083      	str	r3, [r0, #8]
 8007540:	8181      	strh	r1, [r0, #12]
 8007542:	6643      	str	r3, [r0, #100]	; 0x64
 8007544:	81c2      	strh	r2, [r0, #14]
 8007546:	6183      	str	r3, [r0, #24]
 8007548:	4619      	mov	r1, r3
 800754a:	2208      	movs	r2, #8
 800754c:	305c      	adds	r0, #92	; 0x5c
 800754e:	f000 ff93 	bl	8008478 <memset>
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <std+0x58>)
 8007554:	6263      	str	r3, [r4, #36]	; 0x24
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <std+0x5c>)
 8007558:	62a3      	str	r3, [r4, #40]	; 0x28
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <std+0x60>)
 800755c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800755e:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <std+0x64>)
 8007560:	6323      	str	r3, [r4, #48]	; 0x30
 8007562:	4b0d      	ldr	r3, [pc, #52]	; (8007598 <std+0x68>)
 8007564:	6224      	str	r4, [r4, #32]
 8007566:	429c      	cmp	r4, r3
 8007568:	d006      	beq.n	8007578 <std+0x48>
 800756a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800756e:	4294      	cmp	r4, r2
 8007570:	d002      	beq.n	8007578 <std+0x48>
 8007572:	33d0      	adds	r3, #208	; 0xd0
 8007574:	429c      	cmp	r4, r3
 8007576:	d105      	bne.n	8007584 <std+0x54>
 8007578:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007580:	f000 bfb0 	b.w	80084e4 <__retarget_lock_init_recursive>
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	0800a7bf 	.word	0x0800a7bf
 800758c:	0800a7e1 	.word	0x0800a7e1
 8007590:	0800a819 	.word	0x0800a819
 8007594:	0800a83d 	.word	0x0800a83d
 8007598:	2000a8a4 	.word	0x2000a8a4

0800759c <stdio_exit_handler>:
 800759c:	4a02      	ldr	r2, [pc, #8]	; (80075a8 <stdio_exit_handler+0xc>)
 800759e:	4903      	ldr	r1, [pc, #12]	; (80075ac <stdio_exit_handler+0x10>)
 80075a0:	4803      	ldr	r0, [pc, #12]	; (80075b0 <stdio_exit_handler+0x14>)
 80075a2:	f000 beff 	b.w	80083a4 <_fwalk_sglue>
 80075a6:	bf00      	nop
 80075a8:	20000040 	.word	0x20000040
 80075ac:	08009dfd 	.word	0x08009dfd
 80075b0:	200001b8 	.word	0x200001b8

080075b4 <cleanup_stdio>:
 80075b4:	6841      	ldr	r1, [r0, #4]
 80075b6:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <cleanup_stdio+0x34>)
 80075b8:	4299      	cmp	r1, r3
 80075ba:	b510      	push	{r4, lr}
 80075bc:	4604      	mov	r4, r0
 80075be:	d001      	beq.n	80075c4 <cleanup_stdio+0x10>
 80075c0:	f002 fc1c 	bl	8009dfc <_fflush_r>
 80075c4:	68a1      	ldr	r1, [r4, #8]
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <cleanup_stdio+0x38>)
 80075c8:	4299      	cmp	r1, r3
 80075ca:	d002      	beq.n	80075d2 <cleanup_stdio+0x1e>
 80075cc:	4620      	mov	r0, r4
 80075ce:	f002 fc15 	bl	8009dfc <_fflush_r>
 80075d2:	68e1      	ldr	r1, [r4, #12]
 80075d4:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <cleanup_stdio+0x3c>)
 80075d6:	4299      	cmp	r1, r3
 80075d8:	d004      	beq.n	80075e4 <cleanup_stdio+0x30>
 80075da:	4620      	mov	r0, r4
 80075dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e0:	f002 bc0c 	b.w	8009dfc <_fflush_r>
 80075e4:	bd10      	pop	{r4, pc}
 80075e6:	bf00      	nop
 80075e8:	2000a8a4 	.word	0x2000a8a4
 80075ec:	2000a90c 	.word	0x2000a90c
 80075f0:	2000a974 	.word	0x2000a974

080075f4 <global_stdio_init.part.0>:
 80075f4:	b510      	push	{r4, lr}
 80075f6:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <global_stdio_init.part.0+0x30>)
 80075f8:	4c0b      	ldr	r4, [pc, #44]	; (8007628 <global_stdio_init.part.0+0x34>)
 80075fa:	4a0c      	ldr	r2, [pc, #48]	; (800762c <global_stdio_init.part.0+0x38>)
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	4620      	mov	r0, r4
 8007600:	2200      	movs	r2, #0
 8007602:	2104      	movs	r1, #4
 8007604:	f7ff ff94 	bl	8007530 <std>
 8007608:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800760c:	2201      	movs	r2, #1
 800760e:	2109      	movs	r1, #9
 8007610:	f7ff ff8e 	bl	8007530 <std>
 8007614:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007618:	2202      	movs	r2, #2
 800761a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800761e:	2112      	movs	r1, #18
 8007620:	f7ff bf86 	b.w	8007530 <std>
 8007624:	2000a9dc 	.word	0x2000a9dc
 8007628:	2000a8a4 	.word	0x2000a8a4
 800762c:	0800759d 	.word	0x0800759d

08007630 <__sfp_lock_acquire>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_acquire+0x8>)
 8007632:	f000 bf58 	b.w	80084e6 <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	2000a9e1 	.word	0x2000a9e1

0800763c <__sfp_lock_release>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sfp_lock_release+0x8>)
 800763e:	f000 bf53 	b.w	80084e8 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	2000a9e1 	.word	0x2000a9e1

08007648 <__sinit>:
 8007648:	b510      	push	{r4, lr}
 800764a:	4604      	mov	r4, r0
 800764c:	f7ff fff0 	bl	8007630 <__sfp_lock_acquire>
 8007650:	6a23      	ldr	r3, [r4, #32]
 8007652:	b11b      	cbz	r3, 800765c <__sinit+0x14>
 8007654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007658:	f7ff bff0 	b.w	800763c <__sfp_lock_release>
 800765c:	4b04      	ldr	r3, [pc, #16]	; (8007670 <__sinit+0x28>)
 800765e:	6223      	str	r3, [r4, #32]
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <__sinit+0x2c>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f5      	bne.n	8007654 <__sinit+0xc>
 8007668:	f7ff ffc4 	bl	80075f4 <global_stdio_init.part.0>
 800766c:	e7f2      	b.n	8007654 <__sinit+0xc>
 800766e:	bf00      	nop
 8007670:	080075b5 	.word	0x080075b5
 8007674:	2000a9dc 	.word	0x2000a9dc

08007678 <sulp>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	460d      	mov	r5, r1
 800767e:	ec45 4b10 	vmov	d0, r4, r5
 8007682:	4616      	mov	r6, r2
 8007684:	f002 ff5a 	bl	800a53c <__ulp>
 8007688:	ec51 0b10 	vmov	r0, r1, d0
 800768c:	b17e      	cbz	r6, 80076ae <sulp+0x36>
 800768e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd09      	ble.n	80076ae <sulp+0x36>
 800769a:	051b      	lsls	r3, r3, #20
 800769c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076a0:	2400      	movs	r4, #0
 80076a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	f7f8 ffcf 	bl	800064c <__aeabi_dmul>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}

080076b0 <_strtod_l>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	ed2d 8b02 	vpush	{d8}
 80076b8:	b09b      	sub	sp, #108	; 0x6c
 80076ba:	4604      	mov	r4, r0
 80076bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80076be:	2200      	movs	r2, #0
 80076c0:	9216      	str	r2, [sp, #88]	; 0x58
 80076c2:	460d      	mov	r5, r1
 80076c4:	f04f 0800 	mov.w	r8, #0
 80076c8:	f04f 0900 	mov.w	r9, #0
 80076cc:	460a      	mov	r2, r1
 80076ce:	9215      	str	r2, [sp, #84]	; 0x54
 80076d0:	7811      	ldrb	r1, [r2, #0]
 80076d2:	292b      	cmp	r1, #43	; 0x2b
 80076d4:	d04c      	beq.n	8007770 <_strtod_l+0xc0>
 80076d6:	d83a      	bhi.n	800774e <_strtod_l+0x9e>
 80076d8:	290d      	cmp	r1, #13
 80076da:	d834      	bhi.n	8007746 <_strtod_l+0x96>
 80076dc:	2908      	cmp	r1, #8
 80076de:	d834      	bhi.n	800774a <_strtod_l+0x9a>
 80076e0:	2900      	cmp	r1, #0
 80076e2:	d03d      	beq.n	8007760 <_strtod_l+0xb0>
 80076e4:	2200      	movs	r2, #0
 80076e6:	920a      	str	r2, [sp, #40]	; 0x28
 80076e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80076ea:	7832      	ldrb	r2, [r6, #0]
 80076ec:	2a30      	cmp	r2, #48	; 0x30
 80076ee:	f040 80b4 	bne.w	800785a <_strtod_l+0x1aa>
 80076f2:	7872      	ldrb	r2, [r6, #1]
 80076f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80076f8:	2a58      	cmp	r2, #88	; 0x58
 80076fa:	d170      	bne.n	80077de <_strtod_l+0x12e>
 80076fc:	9302      	str	r3, [sp, #8]
 80076fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007700:	9301      	str	r3, [sp, #4]
 8007702:	ab16      	add	r3, sp, #88	; 0x58
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	4a8e      	ldr	r2, [pc, #568]	; (8007940 <_strtod_l+0x290>)
 8007708:	ab17      	add	r3, sp, #92	; 0x5c
 800770a:	a915      	add	r1, sp, #84	; 0x54
 800770c:	4620      	mov	r0, r4
 800770e:	f001 fded 	bl	80092ec <__gethex>
 8007712:	f010 070f 	ands.w	r7, r0, #15
 8007716:	4605      	mov	r5, r0
 8007718:	d005      	beq.n	8007726 <_strtod_l+0x76>
 800771a:	2f06      	cmp	r7, #6
 800771c:	d12a      	bne.n	8007774 <_strtod_l+0xc4>
 800771e:	3601      	adds	r6, #1
 8007720:	2300      	movs	r3, #0
 8007722:	9615      	str	r6, [sp, #84]	; 0x54
 8007724:	930a      	str	r3, [sp, #40]	; 0x28
 8007726:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007728:	2b00      	cmp	r3, #0
 800772a:	f040 857f 	bne.w	800822c <_strtod_l+0xb7c>
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	b1db      	cbz	r3, 800776a <_strtod_l+0xba>
 8007732:	4642      	mov	r2, r8
 8007734:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007738:	ec43 2b10 	vmov	d0, r2, r3
 800773c:	b01b      	add	sp, #108	; 0x6c
 800773e:	ecbd 8b02 	vpop	{d8}
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	2920      	cmp	r1, #32
 8007748:	d1cc      	bne.n	80076e4 <_strtod_l+0x34>
 800774a:	3201      	adds	r2, #1
 800774c:	e7bf      	b.n	80076ce <_strtod_l+0x1e>
 800774e:	292d      	cmp	r1, #45	; 0x2d
 8007750:	d1c8      	bne.n	80076e4 <_strtod_l+0x34>
 8007752:	2101      	movs	r1, #1
 8007754:	910a      	str	r1, [sp, #40]	; 0x28
 8007756:	1c51      	adds	r1, r2, #1
 8007758:	9115      	str	r1, [sp, #84]	; 0x54
 800775a:	7852      	ldrb	r2, [r2, #1]
 800775c:	2a00      	cmp	r2, #0
 800775e:	d1c3      	bne.n	80076e8 <_strtod_l+0x38>
 8007760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007762:	9515      	str	r5, [sp, #84]	; 0x54
 8007764:	2b00      	cmp	r3, #0
 8007766:	f040 855f 	bne.w	8008228 <_strtod_l+0xb78>
 800776a:	4642      	mov	r2, r8
 800776c:	464b      	mov	r3, r9
 800776e:	e7e3      	b.n	8007738 <_strtod_l+0x88>
 8007770:	2100      	movs	r1, #0
 8007772:	e7ef      	b.n	8007754 <_strtod_l+0xa4>
 8007774:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007776:	b13a      	cbz	r2, 8007788 <_strtod_l+0xd8>
 8007778:	2135      	movs	r1, #53	; 0x35
 800777a:	a818      	add	r0, sp, #96	; 0x60
 800777c:	f002 ffdb 	bl	800a736 <__copybits>
 8007780:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007782:	4620      	mov	r0, r4
 8007784:	f002 fbae 	bl	8009ee4 <_Bfree>
 8007788:	3f01      	subs	r7, #1
 800778a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800778c:	2f04      	cmp	r7, #4
 800778e:	d806      	bhi.n	800779e <_strtod_l+0xee>
 8007790:	e8df f007 	tbb	[pc, r7]
 8007794:	201d0314 	.word	0x201d0314
 8007798:	14          	.byte	0x14
 8007799:	00          	.byte	0x00
 800779a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800779e:	05e9      	lsls	r1, r5, #23
 80077a0:	bf48      	it	mi
 80077a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80077a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077aa:	0d1b      	lsrs	r3, r3, #20
 80077ac:	051b      	lsls	r3, r3, #20
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1b9      	bne.n	8007726 <_strtod_l+0x76>
 80077b2:	f000 fe6d 	bl	8008490 <__errno>
 80077b6:	2322      	movs	r3, #34	; 0x22
 80077b8:	6003      	str	r3, [r0, #0]
 80077ba:	e7b4      	b.n	8007726 <_strtod_l+0x76>
 80077bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80077c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80077c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80077c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80077cc:	e7e7      	b.n	800779e <_strtod_l+0xee>
 80077ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007948 <_strtod_l+0x298>
 80077d2:	e7e4      	b.n	800779e <_strtod_l+0xee>
 80077d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80077d8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80077dc:	e7df      	b.n	800779e <_strtod_l+0xee>
 80077de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	9215      	str	r2, [sp, #84]	; 0x54
 80077e4:	785b      	ldrb	r3, [r3, #1]
 80077e6:	2b30      	cmp	r3, #48	; 0x30
 80077e8:	d0f9      	beq.n	80077de <_strtod_l+0x12e>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d09b      	beq.n	8007726 <_strtod_l+0x76>
 80077ee:	2301      	movs	r3, #1
 80077f0:	f04f 0a00 	mov.w	sl, #0
 80077f4:	9304      	str	r3, [sp, #16]
 80077f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80077fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80077fe:	46d3      	mov	fp, sl
 8007800:	220a      	movs	r2, #10
 8007802:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007804:	7806      	ldrb	r6, [r0, #0]
 8007806:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800780a:	b2d9      	uxtb	r1, r3
 800780c:	2909      	cmp	r1, #9
 800780e:	d926      	bls.n	800785e <_strtod_l+0x1ae>
 8007810:	494c      	ldr	r1, [pc, #304]	; (8007944 <_strtod_l+0x294>)
 8007812:	2201      	movs	r2, #1
 8007814:	f000 fe1e 	bl	8008454 <strncmp>
 8007818:	2800      	cmp	r0, #0
 800781a:	d030      	beq.n	800787e <_strtod_l+0x1ce>
 800781c:	2000      	movs	r0, #0
 800781e:	4632      	mov	r2, r6
 8007820:	9005      	str	r0, [sp, #20]
 8007822:	465e      	mov	r6, fp
 8007824:	4603      	mov	r3, r0
 8007826:	2a65      	cmp	r2, #101	; 0x65
 8007828:	d001      	beq.n	800782e <_strtod_l+0x17e>
 800782a:	2a45      	cmp	r2, #69	; 0x45
 800782c:	d113      	bne.n	8007856 <_strtod_l+0x1a6>
 800782e:	b91e      	cbnz	r6, 8007838 <_strtod_l+0x188>
 8007830:	9a04      	ldr	r2, [sp, #16]
 8007832:	4302      	orrs	r2, r0
 8007834:	d094      	beq.n	8007760 <_strtod_l+0xb0>
 8007836:	2600      	movs	r6, #0
 8007838:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800783a:	1c6a      	adds	r2, r5, #1
 800783c:	9215      	str	r2, [sp, #84]	; 0x54
 800783e:	786a      	ldrb	r2, [r5, #1]
 8007840:	2a2b      	cmp	r2, #43	; 0x2b
 8007842:	d074      	beq.n	800792e <_strtod_l+0x27e>
 8007844:	2a2d      	cmp	r2, #45	; 0x2d
 8007846:	d078      	beq.n	800793a <_strtod_l+0x28a>
 8007848:	f04f 0c00 	mov.w	ip, #0
 800784c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007850:	2909      	cmp	r1, #9
 8007852:	d97f      	bls.n	8007954 <_strtod_l+0x2a4>
 8007854:	9515      	str	r5, [sp, #84]	; 0x54
 8007856:	2700      	movs	r7, #0
 8007858:	e09e      	b.n	8007998 <_strtod_l+0x2e8>
 800785a:	2300      	movs	r3, #0
 800785c:	e7c8      	b.n	80077f0 <_strtod_l+0x140>
 800785e:	f1bb 0f08 	cmp.w	fp, #8
 8007862:	bfd8      	it	le
 8007864:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007866:	f100 0001 	add.w	r0, r0, #1
 800786a:	bfda      	itte	le
 800786c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007870:	9309      	strle	r3, [sp, #36]	; 0x24
 8007872:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007876:	f10b 0b01 	add.w	fp, fp, #1
 800787a:	9015      	str	r0, [sp, #84]	; 0x54
 800787c:	e7c1      	b.n	8007802 <_strtod_l+0x152>
 800787e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	9215      	str	r2, [sp, #84]	; 0x54
 8007884:	785a      	ldrb	r2, [r3, #1]
 8007886:	f1bb 0f00 	cmp.w	fp, #0
 800788a:	d037      	beq.n	80078fc <_strtod_l+0x24c>
 800788c:	9005      	str	r0, [sp, #20]
 800788e:	465e      	mov	r6, fp
 8007890:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007894:	2b09      	cmp	r3, #9
 8007896:	d912      	bls.n	80078be <_strtod_l+0x20e>
 8007898:	2301      	movs	r3, #1
 800789a:	e7c4      	b.n	8007826 <_strtod_l+0x176>
 800789c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	9215      	str	r2, [sp, #84]	; 0x54
 80078a2:	785a      	ldrb	r2, [r3, #1]
 80078a4:	3001      	adds	r0, #1
 80078a6:	2a30      	cmp	r2, #48	; 0x30
 80078a8:	d0f8      	beq.n	800789c <_strtod_l+0x1ec>
 80078aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	f200 84c1 	bhi.w	8008236 <_strtod_l+0xb86>
 80078b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078b6:	9005      	str	r0, [sp, #20]
 80078b8:	2000      	movs	r0, #0
 80078ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80078bc:	4606      	mov	r6, r0
 80078be:	3a30      	subs	r2, #48	; 0x30
 80078c0:	f100 0301 	add.w	r3, r0, #1
 80078c4:	d014      	beq.n	80078f0 <_strtod_l+0x240>
 80078c6:	9905      	ldr	r1, [sp, #20]
 80078c8:	4419      	add	r1, r3
 80078ca:	9105      	str	r1, [sp, #20]
 80078cc:	4633      	mov	r3, r6
 80078ce:	eb00 0c06 	add.w	ip, r0, r6
 80078d2:	210a      	movs	r1, #10
 80078d4:	4563      	cmp	r3, ip
 80078d6:	d113      	bne.n	8007900 <_strtod_l+0x250>
 80078d8:	1833      	adds	r3, r6, r0
 80078da:	2b08      	cmp	r3, #8
 80078dc:	f106 0601 	add.w	r6, r6, #1
 80078e0:	4406      	add	r6, r0
 80078e2:	dc1a      	bgt.n	800791a <_strtod_l+0x26a>
 80078e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e6:	230a      	movs	r3, #10
 80078e8:	fb03 2301 	mla	r3, r3, r1, r2
 80078ec:	9309      	str	r3, [sp, #36]	; 0x24
 80078ee:	2300      	movs	r3, #0
 80078f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078f2:	1c51      	adds	r1, r2, #1
 80078f4:	9115      	str	r1, [sp, #84]	; 0x54
 80078f6:	7852      	ldrb	r2, [r2, #1]
 80078f8:	4618      	mov	r0, r3
 80078fa:	e7c9      	b.n	8007890 <_strtod_l+0x1e0>
 80078fc:	4658      	mov	r0, fp
 80078fe:	e7d2      	b.n	80078a6 <_strtod_l+0x1f6>
 8007900:	2b08      	cmp	r3, #8
 8007902:	f103 0301 	add.w	r3, r3, #1
 8007906:	dc03      	bgt.n	8007910 <_strtod_l+0x260>
 8007908:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800790a:	434f      	muls	r7, r1
 800790c:	9709      	str	r7, [sp, #36]	; 0x24
 800790e:	e7e1      	b.n	80078d4 <_strtod_l+0x224>
 8007910:	2b10      	cmp	r3, #16
 8007912:	bfd8      	it	le
 8007914:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007918:	e7dc      	b.n	80078d4 <_strtod_l+0x224>
 800791a:	2e10      	cmp	r6, #16
 800791c:	bfdc      	itt	le
 800791e:	230a      	movle	r3, #10
 8007920:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007924:	e7e3      	b.n	80078ee <_strtod_l+0x23e>
 8007926:	2300      	movs	r3, #0
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	2301      	movs	r3, #1
 800792c:	e780      	b.n	8007830 <_strtod_l+0x180>
 800792e:	f04f 0c00 	mov.w	ip, #0
 8007932:	1caa      	adds	r2, r5, #2
 8007934:	9215      	str	r2, [sp, #84]	; 0x54
 8007936:	78aa      	ldrb	r2, [r5, #2]
 8007938:	e788      	b.n	800784c <_strtod_l+0x19c>
 800793a:	f04f 0c01 	mov.w	ip, #1
 800793e:	e7f8      	b.n	8007932 <_strtod_l+0x282>
 8007940:	0800c654 	.word	0x0800c654
 8007944:	0800c651 	.word	0x0800c651
 8007948:	7ff00000 	.word	0x7ff00000
 800794c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800794e:	1c51      	adds	r1, r2, #1
 8007950:	9115      	str	r1, [sp, #84]	; 0x54
 8007952:	7852      	ldrb	r2, [r2, #1]
 8007954:	2a30      	cmp	r2, #48	; 0x30
 8007956:	d0f9      	beq.n	800794c <_strtod_l+0x29c>
 8007958:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800795c:	2908      	cmp	r1, #8
 800795e:	f63f af7a 	bhi.w	8007856 <_strtod_l+0x1a6>
 8007962:	3a30      	subs	r2, #48	; 0x30
 8007964:	9208      	str	r2, [sp, #32]
 8007966:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007968:	920c      	str	r2, [sp, #48]	; 0x30
 800796a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800796c:	1c57      	adds	r7, r2, #1
 800796e:	9715      	str	r7, [sp, #84]	; 0x54
 8007970:	7852      	ldrb	r2, [r2, #1]
 8007972:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007976:	f1be 0f09 	cmp.w	lr, #9
 800797a:	d938      	bls.n	80079ee <_strtod_l+0x33e>
 800797c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800797e:	1a7f      	subs	r7, r7, r1
 8007980:	2f08      	cmp	r7, #8
 8007982:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007986:	dc03      	bgt.n	8007990 <_strtod_l+0x2e0>
 8007988:	9908      	ldr	r1, [sp, #32]
 800798a:	428f      	cmp	r7, r1
 800798c:	bfa8      	it	ge
 800798e:	460f      	movge	r7, r1
 8007990:	f1bc 0f00 	cmp.w	ip, #0
 8007994:	d000      	beq.n	8007998 <_strtod_l+0x2e8>
 8007996:	427f      	negs	r7, r7
 8007998:	2e00      	cmp	r6, #0
 800799a:	d14f      	bne.n	8007a3c <_strtod_l+0x38c>
 800799c:	9904      	ldr	r1, [sp, #16]
 800799e:	4301      	orrs	r1, r0
 80079a0:	f47f aec1 	bne.w	8007726 <_strtod_l+0x76>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f47f aedb 	bne.w	8007760 <_strtod_l+0xb0>
 80079aa:	2a69      	cmp	r2, #105	; 0x69
 80079ac:	d029      	beq.n	8007a02 <_strtod_l+0x352>
 80079ae:	dc26      	bgt.n	80079fe <_strtod_l+0x34e>
 80079b0:	2a49      	cmp	r2, #73	; 0x49
 80079b2:	d026      	beq.n	8007a02 <_strtod_l+0x352>
 80079b4:	2a4e      	cmp	r2, #78	; 0x4e
 80079b6:	f47f aed3 	bne.w	8007760 <_strtod_l+0xb0>
 80079ba:	499b      	ldr	r1, [pc, #620]	; (8007c28 <_strtod_l+0x578>)
 80079bc:	a815      	add	r0, sp, #84	; 0x54
 80079be:	f001 fed5 	bl	800976c <__match>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	f43f aecc 	beq.w	8007760 <_strtod_l+0xb0>
 80079c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b28      	cmp	r3, #40	; 0x28
 80079ce:	d12f      	bne.n	8007a30 <_strtod_l+0x380>
 80079d0:	4996      	ldr	r1, [pc, #600]	; (8007c2c <_strtod_l+0x57c>)
 80079d2:	aa18      	add	r2, sp, #96	; 0x60
 80079d4:	a815      	add	r0, sp, #84	; 0x54
 80079d6:	f001 fedd 	bl	8009794 <__hexnan>
 80079da:	2805      	cmp	r0, #5
 80079dc:	d128      	bne.n	8007a30 <_strtod_l+0x380>
 80079de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80079e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80079e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80079ec:	e69b      	b.n	8007726 <_strtod_l+0x76>
 80079ee:	9f08      	ldr	r7, [sp, #32]
 80079f0:	210a      	movs	r1, #10
 80079f2:	fb01 2107 	mla	r1, r1, r7, r2
 80079f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80079fa:	9208      	str	r2, [sp, #32]
 80079fc:	e7b5      	b.n	800796a <_strtod_l+0x2ba>
 80079fe:	2a6e      	cmp	r2, #110	; 0x6e
 8007a00:	e7d9      	b.n	80079b6 <_strtod_l+0x306>
 8007a02:	498b      	ldr	r1, [pc, #556]	; (8007c30 <_strtod_l+0x580>)
 8007a04:	a815      	add	r0, sp, #84	; 0x54
 8007a06:	f001 feb1 	bl	800976c <__match>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f43f aea8 	beq.w	8007760 <_strtod_l+0xb0>
 8007a10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a12:	4988      	ldr	r1, [pc, #544]	; (8007c34 <_strtod_l+0x584>)
 8007a14:	3b01      	subs	r3, #1
 8007a16:	a815      	add	r0, sp, #84	; 0x54
 8007a18:	9315      	str	r3, [sp, #84]	; 0x54
 8007a1a:	f001 fea7 	bl	800976c <__match>
 8007a1e:	b910      	cbnz	r0, 8007a26 <_strtod_l+0x376>
 8007a20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a22:	3301      	adds	r3, #1
 8007a24:	9315      	str	r3, [sp, #84]	; 0x54
 8007a26:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007c44 <_strtod_l+0x594>
 8007a2a:	f04f 0800 	mov.w	r8, #0
 8007a2e:	e67a      	b.n	8007726 <_strtod_l+0x76>
 8007a30:	4881      	ldr	r0, [pc, #516]	; (8007c38 <_strtod_l+0x588>)
 8007a32:	f000 fd69 	bl	8008508 <nan>
 8007a36:	ec59 8b10 	vmov	r8, r9, d0
 8007a3a:	e674      	b.n	8007726 <_strtod_l+0x76>
 8007a3c:	9b05      	ldr	r3, [sp, #20]
 8007a3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a40:	1afb      	subs	r3, r7, r3
 8007a42:	f1bb 0f00 	cmp.w	fp, #0
 8007a46:	bf08      	it	eq
 8007a48:	46b3      	moveq	fp, r6
 8007a4a:	2e10      	cmp	r6, #16
 8007a4c:	9308      	str	r3, [sp, #32]
 8007a4e:	4635      	mov	r5, r6
 8007a50:	bfa8      	it	ge
 8007a52:	2510      	movge	r5, #16
 8007a54:	f7f8 fd80 	bl	8000558 <__aeabi_ui2d>
 8007a58:	2e09      	cmp	r6, #9
 8007a5a:	4680      	mov	r8, r0
 8007a5c:	4689      	mov	r9, r1
 8007a5e:	dd13      	ble.n	8007a88 <_strtod_l+0x3d8>
 8007a60:	4b76      	ldr	r3, [pc, #472]	; (8007c3c <_strtod_l+0x58c>)
 8007a62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a6a:	f7f8 fdef 	bl	800064c <__aeabi_dmul>
 8007a6e:	4680      	mov	r8, r0
 8007a70:	4650      	mov	r0, sl
 8007a72:	4689      	mov	r9, r1
 8007a74:	f7f8 fd70 	bl	8000558 <__aeabi_ui2d>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	4649      	mov	r1, r9
 8007a80:	f7f8 fc2e 	bl	80002e0 <__adddf3>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	2e0f      	cmp	r6, #15
 8007a8a:	dc38      	bgt.n	8007afe <_strtod_l+0x44e>
 8007a8c:	9b08      	ldr	r3, [sp, #32]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f43f ae49 	beq.w	8007726 <_strtod_l+0x76>
 8007a94:	dd24      	ble.n	8007ae0 <_strtod_l+0x430>
 8007a96:	2b16      	cmp	r3, #22
 8007a98:	dc0b      	bgt.n	8007ab2 <_strtod_l+0x402>
 8007a9a:	4968      	ldr	r1, [pc, #416]	; (8007c3c <_strtod_l+0x58c>)
 8007a9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	f7f8 fdd0 	bl	800064c <__aeabi_dmul>
 8007aac:	4680      	mov	r8, r0
 8007aae:	4689      	mov	r9, r1
 8007ab0:	e639      	b.n	8007726 <_strtod_l+0x76>
 8007ab2:	9a08      	ldr	r2, [sp, #32]
 8007ab4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	db20      	blt.n	8007afe <_strtod_l+0x44e>
 8007abc:	4c5f      	ldr	r4, [pc, #380]	; (8007c3c <_strtod_l+0x58c>)
 8007abe:	f1c6 060f 	rsb	r6, r6, #15
 8007ac2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007ac6:	4642      	mov	r2, r8
 8007ac8:	464b      	mov	r3, r9
 8007aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ace:	f7f8 fdbd 	bl	800064c <__aeabi_dmul>
 8007ad2:	9b08      	ldr	r3, [sp, #32]
 8007ad4:	1b9e      	subs	r6, r3, r6
 8007ad6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007ada:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007ade:	e7e3      	b.n	8007aa8 <_strtod_l+0x3f8>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	3316      	adds	r3, #22
 8007ae4:	db0b      	blt.n	8007afe <_strtod_l+0x44e>
 8007ae6:	9b05      	ldr	r3, [sp, #20]
 8007ae8:	1bdf      	subs	r7, r3, r7
 8007aea:	4b54      	ldr	r3, [pc, #336]	; (8007c3c <_strtod_l+0x58c>)
 8007aec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 fed2 	bl	80008a0 <__aeabi_ddiv>
 8007afc:	e7d6      	b.n	8007aac <_strtod_l+0x3fc>
 8007afe:	9b08      	ldr	r3, [sp, #32]
 8007b00:	1b75      	subs	r5, r6, r5
 8007b02:	441d      	add	r5, r3
 8007b04:	2d00      	cmp	r5, #0
 8007b06:	dd70      	ble.n	8007bea <_strtod_l+0x53a>
 8007b08:	f015 030f 	ands.w	r3, r5, #15
 8007b0c:	d00a      	beq.n	8007b24 <_strtod_l+0x474>
 8007b0e:	494b      	ldr	r1, [pc, #300]	; (8007c3c <_strtod_l+0x58c>)
 8007b10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b14:	4642      	mov	r2, r8
 8007b16:	464b      	mov	r3, r9
 8007b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b1c:	f7f8 fd96 	bl	800064c <__aeabi_dmul>
 8007b20:	4680      	mov	r8, r0
 8007b22:	4689      	mov	r9, r1
 8007b24:	f035 050f 	bics.w	r5, r5, #15
 8007b28:	d04d      	beq.n	8007bc6 <_strtod_l+0x516>
 8007b2a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007b2e:	dd22      	ble.n	8007b76 <_strtod_l+0x4c6>
 8007b30:	2500      	movs	r5, #0
 8007b32:	46ab      	mov	fp, r5
 8007b34:	9509      	str	r5, [sp, #36]	; 0x24
 8007b36:	9505      	str	r5, [sp, #20]
 8007b38:	2322      	movs	r3, #34	; 0x22
 8007b3a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007c44 <_strtod_l+0x594>
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	f04f 0800 	mov.w	r8, #0
 8007b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f43f aded 	beq.w	8007726 <_strtod_l+0x76>
 8007b4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f002 f9c8 	bl	8009ee4 <_Bfree>
 8007b54:	9905      	ldr	r1, [sp, #20]
 8007b56:	4620      	mov	r0, r4
 8007b58:	f002 f9c4 	bl	8009ee4 <_Bfree>
 8007b5c:	4659      	mov	r1, fp
 8007b5e:	4620      	mov	r0, r4
 8007b60:	f002 f9c0 	bl	8009ee4 <_Bfree>
 8007b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b66:	4620      	mov	r0, r4
 8007b68:	f002 f9bc 	bl	8009ee4 <_Bfree>
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f002 f9b8 	bl	8009ee4 <_Bfree>
 8007b74:	e5d7      	b.n	8007726 <_strtod_l+0x76>
 8007b76:	4b32      	ldr	r3, [pc, #200]	; (8007c40 <_strtod_l+0x590>)
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	112d      	asrs	r5, r5, #4
 8007b7e:	4640      	mov	r0, r8
 8007b80:	4649      	mov	r1, r9
 8007b82:	469a      	mov	sl, r3
 8007b84:	2d01      	cmp	r5, #1
 8007b86:	dc21      	bgt.n	8007bcc <_strtod_l+0x51c>
 8007b88:	b10b      	cbz	r3, 8007b8e <_strtod_l+0x4de>
 8007b8a:	4680      	mov	r8, r0
 8007b8c:	4689      	mov	r9, r1
 8007b8e:	492c      	ldr	r1, [pc, #176]	; (8007c40 <_strtod_l+0x590>)
 8007b90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007b94:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007b98:	4642      	mov	r2, r8
 8007b9a:	464b      	mov	r3, r9
 8007b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ba0:	f7f8 fd54 	bl	800064c <__aeabi_dmul>
 8007ba4:	4b27      	ldr	r3, [pc, #156]	; (8007c44 <_strtod_l+0x594>)
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	400b      	ands	r3, r1
 8007baa:	4927      	ldr	r1, [pc, #156]	; (8007c48 <_strtod_l+0x598>)
 8007bac:	428b      	cmp	r3, r1
 8007bae:	4680      	mov	r8, r0
 8007bb0:	d8be      	bhi.n	8007b30 <_strtod_l+0x480>
 8007bb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007bb6:	428b      	cmp	r3, r1
 8007bb8:	bf86      	itte	hi
 8007bba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007c4c <_strtod_l+0x59c>
 8007bbe:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007bc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	e07b      	b.n	8007cc4 <_strtod_l+0x614>
 8007bcc:	07ea      	lsls	r2, r5, #31
 8007bce:	d505      	bpl.n	8007bdc <_strtod_l+0x52c>
 8007bd0:	9b04      	ldr	r3, [sp, #16]
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fd39 	bl	800064c <__aeabi_dmul>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	9a04      	ldr	r2, [sp, #16]
 8007bde:	3208      	adds	r2, #8
 8007be0:	f10a 0a01 	add.w	sl, sl, #1
 8007be4:	106d      	asrs	r5, r5, #1
 8007be6:	9204      	str	r2, [sp, #16]
 8007be8:	e7cc      	b.n	8007b84 <_strtod_l+0x4d4>
 8007bea:	d0ec      	beq.n	8007bc6 <_strtod_l+0x516>
 8007bec:	426d      	negs	r5, r5
 8007bee:	f015 020f 	ands.w	r2, r5, #15
 8007bf2:	d00a      	beq.n	8007c0a <_strtod_l+0x55a>
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <_strtod_l+0x58c>)
 8007bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bfa:	4640      	mov	r0, r8
 8007bfc:	4649      	mov	r1, r9
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 fe4d 	bl	80008a0 <__aeabi_ddiv>
 8007c06:	4680      	mov	r8, r0
 8007c08:	4689      	mov	r9, r1
 8007c0a:	112d      	asrs	r5, r5, #4
 8007c0c:	d0db      	beq.n	8007bc6 <_strtod_l+0x516>
 8007c0e:	2d1f      	cmp	r5, #31
 8007c10:	dd1e      	ble.n	8007c50 <_strtod_l+0x5a0>
 8007c12:	2500      	movs	r5, #0
 8007c14:	46ab      	mov	fp, r5
 8007c16:	9509      	str	r5, [sp, #36]	; 0x24
 8007c18:	9505      	str	r5, [sp, #20]
 8007c1a:	2322      	movs	r3, #34	; 0x22
 8007c1c:	f04f 0800 	mov.w	r8, #0
 8007c20:	f04f 0900 	mov.w	r9, #0
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	e78d      	b.n	8007b44 <_strtod_l+0x494>
 8007c28:	0800c625 	.word	0x0800c625
 8007c2c:	0800c668 	.word	0x0800c668
 8007c30:	0800c61d 	.word	0x0800c61d
 8007c34:	0800c7b4 	.word	0x0800c7b4
 8007c38:	0800ca3f 	.word	0x0800ca3f
 8007c3c:	0800c930 	.word	0x0800c930
 8007c40:	0800c908 	.word	0x0800c908
 8007c44:	7ff00000 	.word	0x7ff00000
 8007c48:	7ca00000 	.word	0x7ca00000
 8007c4c:	7fefffff 	.word	0x7fefffff
 8007c50:	f015 0310 	ands.w	r3, r5, #16
 8007c54:	bf18      	it	ne
 8007c56:	236a      	movne	r3, #106	; 0x6a
 8007c58:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007ffc <_strtod_l+0x94c>
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	4640      	mov	r0, r8
 8007c60:	4649      	mov	r1, r9
 8007c62:	2300      	movs	r3, #0
 8007c64:	07ea      	lsls	r2, r5, #31
 8007c66:	d504      	bpl.n	8007c72 <_strtod_l+0x5c2>
 8007c68:	e9da 2300 	ldrd	r2, r3, [sl]
 8007c6c:	f7f8 fcee 	bl	800064c <__aeabi_dmul>
 8007c70:	2301      	movs	r3, #1
 8007c72:	106d      	asrs	r5, r5, #1
 8007c74:	f10a 0a08 	add.w	sl, sl, #8
 8007c78:	d1f4      	bne.n	8007c64 <_strtod_l+0x5b4>
 8007c7a:	b10b      	cbz	r3, 8007c80 <_strtod_l+0x5d0>
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	b1bb      	cbz	r3, 8007cb4 <_strtod_l+0x604>
 8007c84:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007c88:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	4649      	mov	r1, r9
 8007c90:	dd10      	ble.n	8007cb4 <_strtod_l+0x604>
 8007c92:	2b1f      	cmp	r3, #31
 8007c94:	f340 811e 	ble.w	8007ed4 <_strtod_l+0x824>
 8007c98:	2b34      	cmp	r3, #52	; 0x34
 8007c9a:	bfde      	ittt	le
 8007c9c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007ca0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007ca4:	4093      	lslle	r3, r2
 8007ca6:	f04f 0800 	mov.w	r8, #0
 8007caa:	bfcc      	ite	gt
 8007cac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007cb0:	ea03 0901 	andle.w	r9, r3, r1
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	f7f8 ff2e 	bl	8000b1c <__aeabi_dcmpeq>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d1a6      	bne.n	8007c12 <_strtod_l+0x562>
 8007cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc6:	9300      	str	r3, [sp, #0]
 8007cc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cca:	4633      	mov	r3, r6
 8007ccc:	465a      	mov	r2, fp
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f002 f970 	bl	8009fb4 <__s2b>
 8007cd4:	9009      	str	r0, [sp, #36]	; 0x24
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f43f af2a 	beq.w	8007b30 <_strtod_l+0x480>
 8007cdc:	9a08      	ldr	r2, [sp, #32]
 8007cde:	9b05      	ldr	r3, [sp, #20]
 8007ce0:	2a00      	cmp	r2, #0
 8007ce2:	eba3 0307 	sub.w	r3, r3, r7
 8007ce6:	bfa8      	it	ge
 8007ce8:	2300      	movge	r3, #0
 8007cea:	930c      	str	r3, [sp, #48]	; 0x30
 8007cec:	2500      	movs	r5, #0
 8007cee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8007cf4:	46ab      	mov	fp, r5
 8007cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	6859      	ldr	r1, [r3, #4]
 8007cfc:	f002 f8b2 	bl	8009e64 <_Balloc>
 8007d00:	9005      	str	r0, [sp, #20]
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f43f af18 	beq.w	8007b38 <_strtod_l+0x488>
 8007d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d0a:	691a      	ldr	r2, [r3, #16]
 8007d0c:	3202      	adds	r2, #2
 8007d0e:	f103 010c 	add.w	r1, r3, #12
 8007d12:	0092      	lsls	r2, r2, #2
 8007d14:	300c      	adds	r0, #12
 8007d16:	f000 fbe8 	bl	80084ea <memcpy>
 8007d1a:	ec49 8b10 	vmov	d0, r8, r9
 8007d1e:	aa18      	add	r2, sp, #96	; 0x60
 8007d20:	a917      	add	r1, sp, #92	; 0x5c
 8007d22:	4620      	mov	r0, r4
 8007d24:	f002 fc7a 	bl	800a61c <__d2b>
 8007d28:	ec49 8b18 	vmov	d8, r8, r9
 8007d2c:	9016      	str	r0, [sp, #88]	; 0x58
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f43f af02 	beq.w	8007b38 <_strtod_l+0x488>
 8007d34:	2101      	movs	r1, #1
 8007d36:	4620      	mov	r0, r4
 8007d38:	f002 f9d4 	bl	800a0e4 <__i2b>
 8007d3c:	4683      	mov	fp, r0
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f43f aefa 	beq.w	8007b38 <_strtod_l+0x488>
 8007d44:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d48:	2e00      	cmp	r6, #0
 8007d4a:	bfab      	itete	ge
 8007d4c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007d4e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007d50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007d52:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007d56:	bfac      	ite	ge
 8007d58:	eb06 0a03 	addge.w	sl, r6, r3
 8007d5c:	1b9f      	sublt	r7, r3, r6
 8007d5e:	9b04      	ldr	r3, [sp, #16]
 8007d60:	1af6      	subs	r6, r6, r3
 8007d62:	4416      	add	r6, r2
 8007d64:	4ba0      	ldr	r3, [pc, #640]	; (8007fe8 <_strtod_l+0x938>)
 8007d66:	3e01      	subs	r6, #1
 8007d68:	429e      	cmp	r6, r3
 8007d6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d6e:	f280 80c4 	bge.w	8007efa <_strtod_l+0x84a>
 8007d72:	1b9b      	subs	r3, r3, r6
 8007d74:	2b1f      	cmp	r3, #31
 8007d76:	eba2 0203 	sub.w	r2, r2, r3
 8007d7a:	f04f 0101 	mov.w	r1, #1
 8007d7e:	f300 80b0 	bgt.w	8007ee2 <_strtod_l+0x832>
 8007d82:	fa01 f303 	lsl.w	r3, r1, r3
 8007d86:	930e      	str	r3, [sp, #56]	; 0x38
 8007d88:	2300      	movs	r3, #0
 8007d8a:	930d      	str	r3, [sp, #52]	; 0x34
 8007d8c:	eb0a 0602 	add.w	r6, sl, r2
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	45b2      	cmp	sl, r6
 8007d94:	4417      	add	r7, r2
 8007d96:	441f      	add	r7, r3
 8007d98:	4653      	mov	r3, sl
 8007d9a:	bfa8      	it	ge
 8007d9c:	4633      	movge	r3, r6
 8007d9e:	42bb      	cmp	r3, r7
 8007da0:	bfa8      	it	ge
 8007da2:	463b      	movge	r3, r7
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bfc2      	ittt	gt
 8007da8:	1af6      	subgt	r6, r6, r3
 8007daa:	1aff      	subgt	r7, r7, r3
 8007dac:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007db0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	dd17      	ble.n	8007de6 <_strtod_l+0x736>
 8007db6:	4659      	mov	r1, fp
 8007db8:	461a      	mov	r2, r3
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f002 fa52 	bl	800a264 <__pow5mult>
 8007dc0:	4683      	mov	fp, r0
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f aeb8 	beq.w	8007b38 <_strtod_l+0x488>
 8007dc8:	4601      	mov	r1, r0
 8007dca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f002 f99f 	bl	800a110 <__multiply>
 8007dd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f43f aeaf 	beq.w	8007b38 <_strtod_l+0x488>
 8007dda:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ddc:	4620      	mov	r0, r4
 8007dde:	f002 f881 	bl	8009ee4 <_Bfree>
 8007de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de4:	9316      	str	r3, [sp, #88]	; 0x58
 8007de6:	2e00      	cmp	r6, #0
 8007de8:	f300 808c 	bgt.w	8007f04 <_strtod_l+0x854>
 8007dec:	9b08      	ldr	r3, [sp, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	dd08      	ble.n	8007e04 <_strtod_l+0x754>
 8007df2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007df4:	9905      	ldr	r1, [sp, #20]
 8007df6:	4620      	mov	r0, r4
 8007df8:	f002 fa34 	bl	800a264 <__pow5mult>
 8007dfc:	9005      	str	r0, [sp, #20]
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	f43f ae9a 	beq.w	8007b38 <_strtod_l+0x488>
 8007e04:	2f00      	cmp	r7, #0
 8007e06:	dd08      	ble.n	8007e1a <_strtod_l+0x76a>
 8007e08:	9905      	ldr	r1, [sp, #20]
 8007e0a:	463a      	mov	r2, r7
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	f002 fa83 	bl	800a318 <__lshift>
 8007e12:	9005      	str	r0, [sp, #20]
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f43f ae8f 	beq.w	8007b38 <_strtod_l+0x488>
 8007e1a:	f1ba 0f00 	cmp.w	sl, #0
 8007e1e:	dd08      	ble.n	8007e32 <_strtod_l+0x782>
 8007e20:	4659      	mov	r1, fp
 8007e22:	4652      	mov	r2, sl
 8007e24:	4620      	mov	r0, r4
 8007e26:	f002 fa77 	bl	800a318 <__lshift>
 8007e2a:	4683      	mov	fp, r0
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	f43f ae83 	beq.w	8007b38 <_strtod_l+0x488>
 8007e32:	9a05      	ldr	r2, [sp, #20]
 8007e34:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e36:	4620      	mov	r0, r4
 8007e38:	f002 faf6 	bl	800a428 <__mdiff>
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f43f ae7a 	beq.w	8007b38 <_strtod_l+0x488>
 8007e44:	68c3      	ldr	r3, [r0, #12]
 8007e46:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60c3      	str	r3, [r0, #12]
 8007e4c:	4659      	mov	r1, fp
 8007e4e:	f002 facf 	bl	800a3f0 <__mcmp>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	da60      	bge.n	8007f18 <_strtod_l+0x868>
 8007e56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e58:	ea53 0308 	orrs.w	r3, r3, r8
 8007e5c:	f040 8084 	bne.w	8007f68 <_strtod_l+0x8b8>
 8007e60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d17f      	bne.n	8007f68 <_strtod_l+0x8b8>
 8007e68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e6c:	0d1b      	lsrs	r3, r3, #20
 8007e6e:	051b      	lsls	r3, r3, #20
 8007e70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e74:	d978      	bls.n	8007f68 <_strtod_l+0x8b8>
 8007e76:	696b      	ldr	r3, [r5, #20]
 8007e78:	b913      	cbnz	r3, 8007e80 <_strtod_l+0x7d0>
 8007e7a:	692b      	ldr	r3, [r5, #16]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	dd73      	ble.n	8007f68 <_strtod_l+0x8b8>
 8007e80:	4629      	mov	r1, r5
 8007e82:	2201      	movs	r2, #1
 8007e84:	4620      	mov	r0, r4
 8007e86:	f002 fa47 	bl	800a318 <__lshift>
 8007e8a:	4659      	mov	r1, fp
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	f002 faaf 	bl	800a3f0 <__mcmp>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	dd68      	ble.n	8007f68 <_strtod_l+0x8b8>
 8007e96:	9904      	ldr	r1, [sp, #16]
 8007e98:	4a54      	ldr	r2, [pc, #336]	; (8007fec <_strtod_l+0x93c>)
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	2900      	cmp	r1, #0
 8007e9e:	f000 8084 	beq.w	8007faa <_strtod_l+0x8fa>
 8007ea2:	ea02 0109 	and.w	r1, r2, r9
 8007ea6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007eaa:	dc7e      	bgt.n	8007faa <_strtod_l+0x8fa>
 8007eac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007eb0:	f77f aeb3 	ble.w	8007c1a <_strtod_l+0x56a>
 8007eb4:	4b4e      	ldr	r3, [pc, #312]	; (8007ff0 <_strtod_l+0x940>)
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f7f8 fbc6 	bl	800064c <__aeabi_dmul>
 8007ec0:	4b4a      	ldr	r3, [pc, #296]	; (8007fec <_strtod_l+0x93c>)
 8007ec2:	400b      	ands	r3, r1
 8007ec4:	4680      	mov	r8, r0
 8007ec6:	4689      	mov	r9, r1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f47f ae3f 	bne.w	8007b4c <_strtod_l+0x49c>
 8007ece:	2322      	movs	r3, #34	; 0x22
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	e63b      	b.n	8007b4c <_strtod_l+0x49c>
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	ea03 0808 	and.w	r8, r3, r8
 8007ee0:	e6e8      	b.n	8007cb4 <_strtod_l+0x604>
 8007ee2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007ee6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007eea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007eee:	36e2      	adds	r6, #226	; 0xe2
 8007ef0:	fa01 f306 	lsl.w	r3, r1, r6
 8007ef4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007ef8:	e748      	b.n	8007d8c <_strtod_l+0x6dc>
 8007efa:	2100      	movs	r1, #0
 8007efc:	2301      	movs	r3, #1
 8007efe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007f02:	e743      	b.n	8007d8c <_strtod_l+0x6dc>
 8007f04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007f06:	4632      	mov	r2, r6
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f002 fa05 	bl	800a318 <__lshift>
 8007f0e:	9016      	str	r0, [sp, #88]	; 0x58
 8007f10:	2800      	cmp	r0, #0
 8007f12:	f47f af6b 	bne.w	8007dec <_strtod_l+0x73c>
 8007f16:	e60f      	b.n	8007b38 <_strtod_l+0x488>
 8007f18:	46ca      	mov	sl, r9
 8007f1a:	d171      	bne.n	8008000 <_strtod_l+0x950>
 8007f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f22:	b352      	cbz	r2, 8007f7a <_strtod_l+0x8ca>
 8007f24:	4a33      	ldr	r2, [pc, #204]	; (8007ff4 <_strtod_l+0x944>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d12a      	bne.n	8007f80 <_strtod_l+0x8d0>
 8007f2a:	9b04      	ldr	r3, [sp, #16]
 8007f2c:	4641      	mov	r1, r8
 8007f2e:	b1fb      	cbz	r3, 8007f70 <_strtod_l+0x8c0>
 8007f30:	4b2e      	ldr	r3, [pc, #184]	; (8007fec <_strtod_l+0x93c>)
 8007f32:	ea09 0303 	and.w	r3, r9, r3
 8007f36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f3e:	d81a      	bhi.n	8007f76 <_strtod_l+0x8c6>
 8007f40:	0d1b      	lsrs	r3, r3, #20
 8007f42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f46:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4a:	4299      	cmp	r1, r3
 8007f4c:	d118      	bne.n	8007f80 <_strtod_l+0x8d0>
 8007f4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ff8 <_strtod_l+0x948>)
 8007f50:	459a      	cmp	sl, r3
 8007f52:	d102      	bne.n	8007f5a <_strtod_l+0x8aa>
 8007f54:	3101      	adds	r1, #1
 8007f56:	f43f adef 	beq.w	8007b38 <_strtod_l+0x488>
 8007f5a:	4b24      	ldr	r3, [pc, #144]	; (8007fec <_strtod_l+0x93c>)
 8007f5c:	ea0a 0303 	and.w	r3, sl, r3
 8007f60:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007f64:	f04f 0800 	mov.w	r8, #0
 8007f68:	9b04      	ldr	r3, [sp, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1a2      	bne.n	8007eb4 <_strtod_l+0x804>
 8007f6e:	e5ed      	b.n	8007b4c <_strtod_l+0x49c>
 8007f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f74:	e7e9      	b.n	8007f4a <_strtod_l+0x89a>
 8007f76:	4613      	mov	r3, r2
 8007f78:	e7e7      	b.n	8007f4a <_strtod_l+0x89a>
 8007f7a:	ea53 0308 	orrs.w	r3, r3, r8
 8007f7e:	d08a      	beq.n	8007e96 <_strtod_l+0x7e6>
 8007f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f82:	b1e3      	cbz	r3, 8007fbe <_strtod_l+0x90e>
 8007f84:	ea13 0f0a 	tst.w	r3, sl
 8007f88:	d0ee      	beq.n	8007f68 <_strtod_l+0x8b8>
 8007f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8c:	9a04      	ldr	r2, [sp, #16]
 8007f8e:	4640      	mov	r0, r8
 8007f90:	4649      	mov	r1, r9
 8007f92:	b1c3      	cbz	r3, 8007fc6 <_strtod_l+0x916>
 8007f94:	f7ff fb70 	bl	8007678 <sulp>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	ec51 0b18 	vmov	r0, r1, d8
 8007fa0:	f7f8 f99e 	bl	80002e0 <__adddf3>
 8007fa4:	4680      	mov	r8, r0
 8007fa6:	4689      	mov	r9, r1
 8007fa8:	e7de      	b.n	8007f68 <_strtod_l+0x8b8>
 8007faa:	4013      	ands	r3, r2
 8007fac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007fb0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007fb4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007fb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007fbc:	e7d4      	b.n	8007f68 <_strtod_l+0x8b8>
 8007fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fc0:	ea13 0f08 	tst.w	r3, r8
 8007fc4:	e7e0      	b.n	8007f88 <_strtod_l+0x8d8>
 8007fc6:	f7ff fb57 	bl	8007678 <sulp>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	ec51 0b18 	vmov	r0, r1, d8
 8007fd2:	f7f8 f983 	bl	80002dc <__aeabi_dsub>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4689      	mov	r9, r1
 8007fde:	f7f8 fd9d 	bl	8000b1c <__aeabi_dcmpeq>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0c0      	beq.n	8007f68 <_strtod_l+0x8b8>
 8007fe6:	e618      	b.n	8007c1a <_strtod_l+0x56a>
 8007fe8:	fffffc02 	.word	0xfffffc02
 8007fec:	7ff00000 	.word	0x7ff00000
 8007ff0:	39500000 	.word	0x39500000
 8007ff4:	000fffff 	.word	0x000fffff
 8007ff8:	7fefffff 	.word	0x7fefffff
 8007ffc:	0800c680 	.word	0x0800c680
 8008000:	4659      	mov	r1, fp
 8008002:	4628      	mov	r0, r5
 8008004:	f002 fb64 	bl	800a6d0 <__ratio>
 8008008:	ec57 6b10 	vmov	r6, r7, d0
 800800c:	ee10 0a10 	vmov	r0, s0
 8008010:	2200      	movs	r2, #0
 8008012:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008016:	4639      	mov	r1, r7
 8008018:	f7f8 fd94 	bl	8000b44 <__aeabi_dcmple>
 800801c:	2800      	cmp	r0, #0
 800801e:	d071      	beq.n	8008104 <_strtod_l+0xa54>
 8008020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d17c      	bne.n	8008120 <_strtod_l+0xa70>
 8008026:	f1b8 0f00 	cmp.w	r8, #0
 800802a:	d15a      	bne.n	80080e2 <_strtod_l+0xa32>
 800802c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008030:	2b00      	cmp	r3, #0
 8008032:	d15d      	bne.n	80080f0 <_strtod_l+0xa40>
 8008034:	4b90      	ldr	r3, [pc, #576]	; (8008278 <_strtod_l+0xbc8>)
 8008036:	2200      	movs	r2, #0
 8008038:	4630      	mov	r0, r6
 800803a:	4639      	mov	r1, r7
 800803c:	f7f8 fd78 	bl	8000b30 <__aeabi_dcmplt>
 8008040:	2800      	cmp	r0, #0
 8008042:	d15c      	bne.n	80080fe <_strtod_l+0xa4e>
 8008044:	4630      	mov	r0, r6
 8008046:	4639      	mov	r1, r7
 8008048:	4b8c      	ldr	r3, [pc, #560]	; (800827c <_strtod_l+0xbcc>)
 800804a:	2200      	movs	r2, #0
 800804c:	f7f8 fafe 	bl	800064c <__aeabi_dmul>
 8008050:	4606      	mov	r6, r0
 8008052:	460f      	mov	r7, r1
 8008054:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008058:	9606      	str	r6, [sp, #24]
 800805a:	9307      	str	r3, [sp, #28]
 800805c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008060:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008064:	4b86      	ldr	r3, [pc, #536]	; (8008280 <_strtod_l+0xbd0>)
 8008066:	ea0a 0303 	and.w	r3, sl, r3
 800806a:	930d      	str	r3, [sp, #52]	; 0x34
 800806c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800806e:	4b85      	ldr	r3, [pc, #532]	; (8008284 <_strtod_l+0xbd4>)
 8008070:	429a      	cmp	r2, r3
 8008072:	f040 8090 	bne.w	8008196 <_strtod_l+0xae6>
 8008076:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800807a:	ec49 8b10 	vmov	d0, r8, r9
 800807e:	f002 fa5d 	bl	800a53c <__ulp>
 8008082:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008086:	ec51 0b10 	vmov	r0, r1, d0
 800808a:	f7f8 fadf 	bl	800064c <__aeabi_dmul>
 800808e:	4642      	mov	r2, r8
 8008090:	464b      	mov	r3, r9
 8008092:	f7f8 f925 	bl	80002e0 <__adddf3>
 8008096:	460b      	mov	r3, r1
 8008098:	4979      	ldr	r1, [pc, #484]	; (8008280 <_strtod_l+0xbd0>)
 800809a:	4a7b      	ldr	r2, [pc, #492]	; (8008288 <_strtod_l+0xbd8>)
 800809c:	4019      	ands	r1, r3
 800809e:	4291      	cmp	r1, r2
 80080a0:	4680      	mov	r8, r0
 80080a2:	d944      	bls.n	800812e <_strtod_l+0xa7e>
 80080a4:	ee18 2a90 	vmov	r2, s17
 80080a8:	4b78      	ldr	r3, [pc, #480]	; (800828c <_strtod_l+0xbdc>)
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d104      	bne.n	80080b8 <_strtod_l+0xa08>
 80080ae:	ee18 3a10 	vmov	r3, s16
 80080b2:	3301      	adds	r3, #1
 80080b4:	f43f ad40 	beq.w	8007b38 <_strtod_l+0x488>
 80080b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800828c <_strtod_l+0xbdc>
 80080bc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80080c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80080c2:	4620      	mov	r0, r4
 80080c4:	f001 ff0e 	bl	8009ee4 <_Bfree>
 80080c8:	9905      	ldr	r1, [sp, #20]
 80080ca:	4620      	mov	r0, r4
 80080cc:	f001 ff0a 	bl	8009ee4 <_Bfree>
 80080d0:	4659      	mov	r1, fp
 80080d2:	4620      	mov	r0, r4
 80080d4:	f001 ff06 	bl	8009ee4 <_Bfree>
 80080d8:	4629      	mov	r1, r5
 80080da:	4620      	mov	r0, r4
 80080dc:	f001 ff02 	bl	8009ee4 <_Bfree>
 80080e0:	e609      	b.n	8007cf6 <_strtod_l+0x646>
 80080e2:	f1b8 0f01 	cmp.w	r8, #1
 80080e6:	d103      	bne.n	80080f0 <_strtod_l+0xa40>
 80080e8:	f1b9 0f00 	cmp.w	r9, #0
 80080ec:	f43f ad95 	beq.w	8007c1a <_strtod_l+0x56a>
 80080f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008248 <_strtod_l+0xb98>
 80080f4:	4f60      	ldr	r7, [pc, #384]	; (8008278 <_strtod_l+0xbc8>)
 80080f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080fa:	2600      	movs	r6, #0
 80080fc:	e7ae      	b.n	800805c <_strtod_l+0x9ac>
 80080fe:	4f5f      	ldr	r7, [pc, #380]	; (800827c <_strtod_l+0xbcc>)
 8008100:	2600      	movs	r6, #0
 8008102:	e7a7      	b.n	8008054 <_strtod_l+0x9a4>
 8008104:	4b5d      	ldr	r3, [pc, #372]	; (800827c <_strtod_l+0xbcc>)
 8008106:	4630      	mov	r0, r6
 8008108:	4639      	mov	r1, r7
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 fa9e 	bl	800064c <__aeabi_dmul>
 8008110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008112:	4606      	mov	r6, r0
 8008114:	460f      	mov	r7, r1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d09c      	beq.n	8008054 <_strtod_l+0x9a4>
 800811a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800811e:	e79d      	b.n	800805c <_strtod_l+0x9ac>
 8008120:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008250 <_strtod_l+0xba0>
 8008124:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008128:	ec57 6b17 	vmov	r6, r7, d7
 800812c:	e796      	b.n	800805c <_strtod_l+0x9ac>
 800812e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	46ca      	mov	sl, r9
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1c2      	bne.n	80080c0 <_strtod_l+0xa10>
 800813a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800813e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008140:	0d1b      	lsrs	r3, r3, #20
 8008142:	051b      	lsls	r3, r3, #20
 8008144:	429a      	cmp	r2, r3
 8008146:	d1bb      	bne.n	80080c0 <_strtod_l+0xa10>
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fdde 	bl	8000d0c <__aeabi_d2lz>
 8008150:	f7f8 fa4e 	bl	80005f0 <__aeabi_l2d>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 f8be 	bl	80002dc <__aeabi_dsub>
 8008160:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008162:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008166:	ea43 0308 	orr.w	r3, r3, r8
 800816a:	4313      	orrs	r3, r2
 800816c:	4606      	mov	r6, r0
 800816e:	460f      	mov	r7, r1
 8008170:	d054      	beq.n	800821c <_strtod_l+0xb6c>
 8008172:	a339      	add	r3, pc, #228	; (adr r3, 8008258 <_strtod_l+0xba8>)
 8008174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008178:	f7f8 fcda 	bl	8000b30 <__aeabi_dcmplt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f47f ace5 	bne.w	8007b4c <_strtod_l+0x49c>
 8008182:	a337      	add	r3, pc, #220	; (adr r3, 8008260 <_strtod_l+0xbb0>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	4630      	mov	r0, r6
 800818a:	4639      	mov	r1, r7
 800818c:	f7f8 fcee 	bl	8000b6c <__aeabi_dcmpgt>
 8008190:	2800      	cmp	r0, #0
 8008192:	d095      	beq.n	80080c0 <_strtod_l+0xa10>
 8008194:	e4da      	b.n	8007b4c <_strtod_l+0x49c>
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	b333      	cbz	r3, 80081e8 <_strtod_l+0xb38>
 800819a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800819c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081a0:	d822      	bhi.n	80081e8 <_strtod_l+0xb38>
 80081a2:	a331      	add	r3, pc, #196	; (adr r3, 8008268 <_strtod_l+0xbb8>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 fcca 	bl	8000b44 <__aeabi_dcmple>
 80081b0:	b1a0      	cbz	r0, 80081dc <_strtod_l+0xb2c>
 80081b2:	4639      	mov	r1, r7
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7f8 fd21 	bl	8000bfc <__aeabi_d2uiz>
 80081ba:	2801      	cmp	r0, #1
 80081bc:	bf38      	it	cc
 80081be:	2001      	movcc	r0, #1
 80081c0:	f7f8 f9ca 	bl	8000558 <__aeabi_ui2d>
 80081c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c6:	4606      	mov	r6, r0
 80081c8:	460f      	mov	r7, r1
 80081ca:	bb23      	cbnz	r3, 8008216 <_strtod_l+0xb66>
 80081cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081d0:	9010      	str	r0, [sp, #64]	; 0x40
 80081d2:	9311      	str	r3, [sp, #68]	; 0x44
 80081d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80081dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80081ec:	eeb0 0a48 	vmov.f32	s0, s16
 80081f0:	eef0 0a68 	vmov.f32	s1, s17
 80081f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80081f8:	f002 f9a0 	bl	800a53c <__ulp>
 80081fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008200:	ec53 2b10 	vmov	r2, r3, d0
 8008204:	f7f8 fa22 	bl	800064c <__aeabi_dmul>
 8008208:	ec53 2b18 	vmov	r2, r3, d8
 800820c:	f7f8 f868 	bl	80002e0 <__adddf3>
 8008210:	4680      	mov	r8, r0
 8008212:	4689      	mov	r9, r1
 8008214:	e78d      	b.n	8008132 <_strtod_l+0xa82>
 8008216:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800821a:	e7db      	b.n	80081d4 <_strtod_l+0xb24>
 800821c:	a314      	add	r3, pc, #80	; (adr r3, 8008270 <_strtod_l+0xbc0>)
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	f7f8 fc85 	bl	8000b30 <__aeabi_dcmplt>
 8008226:	e7b3      	b.n	8008190 <_strtod_l+0xae0>
 8008228:	2300      	movs	r3, #0
 800822a:	930a      	str	r3, [sp, #40]	; 0x28
 800822c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800822e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008230:	6013      	str	r3, [r2, #0]
 8008232:	f7ff ba7c 	b.w	800772e <_strtod_l+0x7e>
 8008236:	2a65      	cmp	r2, #101	; 0x65
 8008238:	f43f ab75 	beq.w	8007926 <_strtod_l+0x276>
 800823c:	2a45      	cmp	r2, #69	; 0x45
 800823e:	f43f ab72 	beq.w	8007926 <_strtod_l+0x276>
 8008242:	2301      	movs	r3, #1
 8008244:	f7ff bbaa 	b.w	800799c <_strtod_l+0x2ec>
 8008248:	00000000 	.word	0x00000000
 800824c:	bff00000 	.word	0xbff00000
 8008250:	00000000 	.word	0x00000000
 8008254:	3ff00000 	.word	0x3ff00000
 8008258:	94a03595 	.word	0x94a03595
 800825c:	3fdfffff 	.word	0x3fdfffff
 8008260:	35afe535 	.word	0x35afe535
 8008264:	3fe00000 	.word	0x3fe00000
 8008268:	ffc00000 	.word	0xffc00000
 800826c:	41dfffff 	.word	0x41dfffff
 8008270:	94a03595 	.word	0x94a03595
 8008274:	3fcfffff 	.word	0x3fcfffff
 8008278:	3ff00000 	.word	0x3ff00000
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	7fe00000 	.word	0x7fe00000
 8008288:	7c9fffff 	.word	0x7c9fffff
 800828c:	7fefffff 	.word	0x7fefffff

08008290 <_strtod_r>:
 8008290:	4b01      	ldr	r3, [pc, #4]	; (8008298 <_strtod_r+0x8>)
 8008292:	f7ff ba0d 	b.w	80076b0 <_strtod_l>
 8008296:	bf00      	nop
 8008298:	2000004c 	.word	0x2000004c

0800829c <_strtol_l.constprop.0>:
 800829c:	2b01      	cmp	r3, #1
 800829e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a2:	d001      	beq.n	80082a8 <_strtol_l.constprop.0+0xc>
 80082a4:	2b24      	cmp	r3, #36	; 0x24
 80082a6:	d906      	bls.n	80082b6 <_strtol_l.constprop.0+0x1a>
 80082a8:	f000 f8f2 	bl	8008490 <__errno>
 80082ac:	2316      	movs	r3, #22
 80082ae:	6003      	str	r3, [r0, #0]
 80082b0:	2000      	movs	r0, #0
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800839c <_strtol_l.constprop.0+0x100>
 80082ba:	460d      	mov	r5, r1
 80082bc:	462e      	mov	r6, r5
 80082be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80082c6:	f017 0708 	ands.w	r7, r7, #8
 80082ca:	d1f7      	bne.n	80082bc <_strtol_l.constprop.0+0x20>
 80082cc:	2c2d      	cmp	r4, #45	; 0x2d
 80082ce:	d132      	bne.n	8008336 <_strtol_l.constprop.0+0x9a>
 80082d0:	782c      	ldrb	r4, [r5, #0]
 80082d2:	2701      	movs	r7, #1
 80082d4:	1cb5      	adds	r5, r6, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d05b      	beq.n	8008392 <_strtol_l.constprop.0+0xf6>
 80082da:	2b10      	cmp	r3, #16
 80082dc:	d109      	bne.n	80082f2 <_strtol_l.constprop.0+0x56>
 80082de:	2c30      	cmp	r4, #48	; 0x30
 80082e0:	d107      	bne.n	80082f2 <_strtol_l.constprop.0+0x56>
 80082e2:	782c      	ldrb	r4, [r5, #0]
 80082e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80082e8:	2c58      	cmp	r4, #88	; 0x58
 80082ea:	d14d      	bne.n	8008388 <_strtol_l.constprop.0+0xec>
 80082ec:	786c      	ldrb	r4, [r5, #1]
 80082ee:	2310      	movs	r3, #16
 80082f0:	3502      	adds	r5, #2
 80082f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80082f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80082fa:	f04f 0e00 	mov.w	lr, #0
 80082fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008302:	4676      	mov	r6, lr
 8008304:	fb03 8a19 	mls	sl, r3, r9, r8
 8008308:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800830c:	f1bc 0f09 	cmp.w	ip, #9
 8008310:	d816      	bhi.n	8008340 <_strtol_l.constprop.0+0xa4>
 8008312:	4664      	mov	r4, ip
 8008314:	42a3      	cmp	r3, r4
 8008316:	dd24      	ble.n	8008362 <_strtol_l.constprop.0+0xc6>
 8008318:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800831c:	d008      	beq.n	8008330 <_strtol_l.constprop.0+0x94>
 800831e:	45b1      	cmp	r9, r6
 8008320:	d31c      	bcc.n	800835c <_strtol_l.constprop.0+0xc0>
 8008322:	d101      	bne.n	8008328 <_strtol_l.constprop.0+0x8c>
 8008324:	45a2      	cmp	sl, r4
 8008326:	db19      	blt.n	800835c <_strtol_l.constprop.0+0xc0>
 8008328:	fb06 4603 	mla	r6, r6, r3, r4
 800832c:	f04f 0e01 	mov.w	lr, #1
 8008330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008334:	e7e8      	b.n	8008308 <_strtol_l.constprop.0+0x6c>
 8008336:	2c2b      	cmp	r4, #43	; 0x2b
 8008338:	bf04      	itt	eq
 800833a:	782c      	ldrbeq	r4, [r5, #0]
 800833c:	1cb5      	addeq	r5, r6, #2
 800833e:	e7ca      	b.n	80082d6 <_strtol_l.constprop.0+0x3a>
 8008340:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008344:	f1bc 0f19 	cmp.w	ip, #25
 8008348:	d801      	bhi.n	800834e <_strtol_l.constprop.0+0xb2>
 800834a:	3c37      	subs	r4, #55	; 0x37
 800834c:	e7e2      	b.n	8008314 <_strtol_l.constprop.0+0x78>
 800834e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008352:	f1bc 0f19 	cmp.w	ip, #25
 8008356:	d804      	bhi.n	8008362 <_strtol_l.constprop.0+0xc6>
 8008358:	3c57      	subs	r4, #87	; 0x57
 800835a:	e7db      	b.n	8008314 <_strtol_l.constprop.0+0x78>
 800835c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008360:	e7e6      	b.n	8008330 <_strtol_l.constprop.0+0x94>
 8008362:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008366:	d105      	bne.n	8008374 <_strtol_l.constprop.0+0xd8>
 8008368:	2322      	movs	r3, #34	; 0x22
 800836a:	6003      	str	r3, [r0, #0]
 800836c:	4646      	mov	r6, r8
 800836e:	b942      	cbnz	r2, 8008382 <_strtol_l.constprop.0+0xe6>
 8008370:	4630      	mov	r0, r6
 8008372:	e79e      	b.n	80082b2 <_strtol_l.constprop.0+0x16>
 8008374:	b107      	cbz	r7, 8008378 <_strtol_l.constprop.0+0xdc>
 8008376:	4276      	negs	r6, r6
 8008378:	2a00      	cmp	r2, #0
 800837a:	d0f9      	beq.n	8008370 <_strtol_l.constprop.0+0xd4>
 800837c:	f1be 0f00 	cmp.w	lr, #0
 8008380:	d000      	beq.n	8008384 <_strtol_l.constprop.0+0xe8>
 8008382:	1e69      	subs	r1, r5, #1
 8008384:	6011      	str	r1, [r2, #0]
 8008386:	e7f3      	b.n	8008370 <_strtol_l.constprop.0+0xd4>
 8008388:	2430      	movs	r4, #48	; 0x30
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1b1      	bne.n	80082f2 <_strtol_l.constprop.0+0x56>
 800838e:	2308      	movs	r3, #8
 8008390:	e7af      	b.n	80082f2 <_strtol_l.constprop.0+0x56>
 8008392:	2c30      	cmp	r4, #48	; 0x30
 8008394:	d0a5      	beq.n	80082e2 <_strtol_l.constprop.0+0x46>
 8008396:	230a      	movs	r3, #10
 8008398:	e7ab      	b.n	80082f2 <_strtol_l.constprop.0+0x56>
 800839a:	bf00      	nop
 800839c:	0800c6b1 	.word	0x0800c6b1

080083a0 <_strtol_r>:
 80083a0:	f7ff bf7c 	b.w	800829c <_strtol_l.constprop.0>

080083a4 <_fwalk_sglue>:
 80083a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083a8:	4607      	mov	r7, r0
 80083aa:	4688      	mov	r8, r1
 80083ac:	4614      	mov	r4, r2
 80083ae:	2600      	movs	r6, #0
 80083b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083b4:	f1b9 0901 	subs.w	r9, r9, #1
 80083b8:	d505      	bpl.n	80083c6 <_fwalk_sglue+0x22>
 80083ba:	6824      	ldr	r4, [r4, #0]
 80083bc:	2c00      	cmp	r4, #0
 80083be:	d1f7      	bne.n	80083b0 <_fwalk_sglue+0xc>
 80083c0:	4630      	mov	r0, r6
 80083c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c6:	89ab      	ldrh	r3, [r5, #12]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d907      	bls.n	80083dc <_fwalk_sglue+0x38>
 80083cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083d0:	3301      	adds	r3, #1
 80083d2:	d003      	beq.n	80083dc <_fwalk_sglue+0x38>
 80083d4:	4629      	mov	r1, r5
 80083d6:	4638      	mov	r0, r7
 80083d8:	47c0      	blx	r8
 80083da:	4306      	orrs	r6, r0
 80083dc:	3568      	adds	r5, #104	; 0x68
 80083de:	e7e9      	b.n	80083b4 <_fwalk_sglue+0x10>

080083e0 <_vsniprintf_r>:
 80083e0:	b530      	push	{r4, r5, lr}
 80083e2:	4614      	mov	r4, r2
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	b09b      	sub	sp, #108	; 0x6c
 80083e8:	4605      	mov	r5, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	da05      	bge.n	80083fa <_vsniprintf_r+0x1a>
 80083ee:	238b      	movs	r3, #139	; 0x8b
 80083f0:	6003      	str	r3, [r0, #0]
 80083f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083f6:	b01b      	add	sp, #108	; 0x6c
 80083f8:	bd30      	pop	{r4, r5, pc}
 80083fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008402:	bf14      	ite	ne
 8008404:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008408:	4623      	moveq	r3, r4
 800840a:	9302      	str	r3, [sp, #8]
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008412:	9100      	str	r1, [sp, #0]
 8008414:	9104      	str	r1, [sp, #16]
 8008416:	f8ad 300e 	strh.w	r3, [sp, #14]
 800841a:	4669      	mov	r1, sp
 800841c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800841e:	f001 faaf 	bl	8009980 <_svfiprintf_r>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	bfbc      	itt	lt
 8008426:	238b      	movlt	r3, #139	; 0x8b
 8008428:	602b      	strlt	r3, [r5, #0]
 800842a:	2c00      	cmp	r4, #0
 800842c:	d0e3      	beq.n	80083f6 <_vsniprintf_r+0x16>
 800842e:	9b00      	ldr	r3, [sp, #0]
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	e7df      	b.n	80083f6 <_vsniprintf_r+0x16>
	...

08008438 <vsniprintf>:
 8008438:	b507      	push	{r0, r1, r2, lr}
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	4613      	mov	r3, r2
 800843e:	460a      	mov	r2, r1
 8008440:	4601      	mov	r1, r0
 8008442:	4803      	ldr	r0, [pc, #12]	; (8008450 <vsniprintf+0x18>)
 8008444:	6800      	ldr	r0, [r0, #0]
 8008446:	f7ff ffcb 	bl	80083e0 <_vsniprintf_r>
 800844a:	b003      	add	sp, #12
 800844c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008450:	20000204 	.word	0x20000204

08008454 <strncmp>:
 8008454:	b510      	push	{r4, lr}
 8008456:	b16a      	cbz	r2, 8008474 <strncmp+0x20>
 8008458:	3901      	subs	r1, #1
 800845a:	1884      	adds	r4, r0, r2
 800845c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008460:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008464:	429a      	cmp	r2, r3
 8008466:	d103      	bne.n	8008470 <strncmp+0x1c>
 8008468:	42a0      	cmp	r0, r4
 800846a:	d001      	beq.n	8008470 <strncmp+0x1c>
 800846c:	2a00      	cmp	r2, #0
 800846e:	d1f5      	bne.n	800845c <strncmp+0x8>
 8008470:	1ad0      	subs	r0, r2, r3
 8008472:	bd10      	pop	{r4, pc}
 8008474:	4610      	mov	r0, r2
 8008476:	e7fc      	b.n	8008472 <strncmp+0x1e>

08008478 <memset>:
 8008478:	4402      	add	r2, r0
 800847a:	4603      	mov	r3, r0
 800847c:	4293      	cmp	r3, r2
 800847e:	d100      	bne.n	8008482 <memset+0xa>
 8008480:	4770      	bx	lr
 8008482:	f803 1b01 	strb.w	r1, [r3], #1
 8008486:	e7f9      	b.n	800847c <memset+0x4>

08008488 <_localeconv_r>:
 8008488:	4800      	ldr	r0, [pc, #0]	; (800848c <_localeconv_r+0x4>)
 800848a:	4770      	bx	lr
 800848c:	2000013c 	.word	0x2000013c

08008490 <__errno>:
 8008490:	4b01      	ldr	r3, [pc, #4]	; (8008498 <__errno+0x8>)
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	20000204 	.word	0x20000204

0800849c <__libc_init_array>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4d0d      	ldr	r5, [pc, #52]	; (80084d4 <__libc_init_array+0x38>)
 80084a0:	4c0d      	ldr	r4, [pc, #52]	; (80084d8 <__libc_init_array+0x3c>)
 80084a2:	1b64      	subs	r4, r4, r5
 80084a4:	10a4      	asrs	r4, r4, #2
 80084a6:	2600      	movs	r6, #0
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	d109      	bne.n	80084c0 <__libc_init_array+0x24>
 80084ac:	4d0b      	ldr	r5, [pc, #44]	; (80084dc <__libc_init_array+0x40>)
 80084ae:	4c0c      	ldr	r4, [pc, #48]	; (80084e0 <__libc_init_array+0x44>)
 80084b0:	f002 fdb6 	bl	800b020 <_init>
 80084b4:	1b64      	subs	r4, r4, r5
 80084b6:	10a4      	asrs	r4, r4, #2
 80084b8:	2600      	movs	r6, #0
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	d105      	bne.n	80084ca <__libc_init_array+0x2e>
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c4:	4798      	blx	r3
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7ee      	b.n	80084a8 <__libc_init_array+0xc>
 80084ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ce:	4798      	blx	r3
 80084d0:	3601      	adds	r6, #1
 80084d2:	e7f2      	b.n	80084ba <__libc_init_array+0x1e>
 80084d4:	0800ca48 	.word	0x0800ca48
 80084d8:	0800ca48 	.word	0x0800ca48
 80084dc:	0800ca48 	.word	0x0800ca48
 80084e0:	0800ca4c 	.word	0x0800ca4c

080084e4 <__retarget_lock_init_recursive>:
 80084e4:	4770      	bx	lr

080084e6 <__retarget_lock_acquire_recursive>:
 80084e6:	4770      	bx	lr

080084e8 <__retarget_lock_release_recursive>:
 80084e8:	4770      	bx	lr

080084ea <memcpy>:
 80084ea:	440a      	add	r2, r1
 80084ec:	4291      	cmp	r1, r2
 80084ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084f2:	d100      	bne.n	80084f6 <memcpy+0xc>
 80084f4:	4770      	bx	lr
 80084f6:	b510      	push	{r4, lr}
 80084f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008500:	4291      	cmp	r1, r2
 8008502:	d1f9      	bne.n	80084f8 <memcpy+0xe>
 8008504:	bd10      	pop	{r4, pc}
	...

08008508 <nan>:
 8008508:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008510 <nan+0x8>
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	00000000 	.word	0x00000000
 8008514:	7ff80000 	.word	0x7ff80000

08008518 <nanf>:
 8008518:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008520 <nanf+0x8>
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	7fc00000 	.word	0x7fc00000

08008524 <quorem>:
 8008524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	6903      	ldr	r3, [r0, #16]
 800852a:	690c      	ldr	r4, [r1, #16]
 800852c:	42a3      	cmp	r3, r4
 800852e:	4607      	mov	r7, r0
 8008530:	db7e      	blt.n	8008630 <quorem+0x10c>
 8008532:	3c01      	subs	r4, #1
 8008534:	f101 0814 	add.w	r8, r1, #20
 8008538:	f100 0514 	add.w	r5, r0, #20
 800853c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008540:	9301      	str	r3, [sp, #4]
 8008542:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008546:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800854a:	3301      	adds	r3, #1
 800854c:	429a      	cmp	r2, r3
 800854e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008552:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008556:	fbb2 f6f3 	udiv	r6, r2, r3
 800855a:	d331      	bcc.n	80085c0 <quorem+0x9c>
 800855c:	f04f 0e00 	mov.w	lr, #0
 8008560:	4640      	mov	r0, r8
 8008562:	46ac      	mov	ip, r5
 8008564:	46f2      	mov	sl, lr
 8008566:	f850 2b04 	ldr.w	r2, [r0], #4
 800856a:	b293      	uxth	r3, r2
 800856c:	fb06 e303 	mla	r3, r6, r3, lr
 8008570:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008574:	0c1a      	lsrs	r2, r3, #16
 8008576:	b29b      	uxth	r3, r3
 8008578:	ebaa 0303 	sub.w	r3, sl, r3
 800857c:	f8dc a000 	ldr.w	sl, [ip]
 8008580:	fa13 f38a 	uxtah	r3, r3, sl
 8008584:	fb06 220e 	mla	r2, r6, lr, r2
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	9b00      	ldr	r3, [sp, #0]
 800858c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008590:	b292      	uxth	r2, r2
 8008592:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008596:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800859a:	f8bd 3000 	ldrh.w	r3, [sp]
 800859e:	4581      	cmp	r9, r0
 80085a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a4:	f84c 3b04 	str.w	r3, [ip], #4
 80085a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80085ac:	d2db      	bcs.n	8008566 <quorem+0x42>
 80085ae:	f855 300b 	ldr.w	r3, [r5, fp]
 80085b2:	b92b      	cbnz	r3, 80085c0 <quorem+0x9c>
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	3b04      	subs	r3, #4
 80085b8:	429d      	cmp	r5, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	d32c      	bcc.n	8008618 <quorem+0xf4>
 80085be:	613c      	str	r4, [r7, #16]
 80085c0:	4638      	mov	r0, r7
 80085c2:	f001 ff15 	bl	800a3f0 <__mcmp>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	db22      	blt.n	8008610 <quorem+0xec>
 80085ca:	3601      	adds	r6, #1
 80085cc:	4629      	mov	r1, r5
 80085ce:	2000      	movs	r0, #0
 80085d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80085d4:	f8d1 c000 	ldr.w	ip, [r1]
 80085d8:	b293      	uxth	r3, r2
 80085da:	1ac3      	subs	r3, r0, r3
 80085dc:	0c12      	lsrs	r2, r2, #16
 80085de:	fa13 f38c 	uxtah	r3, r3, ip
 80085e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80085e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085f0:	45c1      	cmp	r9, r8
 80085f2:	f841 3b04 	str.w	r3, [r1], #4
 80085f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085fa:	d2e9      	bcs.n	80085d0 <quorem+0xac>
 80085fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008600:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008604:	b922      	cbnz	r2, 8008610 <quorem+0xec>
 8008606:	3b04      	subs	r3, #4
 8008608:	429d      	cmp	r5, r3
 800860a:	461a      	mov	r2, r3
 800860c:	d30a      	bcc.n	8008624 <quorem+0x100>
 800860e:	613c      	str	r4, [r7, #16]
 8008610:	4630      	mov	r0, r6
 8008612:	b003      	add	sp, #12
 8008614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	3b04      	subs	r3, #4
 800861c:	2a00      	cmp	r2, #0
 800861e:	d1ce      	bne.n	80085be <quorem+0x9a>
 8008620:	3c01      	subs	r4, #1
 8008622:	e7c9      	b.n	80085b8 <quorem+0x94>
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	3b04      	subs	r3, #4
 8008628:	2a00      	cmp	r2, #0
 800862a:	d1f0      	bne.n	800860e <quorem+0xea>
 800862c:	3c01      	subs	r4, #1
 800862e:	e7eb      	b.n	8008608 <quorem+0xe4>
 8008630:	2000      	movs	r0, #0
 8008632:	e7ee      	b.n	8008612 <quorem+0xee>
 8008634:	0000      	movs	r0, r0
	...

08008638 <_dtoa_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	ed2d 8b04 	vpush	{d8-d9}
 8008640:	69c5      	ldr	r5, [r0, #28]
 8008642:	b093      	sub	sp, #76	; 0x4c
 8008644:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008648:	ec57 6b10 	vmov	r6, r7, d0
 800864c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008650:	9107      	str	r1, [sp, #28]
 8008652:	4604      	mov	r4, r0
 8008654:	920a      	str	r2, [sp, #40]	; 0x28
 8008656:	930d      	str	r3, [sp, #52]	; 0x34
 8008658:	b975      	cbnz	r5, 8008678 <_dtoa_r+0x40>
 800865a:	2010      	movs	r0, #16
 800865c:	f001 fa8e 	bl	8009b7c <malloc>
 8008660:	4602      	mov	r2, r0
 8008662:	61e0      	str	r0, [r4, #28]
 8008664:	b920      	cbnz	r0, 8008670 <_dtoa_r+0x38>
 8008666:	4bae      	ldr	r3, [pc, #696]	; (8008920 <_dtoa_r+0x2e8>)
 8008668:	21ef      	movs	r1, #239	; 0xef
 800866a:	48ae      	ldr	r0, [pc, #696]	; (8008924 <_dtoa_r+0x2ec>)
 800866c:	f002 f996 	bl	800a99c <__assert_func>
 8008670:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008674:	6005      	str	r5, [r0, #0]
 8008676:	60c5      	str	r5, [r0, #12]
 8008678:	69e3      	ldr	r3, [r4, #28]
 800867a:	6819      	ldr	r1, [r3, #0]
 800867c:	b151      	cbz	r1, 8008694 <_dtoa_r+0x5c>
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	604a      	str	r2, [r1, #4]
 8008682:	2301      	movs	r3, #1
 8008684:	4093      	lsls	r3, r2
 8008686:	608b      	str	r3, [r1, #8]
 8008688:	4620      	mov	r0, r4
 800868a:	f001 fc2b 	bl	8009ee4 <_Bfree>
 800868e:	69e3      	ldr	r3, [r4, #28]
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	1e3b      	subs	r3, r7, #0
 8008696:	bfbb      	ittet	lt
 8008698:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800869c:	9303      	strlt	r3, [sp, #12]
 800869e:	2300      	movge	r3, #0
 80086a0:	2201      	movlt	r2, #1
 80086a2:	bfac      	ite	ge
 80086a4:	f8c8 3000 	strge.w	r3, [r8]
 80086a8:	f8c8 2000 	strlt.w	r2, [r8]
 80086ac:	4b9e      	ldr	r3, [pc, #632]	; (8008928 <_dtoa_r+0x2f0>)
 80086ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086b2:	ea33 0308 	bics.w	r3, r3, r8
 80086b6:	d11b      	bne.n	80086f0 <_dtoa_r+0xb8>
 80086b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80086c4:	4333      	orrs	r3, r6
 80086c6:	f000 8593 	beq.w	80091f0 <_dtoa_r+0xbb8>
 80086ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086cc:	b963      	cbnz	r3, 80086e8 <_dtoa_r+0xb0>
 80086ce:	4b97      	ldr	r3, [pc, #604]	; (800892c <_dtoa_r+0x2f4>)
 80086d0:	e027      	b.n	8008722 <_dtoa_r+0xea>
 80086d2:	4b97      	ldr	r3, [pc, #604]	; (8008930 <_dtoa_r+0x2f8>)
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	9800      	ldr	r0, [sp, #0]
 80086de:	b013      	add	sp, #76	; 0x4c
 80086e0:	ecbd 8b04 	vpop	{d8-d9}
 80086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e8:	4b90      	ldr	r3, [pc, #576]	; (800892c <_dtoa_r+0x2f4>)
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	3303      	adds	r3, #3
 80086ee:	e7f3      	b.n	80086d8 <_dtoa_r+0xa0>
 80086f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	ec51 0b17 	vmov	r0, r1, d7
 80086fa:	eeb0 8a47 	vmov.f32	s16, s14
 80086fe:	eef0 8a67 	vmov.f32	s17, s15
 8008702:	2300      	movs	r3, #0
 8008704:	f7f8 fa0a 	bl	8000b1c <__aeabi_dcmpeq>
 8008708:	4681      	mov	r9, r0
 800870a:	b160      	cbz	r0, 8008726 <_dtoa_r+0xee>
 800870c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800870e:	2301      	movs	r3, #1
 8008710:	6013      	str	r3, [r2, #0]
 8008712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008714:	2b00      	cmp	r3, #0
 8008716:	f000 8568 	beq.w	80091ea <_dtoa_r+0xbb2>
 800871a:	4b86      	ldr	r3, [pc, #536]	; (8008934 <_dtoa_r+0x2fc>)
 800871c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800871e:	6013      	str	r3, [r2, #0]
 8008720:	3b01      	subs	r3, #1
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	e7da      	b.n	80086dc <_dtoa_r+0xa4>
 8008726:	aa10      	add	r2, sp, #64	; 0x40
 8008728:	a911      	add	r1, sp, #68	; 0x44
 800872a:	4620      	mov	r0, r4
 800872c:	eeb0 0a48 	vmov.f32	s0, s16
 8008730:	eef0 0a68 	vmov.f32	s1, s17
 8008734:	f001 ff72 	bl	800a61c <__d2b>
 8008738:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800873c:	4682      	mov	sl, r0
 800873e:	2d00      	cmp	r5, #0
 8008740:	d07f      	beq.n	8008842 <_dtoa_r+0x20a>
 8008742:	ee18 3a90 	vmov	r3, s17
 8008746:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800874a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800874e:	ec51 0b18 	vmov	r0, r1, d8
 8008752:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008756:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800875a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800875e:	4619      	mov	r1, r3
 8008760:	2200      	movs	r2, #0
 8008762:	4b75      	ldr	r3, [pc, #468]	; (8008938 <_dtoa_r+0x300>)
 8008764:	f7f7 fdba 	bl	80002dc <__aeabi_dsub>
 8008768:	a367      	add	r3, pc, #412	; (adr r3, 8008908 <_dtoa_r+0x2d0>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 ff6d 	bl	800064c <__aeabi_dmul>
 8008772:	a367      	add	r3, pc, #412	; (adr r3, 8008910 <_dtoa_r+0x2d8>)
 8008774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008778:	f7f7 fdb2 	bl	80002e0 <__adddf3>
 800877c:	4606      	mov	r6, r0
 800877e:	4628      	mov	r0, r5
 8008780:	460f      	mov	r7, r1
 8008782:	f7f7 fef9 	bl	8000578 <__aeabi_i2d>
 8008786:	a364      	add	r3, pc, #400	; (adr r3, 8008918 <_dtoa_r+0x2e0>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 ff5e 	bl	800064c <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4630      	mov	r0, r6
 8008796:	4639      	mov	r1, r7
 8008798:	f7f7 fda2 	bl	80002e0 <__adddf3>
 800879c:	4606      	mov	r6, r0
 800879e:	460f      	mov	r7, r1
 80087a0:	f7f8 fa04 	bl	8000bac <__aeabi_d2iz>
 80087a4:	2200      	movs	r2, #0
 80087a6:	4683      	mov	fp, r0
 80087a8:	2300      	movs	r3, #0
 80087aa:	4630      	mov	r0, r6
 80087ac:	4639      	mov	r1, r7
 80087ae:	f7f8 f9bf 	bl	8000b30 <__aeabi_dcmplt>
 80087b2:	b148      	cbz	r0, 80087c8 <_dtoa_r+0x190>
 80087b4:	4658      	mov	r0, fp
 80087b6:	f7f7 fedf 	bl	8000578 <__aeabi_i2d>
 80087ba:	4632      	mov	r2, r6
 80087bc:	463b      	mov	r3, r7
 80087be:	f7f8 f9ad 	bl	8000b1c <__aeabi_dcmpeq>
 80087c2:	b908      	cbnz	r0, 80087c8 <_dtoa_r+0x190>
 80087c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80087c8:	f1bb 0f16 	cmp.w	fp, #22
 80087cc:	d857      	bhi.n	800887e <_dtoa_r+0x246>
 80087ce:	4b5b      	ldr	r3, [pc, #364]	; (800893c <_dtoa_r+0x304>)
 80087d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	ec51 0b18 	vmov	r0, r1, d8
 80087dc:	f7f8 f9a8 	bl	8000b30 <__aeabi_dcmplt>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d04e      	beq.n	8008882 <_dtoa_r+0x24a>
 80087e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80087e8:	2300      	movs	r3, #0
 80087ea:	930c      	str	r3, [sp, #48]	; 0x30
 80087ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087ee:	1b5b      	subs	r3, r3, r5
 80087f0:	1e5a      	subs	r2, r3, #1
 80087f2:	bf45      	ittet	mi
 80087f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80087f8:	9305      	strmi	r3, [sp, #20]
 80087fa:	2300      	movpl	r3, #0
 80087fc:	2300      	movmi	r3, #0
 80087fe:	9206      	str	r2, [sp, #24]
 8008800:	bf54      	ite	pl
 8008802:	9305      	strpl	r3, [sp, #20]
 8008804:	9306      	strmi	r3, [sp, #24]
 8008806:	f1bb 0f00 	cmp.w	fp, #0
 800880a:	db3c      	blt.n	8008886 <_dtoa_r+0x24e>
 800880c:	9b06      	ldr	r3, [sp, #24]
 800880e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008812:	445b      	add	r3, fp
 8008814:	9306      	str	r3, [sp, #24]
 8008816:	2300      	movs	r3, #0
 8008818:	9308      	str	r3, [sp, #32]
 800881a:	9b07      	ldr	r3, [sp, #28]
 800881c:	2b09      	cmp	r3, #9
 800881e:	d868      	bhi.n	80088f2 <_dtoa_r+0x2ba>
 8008820:	2b05      	cmp	r3, #5
 8008822:	bfc4      	itt	gt
 8008824:	3b04      	subgt	r3, #4
 8008826:	9307      	strgt	r3, [sp, #28]
 8008828:	9b07      	ldr	r3, [sp, #28]
 800882a:	f1a3 0302 	sub.w	r3, r3, #2
 800882e:	bfcc      	ite	gt
 8008830:	2500      	movgt	r5, #0
 8008832:	2501      	movle	r5, #1
 8008834:	2b03      	cmp	r3, #3
 8008836:	f200 8085 	bhi.w	8008944 <_dtoa_r+0x30c>
 800883a:	e8df f003 	tbb	[pc, r3]
 800883e:	3b2e      	.short	0x3b2e
 8008840:	5839      	.short	0x5839
 8008842:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008846:	441d      	add	r5, r3
 8008848:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800884c:	2b20      	cmp	r3, #32
 800884e:	bfc1      	itttt	gt
 8008850:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008854:	fa08 f803 	lslgt.w	r8, r8, r3
 8008858:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800885c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008860:	bfd6      	itet	le
 8008862:	f1c3 0320 	rsble	r3, r3, #32
 8008866:	ea48 0003 	orrgt.w	r0, r8, r3
 800886a:	fa06 f003 	lslle.w	r0, r6, r3
 800886e:	f7f7 fe73 	bl	8000558 <__aeabi_ui2d>
 8008872:	2201      	movs	r2, #1
 8008874:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008878:	3d01      	subs	r5, #1
 800887a:	920e      	str	r2, [sp, #56]	; 0x38
 800887c:	e76f      	b.n	800875e <_dtoa_r+0x126>
 800887e:	2301      	movs	r3, #1
 8008880:	e7b3      	b.n	80087ea <_dtoa_r+0x1b2>
 8008882:	900c      	str	r0, [sp, #48]	; 0x30
 8008884:	e7b2      	b.n	80087ec <_dtoa_r+0x1b4>
 8008886:	9b05      	ldr	r3, [sp, #20]
 8008888:	eba3 030b 	sub.w	r3, r3, fp
 800888c:	9305      	str	r3, [sp, #20]
 800888e:	f1cb 0300 	rsb	r3, fp, #0
 8008892:	9308      	str	r3, [sp, #32]
 8008894:	2300      	movs	r3, #0
 8008896:	930b      	str	r3, [sp, #44]	; 0x2c
 8008898:	e7bf      	b.n	800881a <_dtoa_r+0x1e2>
 800889a:	2300      	movs	r3, #0
 800889c:	9309      	str	r3, [sp, #36]	; 0x24
 800889e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	dc52      	bgt.n	800894a <_dtoa_r+0x312>
 80088a4:	2301      	movs	r3, #1
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	461a      	mov	r2, r3
 80088ac:	920a      	str	r2, [sp, #40]	; 0x28
 80088ae:	e00b      	b.n	80088c8 <_dtoa_r+0x290>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e7f3      	b.n	800889c <_dtoa_r+0x264>
 80088b4:	2300      	movs	r3, #0
 80088b6:	9309      	str	r3, [sp, #36]	; 0x24
 80088b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ba:	445b      	add	r3, fp
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	3301      	adds	r3, #1
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	bfb8      	it	lt
 80088c6:	2301      	movlt	r3, #1
 80088c8:	69e0      	ldr	r0, [r4, #28]
 80088ca:	2100      	movs	r1, #0
 80088cc:	2204      	movs	r2, #4
 80088ce:	f102 0614 	add.w	r6, r2, #20
 80088d2:	429e      	cmp	r6, r3
 80088d4:	d93d      	bls.n	8008952 <_dtoa_r+0x31a>
 80088d6:	6041      	str	r1, [r0, #4]
 80088d8:	4620      	mov	r0, r4
 80088da:	f001 fac3 	bl	8009e64 <_Balloc>
 80088de:	9000      	str	r0, [sp, #0]
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d139      	bne.n	8008958 <_dtoa_r+0x320>
 80088e4:	4b16      	ldr	r3, [pc, #88]	; (8008940 <_dtoa_r+0x308>)
 80088e6:	4602      	mov	r2, r0
 80088e8:	f240 11af 	movw	r1, #431	; 0x1af
 80088ec:	e6bd      	b.n	800866a <_dtoa_r+0x32>
 80088ee:	2301      	movs	r3, #1
 80088f0:	e7e1      	b.n	80088b6 <_dtoa_r+0x27e>
 80088f2:	2501      	movs	r5, #1
 80088f4:	2300      	movs	r3, #0
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	9509      	str	r5, [sp, #36]	; 0x24
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088fe:	9301      	str	r3, [sp, #4]
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	2200      	movs	r2, #0
 8008904:	2312      	movs	r3, #18
 8008906:	e7d1      	b.n	80088ac <_dtoa_r+0x274>
 8008908:	636f4361 	.word	0x636f4361
 800890c:	3fd287a7 	.word	0x3fd287a7
 8008910:	8b60c8b3 	.word	0x8b60c8b3
 8008914:	3fc68a28 	.word	0x3fc68a28
 8008918:	509f79fb 	.word	0x509f79fb
 800891c:	3fd34413 	.word	0x3fd34413
 8008920:	0800c7be 	.word	0x0800c7be
 8008924:	0800c7d5 	.word	0x0800c7d5
 8008928:	7ff00000 	.word	0x7ff00000
 800892c:	0800c7ba 	.word	0x0800c7ba
 8008930:	0800c7b1 	.word	0x0800c7b1
 8008934:	0800c629 	.word	0x0800c629
 8008938:	3ff80000 	.word	0x3ff80000
 800893c:	0800c930 	.word	0x0800c930
 8008940:	0800c82d 	.word	0x0800c82d
 8008944:	2301      	movs	r3, #1
 8008946:	9309      	str	r3, [sp, #36]	; 0x24
 8008948:	e7d7      	b.n	80088fa <_dtoa_r+0x2c2>
 800894a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800894c:	9301      	str	r3, [sp, #4]
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	e7ba      	b.n	80088c8 <_dtoa_r+0x290>
 8008952:	3101      	adds	r1, #1
 8008954:	0052      	lsls	r2, r2, #1
 8008956:	e7ba      	b.n	80088ce <_dtoa_r+0x296>
 8008958:	69e3      	ldr	r3, [r4, #28]
 800895a:	9a00      	ldr	r2, [sp, #0]
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	9b04      	ldr	r3, [sp, #16]
 8008960:	2b0e      	cmp	r3, #14
 8008962:	f200 80a8 	bhi.w	8008ab6 <_dtoa_r+0x47e>
 8008966:	2d00      	cmp	r5, #0
 8008968:	f000 80a5 	beq.w	8008ab6 <_dtoa_r+0x47e>
 800896c:	f1bb 0f00 	cmp.w	fp, #0
 8008970:	dd38      	ble.n	80089e4 <_dtoa_r+0x3ac>
 8008972:	4bc0      	ldr	r3, [pc, #768]	; (8008c74 <_dtoa_r+0x63c>)
 8008974:	f00b 020f 	and.w	r2, fp, #15
 8008978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800897c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008980:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008984:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008988:	d019      	beq.n	80089be <_dtoa_r+0x386>
 800898a:	4bbb      	ldr	r3, [pc, #748]	; (8008c78 <_dtoa_r+0x640>)
 800898c:	ec51 0b18 	vmov	r0, r1, d8
 8008990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008994:	f7f7 ff84 	bl	80008a0 <__aeabi_ddiv>
 8008998:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800899c:	f008 080f 	and.w	r8, r8, #15
 80089a0:	2503      	movs	r5, #3
 80089a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c78 <_dtoa_r+0x640>
 80089a6:	f1b8 0f00 	cmp.w	r8, #0
 80089aa:	d10a      	bne.n	80089c2 <_dtoa_r+0x38a>
 80089ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b0:	4632      	mov	r2, r6
 80089b2:	463b      	mov	r3, r7
 80089b4:	f7f7 ff74 	bl	80008a0 <__aeabi_ddiv>
 80089b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089bc:	e02b      	b.n	8008a16 <_dtoa_r+0x3de>
 80089be:	2502      	movs	r5, #2
 80089c0:	e7ef      	b.n	80089a2 <_dtoa_r+0x36a>
 80089c2:	f018 0f01 	tst.w	r8, #1
 80089c6:	d008      	beq.n	80089da <_dtoa_r+0x3a2>
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089d0:	f7f7 fe3c 	bl	800064c <__aeabi_dmul>
 80089d4:	3501      	adds	r5, #1
 80089d6:	4606      	mov	r6, r0
 80089d8:	460f      	mov	r7, r1
 80089da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80089de:	f109 0908 	add.w	r9, r9, #8
 80089e2:	e7e0      	b.n	80089a6 <_dtoa_r+0x36e>
 80089e4:	f000 809f 	beq.w	8008b26 <_dtoa_r+0x4ee>
 80089e8:	f1cb 0600 	rsb	r6, fp, #0
 80089ec:	4ba1      	ldr	r3, [pc, #644]	; (8008c74 <_dtoa_r+0x63c>)
 80089ee:	4fa2      	ldr	r7, [pc, #648]	; (8008c78 <_dtoa_r+0x640>)
 80089f0:	f006 020f 	and.w	r2, r6, #15
 80089f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	ec51 0b18 	vmov	r0, r1, d8
 8008a00:	f7f7 fe24 	bl	800064c <__aeabi_dmul>
 8008a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a08:	1136      	asrs	r6, r6, #4
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2502      	movs	r5, #2
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d17e      	bne.n	8008b10 <_dtoa_r+0x4d8>
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1d0      	bne.n	80089b8 <_dtoa_r+0x380>
 8008a16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8084 	beq.w	8008b2a <_dtoa_r+0x4f2>
 8008a22:	4b96      	ldr	r3, [pc, #600]	; (8008c7c <_dtoa_r+0x644>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	4640      	mov	r0, r8
 8008a28:	4649      	mov	r1, r9
 8008a2a:	f7f8 f881 	bl	8000b30 <__aeabi_dcmplt>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d07b      	beq.n	8008b2a <_dtoa_r+0x4f2>
 8008a32:	9b04      	ldr	r3, [sp, #16]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d078      	beq.n	8008b2a <_dtoa_r+0x4f2>
 8008a38:	9b01      	ldr	r3, [sp, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dd39      	ble.n	8008ab2 <_dtoa_r+0x47a>
 8008a3e:	4b90      	ldr	r3, [pc, #576]	; (8008c80 <_dtoa_r+0x648>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	4640      	mov	r0, r8
 8008a44:	4649      	mov	r1, r9
 8008a46:	f7f7 fe01 	bl	800064c <__aeabi_dmul>
 8008a4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a4e:	9e01      	ldr	r6, [sp, #4]
 8008a50:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008a54:	3501      	adds	r5, #1
 8008a56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7f7 fd8c 	bl	8000578 <__aeabi_i2d>
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	f7f7 fdf2 	bl	800064c <__aeabi_dmul>
 8008a68:	4b86      	ldr	r3, [pc, #536]	; (8008c84 <_dtoa_r+0x64c>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f7f7 fc38 	bl	80002e0 <__adddf3>
 8008a70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a78:	9303      	str	r3, [sp, #12]
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d158      	bne.n	8008b30 <_dtoa_r+0x4f8>
 8008a7e:	4b82      	ldr	r3, [pc, #520]	; (8008c88 <_dtoa_r+0x650>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 fc29 	bl	80002dc <__aeabi_dsub>
 8008a8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a8e:	4680      	mov	r8, r0
 8008a90:	4689      	mov	r9, r1
 8008a92:	f7f8 f86b 	bl	8000b6c <__aeabi_dcmpgt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f040 8296 	bne.w	8008fc8 <_dtoa_r+0x990>
 8008a9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7f8 f842 	bl	8000b30 <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f040 8289 	bne.w	8008fc4 <_dtoa_r+0x98c>
 8008ab2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f2c0 814e 	blt.w	8008d5a <_dtoa_r+0x722>
 8008abe:	f1bb 0f0e 	cmp.w	fp, #14
 8008ac2:	f300 814a 	bgt.w	8008d5a <_dtoa_r+0x722>
 8008ac6:	4b6b      	ldr	r3, [pc, #428]	; (8008c74 <_dtoa_r+0x63c>)
 8008ac8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f280 80dc 	bge.w	8008c90 <_dtoa_r+0x658>
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f300 80d8 	bgt.w	8008c90 <_dtoa_r+0x658>
 8008ae0:	f040 826f 	bne.w	8008fc2 <_dtoa_r+0x98a>
 8008ae4:	4b68      	ldr	r3, [pc, #416]	; (8008c88 <_dtoa_r+0x650>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	4640      	mov	r0, r8
 8008aea:	4649      	mov	r1, r9
 8008aec:	f7f7 fdae 	bl	800064c <__aeabi_dmul>
 8008af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008af4:	f7f8 f830 	bl	8000b58 <__aeabi_dcmpge>
 8008af8:	9e04      	ldr	r6, [sp, #16]
 8008afa:	4637      	mov	r7, r6
 8008afc:	2800      	cmp	r0, #0
 8008afe:	f040 8245 	bne.w	8008f8c <_dtoa_r+0x954>
 8008b02:	9d00      	ldr	r5, [sp, #0]
 8008b04:	2331      	movs	r3, #49	; 0x31
 8008b06:	f805 3b01 	strb.w	r3, [r5], #1
 8008b0a:	f10b 0b01 	add.w	fp, fp, #1
 8008b0e:	e241      	b.n	8008f94 <_dtoa_r+0x95c>
 8008b10:	07f2      	lsls	r2, r6, #31
 8008b12:	d505      	bpl.n	8008b20 <_dtoa_r+0x4e8>
 8008b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b18:	f7f7 fd98 	bl	800064c <__aeabi_dmul>
 8008b1c:	3501      	adds	r5, #1
 8008b1e:	2301      	movs	r3, #1
 8008b20:	1076      	asrs	r6, r6, #1
 8008b22:	3708      	adds	r7, #8
 8008b24:	e773      	b.n	8008a0e <_dtoa_r+0x3d6>
 8008b26:	2502      	movs	r5, #2
 8008b28:	e775      	b.n	8008a16 <_dtoa_r+0x3de>
 8008b2a:	9e04      	ldr	r6, [sp, #16]
 8008b2c:	465f      	mov	r7, fp
 8008b2e:	e792      	b.n	8008a56 <_dtoa_r+0x41e>
 8008b30:	9900      	ldr	r1, [sp, #0]
 8008b32:	4b50      	ldr	r3, [pc, #320]	; (8008c74 <_dtoa_r+0x63c>)
 8008b34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b38:	4431      	add	r1, r6
 8008b3a:	9102      	str	r1, [sp, #8]
 8008b3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b3e:	eeb0 9a47 	vmov.f32	s18, s14
 8008b42:	eef0 9a67 	vmov.f32	s19, s15
 8008b46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008b4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b4e:	2900      	cmp	r1, #0
 8008b50:	d044      	beq.n	8008bdc <_dtoa_r+0x5a4>
 8008b52:	494e      	ldr	r1, [pc, #312]	; (8008c8c <_dtoa_r+0x654>)
 8008b54:	2000      	movs	r0, #0
 8008b56:	f7f7 fea3 	bl	80008a0 <__aeabi_ddiv>
 8008b5a:	ec53 2b19 	vmov	r2, r3, d9
 8008b5e:	f7f7 fbbd 	bl	80002dc <__aeabi_dsub>
 8008b62:	9d00      	ldr	r5, [sp, #0]
 8008b64:	ec41 0b19 	vmov	d9, r0, r1
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4640      	mov	r0, r8
 8008b6c:	f7f8 f81e 	bl	8000bac <__aeabi_d2iz>
 8008b70:	4606      	mov	r6, r0
 8008b72:	f7f7 fd01 	bl	8000578 <__aeabi_i2d>
 8008b76:	4602      	mov	r2, r0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fbad 	bl	80002dc <__aeabi_dsub>
 8008b82:	3630      	adds	r6, #48	; 0x30
 8008b84:	f805 6b01 	strb.w	r6, [r5], #1
 8008b88:	ec53 2b19 	vmov	r2, r3, d9
 8008b8c:	4680      	mov	r8, r0
 8008b8e:	4689      	mov	r9, r1
 8008b90:	f7f7 ffce 	bl	8000b30 <__aeabi_dcmplt>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d164      	bne.n	8008c62 <_dtoa_r+0x62a>
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	4937      	ldr	r1, [pc, #220]	; (8008c7c <_dtoa_r+0x644>)
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f7f7 fb9c 	bl	80002dc <__aeabi_dsub>
 8008ba4:	ec53 2b19 	vmov	r2, r3, d9
 8008ba8:	f7f7 ffc2 	bl	8000b30 <__aeabi_dcmplt>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	f040 80b6 	bne.w	8008d1e <_dtoa_r+0x6e6>
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	429d      	cmp	r5, r3
 8008bb6:	f43f af7c 	beq.w	8008ab2 <_dtoa_r+0x47a>
 8008bba:	4b31      	ldr	r3, [pc, #196]	; (8008c80 <_dtoa_r+0x648>)
 8008bbc:	ec51 0b19 	vmov	r0, r1, d9
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f7f7 fd43 	bl	800064c <__aeabi_dmul>
 8008bc6:	4b2e      	ldr	r3, [pc, #184]	; (8008c80 <_dtoa_r+0x648>)
 8008bc8:	ec41 0b19 	vmov	d9, r0, r1
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 fd3b 	bl	800064c <__aeabi_dmul>
 8008bd6:	4680      	mov	r8, r0
 8008bd8:	4689      	mov	r9, r1
 8008bda:	e7c5      	b.n	8008b68 <_dtoa_r+0x530>
 8008bdc:	ec51 0b17 	vmov	r0, r1, d7
 8008be0:	f7f7 fd34 	bl	800064c <__aeabi_dmul>
 8008be4:	9b02      	ldr	r3, [sp, #8]
 8008be6:	9d00      	ldr	r5, [sp, #0]
 8008be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bea:	ec41 0b19 	vmov	d9, r0, r1
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4640      	mov	r0, r8
 8008bf2:	f7f7 ffdb 	bl	8000bac <__aeabi_d2iz>
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	f7f7 fcbe 	bl	8000578 <__aeabi_i2d>
 8008bfc:	3630      	adds	r6, #48	; 0x30
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4640      	mov	r0, r8
 8008c04:	4649      	mov	r1, r9
 8008c06:	f7f7 fb69 	bl	80002dc <__aeabi_dsub>
 8008c0a:	f805 6b01 	strb.w	r6, [r5], #1
 8008c0e:	9b02      	ldr	r3, [sp, #8]
 8008c10:	429d      	cmp	r5, r3
 8008c12:	4680      	mov	r8, r0
 8008c14:	4689      	mov	r9, r1
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	d124      	bne.n	8008c66 <_dtoa_r+0x62e>
 8008c1c:	4b1b      	ldr	r3, [pc, #108]	; (8008c8c <_dtoa_r+0x654>)
 8008c1e:	ec51 0b19 	vmov	r0, r1, d9
 8008c22:	f7f7 fb5d 	bl	80002e0 <__adddf3>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	f7f7 ff9d 	bl	8000b6c <__aeabi_dcmpgt>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d173      	bne.n	8008d1e <_dtoa_r+0x6e6>
 8008c36:	ec53 2b19 	vmov	r2, r3, d9
 8008c3a:	4914      	ldr	r1, [pc, #80]	; (8008c8c <_dtoa_r+0x654>)
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	f7f7 fb4d 	bl	80002dc <__aeabi_dsub>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4640      	mov	r0, r8
 8008c48:	4649      	mov	r1, r9
 8008c4a:	f7f7 ff71 	bl	8000b30 <__aeabi_dcmplt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f af2f 	beq.w	8008ab2 <_dtoa_r+0x47a>
 8008c54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008c56:	1e6b      	subs	r3, r5, #1
 8008c58:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c5e:	2b30      	cmp	r3, #48	; 0x30
 8008c60:	d0f8      	beq.n	8008c54 <_dtoa_r+0x61c>
 8008c62:	46bb      	mov	fp, r7
 8008c64:	e04a      	b.n	8008cfc <_dtoa_r+0x6c4>
 8008c66:	4b06      	ldr	r3, [pc, #24]	; (8008c80 <_dtoa_r+0x648>)
 8008c68:	f7f7 fcf0 	bl	800064c <__aeabi_dmul>
 8008c6c:	4680      	mov	r8, r0
 8008c6e:	4689      	mov	r9, r1
 8008c70:	e7bd      	b.n	8008bee <_dtoa_r+0x5b6>
 8008c72:	bf00      	nop
 8008c74:	0800c930 	.word	0x0800c930
 8008c78:	0800c908 	.word	0x0800c908
 8008c7c:	3ff00000 	.word	0x3ff00000
 8008c80:	40240000 	.word	0x40240000
 8008c84:	401c0000 	.word	0x401c0000
 8008c88:	40140000 	.word	0x40140000
 8008c8c:	3fe00000 	.word	0x3fe00000
 8008c90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c94:	9d00      	ldr	r5, [sp, #0]
 8008c96:	4642      	mov	r2, r8
 8008c98:	464b      	mov	r3, r9
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	4639      	mov	r1, r7
 8008c9e:	f7f7 fdff 	bl	80008a0 <__aeabi_ddiv>
 8008ca2:	f7f7 ff83 	bl	8000bac <__aeabi_d2iz>
 8008ca6:	9001      	str	r0, [sp, #4]
 8008ca8:	f7f7 fc66 	bl	8000578 <__aeabi_i2d>
 8008cac:	4642      	mov	r2, r8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	f7f7 fccc 	bl	800064c <__aeabi_dmul>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4630      	mov	r0, r6
 8008cba:	4639      	mov	r1, r7
 8008cbc:	f7f7 fb0e 	bl	80002dc <__aeabi_dsub>
 8008cc0:	9e01      	ldr	r6, [sp, #4]
 8008cc2:	9f04      	ldr	r7, [sp, #16]
 8008cc4:	3630      	adds	r6, #48	; 0x30
 8008cc6:	f805 6b01 	strb.w	r6, [r5], #1
 8008cca:	9e00      	ldr	r6, [sp, #0]
 8008ccc:	1bae      	subs	r6, r5, r6
 8008cce:	42b7      	cmp	r7, r6
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	d134      	bne.n	8008d40 <_dtoa_r+0x708>
 8008cd6:	f7f7 fb03 	bl	80002e0 <__adddf3>
 8008cda:	4642      	mov	r2, r8
 8008cdc:	464b      	mov	r3, r9
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460f      	mov	r7, r1
 8008ce2:	f7f7 ff43 	bl	8000b6c <__aeabi_dcmpgt>
 8008ce6:	b9c8      	cbnz	r0, 8008d1c <_dtoa_r+0x6e4>
 8008ce8:	4642      	mov	r2, r8
 8008cea:	464b      	mov	r3, r9
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 ff14 	bl	8000b1c <__aeabi_dcmpeq>
 8008cf4:	b110      	cbz	r0, 8008cfc <_dtoa_r+0x6c4>
 8008cf6:	9b01      	ldr	r3, [sp, #4]
 8008cf8:	07db      	lsls	r3, r3, #31
 8008cfa:	d40f      	bmi.n	8008d1c <_dtoa_r+0x6e4>
 8008cfc:	4651      	mov	r1, sl
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f001 f8f0 	bl	8009ee4 <_Bfree>
 8008d04:	2300      	movs	r3, #0
 8008d06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d08:	702b      	strb	r3, [r5, #0]
 8008d0a:	f10b 0301 	add.w	r3, fp, #1
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f43f ace2 	beq.w	80086dc <_dtoa_r+0xa4>
 8008d18:	601d      	str	r5, [r3, #0]
 8008d1a:	e4df      	b.n	80086dc <_dtoa_r+0xa4>
 8008d1c:	465f      	mov	r7, fp
 8008d1e:	462b      	mov	r3, r5
 8008d20:	461d      	mov	r5, r3
 8008d22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d26:	2a39      	cmp	r2, #57	; 0x39
 8008d28:	d106      	bne.n	8008d38 <_dtoa_r+0x700>
 8008d2a:	9a00      	ldr	r2, [sp, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d1f7      	bne.n	8008d20 <_dtoa_r+0x6e8>
 8008d30:	9900      	ldr	r1, [sp, #0]
 8008d32:	2230      	movs	r2, #48	; 0x30
 8008d34:	3701      	adds	r7, #1
 8008d36:	700a      	strb	r2, [r1, #0]
 8008d38:	781a      	ldrb	r2, [r3, #0]
 8008d3a:	3201      	adds	r2, #1
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	e790      	b.n	8008c62 <_dtoa_r+0x62a>
 8008d40:	4ba3      	ldr	r3, [pc, #652]	; (8008fd0 <_dtoa_r+0x998>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	f7f7 fc82 	bl	800064c <__aeabi_dmul>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	460f      	mov	r7, r1
 8008d50:	f7f7 fee4 	bl	8000b1c <__aeabi_dcmpeq>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d09e      	beq.n	8008c96 <_dtoa_r+0x65e>
 8008d58:	e7d0      	b.n	8008cfc <_dtoa_r+0x6c4>
 8008d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d5c:	2a00      	cmp	r2, #0
 8008d5e:	f000 80ca 	beq.w	8008ef6 <_dtoa_r+0x8be>
 8008d62:	9a07      	ldr	r2, [sp, #28]
 8008d64:	2a01      	cmp	r2, #1
 8008d66:	f300 80ad 	bgt.w	8008ec4 <_dtoa_r+0x88c>
 8008d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d6c:	2a00      	cmp	r2, #0
 8008d6e:	f000 80a5 	beq.w	8008ebc <_dtoa_r+0x884>
 8008d72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d76:	9e08      	ldr	r6, [sp, #32]
 8008d78:	9d05      	ldr	r5, [sp, #20]
 8008d7a:	9a05      	ldr	r2, [sp, #20]
 8008d7c:	441a      	add	r2, r3
 8008d7e:	9205      	str	r2, [sp, #20]
 8008d80:	9a06      	ldr	r2, [sp, #24]
 8008d82:	2101      	movs	r1, #1
 8008d84:	441a      	add	r2, r3
 8008d86:	4620      	mov	r0, r4
 8008d88:	9206      	str	r2, [sp, #24]
 8008d8a:	f001 f9ab 	bl	800a0e4 <__i2b>
 8008d8e:	4607      	mov	r7, r0
 8008d90:	b165      	cbz	r5, 8008dac <_dtoa_r+0x774>
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	dd09      	ble.n	8008dac <_dtoa_r+0x774>
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	9a05      	ldr	r2, [sp, #20]
 8008d9c:	bfa8      	it	ge
 8008d9e:	462b      	movge	r3, r5
 8008da0:	1ad2      	subs	r2, r2, r3
 8008da2:	9205      	str	r2, [sp, #20]
 8008da4:	9a06      	ldr	r2, [sp, #24]
 8008da6:	1aed      	subs	r5, r5, r3
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	9306      	str	r3, [sp, #24]
 8008dac:	9b08      	ldr	r3, [sp, #32]
 8008dae:	b1f3      	cbz	r3, 8008dee <_dtoa_r+0x7b6>
 8008db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 80a3 	beq.w	8008efe <_dtoa_r+0x8c6>
 8008db8:	2e00      	cmp	r6, #0
 8008dba:	dd10      	ble.n	8008dde <_dtoa_r+0x7a6>
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4632      	mov	r2, r6
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f001 fa4f 	bl	800a264 <__pow5mult>
 8008dc6:	4652      	mov	r2, sl
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4607      	mov	r7, r0
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f001 f99f 	bl	800a110 <__multiply>
 8008dd2:	4651      	mov	r1, sl
 8008dd4:	4680      	mov	r8, r0
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f001 f884 	bl	8009ee4 <_Bfree>
 8008ddc:	46c2      	mov	sl, r8
 8008dde:	9b08      	ldr	r3, [sp, #32]
 8008de0:	1b9a      	subs	r2, r3, r6
 8008de2:	d004      	beq.n	8008dee <_dtoa_r+0x7b6>
 8008de4:	4651      	mov	r1, sl
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 fa3c 	bl	800a264 <__pow5mult>
 8008dec:	4682      	mov	sl, r0
 8008dee:	2101      	movs	r1, #1
 8008df0:	4620      	mov	r0, r4
 8008df2:	f001 f977 	bl	800a0e4 <__i2b>
 8008df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	f340 8081 	ble.w	8008f02 <_dtoa_r+0x8ca>
 8008e00:	461a      	mov	r2, r3
 8008e02:	4601      	mov	r1, r0
 8008e04:	4620      	mov	r0, r4
 8008e06:	f001 fa2d 	bl	800a264 <__pow5mult>
 8008e0a:	9b07      	ldr	r3, [sp, #28]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	4606      	mov	r6, r0
 8008e10:	dd7a      	ble.n	8008f08 <_dtoa_r+0x8d0>
 8008e12:	f04f 0800 	mov.w	r8, #0
 8008e16:	6933      	ldr	r3, [r6, #16]
 8008e18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008e1c:	6918      	ldr	r0, [r3, #16]
 8008e1e:	f001 f913 	bl	800a048 <__hi0bits>
 8008e22:	f1c0 0020 	rsb	r0, r0, #32
 8008e26:	9b06      	ldr	r3, [sp, #24]
 8008e28:	4418      	add	r0, r3
 8008e2a:	f010 001f 	ands.w	r0, r0, #31
 8008e2e:	f000 8094 	beq.w	8008f5a <_dtoa_r+0x922>
 8008e32:	f1c0 0320 	rsb	r3, r0, #32
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	f340 8085 	ble.w	8008f46 <_dtoa_r+0x90e>
 8008e3c:	9b05      	ldr	r3, [sp, #20]
 8008e3e:	f1c0 001c 	rsb	r0, r0, #28
 8008e42:	4403      	add	r3, r0
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	9b06      	ldr	r3, [sp, #24]
 8008e48:	4403      	add	r3, r0
 8008e4a:	4405      	add	r5, r0
 8008e4c:	9306      	str	r3, [sp, #24]
 8008e4e:	9b05      	ldr	r3, [sp, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	dd05      	ble.n	8008e60 <_dtoa_r+0x828>
 8008e54:	4651      	mov	r1, sl
 8008e56:	461a      	mov	r2, r3
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f001 fa5d 	bl	800a318 <__lshift>
 8008e5e:	4682      	mov	sl, r0
 8008e60:	9b06      	ldr	r3, [sp, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	dd05      	ble.n	8008e72 <_dtoa_r+0x83a>
 8008e66:	4631      	mov	r1, r6
 8008e68:	461a      	mov	r2, r3
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	f001 fa54 	bl	800a318 <__lshift>
 8008e70:	4606      	mov	r6, r0
 8008e72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d072      	beq.n	8008f5e <_dtoa_r+0x926>
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f001 fab8 	bl	800a3f0 <__mcmp>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	da6c      	bge.n	8008f5e <_dtoa_r+0x926>
 8008e84:	2300      	movs	r3, #0
 8008e86:	4651      	mov	r1, sl
 8008e88:	220a      	movs	r2, #10
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f001 f84c 	bl	8009f28 <__multadd>
 8008e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e92:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008e96:	4682      	mov	sl, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 81b0 	beq.w	80091fe <_dtoa_r+0xbc6>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4639      	mov	r1, r7
 8008ea2:	220a      	movs	r2, #10
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f001 f83f 	bl	8009f28 <__multadd>
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	4607      	mov	r7, r0
 8008eb0:	f300 8096 	bgt.w	8008fe0 <_dtoa_r+0x9a8>
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	dc59      	bgt.n	8008f6e <_dtoa_r+0x936>
 8008eba:	e091      	b.n	8008fe0 <_dtoa_r+0x9a8>
 8008ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ec2:	e758      	b.n	8008d76 <_dtoa_r+0x73e>
 8008ec4:	9b04      	ldr	r3, [sp, #16]
 8008ec6:	1e5e      	subs	r6, r3, #1
 8008ec8:	9b08      	ldr	r3, [sp, #32]
 8008eca:	42b3      	cmp	r3, r6
 8008ecc:	bfbf      	itttt	lt
 8008ece:	9b08      	ldrlt	r3, [sp, #32]
 8008ed0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008ed2:	9608      	strlt	r6, [sp, #32]
 8008ed4:	1af3      	sublt	r3, r6, r3
 8008ed6:	bfb4      	ite	lt
 8008ed8:	18d2      	addlt	r2, r2, r3
 8008eda:	1b9e      	subge	r6, r3, r6
 8008edc:	9b04      	ldr	r3, [sp, #16]
 8008ede:	bfbc      	itt	lt
 8008ee0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008ee2:	2600      	movlt	r6, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bfb7      	itett	lt
 8008ee8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008eec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008ef0:	1a9d      	sublt	r5, r3, r2
 8008ef2:	2300      	movlt	r3, #0
 8008ef4:	e741      	b.n	8008d7a <_dtoa_r+0x742>
 8008ef6:	9e08      	ldr	r6, [sp, #32]
 8008ef8:	9d05      	ldr	r5, [sp, #20]
 8008efa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008efc:	e748      	b.n	8008d90 <_dtoa_r+0x758>
 8008efe:	9a08      	ldr	r2, [sp, #32]
 8008f00:	e770      	b.n	8008de4 <_dtoa_r+0x7ac>
 8008f02:	9b07      	ldr	r3, [sp, #28]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	dc19      	bgt.n	8008f3c <_dtoa_r+0x904>
 8008f08:	9b02      	ldr	r3, [sp, #8]
 8008f0a:	b9bb      	cbnz	r3, 8008f3c <_dtoa_r+0x904>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f12:	b99b      	cbnz	r3, 8008f3c <_dtoa_r+0x904>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f1a:	0d1b      	lsrs	r3, r3, #20
 8008f1c:	051b      	lsls	r3, r3, #20
 8008f1e:	b183      	cbz	r3, 8008f42 <_dtoa_r+0x90a>
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	3301      	adds	r3, #1
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	9b06      	ldr	r3, [sp, #24]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	9306      	str	r3, [sp, #24]
 8008f2c:	f04f 0801 	mov.w	r8, #1
 8008f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	f47f af6f 	bne.w	8008e16 <_dtoa_r+0x7de>
 8008f38:	2001      	movs	r0, #1
 8008f3a:	e774      	b.n	8008e26 <_dtoa_r+0x7ee>
 8008f3c:	f04f 0800 	mov.w	r8, #0
 8008f40:	e7f6      	b.n	8008f30 <_dtoa_r+0x8f8>
 8008f42:	4698      	mov	r8, r3
 8008f44:	e7f4      	b.n	8008f30 <_dtoa_r+0x8f8>
 8008f46:	d082      	beq.n	8008e4e <_dtoa_r+0x816>
 8008f48:	9a05      	ldr	r2, [sp, #20]
 8008f4a:	331c      	adds	r3, #28
 8008f4c:	441a      	add	r2, r3
 8008f4e:	9205      	str	r2, [sp, #20]
 8008f50:	9a06      	ldr	r2, [sp, #24]
 8008f52:	441a      	add	r2, r3
 8008f54:	441d      	add	r5, r3
 8008f56:	9206      	str	r2, [sp, #24]
 8008f58:	e779      	b.n	8008e4e <_dtoa_r+0x816>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	e7f4      	b.n	8008f48 <_dtoa_r+0x910>
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dc37      	bgt.n	8008fd4 <_dtoa_r+0x99c>
 8008f64:	9b07      	ldr	r3, [sp, #28]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	dd34      	ble.n	8008fd4 <_dtoa_r+0x99c>
 8008f6a:	9b04      	ldr	r3, [sp, #16]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	b963      	cbnz	r3, 8008f8c <_dtoa_r+0x954>
 8008f72:	4631      	mov	r1, r6
 8008f74:	2205      	movs	r2, #5
 8008f76:	4620      	mov	r0, r4
 8008f78:	f000 ffd6 	bl	8009f28 <__multadd>
 8008f7c:	4601      	mov	r1, r0
 8008f7e:	4606      	mov	r6, r0
 8008f80:	4650      	mov	r0, sl
 8008f82:	f001 fa35 	bl	800a3f0 <__mcmp>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	f73f adbb 	bgt.w	8008b02 <_dtoa_r+0x4ca>
 8008f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8e:	9d00      	ldr	r5, [sp, #0]
 8008f90:	ea6f 0b03 	mvn.w	fp, r3
 8008f94:	f04f 0800 	mov.w	r8, #0
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 ffa2 	bl	8009ee4 <_Bfree>
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	f43f aeab 	beq.w	8008cfc <_dtoa_r+0x6c4>
 8008fa6:	f1b8 0f00 	cmp.w	r8, #0
 8008faa:	d005      	beq.n	8008fb8 <_dtoa_r+0x980>
 8008fac:	45b8      	cmp	r8, r7
 8008fae:	d003      	beq.n	8008fb8 <_dtoa_r+0x980>
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 ff96 	bl	8009ee4 <_Bfree>
 8008fb8:	4639      	mov	r1, r7
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 ff92 	bl	8009ee4 <_Bfree>
 8008fc0:	e69c      	b.n	8008cfc <_dtoa_r+0x6c4>
 8008fc2:	2600      	movs	r6, #0
 8008fc4:	4637      	mov	r7, r6
 8008fc6:	e7e1      	b.n	8008f8c <_dtoa_r+0x954>
 8008fc8:	46bb      	mov	fp, r7
 8008fca:	4637      	mov	r7, r6
 8008fcc:	e599      	b.n	8008b02 <_dtoa_r+0x4ca>
 8008fce:	bf00      	nop
 8008fd0:	40240000 	.word	0x40240000
 8008fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f000 80c8 	beq.w	800916c <_dtoa_r+0xb34>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	9301      	str	r3, [sp, #4]
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	dd05      	ble.n	8008ff0 <_dtoa_r+0x9b8>
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	462a      	mov	r2, r5
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f001 f995 	bl	800a318 <__lshift>
 8008fee:	4607      	mov	r7, r0
 8008ff0:	f1b8 0f00 	cmp.w	r8, #0
 8008ff4:	d05b      	beq.n	80090ae <_dtoa_r+0xa76>
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 ff33 	bl	8009e64 <_Balloc>
 8008ffe:	4605      	mov	r5, r0
 8009000:	b928      	cbnz	r0, 800900e <_dtoa_r+0x9d6>
 8009002:	4b83      	ldr	r3, [pc, #524]	; (8009210 <_dtoa_r+0xbd8>)
 8009004:	4602      	mov	r2, r0
 8009006:	f240 21ef 	movw	r1, #751	; 0x2ef
 800900a:	f7ff bb2e 	b.w	800866a <_dtoa_r+0x32>
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	3202      	adds	r2, #2
 8009012:	0092      	lsls	r2, r2, #2
 8009014:	f107 010c 	add.w	r1, r7, #12
 8009018:	300c      	adds	r0, #12
 800901a:	f7ff fa66 	bl	80084ea <memcpy>
 800901e:	2201      	movs	r2, #1
 8009020:	4629      	mov	r1, r5
 8009022:	4620      	mov	r0, r4
 8009024:	f001 f978 	bl	800a318 <__lshift>
 8009028:	9b00      	ldr	r3, [sp, #0]
 800902a:	3301      	adds	r3, #1
 800902c:	9304      	str	r3, [sp, #16]
 800902e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009032:	4413      	add	r3, r2
 8009034:	9308      	str	r3, [sp, #32]
 8009036:	9b02      	ldr	r3, [sp, #8]
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	46b8      	mov	r8, r7
 800903e:	9306      	str	r3, [sp, #24]
 8009040:	4607      	mov	r7, r0
 8009042:	9b04      	ldr	r3, [sp, #16]
 8009044:	4631      	mov	r1, r6
 8009046:	3b01      	subs	r3, #1
 8009048:	4650      	mov	r0, sl
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	f7ff fa6a 	bl	8008524 <quorem>
 8009050:	4641      	mov	r1, r8
 8009052:	9002      	str	r0, [sp, #8]
 8009054:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009058:	4650      	mov	r0, sl
 800905a:	f001 f9c9 	bl	800a3f0 <__mcmp>
 800905e:	463a      	mov	r2, r7
 8009060:	9005      	str	r0, [sp, #20]
 8009062:	4631      	mov	r1, r6
 8009064:	4620      	mov	r0, r4
 8009066:	f001 f9df 	bl	800a428 <__mdiff>
 800906a:	68c2      	ldr	r2, [r0, #12]
 800906c:	4605      	mov	r5, r0
 800906e:	bb02      	cbnz	r2, 80090b2 <_dtoa_r+0xa7a>
 8009070:	4601      	mov	r1, r0
 8009072:	4650      	mov	r0, sl
 8009074:	f001 f9bc 	bl	800a3f0 <__mcmp>
 8009078:	4602      	mov	r2, r0
 800907a:	4629      	mov	r1, r5
 800907c:	4620      	mov	r0, r4
 800907e:	9209      	str	r2, [sp, #36]	; 0x24
 8009080:	f000 ff30 	bl	8009ee4 <_Bfree>
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009088:	9d04      	ldr	r5, [sp, #16]
 800908a:	ea43 0102 	orr.w	r1, r3, r2
 800908e:	9b06      	ldr	r3, [sp, #24]
 8009090:	4319      	orrs	r1, r3
 8009092:	d110      	bne.n	80090b6 <_dtoa_r+0xa7e>
 8009094:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009098:	d029      	beq.n	80090ee <_dtoa_r+0xab6>
 800909a:	9b05      	ldr	r3, [sp, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	dd02      	ble.n	80090a6 <_dtoa_r+0xa6e>
 80090a0:	9b02      	ldr	r3, [sp, #8]
 80090a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	f883 9000 	strb.w	r9, [r3]
 80090ac:	e774      	b.n	8008f98 <_dtoa_r+0x960>
 80090ae:	4638      	mov	r0, r7
 80090b0:	e7ba      	b.n	8009028 <_dtoa_r+0x9f0>
 80090b2:	2201      	movs	r2, #1
 80090b4:	e7e1      	b.n	800907a <_dtoa_r+0xa42>
 80090b6:	9b05      	ldr	r3, [sp, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	db04      	blt.n	80090c6 <_dtoa_r+0xa8e>
 80090bc:	9907      	ldr	r1, [sp, #28]
 80090be:	430b      	orrs	r3, r1
 80090c0:	9906      	ldr	r1, [sp, #24]
 80090c2:	430b      	orrs	r3, r1
 80090c4:	d120      	bne.n	8009108 <_dtoa_r+0xad0>
 80090c6:	2a00      	cmp	r2, #0
 80090c8:	dded      	ble.n	80090a6 <_dtoa_r+0xa6e>
 80090ca:	4651      	mov	r1, sl
 80090cc:	2201      	movs	r2, #1
 80090ce:	4620      	mov	r0, r4
 80090d0:	f001 f922 	bl	800a318 <__lshift>
 80090d4:	4631      	mov	r1, r6
 80090d6:	4682      	mov	sl, r0
 80090d8:	f001 f98a 	bl	800a3f0 <__mcmp>
 80090dc:	2800      	cmp	r0, #0
 80090de:	dc03      	bgt.n	80090e8 <_dtoa_r+0xab0>
 80090e0:	d1e1      	bne.n	80090a6 <_dtoa_r+0xa6e>
 80090e2:	f019 0f01 	tst.w	r9, #1
 80090e6:	d0de      	beq.n	80090a6 <_dtoa_r+0xa6e>
 80090e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090ec:	d1d8      	bne.n	80090a0 <_dtoa_r+0xa68>
 80090ee:	9a01      	ldr	r2, [sp, #4]
 80090f0:	2339      	movs	r3, #57	; 0x39
 80090f2:	7013      	strb	r3, [r2, #0]
 80090f4:	462b      	mov	r3, r5
 80090f6:	461d      	mov	r5, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090fe:	2a39      	cmp	r2, #57	; 0x39
 8009100:	d06c      	beq.n	80091dc <_dtoa_r+0xba4>
 8009102:	3201      	adds	r2, #1
 8009104:	701a      	strb	r2, [r3, #0]
 8009106:	e747      	b.n	8008f98 <_dtoa_r+0x960>
 8009108:	2a00      	cmp	r2, #0
 800910a:	dd07      	ble.n	800911c <_dtoa_r+0xae4>
 800910c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009110:	d0ed      	beq.n	80090ee <_dtoa_r+0xab6>
 8009112:	9a01      	ldr	r2, [sp, #4]
 8009114:	f109 0301 	add.w	r3, r9, #1
 8009118:	7013      	strb	r3, [r2, #0]
 800911a:	e73d      	b.n	8008f98 <_dtoa_r+0x960>
 800911c:	9b04      	ldr	r3, [sp, #16]
 800911e:	9a08      	ldr	r2, [sp, #32]
 8009120:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009124:	4293      	cmp	r3, r2
 8009126:	d043      	beq.n	80091b0 <_dtoa_r+0xb78>
 8009128:	4651      	mov	r1, sl
 800912a:	2300      	movs	r3, #0
 800912c:	220a      	movs	r2, #10
 800912e:	4620      	mov	r0, r4
 8009130:	f000 fefa 	bl	8009f28 <__multadd>
 8009134:	45b8      	cmp	r8, r7
 8009136:	4682      	mov	sl, r0
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	f04f 020a 	mov.w	r2, #10
 8009140:	4641      	mov	r1, r8
 8009142:	4620      	mov	r0, r4
 8009144:	d107      	bne.n	8009156 <_dtoa_r+0xb1e>
 8009146:	f000 feef 	bl	8009f28 <__multadd>
 800914a:	4680      	mov	r8, r0
 800914c:	4607      	mov	r7, r0
 800914e:	9b04      	ldr	r3, [sp, #16]
 8009150:	3301      	adds	r3, #1
 8009152:	9304      	str	r3, [sp, #16]
 8009154:	e775      	b.n	8009042 <_dtoa_r+0xa0a>
 8009156:	f000 fee7 	bl	8009f28 <__multadd>
 800915a:	4639      	mov	r1, r7
 800915c:	4680      	mov	r8, r0
 800915e:	2300      	movs	r3, #0
 8009160:	220a      	movs	r2, #10
 8009162:	4620      	mov	r0, r4
 8009164:	f000 fee0 	bl	8009f28 <__multadd>
 8009168:	4607      	mov	r7, r0
 800916a:	e7f0      	b.n	800914e <_dtoa_r+0xb16>
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	9d00      	ldr	r5, [sp, #0]
 8009172:	4631      	mov	r1, r6
 8009174:	4650      	mov	r0, sl
 8009176:	f7ff f9d5 	bl	8008524 <quorem>
 800917a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800917e:	9b00      	ldr	r3, [sp, #0]
 8009180:	f805 9b01 	strb.w	r9, [r5], #1
 8009184:	1aea      	subs	r2, r5, r3
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	4293      	cmp	r3, r2
 800918a:	dd07      	ble.n	800919c <_dtoa_r+0xb64>
 800918c:	4651      	mov	r1, sl
 800918e:	2300      	movs	r3, #0
 8009190:	220a      	movs	r2, #10
 8009192:	4620      	mov	r0, r4
 8009194:	f000 fec8 	bl	8009f28 <__multadd>
 8009198:	4682      	mov	sl, r0
 800919a:	e7ea      	b.n	8009172 <_dtoa_r+0xb3a>
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	bfc8      	it	gt
 80091a2:	461d      	movgt	r5, r3
 80091a4:	9b00      	ldr	r3, [sp, #0]
 80091a6:	bfd8      	it	le
 80091a8:	2501      	movle	r5, #1
 80091aa:	441d      	add	r5, r3
 80091ac:	f04f 0800 	mov.w	r8, #0
 80091b0:	4651      	mov	r1, sl
 80091b2:	2201      	movs	r2, #1
 80091b4:	4620      	mov	r0, r4
 80091b6:	f001 f8af 	bl	800a318 <__lshift>
 80091ba:	4631      	mov	r1, r6
 80091bc:	4682      	mov	sl, r0
 80091be:	f001 f917 	bl	800a3f0 <__mcmp>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	dc96      	bgt.n	80090f4 <_dtoa_r+0xabc>
 80091c6:	d102      	bne.n	80091ce <_dtoa_r+0xb96>
 80091c8:	f019 0f01 	tst.w	r9, #1
 80091cc:	d192      	bne.n	80090f4 <_dtoa_r+0xabc>
 80091ce:	462b      	mov	r3, r5
 80091d0:	461d      	mov	r5, r3
 80091d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091d6:	2a30      	cmp	r2, #48	; 0x30
 80091d8:	d0fa      	beq.n	80091d0 <_dtoa_r+0xb98>
 80091da:	e6dd      	b.n	8008f98 <_dtoa_r+0x960>
 80091dc:	9a00      	ldr	r2, [sp, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d189      	bne.n	80090f6 <_dtoa_r+0xabe>
 80091e2:	f10b 0b01 	add.w	fp, fp, #1
 80091e6:	2331      	movs	r3, #49	; 0x31
 80091e8:	e796      	b.n	8009118 <_dtoa_r+0xae0>
 80091ea:	4b0a      	ldr	r3, [pc, #40]	; (8009214 <_dtoa_r+0xbdc>)
 80091ec:	f7ff ba99 	b.w	8008722 <_dtoa_r+0xea>
 80091f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f47f aa6d 	bne.w	80086d2 <_dtoa_r+0x9a>
 80091f8:	4b07      	ldr	r3, [pc, #28]	; (8009218 <_dtoa_r+0xbe0>)
 80091fa:	f7ff ba92 	b.w	8008722 <_dtoa_r+0xea>
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	dcb5      	bgt.n	8009170 <_dtoa_r+0xb38>
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	2b02      	cmp	r3, #2
 8009208:	f73f aeb1 	bgt.w	8008f6e <_dtoa_r+0x936>
 800920c:	e7b0      	b.n	8009170 <_dtoa_r+0xb38>
 800920e:	bf00      	nop
 8009210:	0800c82d 	.word	0x0800c82d
 8009214:	0800c628 	.word	0x0800c628
 8009218:	0800c7b1 	.word	0x0800c7b1

0800921c <rshift>:
 800921c:	6903      	ldr	r3, [r0, #16]
 800921e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009226:	ea4f 1261 	mov.w	r2, r1, asr #5
 800922a:	f100 0414 	add.w	r4, r0, #20
 800922e:	dd45      	ble.n	80092bc <rshift+0xa0>
 8009230:	f011 011f 	ands.w	r1, r1, #31
 8009234:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009238:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800923c:	d10c      	bne.n	8009258 <rshift+0x3c>
 800923e:	f100 0710 	add.w	r7, r0, #16
 8009242:	4629      	mov	r1, r5
 8009244:	42b1      	cmp	r1, r6
 8009246:	d334      	bcc.n	80092b2 <rshift+0x96>
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	1eea      	subs	r2, r5, #3
 800924e:	4296      	cmp	r6, r2
 8009250:	bf38      	it	cc
 8009252:	2300      	movcc	r3, #0
 8009254:	4423      	add	r3, r4
 8009256:	e015      	b.n	8009284 <rshift+0x68>
 8009258:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800925c:	f1c1 0820 	rsb	r8, r1, #32
 8009260:	40cf      	lsrs	r7, r1
 8009262:	f105 0e04 	add.w	lr, r5, #4
 8009266:	46a1      	mov	r9, r4
 8009268:	4576      	cmp	r6, lr
 800926a:	46f4      	mov	ip, lr
 800926c:	d815      	bhi.n	800929a <rshift+0x7e>
 800926e:	1a9a      	subs	r2, r3, r2
 8009270:	0092      	lsls	r2, r2, #2
 8009272:	3a04      	subs	r2, #4
 8009274:	3501      	adds	r5, #1
 8009276:	42ae      	cmp	r6, r5
 8009278:	bf38      	it	cc
 800927a:	2200      	movcc	r2, #0
 800927c:	18a3      	adds	r3, r4, r2
 800927e:	50a7      	str	r7, [r4, r2]
 8009280:	b107      	cbz	r7, 8009284 <rshift+0x68>
 8009282:	3304      	adds	r3, #4
 8009284:	1b1a      	subs	r2, r3, r4
 8009286:	42a3      	cmp	r3, r4
 8009288:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800928c:	bf08      	it	eq
 800928e:	2300      	moveq	r3, #0
 8009290:	6102      	str	r2, [r0, #16]
 8009292:	bf08      	it	eq
 8009294:	6143      	streq	r3, [r0, #20]
 8009296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929a:	f8dc c000 	ldr.w	ip, [ip]
 800929e:	fa0c fc08 	lsl.w	ip, ip, r8
 80092a2:	ea4c 0707 	orr.w	r7, ip, r7
 80092a6:	f849 7b04 	str.w	r7, [r9], #4
 80092aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ae:	40cf      	lsrs	r7, r1
 80092b0:	e7da      	b.n	8009268 <rshift+0x4c>
 80092b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092ba:	e7c3      	b.n	8009244 <rshift+0x28>
 80092bc:	4623      	mov	r3, r4
 80092be:	e7e1      	b.n	8009284 <rshift+0x68>

080092c0 <__hexdig_fun>:
 80092c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092c4:	2b09      	cmp	r3, #9
 80092c6:	d802      	bhi.n	80092ce <__hexdig_fun+0xe>
 80092c8:	3820      	subs	r0, #32
 80092ca:	b2c0      	uxtb	r0, r0
 80092cc:	4770      	bx	lr
 80092ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d801      	bhi.n	80092da <__hexdig_fun+0x1a>
 80092d6:	3847      	subs	r0, #71	; 0x47
 80092d8:	e7f7      	b.n	80092ca <__hexdig_fun+0xa>
 80092da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d801      	bhi.n	80092e6 <__hexdig_fun+0x26>
 80092e2:	3827      	subs	r0, #39	; 0x27
 80092e4:	e7f1      	b.n	80092ca <__hexdig_fun+0xa>
 80092e6:	2000      	movs	r0, #0
 80092e8:	4770      	bx	lr
	...

080092ec <__gethex>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	4617      	mov	r7, r2
 80092f2:	680a      	ldr	r2, [r1, #0]
 80092f4:	b085      	sub	sp, #20
 80092f6:	f102 0b02 	add.w	fp, r2, #2
 80092fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009302:	4681      	mov	r9, r0
 8009304:	468a      	mov	sl, r1
 8009306:	9302      	str	r3, [sp, #8]
 8009308:	32fe      	adds	r2, #254	; 0xfe
 800930a:	eb02 030b 	add.w	r3, r2, fp
 800930e:	46d8      	mov	r8, fp
 8009310:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	2830      	cmp	r0, #48	; 0x30
 8009318:	d0f7      	beq.n	800930a <__gethex+0x1e>
 800931a:	f7ff ffd1 	bl	80092c0 <__hexdig_fun>
 800931e:	4604      	mov	r4, r0
 8009320:	2800      	cmp	r0, #0
 8009322:	d138      	bne.n	8009396 <__gethex+0xaa>
 8009324:	49a7      	ldr	r1, [pc, #668]	; (80095c4 <__gethex+0x2d8>)
 8009326:	2201      	movs	r2, #1
 8009328:	4640      	mov	r0, r8
 800932a:	f7ff f893 	bl	8008454 <strncmp>
 800932e:	4606      	mov	r6, r0
 8009330:	2800      	cmp	r0, #0
 8009332:	d169      	bne.n	8009408 <__gethex+0x11c>
 8009334:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009338:	465d      	mov	r5, fp
 800933a:	f7ff ffc1 	bl	80092c0 <__hexdig_fun>
 800933e:	2800      	cmp	r0, #0
 8009340:	d064      	beq.n	800940c <__gethex+0x120>
 8009342:	465a      	mov	r2, fp
 8009344:	7810      	ldrb	r0, [r2, #0]
 8009346:	2830      	cmp	r0, #48	; 0x30
 8009348:	4690      	mov	r8, r2
 800934a:	f102 0201 	add.w	r2, r2, #1
 800934e:	d0f9      	beq.n	8009344 <__gethex+0x58>
 8009350:	f7ff ffb6 	bl	80092c0 <__hexdig_fun>
 8009354:	2301      	movs	r3, #1
 8009356:	fab0 f480 	clz	r4, r0
 800935a:	0964      	lsrs	r4, r4, #5
 800935c:	465e      	mov	r6, fp
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	4642      	mov	r2, r8
 8009362:	4615      	mov	r5, r2
 8009364:	3201      	adds	r2, #1
 8009366:	7828      	ldrb	r0, [r5, #0]
 8009368:	f7ff ffaa 	bl	80092c0 <__hexdig_fun>
 800936c:	2800      	cmp	r0, #0
 800936e:	d1f8      	bne.n	8009362 <__gethex+0x76>
 8009370:	4994      	ldr	r1, [pc, #592]	; (80095c4 <__gethex+0x2d8>)
 8009372:	2201      	movs	r2, #1
 8009374:	4628      	mov	r0, r5
 8009376:	f7ff f86d 	bl	8008454 <strncmp>
 800937a:	b978      	cbnz	r0, 800939c <__gethex+0xb0>
 800937c:	b946      	cbnz	r6, 8009390 <__gethex+0xa4>
 800937e:	1c6e      	adds	r6, r5, #1
 8009380:	4632      	mov	r2, r6
 8009382:	4615      	mov	r5, r2
 8009384:	3201      	adds	r2, #1
 8009386:	7828      	ldrb	r0, [r5, #0]
 8009388:	f7ff ff9a 	bl	80092c0 <__hexdig_fun>
 800938c:	2800      	cmp	r0, #0
 800938e:	d1f8      	bne.n	8009382 <__gethex+0x96>
 8009390:	1b73      	subs	r3, r6, r5
 8009392:	009e      	lsls	r6, r3, #2
 8009394:	e004      	b.n	80093a0 <__gethex+0xb4>
 8009396:	2400      	movs	r4, #0
 8009398:	4626      	mov	r6, r4
 800939a:	e7e1      	b.n	8009360 <__gethex+0x74>
 800939c:	2e00      	cmp	r6, #0
 800939e:	d1f7      	bne.n	8009390 <__gethex+0xa4>
 80093a0:	782b      	ldrb	r3, [r5, #0]
 80093a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093a6:	2b50      	cmp	r3, #80	; 0x50
 80093a8:	d13d      	bne.n	8009426 <__gethex+0x13a>
 80093aa:	786b      	ldrb	r3, [r5, #1]
 80093ac:	2b2b      	cmp	r3, #43	; 0x2b
 80093ae:	d02f      	beq.n	8009410 <__gethex+0x124>
 80093b0:	2b2d      	cmp	r3, #45	; 0x2d
 80093b2:	d031      	beq.n	8009418 <__gethex+0x12c>
 80093b4:	1c69      	adds	r1, r5, #1
 80093b6:	f04f 0b00 	mov.w	fp, #0
 80093ba:	7808      	ldrb	r0, [r1, #0]
 80093bc:	f7ff ff80 	bl	80092c0 <__hexdig_fun>
 80093c0:	1e42      	subs	r2, r0, #1
 80093c2:	b2d2      	uxtb	r2, r2
 80093c4:	2a18      	cmp	r2, #24
 80093c6:	d82e      	bhi.n	8009426 <__gethex+0x13a>
 80093c8:	f1a0 0210 	sub.w	r2, r0, #16
 80093cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093d0:	f7ff ff76 	bl	80092c0 <__hexdig_fun>
 80093d4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80093d8:	fa5f fc8c 	uxtb.w	ip, ip
 80093dc:	f1bc 0f18 	cmp.w	ip, #24
 80093e0:	d91d      	bls.n	800941e <__gethex+0x132>
 80093e2:	f1bb 0f00 	cmp.w	fp, #0
 80093e6:	d000      	beq.n	80093ea <__gethex+0xfe>
 80093e8:	4252      	negs	r2, r2
 80093ea:	4416      	add	r6, r2
 80093ec:	f8ca 1000 	str.w	r1, [sl]
 80093f0:	b1dc      	cbz	r4, 800942a <__gethex+0x13e>
 80093f2:	9b01      	ldr	r3, [sp, #4]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bf14      	ite	ne
 80093f8:	f04f 0800 	movne.w	r8, #0
 80093fc:	f04f 0806 	moveq.w	r8, #6
 8009400:	4640      	mov	r0, r8
 8009402:	b005      	add	sp, #20
 8009404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009408:	4645      	mov	r5, r8
 800940a:	4626      	mov	r6, r4
 800940c:	2401      	movs	r4, #1
 800940e:	e7c7      	b.n	80093a0 <__gethex+0xb4>
 8009410:	f04f 0b00 	mov.w	fp, #0
 8009414:	1ca9      	adds	r1, r5, #2
 8009416:	e7d0      	b.n	80093ba <__gethex+0xce>
 8009418:	f04f 0b01 	mov.w	fp, #1
 800941c:	e7fa      	b.n	8009414 <__gethex+0x128>
 800941e:	230a      	movs	r3, #10
 8009420:	fb03 0002 	mla	r0, r3, r2, r0
 8009424:	e7d0      	b.n	80093c8 <__gethex+0xdc>
 8009426:	4629      	mov	r1, r5
 8009428:	e7e0      	b.n	80093ec <__gethex+0x100>
 800942a:	eba5 0308 	sub.w	r3, r5, r8
 800942e:	3b01      	subs	r3, #1
 8009430:	4621      	mov	r1, r4
 8009432:	2b07      	cmp	r3, #7
 8009434:	dc0a      	bgt.n	800944c <__gethex+0x160>
 8009436:	4648      	mov	r0, r9
 8009438:	f000 fd14 	bl	8009e64 <_Balloc>
 800943c:	4604      	mov	r4, r0
 800943e:	b940      	cbnz	r0, 8009452 <__gethex+0x166>
 8009440:	4b61      	ldr	r3, [pc, #388]	; (80095c8 <__gethex+0x2dc>)
 8009442:	4602      	mov	r2, r0
 8009444:	21e4      	movs	r1, #228	; 0xe4
 8009446:	4861      	ldr	r0, [pc, #388]	; (80095cc <__gethex+0x2e0>)
 8009448:	f001 faa8 	bl	800a99c <__assert_func>
 800944c:	3101      	adds	r1, #1
 800944e:	105b      	asrs	r3, r3, #1
 8009450:	e7ef      	b.n	8009432 <__gethex+0x146>
 8009452:	f100 0a14 	add.w	sl, r0, #20
 8009456:	2300      	movs	r3, #0
 8009458:	495a      	ldr	r1, [pc, #360]	; (80095c4 <__gethex+0x2d8>)
 800945a:	f8cd a004 	str.w	sl, [sp, #4]
 800945e:	469b      	mov	fp, r3
 8009460:	45a8      	cmp	r8, r5
 8009462:	d342      	bcc.n	80094ea <__gethex+0x1fe>
 8009464:	9801      	ldr	r0, [sp, #4]
 8009466:	f840 bb04 	str.w	fp, [r0], #4
 800946a:	eba0 000a 	sub.w	r0, r0, sl
 800946e:	1080      	asrs	r0, r0, #2
 8009470:	6120      	str	r0, [r4, #16]
 8009472:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009476:	4658      	mov	r0, fp
 8009478:	f000 fde6 	bl	800a048 <__hi0bits>
 800947c:	683d      	ldr	r5, [r7, #0]
 800947e:	eba8 0000 	sub.w	r0, r8, r0
 8009482:	42a8      	cmp	r0, r5
 8009484:	dd59      	ble.n	800953a <__gethex+0x24e>
 8009486:	eba0 0805 	sub.w	r8, r0, r5
 800948a:	4641      	mov	r1, r8
 800948c:	4620      	mov	r0, r4
 800948e:	f001 f975 	bl	800a77c <__any_on>
 8009492:	4683      	mov	fp, r0
 8009494:	b1b8      	cbz	r0, 80094c6 <__gethex+0x1da>
 8009496:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800949a:	1159      	asrs	r1, r3, #5
 800949c:	f003 021f 	and.w	r2, r3, #31
 80094a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094a4:	f04f 0b01 	mov.w	fp, #1
 80094a8:	fa0b f202 	lsl.w	r2, fp, r2
 80094ac:	420a      	tst	r2, r1
 80094ae:	d00a      	beq.n	80094c6 <__gethex+0x1da>
 80094b0:	455b      	cmp	r3, fp
 80094b2:	dd06      	ble.n	80094c2 <__gethex+0x1d6>
 80094b4:	f1a8 0102 	sub.w	r1, r8, #2
 80094b8:	4620      	mov	r0, r4
 80094ba:	f001 f95f 	bl	800a77c <__any_on>
 80094be:	2800      	cmp	r0, #0
 80094c0:	d138      	bne.n	8009534 <__gethex+0x248>
 80094c2:	f04f 0b02 	mov.w	fp, #2
 80094c6:	4641      	mov	r1, r8
 80094c8:	4620      	mov	r0, r4
 80094ca:	f7ff fea7 	bl	800921c <rshift>
 80094ce:	4446      	add	r6, r8
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	42b3      	cmp	r3, r6
 80094d4:	da41      	bge.n	800955a <__gethex+0x26e>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4648      	mov	r0, r9
 80094da:	f000 fd03 	bl	8009ee4 <_Bfree>
 80094de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e0:	2300      	movs	r3, #0
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80094e8:	e78a      	b.n	8009400 <__gethex+0x114>
 80094ea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80094ee:	2a2e      	cmp	r2, #46	; 0x2e
 80094f0:	d014      	beq.n	800951c <__gethex+0x230>
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d106      	bne.n	8009504 <__gethex+0x218>
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	f843 bb04 	str.w	fp, [r3], #4
 80094fc:	f04f 0b00 	mov.w	fp, #0
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	465b      	mov	r3, fp
 8009504:	7828      	ldrb	r0, [r5, #0]
 8009506:	9303      	str	r3, [sp, #12]
 8009508:	f7ff feda 	bl	80092c0 <__hexdig_fun>
 800950c:	9b03      	ldr	r3, [sp, #12]
 800950e:	f000 000f 	and.w	r0, r0, #15
 8009512:	4098      	lsls	r0, r3
 8009514:	ea4b 0b00 	orr.w	fp, fp, r0
 8009518:	3304      	adds	r3, #4
 800951a:	e7a1      	b.n	8009460 <__gethex+0x174>
 800951c:	45a8      	cmp	r8, r5
 800951e:	d8e8      	bhi.n	80094f2 <__gethex+0x206>
 8009520:	2201      	movs	r2, #1
 8009522:	4628      	mov	r0, r5
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	f7fe ff95 	bl	8008454 <strncmp>
 800952a:	4926      	ldr	r1, [pc, #152]	; (80095c4 <__gethex+0x2d8>)
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	2800      	cmp	r0, #0
 8009530:	d1df      	bne.n	80094f2 <__gethex+0x206>
 8009532:	e795      	b.n	8009460 <__gethex+0x174>
 8009534:	f04f 0b03 	mov.w	fp, #3
 8009538:	e7c5      	b.n	80094c6 <__gethex+0x1da>
 800953a:	da0b      	bge.n	8009554 <__gethex+0x268>
 800953c:	eba5 0800 	sub.w	r8, r5, r0
 8009540:	4621      	mov	r1, r4
 8009542:	4642      	mov	r2, r8
 8009544:	4648      	mov	r0, r9
 8009546:	f000 fee7 	bl	800a318 <__lshift>
 800954a:	eba6 0608 	sub.w	r6, r6, r8
 800954e:	4604      	mov	r4, r0
 8009550:	f100 0a14 	add.w	sl, r0, #20
 8009554:	f04f 0b00 	mov.w	fp, #0
 8009558:	e7ba      	b.n	80094d0 <__gethex+0x1e4>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	42b3      	cmp	r3, r6
 800955e:	dd73      	ble.n	8009648 <__gethex+0x35c>
 8009560:	1b9e      	subs	r6, r3, r6
 8009562:	42b5      	cmp	r5, r6
 8009564:	dc34      	bgt.n	80095d0 <__gethex+0x2e4>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d023      	beq.n	80095b4 <__gethex+0x2c8>
 800956c:	2b03      	cmp	r3, #3
 800956e:	d025      	beq.n	80095bc <__gethex+0x2d0>
 8009570:	2b01      	cmp	r3, #1
 8009572:	d115      	bne.n	80095a0 <__gethex+0x2b4>
 8009574:	42b5      	cmp	r5, r6
 8009576:	d113      	bne.n	80095a0 <__gethex+0x2b4>
 8009578:	2d01      	cmp	r5, #1
 800957a:	d10b      	bne.n	8009594 <__gethex+0x2a8>
 800957c:	9a02      	ldr	r2, [sp, #8]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	2301      	movs	r3, #1
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	f8ca 3000 	str.w	r3, [sl]
 800958a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800958c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009590:	601c      	str	r4, [r3, #0]
 8009592:	e735      	b.n	8009400 <__gethex+0x114>
 8009594:	1e69      	subs	r1, r5, #1
 8009596:	4620      	mov	r0, r4
 8009598:	f001 f8f0 	bl	800a77c <__any_on>
 800959c:	2800      	cmp	r0, #0
 800959e:	d1ed      	bne.n	800957c <__gethex+0x290>
 80095a0:	4621      	mov	r1, r4
 80095a2:	4648      	mov	r0, r9
 80095a4:	f000 fc9e 	bl	8009ee4 <_Bfree>
 80095a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095aa:	2300      	movs	r3, #0
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095b2:	e725      	b.n	8009400 <__gethex+0x114>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1f2      	bne.n	80095a0 <__gethex+0x2b4>
 80095ba:	e7df      	b.n	800957c <__gethex+0x290>
 80095bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1dc      	bne.n	800957c <__gethex+0x290>
 80095c2:	e7ed      	b.n	80095a0 <__gethex+0x2b4>
 80095c4:	0800c651 	.word	0x0800c651
 80095c8:	0800c82d 	.word	0x0800c82d
 80095cc:	0800c83e 	.word	0x0800c83e
 80095d0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80095d4:	f1bb 0f00 	cmp.w	fp, #0
 80095d8:	d133      	bne.n	8009642 <__gethex+0x356>
 80095da:	f1b8 0f00 	cmp.w	r8, #0
 80095de:	d004      	beq.n	80095ea <__gethex+0x2fe>
 80095e0:	4641      	mov	r1, r8
 80095e2:	4620      	mov	r0, r4
 80095e4:	f001 f8ca 	bl	800a77c <__any_on>
 80095e8:	4683      	mov	fp, r0
 80095ea:	ea4f 1268 	mov.w	r2, r8, asr #5
 80095ee:	2301      	movs	r3, #1
 80095f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095f4:	f008 081f 	and.w	r8, r8, #31
 80095f8:	fa03 f308 	lsl.w	r3, r3, r8
 80095fc:	4213      	tst	r3, r2
 80095fe:	4631      	mov	r1, r6
 8009600:	4620      	mov	r0, r4
 8009602:	bf18      	it	ne
 8009604:	f04b 0b02 	orrne.w	fp, fp, #2
 8009608:	1bad      	subs	r5, r5, r6
 800960a:	f7ff fe07 	bl	800921c <rshift>
 800960e:	687e      	ldr	r6, [r7, #4]
 8009610:	f04f 0802 	mov.w	r8, #2
 8009614:	f1bb 0f00 	cmp.w	fp, #0
 8009618:	d04a      	beq.n	80096b0 <__gethex+0x3c4>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d016      	beq.n	800964e <__gethex+0x362>
 8009620:	2b03      	cmp	r3, #3
 8009622:	d018      	beq.n	8009656 <__gethex+0x36a>
 8009624:	2b01      	cmp	r3, #1
 8009626:	d109      	bne.n	800963c <__gethex+0x350>
 8009628:	f01b 0f02 	tst.w	fp, #2
 800962c:	d006      	beq.n	800963c <__gethex+0x350>
 800962e:	f8da 3000 	ldr.w	r3, [sl]
 8009632:	ea4b 0b03 	orr.w	fp, fp, r3
 8009636:	f01b 0f01 	tst.w	fp, #1
 800963a:	d10f      	bne.n	800965c <__gethex+0x370>
 800963c:	f048 0810 	orr.w	r8, r8, #16
 8009640:	e036      	b.n	80096b0 <__gethex+0x3c4>
 8009642:	f04f 0b01 	mov.w	fp, #1
 8009646:	e7d0      	b.n	80095ea <__gethex+0x2fe>
 8009648:	f04f 0801 	mov.w	r8, #1
 800964c:	e7e2      	b.n	8009614 <__gethex+0x328>
 800964e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009650:	f1c3 0301 	rsb	r3, r3, #1
 8009654:	930f      	str	r3, [sp, #60]	; 0x3c
 8009656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0ef      	beq.n	800963c <__gethex+0x350>
 800965c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009660:	f104 0214 	add.w	r2, r4, #20
 8009664:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009668:	9301      	str	r3, [sp, #4]
 800966a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800966e:	2300      	movs	r3, #0
 8009670:	4694      	mov	ip, r2
 8009672:	f852 1b04 	ldr.w	r1, [r2], #4
 8009676:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800967a:	d01e      	beq.n	80096ba <__gethex+0x3ce>
 800967c:	3101      	adds	r1, #1
 800967e:	f8cc 1000 	str.w	r1, [ip]
 8009682:	f1b8 0f02 	cmp.w	r8, #2
 8009686:	f104 0214 	add.w	r2, r4, #20
 800968a:	d13d      	bne.n	8009708 <__gethex+0x41c>
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	3b01      	subs	r3, #1
 8009690:	42ab      	cmp	r3, r5
 8009692:	d10b      	bne.n	80096ac <__gethex+0x3c0>
 8009694:	1169      	asrs	r1, r5, #5
 8009696:	2301      	movs	r3, #1
 8009698:	f005 051f 	and.w	r5, r5, #31
 800969c:	fa03 f505 	lsl.w	r5, r3, r5
 80096a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096a4:	421d      	tst	r5, r3
 80096a6:	bf18      	it	ne
 80096a8:	f04f 0801 	movne.w	r8, #1
 80096ac:	f048 0820 	orr.w	r8, r8, #32
 80096b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096b2:	601c      	str	r4, [r3, #0]
 80096b4:	9b02      	ldr	r3, [sp, #8]
 80096b6:	601e      	str	r6, [r3, #0]
 80096b8:	e6a2      	b.n	8009400 <__gethex+0x114>
 80096ba:	4290      	cmp	r0, r2
 80096bc:	f842 3c04 	str.w	r3, [r2, #-4]
 80096c0:	d8d6      	bhi.n	8009670 <__gethex+0x384>
 80096c2:	68a2      	ldr	r2, [r4, #8]
 80096c4:	4593      	cmp	fp, r2
 80096c6:	db17      	blt.n	80096f8 <__gethex+0x40c>
 80096c8:	6861      	ldr	r1, [r4, #4]
 80096ca:	4648      	mov	r0, r9
 80096cc:	3101      	adds	r1, #1
 80096ce:	f000 fbc9 	bl	8009e64 <_Balloc>
 80096d2:	4682      	mov	sl, r0
 80096d4:	b918      	cbnz	r0, 80096de <__gethex+0x3f2>
 80096d6:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <__gethex+0x458>)
 80096d8:	4602      	mov	r2, r0
 80096da:	2184      	movs	r1, #132	; 0x84
 80096dc:	e6b3      	b.n	8009446 <__gethex+0x15a>
 80096de:	6922      	ldr	r2, [r4, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	f104 010c 	add.w	r1, r4, #12
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	300c      	adds	r0, #12
 80096ea:	f7fe fefe 	bl	80084ea <memcpy>
 80096ee:	4621      	mov	r1, r4
 80096f0:	4648      	mov	r0, r9
 80096f2:	f000 fbf7 	bl	8009ee4 <_Bfree>
 80096f6:	4654      	mov	r4, sl
 80096f8:	6922      	ldr	r2, [r4, #16]
 80096fa:	1c51      	adds	r1, r2, #1
 80096fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009700:	6121      	str	r1, [r4, #16]
 8009702:	2101      	movs	r1, #1
 8009704:	6151      	str	r1, [r2, #20]
 8009706:	e7bc      	b.n	8009682 <__gethex+0x396>
 8009708:	6921      	ldr	r1, [r4, #16]
 800970a:	4559      	cmp	r1, fp
 800970c:	dd0b      	ble.n	8009726 <__gethex+0x43a>
 800970e:	2101      	movs	r1, #1
 8009710:	4620      	mov	r0, r4
 8009712:	f7ff fd83 	bl	800921c <rshift>
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	3601      	adds	r6, #1
 800971a:	42b3      	cmp	r3, r6
 800971c:	f6ff aedb 	blt.w	80094d6 <__gethex+0x1ea>
 8009720:	f04f 0801 	mov.w	r8, #1
 8009724:	e7c2      	b.n	80096ac <__gethex+0x3c0>
 8009726:	f015 051f 	ands.w	r5, r5, #31
 800972a:	d0f9      	beq.n	8009720 <__gethex+0x434>
 800972c:	9b01      	ldr	r3, [sp, #4]
 800972e:	441a      	add	r2, r3
 8009730:	f1c5 0520 	rsb	r5, r5, #32
 8009734:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009738:	f000 fc86 	bl	800a048 <__hi0bits>
 800973c:	42a8      	cmp	r0, r5
 800973e:	dbe6      	blt.n	800970e <__gethex+0x422>
 8009740:	e7ee      	b.n	8009720 <__gethex+0x434>
 8009742:	bf00      	nop
 8009744:	0800c82d 	.word	0x0800c82d

08009748 <L_shift>:
 8009748:	f1c2 0208 	rsb	r2, r2, #8
 800974c:	0092      	lsls	r2, r2, #2
 800974e:	b570      	push	{r4, r5, r6, lr}
 8009750:	f1c2 0620 	rsb	r6, r2, #32
 8009754:	6843      	ldr	r3, [r0, #4]
 8009756:	6804      	ldr	r4, [r0, #0]
 8009758:	fa03 f506 	lsl.w	r5, r3, r6
 800975c:	432c      	orrs	r4, r5
 800975e:	40d3      	lsrs	r3, r2
 8009760:	6004      	str	r4, [r0, #0]
 8009762:	f840 3f04 	str.w	r3, [r0, #4]!
 8009766:	4288      	cmp	r0, r1
 8009768:	d3f4      	bcc.n	8009754 <L_shift+0xc>
 800976a:	bd70      	pop	{r4, r5, r6, pc}

0800976c <__match>:
 800976c:	b530      	push	{r4, r5, lr}
 800976e:	6803      	ldr	r3, [r0, #0]
 8009770:	3301      	adds	r3, #1
 8009772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009776:	b914      	cbnz	r4, 800977e <__match+0x12>
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	2001      	movs	r0, #1
 800977c:	bd30      	pop	{r4, r5, pc}
 800977e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009782:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009786:	2d19      	cmp	r5, #25
 8009788:	bf98      	it	ls
 800978a:	3220      	addls	r2, #32
 800978c:	42a2      	cmp	r2, r4
 800978e:	d0f0      	beq.n	8009772 <__match+0x6>
 8009790:	2000      	movs	r0, #0
 8009792:	e7f3      	b.n	800977c <__match+0x10>

08009794 <__hexnan>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	680b      	ldr	r3, [r1, #0]
 800979a:	6801      	ldr	r1, [r0, #0]
 800979c:	115e      	asrs	r6, r3, #5
 800979e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097a2:	f013 031f 	ands.w	r3, r3, #31
 80097a6:	b087      	sub	sp, #28
 80097a8:	bf18      	it	ne
 80097aa:	3604      	addne	r6, #4
 80097ac:	2500      	movs	r5, #0
 80097ae:	1f37      	subs	r7, r6, #4
 80097b0:	4682      	mov	sl, r0
 80097b2:	4690      	mov	r8, r2
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ba:	46b9      	mov	r9, r7
 80097bc:	463c      	mov	r4, r7
 80097be:	9502      	str	r5, [sp, #8]
 80097c0:	46ab      	mov	fp, r5
 80097c2:	784a      	ldrb	r2, [r1, #1]
 80097c4:	1c4b      	adds	r3, r1, #1
 80097c6:	9303      	str	r3, [sp, #12]
 80097c8:	b342      	cbz	r2, 800981c <__hexnan+0x88>
 80097ca:	4610      	mov	r0, r2
 80097cc:	9105      	str	r1, [sp, #20]
 80097ce:	9204      	str	r2, [sp, #16]
 80097d0:	f7ff fd76 	bl	80092c0 <__hexdig_fun>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d14f      	bne.n	8009878 <__hexnan+0xe4>
 80097d8:	9a04      	ldr	r2, [sp, #16]
 80097da:	9905      	ldr	r1, [sp, #20]
 80097dc:	2a20      	cmp	r2, #32
 80097de:	d818      	bhi.n	8009812 <__hexnan+0x7e>
 80097e0:	9b02      	ldr	r3, [sp, #8]
 80097e2:	459b      	cmp	fp, r3
 80097e4:	dd13      	ble.n	800980e <__hexnan+0x7a>
 80097e6:	454c      	cmp	r4, r9
 80097e8:	d206      	bcs.n	80097f8 <__hexnan+0x64>
 80097ea:	2d07      	cmp	r5, #7
 80097ec:	dc04      	bgt.n	80097f8 <__hexnan+0x64>
 80097ee:	462a      	mov	r2, r5
 80097f0:	4649      	mov	r1, r9
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff ffa8 	bl	8009748 <L_shift>
 80097f8:	4544      	cmp	r4, r8
 80097fa:	d950      	bls.n	800989e <__hexnan+0x10a>
 80097fc:	2300      	movs	r3, #0
 80097fe:	f1a4 0904 	sub.w	r9, r4, #4
 8009802:	f844 3c04 	str.w	r3, [r4, #-4]
 8009806:	f8cd b008 	str.w	fp, [sp, #8]
 800980a:	464c      	mov	r4, r9
 800980c:	461d      	mov	r5, r3
 800980e:	9903      	ldr	r1, [sp, #12]
 8009810:	e7d7      	b.n	80097c2 <__hexnan+0x2e>
 8009812:	2a29      	cmp	r2, #41	; 0x29
 8009814:	d155      	bne.n	80098c2 <__hexnan+0x12e>
 8009816:	3102      	adds	r1, #2
 8009818:	f8ca 1000 	str.w	r1, [sl]
 800981c:	f1bb 0f00 	cmp.w	fp, #0
 8009820:	d04f      	beq.n	80098c2 <__hexnan+0x12e>
 8009822:	454c      	cmp	r4, r9
 8009824:	d206      	bcs.n	8009834 <__hexnan+0xa0>
 8009826:	2d07      	cmp	r5, #7
 8009828:	dc04      	bgt.n	8009834 <__hexnan+0xa0>
 800982a:	462a      	mov	r2, r5
 800982c:	4649      	mov	r1, r9
 800982e:	4620      	mov	r0, r4
 8009830:	f7ff ff8a 	bl	8009748 <L_shift>
 8009834:	4544      	cmp	r4, r8
 8009836:	d934      	bls.n	80098a2 <__hexnan+0x10e>
 8009838:	f1a8 0204 	sub.w	r2, r8, #4
 800983c:	4623      	mov	r3, r4
 800983e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009842:	f842 1f04 	str.w	r1, [r2, #4]!
 8009846:	429f      	cmp	r7, r3
 8009848:	d2f9      	bcs.n	800983e <__hexnan+0xaa>
 800984a:	1b3b      	subs	r3, r7, r4
 800984c:	f023 0303 	bic.w	r3, r3, #3
 8009850:	3304      	adds	r3, #4
 8009852:	3e03      	subs	r6, #3
 8009854:	3401      	adds	r4, #1
 8009856:	42a6      	cmp	r6, r4
 8009858:	bf38      	it	cc
 800985a:	2304      	movcc	r3, #4
 800985c:	4443      	add	r3, r8
 800985e:	2200      	movs	r2, #0
 8009860:	f843 2b04 	str.w	r2, [r3], #4
 8009864:	429f      	cmp	r7, r3
 8009866:	d2fb      	bcs.n	8009860 <__hexnan+0xcc>
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	b91b      	cbnz	r3, 8009874 <__hexnan+0xe0>
 800986c:	4547      	cmp	r7, r8
 800986e:	d126      	bne.n	80098be <__hexnan+0x12a>
 8009870:	2301      	movs	r3, #1
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	2005      	movs	r0, #5
 8009876:	e025      	b.n	80098c4 <__hexnan+0x130>
 8009878:	3501      	adds	r5, #1
 800987a:	2d08      	cmp	r5, #8
 800987c:	f10b 0b01 	add.w	fp, fp, #1
 8009880:	dd06      	ble.n	8009890 <__hexnan+0xfc>
 8009882:	4544      	cmp	r4, r8
 8009884:	d9c3      	bls.n	800980e <__hexnan+0x7a>
 8009886:	2300      	movs	r3, #0
 8009888:	f844 3c04 	str.w	r3, [r4, #-4]
 800988c:	2501      	movs	r5, #1
 800988e:	3c04      	subs	r4, #4
 8009890:	6822      	ldr	r2, [r4, #0]
 8009892:	f000 000f 	and.w	r0, r0, #15
 8009896:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800989a:	6020      	str	r0, [r4, #0]
 800989c:	e7b7      	b.n	800980e <__hexnan+0x7a>
 800989e:	2508      	movs	r5, #8
 80098a0:	e7b5      	b.n	800980e <__hexnan+0x7a>
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d0df      	beq.n	8009868 <__hexnan+0xd4>
 80098a8:	f1c3 0320 	rsb	r3, r3, #32
 80098ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098b0:	40da      	lsrs	r2, r3
 80098b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098b6:	4013      	ands	r3, r2
 80098b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80098bc:	e7d4      	b.n	8009868 <__hexnan+0xd4>
 80098be:	3f04      	subs	r7, #4
 80098c0:	e7d2      	b.n	8009868 <__hexnan+0xd4>
 80098c2:	2004      	movs	r0, #4
 80098c4:	b007      	add	sp, #28
 80098c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098ca <__ssputs_r>:
 80098ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098ce:	688e      	ldr	r6, [r1, #8]
 80098d0:	461f      	mov	r7, r3
 80098d2:	42be      	cmp	r6, r7
 80098d4:	680b      	ldr	r3, [r1, #0]
 80098d6:	4682      	mov	sl, r0
 80098d8:	460c      	mov	r4, r1
 80098da:	4690      	mov	r8, r2
 80098dc:	d82c      	bhi.n	8009938 <__ssputs_r+0x6e>
 80098de:	898a      	ldrh	r2, [r1, #12]
 80098e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098e4:	d026      	beq.n	8009934 <__ssputs_r+0x6a>
 80098e6:	6965      	ldr	r5, [r4, #20]
 80098e8:	6909      	ldr	r1, [r1, #16]
 80098ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098ee:	eba3 0901 	sub.w	r9, r3, r1
 80098f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098f6:	1c7b      	adds	r3, r7, #1
 80098f8:	444b      	add	r3, r9
 80098fa:	106d      	asrs	r5, r5, #1
 80098fc:	429d      	cmp	r5, r3
 80098fe:	bf38      	it	cc
 8009900:	461d      	movcc	r5, r3
 8009902:	0553      	lsls	r3, r2, #21
 8009904:	d527      	bpl.n	8009956 <__ssputs_r+0x8c>
 8009906:	4629      	mov	r1, r5
 8009908:	f000 f960 	bl	8009bcc <_malloc_r>
 800990c:	4606      	mov	r6, r0
 800990e:	b360      	cbz	r0, 800996a <__ssputs_r+0xa0>
 8009910:	6921      	ldr	r1, [r4, #16]
 8009912:	464a      	mov	r2, r9
 8009914:	f7fe fde9 	bl	80084ea <memcpy>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	6126      	str	r6, [r4, #16]
 8009926:	6165      	str	r5, [r4, #20]
 8009928:	444e      	add	r6, r9
 800992a:	eba5 0509 	sub.w	r5, r5, r9
 800992e:	6026      	str	r6, [r4, #0]
 8009930:	60a5      	str	r5, [r4, #8]
 8009932:	463e      	mov	r6, r7
 8009934:	42be      	cmp	r6, r7
 8009936:	d900      	bls.n	800993a <__ssputs_r+0x70>
 8009938:	463e      	mov	r6, r7
 800993a:	6820      	ldr	r0, [r4, #0]
 800993c:	4632      	mov	r2, r6
 800993e:	4641      	mov	r1, r8
 8009940:	f000 ffbc 	bl	800a8bc <memmove>
 8009944:	68a3      	ldr	r3, [r4, #8]
 8009946:	1b9b      	subs	r3, r3, r6
 8009948:	60a3      	str	r3, [r4, #8]
 800994a:	6823      	ldr	r3, [r4, #0]
 800994c:	4433      	add	r3, r6
 800994e:	6023      	str	r3, [r4, #0]
 8009950:	2000      	movs	r0, #0
 8009952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009956:	462a      	mov	r2, r5
 8009958:	f000 ff74 	bl	800a844 <_realloc_r>
 800995c:	4606      	mov	r6, r0
 800995e:	2800      	cmp	r0, #0
 8009960:	d1e0      	bne.n	8009924 <__ssputs_r+0x5a>
 8009962:	6921      	ldr	r1, [r4, #16]
 8009964:	4650      	mov	r0, sl
 8009966:	f001 f84d 	bl	800aa04 <_free_r>
 800996a:	230c      	movs	r3, #12
 800996c:	f8ca 3000 	str.w	r3, [sl]
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800997c:	e7e9      	b.n	8009952 <__ssputs_r+0x88>
	...

08009980 <_svfiprintf_r>:
 8009980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009984:	4698      	mov	r8, r3
 8009986:	898b      	ldrh	r3, [r1, #12]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	b09d      	sub	sp, #116	; 0x74
 800998c:	4607      	mov	r7, r0
 800998e:	460d      	mov	r5, r1
 8009990:	4614      	mov	r4, r2
 8009992:	d50e      	bpl.n	80099b2 <_svfiprintf_r+0x32>
 8009994:	690b      	ldr	r3, [r1, #16]
 8009996:	b963      	cbnz	r3, 80099b2 <_svfiprintf_r+0x32>
 8009998:	2140      	movs	r1, #64	; 0x40
 800999a:	f000 f917 	bl	8009bcc <_malloc_r>
 800999e:	6028      	str	r0, [r5, #0]
 80099a0:	6128      	str	r0, [r5, #16]
 80099a2:	b920      	cbnz	r0, 80099ae <_svfiprintf_r+0x2e>
 80099a4:	230c      	movs	r3, #12
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ac:	e0d0      	b.n	8009b50 <_svfiprintf_r+0x1d0>
 80099ae:	2340      	movs	r3, #64	; 0x40
 80099b0:	616b      	str	r3, [r5, #20]
 80099b2:	2300      	movs	r3, #0
 80099b4:	9309      	str	r3, [sp, #36]	; 0x24
 80099b6:	2320      	movs	r3, #32
 80099b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80099c0:	2330      	movs	r3, #48	; 0x30
 80099c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009b68 <_svfiprintf_r+0x1e8>
 80099c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ca:	f04f 0901 	mov.w	r9, #1
 80099ce:	4623      	mov	r3, r4
 80099d0:	469a      	mov	sl, r3
 80099d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099d6:	b10a      	cbz	r2, 80099dc <_svfiprintf_r+0x5c>
 80099d8:	2a25      	cmp	r2, #37	; 0x25
 80099da:	d1f9      	bne.n	80099d0 <_svfiprintf_r+0x50>
 80099dc:	ebba 0b04 	subs.w	fp, sl, r4
 80099e0:	d00b      	beq.n	80099fa <_svfiprintf_r+0x7a>
 80099e2:	465b      	mov	r3, fp
 80099e4:	4622      	mov	r2, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	4638      	mov	r0, r7
 80099ea:	f7ff ff6e 	bl	80098ca <__ssputs_r>
 80099ee:	3001      	adds	r0, #1
 80099f0:	f000 80a9 	beq.w	8009b46 <_svfiprintf_r+0x1c6>
 80099f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099f6:	445a      	add	r2, fp
 80099f8:	9209      	str	r2, [sp, #36]	; 0x24
 80099fa:	f89a 3000 	ldrb.w	r3, [sl]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 80a1 	beq.w	8009b46 <_svfiprintf_r+0x1c6>
 8009a04:	2300      	movs	r3, #0
 8009a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a0e:	f10a 0a01 	add.w	sl, sl, #1
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	9307      	str	r3, [sp, #28]
 8009a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a1c:	4654      	mov	r4, sl
 8009a1e:	2205      	movs	r2, #5
 8009a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a24:	4850      	ldr	r0, [pc, #320]	; (8009b68 <_svfiprintf_r+0x1e8>)
 8009a26:	f7f6 fbf3 	bl	8000210 <memchr>
 8009a2a:	9a04      	ldr	r2, [sp, #16]
 8009a2c:	b9d8      	cbnz	r0, 8009a66 <_svfiprintf_r+0xe6>
 8009a2e:	06d0      	lsls	r0, r2, #27
 8009a30:	bf44      	itt	mi
 8009a32:	2320      	movmi	r3, #32
 8009a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a38:	0711      	lsls	r1, r2, #28
 8009a3a:	bf44      	itt	mi
 8009a3c:	232b      	movmi	r3, #43	; 0x2b
 8009a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a42:	f89a 3000 	ldrb.w	r3, [sl]
 8009a46:	2b2a      	cmp	r3, #42	; 0x2a
 8009a48:	d015      	beq.n	8009a76 <_svfiprintf_r+0xf6>
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	4654      	mov	r4, sl
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f04f 0c0a 	mov.w	ip, #10
 8009a54:	4621      	mov	r1, r4
 8009a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a5a:	3b30      	subs	r3, #48	; 0x30
 8009a5c:	2b09      	cmp	r3, #9
 8009a5e:	d94d      	bls.n	8009afc <_svfiprintf_r+0x17c>
 8009a60:	b1b0      	cbz	r0, 8009a90 <_svfiprintf_r+0x110>
 8009a62:	9207      	str	r2, [sp, #28]
 8009a64:	e014      	b.n	8009a90 <_svfiprintf_r+0x110>
 8009a66:	eba0 0308 	sub.w	r3, r0, r8
 8009a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	46a2      	mov	sl, r4
 8009a74:	e7d2      	b.n	8009a1c <_svfiprintf_r+0x9c>
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	9103      	str	r1, [sp, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bfbb      	ittet	lt
 8009a82:	425b      	neglt	r3, r3
 8009a84:	f042 0202 	orrlt.w	r2, r2, #2
 8009a88:	9307      	strge	r3, [sp, #28]
 8009a8a:	9307      	strlt	r3, [sp, #28]
 8009a8c:	bfb8      	it	lt
 8009a8e:	9204      	strlt	r2, [sp, #16]
 8009a90:	7823      	ldrb	r3, [r4, #0]
 8009a92:	2b2e      	cmp	r3, #46	; 0x2e
 8009a94:	d10c      	bne.n	8009ab0 <_svfiprintf_r+0x130>
 8009a96:	7863      	ldrb	r3, [r4, #1]
 8009a98:	2b2a      	cmp	r3, #42	; 0x2a
 8009a9a:	d134      	bne.n	8009b06 <_svfiprintf_r+0x186>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	1d1a      	adds	r2, r3, #4
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	9203      	str	r2, [sp, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	bfb8      	it	lt
 8009aa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009aac:	3402      	adds	r4, #2
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009b78 <_svfiprintf_r+0x1f8>
 8009ab4:	7821      	ldrb	r1, [r4, #0]
 8009ab6:	2203      	movs	r2, #3
 8009ab8:	4650      	mov	r0, sl
 8009aba:	f7f6 fba9 	bl	8000210 <memchr>
 8009abe:	b138      	cbz	r0, 8009ad0 <_svfiprintf_r+0x150>
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	eba0 000a 	sub.w	r0, r0, sl
 8009ac6:	2240      	movs	r2, #64	; 0x40
 8009ac8:	4082      	lsls	r2, r0
 8009aca:	4313      	orrs	r3, r2
 8009acc:	3401      	adds	r4, #1
 8009ace:	9304      	str	r3, [sp, #16]
 8009ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ad4:	4825      	ldr	r0, [pc, #148]	; (8009b6c <_svfiprintf_r+0x1ec>)
 8009ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ada:	2206      	movs	r2, #6
 8009adc:	f7f6 fb98 	bl	8000210 <memchr>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d038      	beq.n	8009b56 <_svfiprintf_r+0x1d6>
 8009ae4:	4b22      	ldr	r3, [pc, #136]	; (8009b70 <_svfiprintf_r+0x1f0>)
 8009ae6:	bb1b      	cbnz	r3, 8009b30 <_svfiprintf_r+0x1b0>
 8009ae8:	9b03      	ldr	r3, [sp, #12]
 8009aea:	3307      	adds	r3, #7
 8009aec:	f023 0307 	bic.w	r3, r3, #7
 8009af0:	3308      	adds	r3, #8
 8009af2:	9303      	str	r3, [sp, #12]
 8009af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af6:	4433      	add	r3, r6
 8009af8:	9309      	str	r3, [sp, #36]	; 0x24
 8009afa:	e768      	b.n	80099ce <_svfiprintf_r+0x4e>
 8009afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b00:	460c      	mov	r4, r1
 8009b02:	2001      	movs	r0, #1
 8009b04:	e7a6      	b.n	8009a54 <_svfiprintf_r+0xd4>
 8009b06:	2300      	movs	r3, #0
 8009b08:	3401      	adds	r4, #1
 8009b0a:	9305      	str	r3, [sp, #20]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	f04f 0c0a 	mov.w	ip, #10
 8009b12:	4620      	mov	r0, r4
 8009b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b18:	3a30      	subs	r2, #48	; 0x30
 8009b1a:	2a09      	cmp	r2, #9
 8009b1c:	d903      	bls.n	8009b26 <_svfiprintf_r+0x1a6>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d0c6      	beq.n	8009ab0 <_svfiprintf_r+0x130>
 8009b22:	9105      	str	r1, [sp, #20]
 8009b24:	e7c4      	b.n	8009ab0 <_svfiprintf_r+0x130>
 8009b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e7f0      	b.n	8009b12 <_svfiprintf_r+0x192>
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4b0f      	ldr	r3, [pc, #60]	; (8009b74 <_svfiprintf_r+0x1f4>)
 8009b38:	a904      	add	r1, sp, #16
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f7fc ff02 	bl	8006944 <_printf_float>
 8009b40:	1c42      	adds	r2, r0, #1
 8009b42:	4606      	mov	r6, r0
 8009b44:	d1d6      	bne.n	8009af4 <_svfiprintf_r+0x174>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	065b      	lsls	r3, r3, #25
 8009b4a:	f53f af2d 	bmi.w	80099a8 <_svfiprintf_r+0x28>
 8009b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b50:	b01d      	add	sp, #116	; 0x74
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	ab03      	add	r3, sp, #12
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	462a      	mov	r2, r5
 8009b5c:	4b05      	ldr	r3, [pc, #20]	; (8009b74 <_svfiprintf_r+0x1f4>)
 8009b5e:	a904      	add	r1, sp, #16
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7fd f993 	bl	8006e8c <_printf_i>
 8009b66:	e7eb      	b.n	8009b40 <_svfiprintf_r+0x1c0>
 8009b68:	0800c89e 	.word	0x0800c89e
 8009b6c:	0800c8a8 	.word	0x0800c8a8
 8009b70:	08006945 	.word	0x08006945
 8009b74:	080098cb 	.word	0x080098cb
 8009b78:	0800c8a4 	.word	0x0800c8a4

08009b7c <malloc>:
 8009b7c:	4b02      	ldr	r3, [pc, #8]	; (8009b88 <malloc+0xc>)
 8009b7e:	4601      	mov	r1, r0
 8009b80:	6818      	ldr	r0, [r3, #0]
 8009b82:	f000 b823 	b.w	8009bcc <_malloc_r>
 8009b86:	bf00      	nop
 8009b88:	20000204 	.word	0x20000204

08009b8c <sbrk_aligned>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4e0e      	ldr	r6, [pc, #56]	; (8009bc8 <sbrk_aligned+0x3c>)
 8009b90:	460c      	mov	r4, r1
 8009b92:	6831      	ldr	r1, [r6, #0]
 8009b94:	4605      	mov	r5, r0
 8009b96:	b911      	cbnz	r1, 8009b9e <sbrk_aligned+0x12>
 8009b98:	f000 fede 	bl	800a958 <_sbrk_r>
 8009b9c:	6030      	str	r0, [r6, #0]
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4628      	mov	r0, r5
 8009ba2:	f000 fed9 	bl	800a958 <_sbrk_r>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d00a      	beq.n	8009bc0 <sbrk_aligned+0x34>
 8009baa:	1cc4      	adds	r4, r0, #3
 8009bac:	f024 0403 	bic.w	r4, r4, #3
 8009bb0:	42a0      	cmp	r0, r4
 8009bb2:	d007      	beq.n	8009bc4 <sbrk_aligned+0x38>
 8009bb4:	1a21      	subs	r1, r4, r0
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f000 fece 	bl	800a958 <_sbrk_r>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d101      	bne.n	8009bc4 <sbrk_aligned+0x38>
 8009bc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	bd70      	pop	{r4, r5, r6, pc}
 8009bc8:	2000a9e8 	.word	0x2000a9e8

08009bcc <_malloc_r>:
 8009bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	1ccd      	adds	r5, r1, #3
 8009bd2:	f025 0503 	bic.w	r5, r5, #3
 8009bd6:	3508      	adds	r5, #8
 8009bd8:	2d0c      	cmp	r5, #12
 8009bda:	bf38      	it	cc
 8009bdc:	250c      	movcc	r5, #12
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	4607      	mov	r7, r0
 8009be2:	db01      	blt.n	8009be8 <_malloc_r+0x1c>
 8009be4:	42a9      	cmp	r1, r5
 8009be6:	d905      	bls.n	8009bf4 <_malloc_r+0x28>
 8009be8:	230c      	movs	r3, #12
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	2600      	movs	r6, #0
 8009bee:	4630      	mov	r0, r6
 8009bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cc8 <_malloc_r+0xfc>
 8009bf8:	f000 f928 	bl	8009e4c <__malloc_lock>
 8009bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8009c00:	461c      	mov	r4, r3
 8009c02:	bb5c      	cbnz	r4, 8009c5c <_malloc_r+0x90>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4638      	mov	r0, r7
 8009c08:	f7ff ffc0 	bl	8009b8c <sbrk_aligned>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	4604      	mov	r4, r0
 8009c10:	d155      	bne.n	8009cbe <_malloc_r+0xf2>
 8009c12:	f8d8 4000 	ldr.w	r4, [r8]
 8009c16:	4626      	mov	r6, r4
 8009c18:	2e00      	cmp	r6, #0
 8009c1a:	d145      	bne.n	8009ca8 <_malloc_r+0xdc>
 8009c1c:	2c00      	cmp	r4, #0
 8009c1e:	d048      	beq.n	8009cb2 <_malloc_r+0xe6>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	4631      	mov	r1, r6
 8009c24:	4638      	mov	r0, r7
 8009c26:	eb04 0903 	add.w	r9, r4, r3
 8009c2a:	f000 fe95 	bl	800a958 <_sbrk_r>
 8009c2e:	4581      	cmp	r9, r0
 8009c30:	d13f      	bne.n	8009cb2 <_malloc_r+0xe6>
 8009c32:	6821      	ldr	r1, [r4, #0]
 8009c34:	1a6d      	subs	r5, r5, r1
 8009c36:	4629      	mov	r1, r5
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff ffa7 	bl	8009b8c <sbrk_aligned>
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d037      	beq.n	8009cb2 <_malloc_r+0xe6>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	442b      	add	r3, r5
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	f8d8 3000 	ldr.w	r3, [r8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d038      	beq.n	8009cc2 <_malloc_r+0xf6>
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	42a2      	cmp	r2, r4
 8009c54:	d12b      	bne.n	8009cae <_malloc_r+0xe2>
 8009c56:	2200      	movs	r2, #0
 8009c58:	605a      	str	r2, [r3, #4]
 8009c5a:	e00f      	b.n	8009c7c <_malloc_r+0xb0>
 8009c5c:	6822      	ldr	r2, [r4, #0]
 8009c5e:	1b52      	subs	r2, r2, r5
 8009c60:	d41f      	bmi.n	8009ca2 <_malloc_r+0xd6>
 8009c62:	2a0b      	cmp	r2, #11
 8009c64:	d917      	bls.n	8009c96 <_malloc_r+0xca>
 8009c66:	1961      	adds	r1, r4, r5
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	6025      	str	r5, [r4, #0]
 8009c6c:	bf18      	it	ne
 8009c6e:	6059      	strne	r1, [r3, #4]
 8009c70:	6863      	ldr	r3, [r4, #4]
 8009c72:	bf08      	it	eq
 8009c74:	f8c8 1000 	streq.w	r1, [r8]
 8009c78:	5162      	str	r2, [r4, r5]
 8009c7a:	604b      	str	r3, [r1, #4]
 8009c7c:	4638      	mov	r0, r7
 8009c7e:	f104 060b 	add.w	r6, r4, #11
 8009c82:	f000 f8e9 	bl	8009e58 <__malloc_unlock>
 8009c86:	f026 0607 	bic.w	r6, r6, #7
 8009c8a:	1d23      	adds	r3, r4, #4
 8009c8c:	1af2      	subs	r2, r6, r3
 8009c8e:	d0ae      	beq.n	8009bee <_malloc_r+0x22>
 8009c90:	1b9b      	subs	r3, r3, r6
 8009c92:	50a3      	str	r3, [r4, r2]
 8009c94:	e7ab      	b.n	8009bee <_malloc_r+0x22>
 8009c96:	42a3      	cmp	r3, r4
 8009c98:	6862      	ldr	r2, [r4, #4]
 8009c9a:	d1dd      	bne.n	8009c58 <_malloc_r+0x8c>
 8009c9c:	f8c8 2000 	str.w	r2, [r8]
 8009ca0:	e7ec      	b.n	8009c7c <_malloc_r+0xb0>
 8009ca2:	4623      	mov	r3, r4
 8009ca4:	6864      	ldr	r4, [r4, #4]
 8009ca6:	e7ac      	b.n	8009c02 <_malloc_r+0x36>
 8009ca8:	4634      	mov	r4, r6
 8009caa:	6876      	ldr	r6, [r6, #4]
 8009cac:	e7b4      	b.n	8009c18 <_malloc_r+0x4c>
 8009cae:	4613      	mov	r3, r2
 8009cb0:	e7cc      	b.n	8009c4c <_malloc_r+0x80>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	603b      	str	r3, [r7, #0]
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f000 f8ce 	bl	8009e58 <__malloc_unlock>
 8009cbc:	e797      	b.n	8009bee <_malloc_r+0x22>
 8009cbe:	6025      	str	r5, [r4, #0]
 8009cc0:	e7dc      	b.n	8009c7c <_malloc_r+0xb0>
 8009cc2:	605b      	str	r3, [r3, #4]
 8009cc4:	deff      	udf	#255	; 0xff
 8009cc6:	bf00      	nop
 8009cc8:	2000a9e4 	.word	0x2000a9e4

08009ccc <__ascii_mbtowc>:
 8009ccc:	b082      	sub	sp, #8
 8009cce:	b901      	cbnz	r1, 8009cd2 <__ascii_mbtowc+0x6>
 8009cd0:	a901      	add	r1, sp, #4
 8009cd2:	b142      	cbz	r2, 8009ce6 <__ascii_mbtowc+0x1a>
 8009cd4:	b14b      	cbz	r3, 8009cea <__ascii_mbtowc+0x1e>
 8009cd6:	7813      	ldrb	r3, [r2, #0]
 8009cd8:	600b      	str	r3, [r1, #0]
 8009cda:	7812      	ldrb	r2, [r2, #0]
 8009cdc:	1e10      	subs	r0, r2, #0
 8009cde:	bf18      	it	ne
 8009ce0:	2001      	movne	r0, #1
 8009ce2:	b002      	add	sp, #8
 8009ce4:	4770      	bx	lr
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	e7fb      	b.n	8009ce2 <__ascii_mbtowc+0x16>
 8009cea:	f06f 0001 	mvn.w	r0, #1
 8009cee:	e7f8      	b.n	8009ce2 <__ascii_mbtowc+0x16>

08009cf0 <__sflush_r>:
 8009cf0:	898a      	ldrh	r2, [r1, #12]
 8009cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	0710      	lsls	r0, r2, #28
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	d458      	bmi.n	8009db0 <__sflush_r+0xc0>
 8009cfe:	684b      	ldr	r3, [r1, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dc05      	bgt.n	8009d10 <__sflush_r+0x20>
 8009d04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	dc02      	bgt.n	8009d10 <__sflush_r+0x20>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d12:	2e00      	cmp	r6, #0
 8009d14:	d0f9      	beq.n	8009d0a <__sflush_r+0x1a>
 8009d16:	2300      	movs	r3, #0
 8009d18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d1c:	682f      	ldr	r7, [r5, #0]
 8009d1e:	6a21      	ldr	r1, [r4, #32]
 8009d20:	602b      	str	r3, [r5, #0]
 8009d22:	d032      	beq.n	8009d8a <__sflush_r+0x9a>
 8009d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	075a      	lsls	r2, r3, #29
 8009d2a:	d505      	bpl.n	8009d38 <__sflush_r+0x48>
 8009d2c:	6863      	ldr	r3, [r4, #4]
 8009d2e:	1ac0      	subs	r0, r0, r3
 8009d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d32:	b10b      	cbz	r3, 8009d38 <__sflush_r+0x48>
 8009d34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d36:	1ac0      	subs	r0, r0, r3
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d3e:	6a21      	ldr	r1, [r4, #32]
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b0      	blx	r6
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	89a3      	ldrh	r3, [r4, #12]
 8009d48:	d106      	bne.n	8009d58 <__sflush_r+0x68>
 8009d4a:	6829      	ldr	r1, [r5, #0]
 8009d4c:	291d      	cmp	r1, #29
 8009d4e:	d82b      	bhi.n	8009da8 <__sflush_r+0xb8>
 8009d50:	4a29      	ldr	r2, [pc, #164]	; (8009df8 <__sflush_r+0x108>)
 8009d52:	410a      	asrs	r2, r1
 8009d54:	07d6      	lsls	r6, r2, #31
 8009d56:	d427      	bmi.n	8009da8 <__sflush_r+0xb8>
 8009d58:	2200      	movs	r2, #0
 8009d5a:	6062      	str	r2, [r4, #4]
 8009d5c:	04d9      	lsls	r1, r3, #19
 8009d5e:	6922      	ldr	r2, [r4, #16]
 8009d60:	6022      	str	r2, [r4, #0]
 8009d62:	d504      	bpl.n	8009d6e <__sflush_r+0x7e>
 8009d64:	1c42      	adds	r2, r0, #1
 8009d66:	d101      	bne.n	8009d6c <__sflush_r+0x7c>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b903      	cbnz	r3, 8009d6e <__sflush_r+0x7e>
 8009d6c:	6560      	str	r0, [r4, #84]	; 0x54
 8009d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d70:	602f      	str	r7, [r5, #0]
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d0c9      	beq.n	8009d0a <__sflush_r+0x1a>
 8009d76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d7a:	4299      	cmp	r1, r3
 8009d7c:	d002      	beq.n	8009d84 <__sflush_r+0x94>
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 fe40 	bl	800aa04 <_free_r>
 8009d84:	2000      	movs	r0, #0
 8009d86:	6360      	str	r0, [r4, #52]	; 0x34
 8009d88:	e7c0      	b.n	8009d0c <__sflush_r+0x1c>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b0      	blx	r6
 8009d90:	1c41      	adds	r1, r0, #1
 8009d92:	d1c8      	bne.n	8009d26 <__sflush_r+0x36>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d0c5      	beq.n	8009d26 <__sflush_r+0x36>
 8009d9a:	2b1d      	cmp	r3, #29
 8009d9c:	d001      	beq.n	8009da2 <__sflush_r+0xb2>
 8009d9e:	2b16      	cmp	r3, #22
 8009da0:	d101      	bne.n	8009da6 <__sflush_r+0xb6>
 8009da2:	602f      	str	r7, [r5, #0]
 8009da4:	e7b1      	b.n	8009d0a <__sflush_r+0x1a>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	e7ad      	b.n	8009d0c <__sflush_r+0x1c>
 8009db0:	690f      	ldr	r7, [r1, #16]
 8009db2:	2f00      	cmp	r7, #0
 8009db4:	d0a9      	beq.n	8009d0a <__sflush_r+0x1a>
 8009db6:	0793      	lsls	r3, r2, #30
 8009db8:	680e      	ldr	r6, [r1, #0]
 8009dba:	bf08      	it	eq
 8009dbc:	694b      	ldreq	r3, [r1, #20]
 8009dbe:	600f      	str	r7, [r1, #0]
 8009dc0:	bf18      	it	ne
 8009dc2:	2300      	movne	r3, #0
 8009dc4:	eba6 0807 	sub.w	r8, r6, r7
 8009dc8:	608b      	str	r3, [r1, #8]
 8009dca:	f1b8 0f00 	cmp.w	r8, #0
 8009dce:	dd9c      	ble.n	8009d0a <__sflush_r+0x1a>
 8009dd0:	6a21      	ldr	r1, [r4, #32]
 8009dd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dd4:	4643      	mov	r3, r8
 8009dd6:	463a      	mov	r2, r7
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b0      	blx	r6
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	dc06      	bgt.n	8009dee <__sflush_r+0xfe>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dec:	e78e      	b.n	8009d0c <__sflush_r+0x1c>
 8009dee:	4407      	add	r7, r0
 8009df0:	eba8 0800 	sub.w	r8, r8, r0
 8009df4:	e7e9      	b.n	8009dca <__sflush_r+0xda>
 8009df6:	bf00      	nop
 8009df8:	dfbffffe 	.word	0xdfbffffe

08009dfc <_fflush_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	690b      	ldr	r3, [r1, #16]
 8009e00:	4605      	mov	r5, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	b913      	cbnz	r3, 8009e0c <_fflush_r+0x10>
 8009e06:	2500      	movs	r5, #0
 8009e08:	4628      	mov	r0, r5
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	b118      	cbz	r0, 8009e16 <_fflush_r+0x1a>
 8009e0e:	6a03      	ldr	r3, [r0, #32]
 8009e10:	b90b      	cbnz	r3, 8009e16 <_fflush_r+0x1a>
 8009e12:	f7fd fc19 	bl	8007648 <__sinit>
 8009e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0f3      	beq.n	8009e06 <_fflush_r+0xa>
 8009e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e20:	07d0      	lsls	r0, r2, #31
 8009e22:	d404      	bmi.n	8009e2e <_fflush_r+0x32>
 8009e24:	0599      	lsls	r1, r3, #22
 8009e26:	d402      	bmi.n	8009e2e <_fflush_r+0x32>
 8009e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e2a:	f7fe fb5c 	bl	80084e6 <__retarget_lock_acquire_recursive>
 8009e2e:	4628      	mov	r0, r5
 8009e30:	4621      	mov	r1, r4
 8009e32:	f7ff ff5d 	bl	8009cf0 <__sflush_r>
 8009e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e38:	07da      	lsls	r2, r3, #31
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	d4e4      	bmi.n	8009e08 <_fflush_r+0xc>
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	059b      	lsls	r3, r3, #22
 8009e42:	d4e1      	bmi.n	8009e08 <_fflush_r+0xc>
 8009e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e46:	f7fe fb4f 	bl	80084e8 <__retarget_lock_release_recursive>
 8009e4a:	e7dd      	b.n	8009e08 <_fflush_r+0xc>

08009e4c <__malloc_lock>:
 8009e4c:	4801      	ldr	r0, [pc, #4]	; (8009e54 <__malloc_lock+0x8>)
 8009e4e:	f7fe bb4a 	b.w	80084e6 <__retarget_lock_acquire_recursive>
 8009e52:	bf00      	nop
 8009e54:	2000a9e0 	.word	0x2000a9e0

08009e58 <__malloc_unlock>:
 8009e58:	4801      	ldr	r0, [pc, #4]	; (8009e60 <__malloc_unlock+0x8>)
 8009e5a:	f7fe bb45 	b.w	80084e8 <__retarget_lock_release_recursive>
 8009e5e:	bf00      	nop
 8009e60:	2000a9e0 	.word	0x2000a9e0

08009e64 <_Balloc>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	69c6      	ldr	r6, [r0, #28]
 8009e68:	4604      	mov	r4, r0
 8009e6a:	460d      	mov	r5, r1
 8009e6c:	b976      	cbnz	r6, 8009e8c <_Balloc+0x28>
 8009e6e:	2010      	movs	r0, #16
 8009e70:	f7ff fe84 	bl	8009b7c <malloc>
 8009e74:	4602      	mov	r2, r0
 8009e76:	61e0      	str	r0, [r4, #28]
 8009e78:	b920      	cbnz	r0, 8009e84 <_Balloc+0x20>
 8009e7a:	4b18      	ldr	r3, [pc, #96]	; (8009edc <_Balloc+0x78>)
 8009e7c:	4818      	ldr	r0, [pc, #96]	; (8009ee0 <_Balloc+0x7c>)
 8009e7e:	216b      	movs	r1, #107	; 0x6b
 8009e80:	f000 fd8c 	bl	800a99c <__assert_func>
 8009e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e88:	6006      	str	r6, [r0, #0]
 8009e8a:	60c6      	str	r6, [r0, #12]
 8009e8c:	69e6      	ldr	r6, [r4, #28]
 8009e8e:	68f3      	ldr	r3, [r6, #12]
 8009e90:	b183      	cbz	r3, 8009eb4 <_Balloc+0x50>
 8009e92:	69e3      	ldr	r3, [r4, #28]
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e9a:	b9b8      	cbnz	r0, 8009ecc <_Balloc+0x68>
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	fa01 f605 	lsl.w	r6, r1, r5
 8009ea2:	1d72      	adds	r2, r6, #5
 8009ea4:	0092      	lsls	r2, r2, #2
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fd96 	bl	800a9d8 <_calloc_r>
 8009eac:	b160      	cbz	r0, 8009ec8 <_Balloc+0x64>
 8009eae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eb2:	e00e      	b.n	8009ed2 <_Balloc+0x6e>
 8009eb4:	2221      	movs	r2, #33	; 0x21
 8009eb6:	2104      	movs	r1, #4
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 fd8d 	bl	800a9d8 <_calloc_r>
 8009ebe:	69e3      	ldr	r3, [r4, #28]
 8009ec0:	60f0      	str	r0, [r6, #12]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e4      	bne.n	8009e92 <_Balloc+0x2e>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	6802      	ldr	r2, [r0, #0]
 8009ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ed8:	e7f7      	b.n	8009eca <_Balloc+0x66>
 8009eda:	bf00      	nop
 8009edc:	0800c7be 	.word	0x0800c7be
 8009ee0:	0800c8af 	.word	0x0800c8af

08009ee4 <_Bfree>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	69c6      	ldr	r6, [r0, #28]
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	b976      	cbnz	r6, 8009f0c <_Bfree+0x28>
 8009eee:	2010      	movs	r0, #16
 8009ef0:	f7ff fe44 	bl	8009b7c <malloc>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	61e8      	str	r0, [r5, #28]
 8009ef8:	b920      	cbnz	r0, 8009f04 <_Bfree+0x20>
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <_Bfree+0x3c>)
 8009efc:	4809      	ldr	r0, [pc, #36]	; (8009f24 <_Bfree+0x40>)
 8009efe:	218f      	movs	r1, #143	; 0x8f
 8009f00:	f000 fd4c 	bl	800a99c <__assert_func>
 8009f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f08:	6006      	str	r6, [r0, #0]
 8009f0a:	60c6      	str	r6, [r0, #12]
 8009f0c:	b13c      	cbz	r4, 8009f1e <_Bfree+0x3a>
 8009f0e:	69eb      	ldr	r3, [r5, #28]
 8009f10:	6862      	ldr	r2, [r4, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f18:	6021      	str	r1, [r4, #0]
 8009f1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	0800c7be 	.word	0x0800c7be
 8009f24:	0800c8af 	.word	0x0800c8af

08009f28 <__multadd>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	690d      	ldr	r5, [r1, #16]
 8009f2e:	4607      	mov	r7, r0
 8009f30:	460c      	mov	r4, r1
 8009f32:	461e      	mov	r6, r3
 8009f34:	f101 0c14 	add.w	ip, r1, #20
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8009f3e:	b299      	uxth	r1, r3
 8009f40:	fb02 6101 	mla	r1, r2, r1, r6
 8009f44:	0c1e      	lsrs	r6, r3, #16
 8009f46:	0c0b      	lsrs	r3, r1, #16
 8009f48:	fb02 3306 	mla	r3, r2, r6, r3
 8009f4c:	b289      	uxth	r1, r1
 8009f4e:	3001      	adds	r0, #1
 8009f50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f54:	4285      	cmp	r5, r0
 8009f56:	f84c 1b04 	str.w	r1, [ip], #4
 8009f5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f5e:	dcec      	bgt.n	8009f3a <__multadd+0x12>
 8009f60:	b30e      	cbz	r6, 8009fa6 <__multadd+0x7e>
 8009f62:	68a3      	ldr	r3, [r4, #8]
 8009f64:	42ab      	cmp	r3, r5
 8009f66:	dc19      	bgt.n	8009f9c <__multadd+0x74>
 8009f68:	6861      	ldr	r1, [r4, #4]
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	f7ff ff79 	bl	8009e64 <_Balloc>
 8009f72:	4680      	mov	r8, r0
 8009f74:	b928      	cbnz	r0, 8009f82 <__multadd+0x5a>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <__multadd+0x84>)
 8009f7a:	480d      	ldr	r0, [pc, #52]	; (8009fb0 <__multadd+0x88>)
 8009f7c:	21ba      	movs	r1, #186	; 0xba
 8009f7e:	f000 fd0d 	bl	800a99c <__assert_func>
 8009f82:	6922      	ldr	r2, [r4, #16]
 8009f84:	3202      	adds	r2, #2
 8009f86:	f104 010c 	add.w	r1, r4, #12
 8009f8a:	0092      	lsls	r2, r2, #2
 8009f8c:	300c      	adds	r0, #12
 8009f8e:	f7fe faac 	bl	80084ea <memcpy>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff ffa5 	bl	8009ee4 <_Bfree>
 8009f9a:	4644      	mov	r4, r8
 8009f9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	615e      	str	r6, [r3, #20]
 8009fa4:	6125      	str	r5, [r4, #16]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	0800c82d 	.word	0x0800c82d
 8009fb0:	0800c8af 	.word	0x0800c8af

08009fb4 <__s2b>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	4615      	mov	r5, r2
 8009fbc:	461f      	mov	r7, r3
 8009fbe:	2209      	movs	r2, #9
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fc8:	2100      	movs	r1, #0
 8009fca:	2201      	movs	r2, #1
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	db09      	blt.n	8009fe4 <__s2b+0x30>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff ff47 	bl	8009e64 <_Balloc>
 8009fd6:	b940      	cbnz	r0, 8009fea <__s2b+0x36>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4b19      	ldr	r3, [pc, #100]	; (800a040 <__s2b+0x8c>)
 8009fdc:	4819      	ldr	r0, [pc, #100]	; (800a044 <__s2b+0x90>)
 8009fde:	21d3      	movs	r1, #211	; 0xd3
 8009fe0:	f000 fcdc 	bl	800a99c <__assert_func>
 8009fe4:	0052      	lsls	r2, r2, #1
 8009fe6:	3101      	adds	r1, #1
 8009fe8:	e7f0      	b.n	8009fcc <__s2b+0x18>
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	6143      	str	r3, [r0, #20]
 8009fee:	2d09      	cmp	r5, #9
 8009ff0:	f04f 0301 	mov.w	r3, #1
 8009ff4:	6103      	str	r3, [r0, #16]
 8009ff6:	dd16      	ble.n	800a026 <__s2b+0x72>
 8009ff8:	f104 0909 	add.w	r9, r4, #9
 8009ffc:	46c8      	mov	r8, r9
 8009ffe:	442c      	add	r4, r5
 800a000:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a004:	4601      	mov	r1, r0
 800a006:	3b30      	subs	r3, #48	; 0x30
 800a008:	220a      	movs	r2, #10
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ff8c 	bl	8009f28 <__multadd>
 800a010:	45a0      	cmp	r8, r4
 800a012:	d1f5      	bne.n	800a000 <__s2b+0x4c>
 800a014:	f1a5 0408 	sub.w	r4, r5, #8
 800a018:	444c      	add	r4, r9
 800a01a:	1b2d      	subs	r5, r5, r4
 800a01c:	1963      	adds	r3, r4, r5
 800a01e:	42bb      	cmp	r3, r7
 800a020:	db04      	blt.n	800a02c <__s2b+0x78>
 800a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a026:	340a      	adds	r4, #10
 800a028:	2509      	movs	r5, #9
 800a02a:	e7f6      	b.n	800a01a <__s2b+0x66>
 800a02c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a030:	4601      	mov	r1, r0
 800a032:	3b30      	subs	r3, #48	; 0x30
 800a034:	220a      	movs	r2, #10
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ff76 	bl	8009f28 <__multadd>
 800a03c:	e7ee      	b.n	800a01c <__s2b+0x68>
 800a03e:	bf00      	nop
 800a040:	0800c82d 	.word	0x0800c82d
 800a044:	0800c8af 	.word	0x0800c8af

0800a048 <__hi0bits>:
 800a048:	0c03      	lsrs	r3, r0, #16
 800a04a:	041b      	lsls	r3, r3, #16
 800a04c:	b9d3      	cbnz	r3, 800a084 <__hi0bits+0x3c>
 800a04e:	0400      	lsls	r0, r0, #16
 800a050:	2310      	movs	r3, #16
 800a052:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a056:	bf04      	itt	eq
 800a058:	0200      	lsleq	r0, r0, #8
 800a05a:	3308      	addeq	r3, #8
 800a05c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a060:	bf04      	itt	eq
 800a062:	0100      	lsleq	r0, r0, #4
 800a064:	3304      	addeq	r3, #4
 800a066:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a06a:	bf04      	itt	eq
 800a06c:	0080      	lsleq	r0, r0, #2
 800a06e:	3302      	addeq	r3, #2
 800a070:	2800      	cmp	r0, #0
 800a072:	db05      	blt.n	800a080 <__hi0bits+0x38>
 800a074:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a078:	f103 0301 	add.w	r3, r3, #1
 800a07c:	bf08      	it	eq
 800a07e:	2320      	moveq	r3, #32
 800a080:	4618      	mov	r0, r3
 800a082:	4770      	bx	lr
 800a084:	2300      	movs	r3, #0
 800a086:	e7e4      	b.n	800a052 <__hi0bits+0xa>

0800a088 <__lo0bits>:
 800a088:	6803      	ldr	r3, [r0, #0]
 800a08a:	f013 0207 	ands.w	r2, r3, #7
 800a08e:	d00c      	beq.n	800a0aa <__lo0bits+0x22>
 800a090:	07d9      	lsls	r1, r3, #31
 800a092:	d422      	bmi.n	800a0da <__lo0bits+0x52>
 800a094:	079a      	lsls	r2, r3, #30
 800a096:	bf49      	itett	mi
 800a098:	085b      	lsrmi	r3, r3, #1
 800a09a:	089b      	lsrpl	r3, r3, #2
 800a09c:	6003      	strmi	r3, [r0, #0]
 800a09e:	2201      	movmi	r2, #1
 800a0a0:	bf5c      	itt	pl
 800a0a2:	6003      	strpl	r3, [r0, #0]
 800a0a4:	2202      	movpl	r2, #2
 800a0a6:	4610      	mov	r0, r2
 800a0a8:	4770      	bx	lr
 800a0aa:	b299      	uxth	r1, r3
 800a0ac:	b909      	cbnz	r1, 800a0b2 <__lo0bits+0x2a>
 800a0ae:	0c1b      	lsrs	r3, r3, #16
 800a0b0:	2210      	movs	r2, #16
 800a0b2:	b2d9      	uxtb	r1, r3
 800a0b4:	b909      	cbnz	r1, 800a0ba <__lo0bits+0x32>
 800a0b6:	3208      	adds	r2, #8
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	0719      	lsls	r1, r3, #28
 800a0bc:	bf04      	itt	eq
 800a0be:	091b      	lsreq	r3, r3, #4
 800a0c0:	3204      	addeq	r2, #4
 800a0c2:	0799      	lsls	r1, r3, #30
 800a0c4:	bf04      	itt	eq
 800a0c6:	089b      	lsreq	r3, r3, #2
 800a0c8:	3202      	addeq	r2, #2
 800a0ca:	07d9      	lsls	r1, r3, #31
 800a0cc:	d403      	bmi.n	800a0d6 <__lo0bits+0x4e>
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	f102 0201 	add.w	r2, r2, #1
 800a0d4:	d003      	beq.n	800a0de <__lo0bits+0x56>
 800a0d6:	6003      	str	r3, [r0, #0]
 800a0d8:	e7e5      	b.n	800a0a6 <__lo0bits+0x1e>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	e7e3      	b.n	800a0a6 <__lo0bits+0x1e>
 800a0de:	2220      	movs	r2, #32
 800a0e0:	e7e1      	b.n	800a0a6 <__lo0bits+0x1e>
	...

0800a0e4 <__i2b>:
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	460c      	mov	r4, r1
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	f7ff febb 	bl	8009e64 <_Balloc>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	b928      	cbnz	r0, 800a0fe <__i2b+0x1a>
 800a0f2:	4b05      	ldr	r3, [pc, #20]	; (800a108 <__i2b+0x24>)
 800a0f4:	4805      	ldr	r0, [pc, #20]	; (800a10c <__i2b+0x28>)
 800a0f6:	f240 1145 	movw	r1, #325	; 0x145
 800a0fa:	f000 fc4f 	bl	800a99c <__assert_func>
 800a0fe:	2301      	movs	r3, #1
 800a100:	6144      	str	r4, [r0, #20]
 800a102:	6103      	str	r3, [r0, #16]
 800a104:	bd10      	pop	{r4, pc}
 800a106:	bf00      	nop
 800a108:	0800c82d 	.word	0x0800c82d
 800a10c:	0800c8af 	.word	0x0800c8af

0800a110 <__multiply>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	4691      	mov	r9, r2
 800a116:	690a      	ldr	r2, [r1, #16]
 800a118:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	bfb8      	it	lt
 800a120:	460b      	movlt	r3, r1
 800a122:	460c      	mov	r4, r1
 800a124:	bfbc      	itt	lt
 800a126:	464c      	movlt	r4, r9
 800a128:	4699      	movlt	r9, r3
 800a12a:	6927      	ldr	r7, [r4, #16]
 800a12c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a130:	68a3      	ldr	r3, [r4, #8]
 800a132:	6861      	ldr	r1, [r4, #4]
 800a134:	eb07 060a 	add.w	r6, r7, sl
 800a138:	42b3      	cmp	r3, r6
 800a13a:	b085      	sub	sp, #20
 800a13c:	bfb8      	it	lt
 800a13e:	3101      	addlt	r1, #1
 800a140:	f7ff fe90 	bl	8009e64 <_Balloc>
 800a144:	b930      	cbnz	r0, 800a154 <__multiply+0x44>
 800a146:	4602      	mov	r2, r0
 800a148:	4b44      	ldr	r3, [pc, #272]	; (800a25c <__multiply+0x14c>)
 800a14a:	4845      	ldr	r0, [pc, #276]	; (800a260 <__multiply+0x150>)
 800a14c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a150:	f000 fc24 	bl	800a99c <__assert_func>
 800a154:	f100 0514 	add.w	r5, r0, #20
 800a158:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a15c:	462b      	mov	r3, r5
 800a15e:	2200      	movs	r2, #0
 800a160:	4543      	cmp	r3, r8
 800a162:	d321      	bcc.n	800a1a8 <__multiply+0x98>
 800a164:	f104 0314 	add.w	r3, r4, #20
 800a168:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a16c:	f109 0314 	add.w	r3, r9, #20
 800a170:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a174:	9202      	str	r2, [sp, #8]
 800a176:	1b3a      	subs	r2, r7, r4
 800a178:	3a15      	subs	r2, #21
 800a17a:	f022 0203 	bic.w	r2, r2, #3
 800a17e:	3204      	adds	r2, #4
 800a180:	f104 0115 	add.w	r1, r4, #21
 800a184:	428f      	cmp	r7, r1
 800a186:	bf38      	it	cc
 800a188:	2204      	movcc	r2, #4
 800a18a:	9201      	str	r2, [sp, #4]
 800a18c:	9a02      	ldr	r2, [sp, #8]
 800a18e:	9303      	str	r3, [sp, #12]
 800a190:	429a      	cmp	r2, r3
 800a192:	d80c      	bhi.n	800a1ae <__multiply+0x9e>
 800a194:	2e00      	cmp	r6, #0
 800a196:	dd03      	ble.n	800a1a0 <__multiply+0x90>
 800a198:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d05b      	beq.n	800a258 <__multiply+0x148>
 800a1a0:	6106      	str	r6, [r0, #16]
 800a1a2:	b005      	add	sp, #20
 800a1a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a8:	f843 2b04 	str.w	r2, [r3], #4
 800a1ac:	e7d8      	b.n	800a160 <__multiply+0x50>
 800a1ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1b2:	f1ba 0f00 	cmp.w	sl, #0
 800a1b6:	d024      	beq.n	800a202 <__multiply+0xf2>
 800a1b8:	f104 0e14 	add.w	lr, r4, #20
 800a1bc:	46a9      	mov	r9, r5
 800a1be:	f04f 0c00 	mov.w	ip, #0
 800a1c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1c6:	f8d9 1000 	ldr.w	r1, [r9]
 800a1ca:	fa1f fb82 	uxth.w	fp, r2
 800a1ce:	b289      	uxth	r1, r1
 800a1d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a1dc:	4461      	add	r1, ip
 800a1de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1ea:	b289      	uxth	r1, r1
 800a1ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1f0:	4577      	cmp	r7, lr
 800a1f2:	f849 1b04 	str.w	r1, [r9], #4
 800a1f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1fa:	d8e2      	bhi.n	800a1c2 <__multiply+0xb2>
 800a1fc:	9a01      	ldr	r2, [sp, #4]
 800a1fe:	f845 c002 	str.w	ip, [r5, r2]
 800a202:	9a03      	ldr	r2, [sp, #12]
 800a204:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a208:	3304      	adds	r3, #4
 800a20a:	f1b9 0f00 	cmp.w	r9, #0
 800a20e:	d021      	beq.n	800a254 <__multiply+0x144>
 800a210:	6829      	ldr	r1, [r5, #0]
 800a212:	f104 0c14 	add.w	ip, r4, #20
 800a216:	46ae      	mov	lr, r5
 800a218:	f04f 0a00 	mov.w	sl, #0
 800a21c:	f8bc b000 	ldrh.w	fp, [ip]
 800a220:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a224:	fb09 220b 	mla	r2, r9, fp, r2
 800a228:	4452      	add	r2, sl
 800a22a:	b289      	uxth	r1, r1
 800a22c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a230:	f84e 1b04 	str.w	r1, [lr], #4
 800a234:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a238:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a23c:	f8be 1000 	ldrh.w	r1, [lr]
 800a240:	fb09 110a 	mla	r1, r9, sl, r1
 800a244:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a248:	4567      	cmp	r7, ip
 800a24a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a24e:	d8e5      	bhi.n	800a21c <__multiply+0x10c>
 800a250:	9a01      	ldr	r2, [sp, #4]
 800a252:	50a9      	str	r1, [r5, r2]
 800a254:	3504      	adds	r5, #4
 800a256:	e799      	b.n	800a18c <__multiply+0x7c>
 800a258:	3e01      	subs	r6, #1
 800a25a:	e79b      	b.n	800a194 <__multiply+0x84>
 800a25c:	0800c82d 	.word	0x0800c82d
 800a260:	0800c8af 	.word	0x0800c8af

0800a264 <__pow5mult>:
 800a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a268:	4615      	mov	r5, r2
 800a26a:	f012 0203 	ands.w	r2, r2, #3
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	d007      	beq.n	800a284 <__pow5mult+0x20>
 800a274:	4c25      	ldr	r4, [pc, #148]	; (800a30c <__pow5mult+0xa8>)
 800a276:	3a01      	subs	r2, #1
 800a278:	2300      	movs	r3, #0
 800a27a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a27e:	f7ff fe53 	bl	8009f28 <__multadd>
 800a282:	4607      	mov	r7, r0
 800a284:	10ad      	asrs	r5, r5, #2
 800a286:	d03d      	beq.n	800a304 <__pow5mult+0xa0>
 800a288:	69f4      	ldr	r4, [r6, #28]
 800a28a:	b97c      	cbnz	r4, 800a2ac <__pow5mult+0x48>
 800a28c:	2010      	movs	r0, #16
 800a28e:	f7ff fc75 	bl	8009b7c <malloc>
 800a292:	4602      	mov	r2, r0
 800a294:	61f0      	str	r0, [r6, #28]
 800a296:	b928      	cbnz	r0, 800a2a4 <__pow5mult+0x40>
 800a298:	4b1d      	ldr	r3, [pc, #116]	; (800a310 <__pow5mult+0xac>)
 800a29a:	481e      	ldr	r0, [pc, #120]	; (800a314 <__pow5mult+0xb0>)
 800a29c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a2a0:	f000 fb7c 	bl	800a99c <__assert_func>
 800a2a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2a8:	6004      	str	r4, [r0, #0]
 800a2aa:	60c4      	str	r4, [r0, #12]
 800a2ac:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a2b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b4:	b94c      	cbnz	r4, 800a2ca <__pow5mult+0x66>
 800a2b6:	f240 2171 	movw	r1, #625	; 0x271
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f7ff ff12 	bl	800a0e4 <__i2b>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2c6:	4604      	mov	r4, r0
 800a2c8:	6003      	str	r3, [r0, #0]
 800a2ca:	f04f 0900 	mov.w	r9, #0
 800a2ce:	07eb      	lsls	r3, r5, #31
 800a2d0:	d50a      	bpl.n	800a2e8 <__pow5mult+0x84>
 800a2d2:	4639      	mov	r1, r7
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	f7ff ff1a 	bl	800a110 <__multiply>
 800a2dc:	4639      	mov	r1, r7
 800a2de:	4680      	mov	r8, r0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f7ff fdff 	bl	8009ee4 <_Bfree>
 800a2e6:	4647      	mov	r7, r8
 800a2e8:	106d      	asrs	r5, r5, #1
 800a2ea:	d00b      	beq.n	800a304 <__pow5mult+0xa0>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	b938      	cbnz	r0, 800a300 <__pow5mult+0x9c>
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff ff0b 	bl	800a110 <__multiply>
 800a2fa:	6020      	str	r0, [r4, #0]
 800a2fc:	f8c0 9000 	str.w	r9, [r0]
 800a300:	4604      	mov	r4, r0
 800a302:	e7e4      	b.n	800a2ce <__pow5mult+0x6a>
 800a304:	4638      	mov	r0, r7
 800a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30a:	bf00      	nop
 800a30c:	0800c9f8 	.word	0x0800c9f8
 800a310:	0800c7be 	.word	0x0800c7be
 800a314:	0800c8af 	.word	0x0800c8af

0800a318 <__lshift>:
 800a318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	460c      	mov	r4, r1
 800a31e:	6849      	ldr	r1, [r1, #4]
 800a320:	6923      	ldr	r3, [r4, #16]
 800a322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a326:	68a3      	ldr	r3, [r4, #8]
 800a328:	4607      	mov	r7, r0
 800a32a:	4691      	mov	r9, r2
 800a32c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a330:	f108 0601 	add.w	r6, r8, #1
 800a334:	42b3      	cmp	r3, r6
 800a336:	db0b      	blt.n	800a350 <__lshift+0x38>
 800a338:	4638      	mov	r0, r7
 800a33a:	f7ff fd93 	bl	8009e64 <_Balloc>
 800a33e:	4605      	mov	r5, r0
 800a340:	b948      	cbnz	r0, 800a356 <__lshift+0x3e>
 800a342:	4602      	mov	r2, r0
 800a344:	4b28      	ldr	r3, [pc, #160]	; (800a3e8 <__lshift+0xd0>)
 800a346:	4829      	ldr	r0, [pc, #164]	; (800a3ec <__lshift+0xd4>)
 800a348:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a34c:	f000 fb26 	bl	800a99c <__assert_func>
 800a350:	3101      	adds	r1, #1
 800a352:	005b      	lsls	r3, r3, #1
 800a354:	e7ee      	b.n	800a334 <__lshift+0x1c>
 800a356:	2300      	movs	r3, #0
 800a358:	f100 0114 	add.w	r1, r0, #20
 800a35c:	f100 0210 	add.w	r2, r0, #16
 800a360:	4618      	mov	r0, r3
 800a362:	4553      	cmp	r3, sl
 800a364:	db33      	blt.n	800a3ce <__lshift+0xb6>
 800a366:	6920      	ldr	r0, [r4, #16]
 800a368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a36c:	f104 0314 	add.w	r3, r4, #20
 800a370:	f019 091f 	ands.w	r9, r9, #31
 800a374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a37c:	d02b      	beq.n	800a3d6 <__lshift+0xbe>
 800a37e:	f1c9 0e20 	rsb	lr, r9, #32
 800a382:	468a      	mov	sl, r1
 800a384:	2200      	movs	r2, #0
 800a386:	6818      	ldr	r0, [r3, #0]
 800a388:	fa00 f009 	lsl.w	r0, r0, r9
 800a38c:	4310      	orrs	r0, r2
 800a38e:	f84a 0b04 	str.w	r0, [sl], #4
 800a392:	f853 2b04 	ldr.w	r2, [r3], #4
 800a396:	459c      	cmp	ip, r3
 800a398:	fa22 f20e 	lsr.w	r2, r2, lr
 800a39c:	d8f3      	bhi.n	800a386 <__lshift+0x6e>
 800a39e:	ebac 0304 	sub.w	r3, ip, r4
 800a3a2:	3b15      	subs	r3, #21
 800a3a4:	f023 0303 	bic.w	r3, r3, #3
 800a3a8:	3304      	adds	r3, #4
 800a3aa:	f104 0015 	add.w	r0, r4, #21
 800a3ae:	4584      	cmp	ip, r0
 800a3b0:	bf38      	it	cc
 800a3b2:	2304      	movcc	r3, #4
 800a3b4:	50ca      	str	r2, [r1, r3]
 800a3b6:	b10a      	cbz	r2, 800a3bc <__lshift+0xa4>
 800a3b8:	f108 0602 	add.w	r6, r8, #2
 800a3bc:	3e01      	subs	r6, #1
 800a3be:	4638      	mov	r0, r7
 800a3c0:	612e      	str	r6, [r5, #16]
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	f7ff fd8e 	bl	8009ee4 <_Bfree>
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	e7c5      	b.n	800a362 <__lshift+0x4a>
 800a3d6:	3904      	subs	r1, #4
 800a3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3e0:	459c      	cmp	ip, r3
 800a3e2:	d8f9      	bhi.n	800a3d8 <__lshift+0xc0>
 800a3e4:	e7ea      	b.n	800a3bc <__lshift+0xa4>
 800a3e6:	bf00      	nop
 800a3e8:	0800c82d 	.word	0x0800c82d
 800a3ec:	0800c8af 	.word	0x0800c8af

0800a3f0 <__mcmp>:
 800a3f0:	b530      	push	{r4, r5, lr}
 800a3f2:	6902      	ldr	r2, [r0, #16]
 800a3f4:	690c      	ldr	r4, [r1, #16]
 800a3f6:	1b12      	subs	r2, r2, r4
 800a3f8:	d10e      	bne.n	800a418 <__mcmp+0x28>
 800a3fa:	f100 0314 	add.w	r3, r0, #20
 800a3fe:	3114      	adds	r1, #20
 800a400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a40c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a410:	42a5      	cmp	r5, r4
 800a412:	d003      	beq.n	800a41c <__mcmp+0x2c>
 800a414:	d305      	bcc.n	800a422 <__mcmp+0x32>
 800a416:	2201      	movs	r2, #1
 800a418:	4610      	mov	r0, r2
 800a41a:	bd30      	pop	{r4, r5, pc}
 800a41c:	4283      	cmp	r3, r0
 800a41e:	d3f3      	bcc.n	800a408 <__mcmp+0x18>
 800a420:	e7fa      	b.n	800a418 <__mcmp+0x28>
 800a422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a426:	e7f7      	b.n	800a418 <__mcmp+0x28>

0800a428 <__mdiff>:
 800a428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	460c      	mov	r4, r1
 800a42e:	4606      	mov	r6, r0
 800a430:	4611      	mov	r1, r2
 800a432:	4620      	mov	r0, r4
 800a434:	4690      	mov	r8, r2
 800a436:	f7ff ffdb 	bl	800a3f0 <__mcmp>
 800a43a:	1e05      	subs	r5, r0, #0
 800a43c:	d110      	bne.n	800a460 <__mdiff+0x38>
 800a43e:	4629      	mov	r1, r5
 800a440:	4630      	mov	r0, r6
 800a442:	f7ff fd0f 	bl	8009e64 <_Balloc>
 800a446:	b930      	cbnz	r0, 800a456 <__mdiff+0x2e>
 800a448:	4b3a      	ldr	r3, [pc, #232]	; (800a534 <__mdiff+0x10c>)
 800a44a:	4602      	mov	r2, r0
 800a44c:	f240 2137 	movw	r1, #567	; 0x237
 800a450:	4839      	ldr	r0, [pc, #228]	; (800a538 <__mdiff+0x110>)
 800a452:	f000 faa3 	bl	800a99c <__assert_func>
 800a456:	2301      	movs	r3, #1
 800a458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a460:	bfa4      	itt	ge
 800a462:	4643      	movge	r3, r8
 800a464:	46a0      	movge	r8, r4
 800a466:	4630      	mov	r0, r6
 800a468:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a46c:	bfa6      	itte	ge
 800a46e:	461c      	movge	r4, r3
 800a470:	2500      	movge	r5, #0
 800a472:	2501      	movlt	r5, #1
 800a474:	f7ff fcf6 	bl	8009e64 <_Balloc>
 800a478:	b920      	cbnz	r0, 800a484 <__mdiff+0x5c>
 800a47a:	4b2e      	ldr	r3, [pc, #184]	; (800a534 <__mdiff+0x10c>)
 800a47c:	4602      	mov	r2, r0
 800a47e:	f240 2145 	movw	r1, #581	; 0x245
 800a482:	e7e5      	b.n	800a450 <__mdiff+0x28>
 800a484:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a488:	6926      	ldr	r6, [r4, #16]
 800a48a:	60c5      	str	r5, [r0, #12]
 800a48c:	f104 0914 	add.w	r9, r4, #20
 800a490:	f108 0514 	add.w	r5, r8, #20
 800a494:	f100 0e14 	add.w	lr, r0, #20
 800a498:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a49c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4a0:	f108 0210 	add.w	r2, r8, #16
 800a4a4:	46f2      	mov	sl, lr
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4b0:	fa11 f88b 	uxtah	r8, r1, fp
 800a4b4:	b299      	uxth	r1, r3
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	eba8 0801 	sub.w	r8, r8, r1
 800a4bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4c0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4c4:	fa1f f888 	uxth.w	r8, r8
 800a4c8:	1419      	asrs	r1, r3, #16
 800a4ca:	454e      	cmp	r6, r9
 800a4cc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4d0:	f84a 3b04 	str.w	r3, [sl], #4
 800a4d4:	d8e8      	bhi.n	800a4a8 <__mdiff+0x80>
 800a4d6:	1b33      	subs	r3, r6, r4
 800a4d8:	3b15      	subs	r3, #21
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	3304      	adds	r3, #4
 800a4e0:	3415      	adds	r4, #21
 800a4e2:	42a6      	cmp	r6, r4
 800a4e4:	bf38      	it	cc
 800a4e6:	2304      	movcc	r3, #4
 800a4e8:	441d      	add	r5, r3
 800a4ea:	4473      	add	r3, lr
 800a4ec:	469e      	mov	lr, r3
 800a4ee:	462e      	mov	r6, r5
 800a4f0:	4566      	cmp	r6, ip
 800a4f2:	d30e      	bcc.n	800a512 <__mdiff+0xea>
 800a4f4:	f10c 0203 	add.w	r2, ip, #3
 800a4f8:	1b52      	subs	r2, r2, r5
 800a4fa:	f022 0203 	bic.w	r2, r2, #3
 800a4fe:	3d03      	subs	r5, #3
 800a500:	45ac      	cmp	ip, r5
 800a502:	bf38      	it	cc
 800a504:	2200      	movcc	r2, #0
 800a506:	4413      	add	r3, r2
 800a508:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a50c:	b17a      	cbz	r2, 800a52e <__mdiff+0x106>
 800a50e:	6107      	str	r7, [r0, #16]
 800a510:	e7a4      	b.n	800a45c <__mdiff+0x34>
 800a512:	f856 8b04 	ldr.w	r8, [r6], #4
 800a516:	fa11 f288 	uxtah	r2, r1, r8
 800a51a:	1414      	asrs	r4, r2, #16
 800a51c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a520:	b292      	uxth	r2, r2
 800a522:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a526:	f84e 2b04 	str.w	r2, [lr], #4
 800a52a:	1421      	asrs	r1, r4, #16
 800a52c:	e7e0      	b.n	800a4f0 <__mdiff+0xc8>
 800a52e:	3f01      	subs	r7, #1
 800a530:	e7ea      	b.n	800a508 <__mdiff+0xe0>
 800a532:	bf00      	nop
 800a534:	0800c82d 	.word	0x0800c82d
 800a538:	0800c8af 	.word	0x0800c8af

0800a53c <__ulp>:
 800a53c:	b082      	sub	sp, #8
 800a53e:	ed8d 0b00 	vstr	d0, [sp]
 800a542:	9a01      	ldr	r2, [sp, #4]
 800a544:	4b0f      	ldr	r3, [pc, #60]	; (800a584 <__ulp+0x48>)
 800a546:	4013      	ands	r3, r2
 800a548:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	dc08      	bgt.n	800a562 <__ulp+0x26>
 800a550:	425b      	negs	r3, r3
 800a552:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a556:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a55a:	da04      	bge.n	800a566 <__ulp+0x2a>
 800a55c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a560:	4113      	asrs	r3, r2
 800a562:	2200      	movs	r2, #0
 800a564:	e008      	b.n	800a578 <__ulp+0x3c>
 800a566:	f1a2 0314 	sub.w	r3, r2, #20
 800a56a:	2b1e      	cmp	r3, #30
 800a56c:	bfda      	itte	le
 800a56e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a572:	40da      	lsrle	r2, r3
 800a574:	2201      	movgt	r2, #1
 800a576:	2300      	movs	r3, #0
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	ec41 0b10 	vmov	d0, r0, r1
 800a580:	b002      	add	sp, #8
 800a582:	4770      	bx	lr
 800a584:	7ff00000 	.word	0x7ff00000

0800a588 <__b2d>:
 800a588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a58c:	6906      	ldr	r6, [r0, #16]
 800a58e:	f100 0814 	add.w	r8, r0, #20
 800a592:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a596:	1f37      	subs	r7, r6, #4
 800a598:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a59c:	4610      	mov	r0, r2
 800a59e:	f7ff fd53 	bl	800a048 <__hi0bits>
 800a5a2:	f1c0 0320 	rsb	r3, r0, #32
 800a5a6:	280a      	cmp	r0, #10
 800a5a8:	600b      	str	r3, [r1, #0]
 800a5aa:	491b      	ldr	r1, [pc, #108]	; (800a618 <__b2d+0x90>)
 800a5ac:	dc15      	bgt.n	800a5da <__b2d+0x52>
 800a5ae:	f1c0 0c0b 	rsb	ip, r0, #11
 800a5b2:	fa22 f30c 	lsr.w	r3, r2, ip
 800a5b6:	45b8      	cmp	r8, r7
 800a5b8:	ea43 0501 	orr.w	r5, r3, r1
 800a5bc:	bf34      	ite	cc
 800a5be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5c2:	2300      	movcs	r3, #0
 800a5c4:	3015      	adds	r0, #21
 800a5c6:	fa02 f000 	lsl.w	r0, r2, r0
 800a5ca:	fa23 f30c 	lsr.w	r3, r3, ip
 800a5ce:	4303      	orrs	r3, r0
 800a5d0:	461c      	mov	r4, r3
 800a5d2:	ec45 4b10 	vmov	d0, r4, r5
 800a5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5da:	45b8      	cmp	r8, r7
 800a5dc:	bf3a      	itte	cc
 800a5de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a5e2:	f1a6 0708 	subcc.w	r7, r6, #8
 800a5e6:	2300      	movcs	r3, #0
 800a5e8:	380b      	subs	r0, #11
 800a5ea:	d012      	beq.n	800a612 <__b2d+0x8a>
 800a5ec:	f1c0 0120 	rsb	r1, r0, #32
 800a5f0:	fa23 f401 	lsr.w	r4, r3, r1
 800a5f4:	4082      	lsls	r2, r0
 800a5f6:	4322      	orrs	r2, r4
 800a5f8:	4547      	cmp	r7, r8
 800a5fa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a5fe:	bf8c      	ite	hi
 800a600:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a604:	2200      	movls	r2, #0
 800a606:	4083      	lsls	r3, r0
 800a608:	40ca      	lsrs	r2, r1
 800a60a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a60e:	4313      	orrs	r3, r2
 800a610:	e7de      	b.n	800a5d0 <__b2d+0x48>
 800a612:	ea42 0501 	orr.w	r5, r2, r1
 800a616:	e7db      	b.n	800a5d0 <__b2d+0x48>
 800a618:	3ff00000 	.word	0x3ff00000

0800a61c <__d2b>:
 800a61c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a620:	460f      	mov	r7, r1
 800a622:	2101      	movs	r1, #1
 800a624:	ec59 8b10 	vmov	r8, r9, d0
 800a628:	4616      	mov	r6, r2
 800a62a:	f7ff fc1b 	bl	8009e64 <_Balloc>
 800a62e:	4604      	mov	r4, r0
 800a630:	b930      	cbnz	r0, 800a640 <__d2b+0x24>
 800a632:	4602      	mov	r2, r0
 800a634:	4b24      	ldr	r3, [pc, #144]	; (800a6c8 <__d2b+0xac>)
 800a636:	4825      	ldr	r0, [pc, #148]	; (800a6cc <__d2b+0xb0>)
 800a638:	f240 310f 	movw	r1, #783	; 0x30f
 800a63c:	f000 f9ae 	bl	800a99c <__assert_func>
 800a640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a648:	bb2d      	cbnz	r5, 800a696 <__d2b+0x7a>
 800a64a:	9301      	str	r3, [sp, #4]
 800a64c:	f1b8 0300 	subs.w	r3, r8, #0
 800a650:	d026      	beq.n	800a6a0 <__d2b+0x84>
 800a652:	4668      	mov	r0, sp
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	f7ff fd17 	bl	800a088 <__lo0bits>
 800a65a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a65e:	b1e8      	cbz	r0, 800a69c <__d2b+0x80>
 800a660:	f1c0 0320 	rsb	r3, r0, #32
 800a664:	fa02 f303 	lsl.w	r3, r2, r3
 800a668:	430b      	orrs	r3, r1
 800a66a:	40c2      	lsrs	r2, r0
 800a66c:	6163      	str	r3, [r4, #20]
 800a66e:	9201      	str	r2, [sp, #4]
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	61a3      	str	r3, [r4, #24]
 800a674:	2b00      	cmp	r3, #0
 800a676:	bf14      	ite	ne
 800a678:	2202      	movne	r2, #2
 800a67a:	2201      	moveq	r2, #1
 800a67c:	6122      	str	r2, [r4, #16]
 800a67e:	b1bd      	cbz	r5, 800a6b0 <__d2b+0x94>
 800a680:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a684:	4405      	add	r5, r0
 800a686:	603d      	str	r5, [r7, #0]
 800a688:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a68c:	6030      	str	r0, [r6, #0]
 800a68e:	4620      	mov	r0, r4
 800a690:	b003      	add	sp, #12
 800a692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a69a:	e7d6      	b.n	800a64a <__d2b+0x2e>
 800a69c:	6161      	str	r1, [r4, #20]
 800a69e:	e7e7      	b.n	800a670 <__d2b+0x54>
 800a6a0:	a801      	add	r0, sp, #4
 800a6a2:	f7ff fcf1 	bl	800a088 <__lo0bits>
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	6163      	str	r3, [r4, #20]
 800a6aa:	3020      	adds	r0, #32
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	e7e5      	b.n	800a67c <__d2b+0x60>
 800a6b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6b8:	6038      	str	r0, [r7, #0]
 800a6ba:	6918      	ldr	r0, [r3, #16]
 800a6bc:	f7ff fcc4 	bl	800a048 <__hi0bits>
 800a6c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6c4:	e7e2      	b.n	800a68c <__d2b+0x70>
 800a6c6:	bf00      	nop
 800a6c8:	0800c82d 	.word	0x0800c82d
 800a6cc:	0800c8af 	.word	0x0800c8af

0800a6d0 <__ratio>:
 800a6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	4688      	mov	r8, r1
 800a6d6:	4669      	mov	r1, sp
 800a6d8:	4681      	mov	r9, r0
 800a6da:	f7ff ff55 	bl	800a588 <__b2d>
 800a6de:	a901      	add	r1, sp, #4
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	ec55 4b10 	vmov	r4, r5, d0
 800a6e6:	f7ff ff4f 	bl	800a588 <__b2d>
 800a6ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a6f2:	eba3 0c02 	sub.w	ip, r3, r2
 800a6f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6fa:	1a9b      	subs	r3, r3, r2
 800a6fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a700:	ec51 0b10 	vmov	r0, r1, d0
 800a704:	2b00      	cmp	r3, #0
 800a706:	bfd6      	itet	le
 800a708:	460a      	movle	r2, r1
 800a70a:	462a      	movgt	r2, r5
 800a70c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a710:	468b      	mov	fp, r1
 800a712:	462f      	mov	r7, r5
 800a714:	bfd4      	ite	le
 800a716:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a71a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a71e:	4620      	mov	r0, r4
 800a720:	ee10 2a10 	vmov	r2, s0
 800a724:	465b      	mov	r3, fp
 800a726:	4639      	mov	r1, r7
 800a728:	f7f6 f8ba 	bl	80008a0 <__aeabi_ddiv>
 800a72c:	ec41 0b10 	vmov	d0, r0, r1
 800a730:	b003      	add	sp, #12
 800a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a736 <__copybits>:
 800a736:	3901      	subs	r1, #1
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	1149      	asrs	r1, r1, #5
 800a73c:	6914      	ldr	r4, [r2, #16]
 800a73e:	3101      	adds	r1, #1
 800a740:	f102 0314 	add.w	r3, r2, #20
 800a744:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a748:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a74c:	1f05      	subs	r5, r0, #4
 800a74e:	42a3      	cmp	r3, r4
 800a750:	d30c      	bcc.n	800a76c <__copybits+0x36>
 800a752:	1aa3      	subs	r3, r4, r2
 800a754:	3b11      	subs	r3, #17
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	3211      	adds	r2, #17
 800a75c:	42a2      	cmp	r2, r4
 800a75e:	bf88      	it	hi
 800a760:	2300      	movhi	r3, #0
 800a762:	4418      	add	r0, r3
 800a764:	2300      	movs	r3, #0
 800a766:	4288      	cmp	r0, r1
 800a768:	d305      	bcc.n	800a776 <__copybits+0x40>
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a770:	f845 6f04 	str.w	r6, [r5, #4]!
 800a774:	e7eb      	b.n	800a74e <__copybits+0x18>
 800a776:	f840 3b04 	str.w	r3, [r0], #4
 800a77a:	e7f4      	b.n	800a766 <__copybits+0x30>

0800a77c <__any_on>:
 800a77c:	f100 0214 	add.w	r2, r0, #20
 800a780:	6900      	ldr	r0, [r0, #16]
 800a782:	114b      	asrs	r3, r1, #5
 800a784:	4298      	cmp	r0, r3
 800a786:	b510      	push	{r4, lr}
 800a788:	db11      	blt.n	800a7ae <__any_on+0x32>
 800a78a:	dd0a      	ble.n	800a7a2 <__any_on+0x26>
 800a78c:	f011 011f 	ands.w	r1, r1, #31
 800a790:	d007      	beq.n	800a7a2 <__any_on+0x26>
 800a792:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a796:	fa24 f001 	lsr.w	r0, r4, r1
 800a79a:	fa00 f101 	lsl.w	r1, r0, r1
 800a79e:	428c      	cmp	r4, r1
 800a7a0:	d10b      	bne.n	800a7ba <__any_on+0x3e>
 800a7a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d803      	bhi.n	800a7b2 <__any_on+0x36>
 800a7aa:	2000      	movs	r0, #0
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	e7f7      	b.n	800a7a2 <__any_on+0x26>
 800a7b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d0f5      	beq.n	800a7a6 <__any_on+0x2a>
 800a7ba:	2001      	movs	r0, #1
 800a7bc:	e7f6      	b.n	800a7ac <__any_on+0x30>

0800a7be <__sread>:
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c6:	f000 f8b5 	bl	800a934 <_read_r>
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	bfab      	itete	ge
 800a7ce:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a7d0:	89a3      	ldrhlt	r3, [r4, #12]
 800a7d2:	181b      	addge	r3, r3, r0
 800a7d4:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a7d8:	bfac      	ite	ge
 800a7da:	6563      	strge	r3, [r4, #84]	; 0x54
 800a7dc:	81a3      	strhlt	r3, [r4, #12]
 800a7de:	bd10      	pop	{r4, pc}

0800a7e0 <__swrite>:
 800a7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e4:	461f      	mov	r7, r3
 800a7e6:	898b      	ldrh	r3, [r1, #12]
 800a7e8:	05db      	lsls	r3, r3, #23
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	4616      	mov	r6, r2
 800a7f0:	d505      	bpl.n	800a7fe <__swrite+0x1e>
 800a7f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f000 f889 	bl	800a910 <_lseek_r>
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a804:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	4632      	mov	r2, r6
 800a80c:	463b      	mov	r3, r7
 800a80e:	4628      	mov	r0, r5
 800a810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a814:	f000 b8b0 	b.w	800a978 <_write_r>

0800a818 <__sseek>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	460c      	mov	r4, r1
 800a81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a820:	f000 f876 	bl	800a910 <_lseek_r>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	89a3      	ldrh	r3, [r4, #12]
 800a828:	bf15      	itete	ne
 800a82a:	6560      	strne	r0, [r4, #84]	; 0x54
 800a82c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a830:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a834:	81a3      	strheq	r3, [r4, #12]
 800a836:	bf18      	it	ne
 800a838:	81a3      	strhne	r3, [r4, #12]
 800a83a:	bd10      	pop	{r4, pc}

0800a83c <__sclose>:
 800a83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a840:	f000 b856 	b.w	800a8f0 <_close_r>

0800a844 <_realloc_r>:
 800a844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a848:	4680      	mov	r8, r0
 800a84a:	4614      	mov	r4, r2
 800a84c:	460e      	mov	r6, r1
 800a84e:	b921      	cbnz	r1, 800a85a <_realloc_r+0x16>
 800a850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a854:	4611      	mov	r1, r2
 800a856:	f7ff b9b9 	b.w	8009bcc <_malloc_r>
 800a85a:	b92a      	cbnz	r2, 800a868 <_realloc_r+0x24>
 800a85c:	f000 f8d2 	bl	800aa04 <_free_r>
 800a860:	4625      	mov	r5, r4
 800a862:	4628      	mov	r0, r5
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a868:	f000 f918 	bl	800aa9c <_malloc_usable_size_r>
 800a86c:	4284      	cmp	r4, r0
 800a86e:	4607      	mov	r7, r0
 800a870:	d802      	bhi.n	800a878 <_realloc_r+0x34>
 800a872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a876:	d812      	bhi.n	800a89e <_realloc_r+0x5a>
 800a878:	4621      	mov	r1, r4
 800a87a:	4640      	mov	r0, r8
 800a87c:	f7ff f9a6 	bl	8009bcc <_malloc_r>
 800a880:	4605      	mov	r5, r0
 800a882:	2800      	cmp	r0, #0
 800a884:	d0ed      	beq.n	800a862 <_realloc_r+0x1e>
 800a886:	42bc      	cmp	r4, r7
 800a888:	4622      	mov	r2, r4
 800a88a:	4631      	mov	r1, r6
 800a88c:	bf28      	it	cs
 800a88e:	463a      	movcs	r2, r7
 800a890:	f7fd fe2b 	bl	80084ea <memcpy>
 800a894:	4631      	mov	r1, r6
 800a896:	4640      	mov	r0, r8
 800a898:	f000 f8b4 	bl	800aa04 <_free_r>
 800a89c:	e7e1      	b.n	800a862 <_realloc_r+0x1e>
 800a89e:	4635      	mov	r5, r6
 800a8a0:	e7df      	b.n	800a862 <_realloc_r+0x1e>

0800a8a2 <__ascii_wctomb>:
 800a8a2:	b149      	cbz	r1, 800a8b8 <__ascii_wctomb+0x16>
 800a8a4:	2aff      	cmp	r2, #255	; 0xff
 800a8a6:	bf85      	ittet	hi
 800a8a8:	238a      	movhi	r3, #138	; 0x8a
 800a8aa:	6003      	strhi	r3, [r0, #0]
 800a8ac:	700a      	strbls	r2, [r1, #0]
 800a8ae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a8b2:	bf98      	it	ls
 800a8b4:	2001      	movls	r0, #1
 800a8b6:	4770      	bx	lr
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	4770      	bx	lr

0800a8bc <memmove>:
 800a8bc:	4288      	cmp	r0, r1
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	eb01 0402 	add.w	r4, r1, r2
 800a8c4:	d902      	bls.n	800a8cc <memmove+0x10>
 800a8c6:	4284      	cmp	r4, r0
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	d807      	bhi.n	800a8dc <memmove+0x20>
 800a8cc:	1e43      	subs	r3, r0, #1
 800a8ce:	42a1      	cmp	r1, r4
 800a8d0:	d008      	beq.n	800a8e4 <memmove+0x28>
 800a8d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8da:	e7f8      	b.n	800a8ce <memmove+0x12>
 800a8dc:	4402      	add	r2, r0
 800a8de:	4601      	mov	r1, r0
 800a8e0:	428a      	cmp	r2, r1
 800a8e2:	d100      	bne.n	800a8e6 <memmove+0x2a>
 800a8e4:	bd10      	pop	{r4, pc}
 800a8e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8ee:	e7f7      	b.n	800a8e0 <memmove+0x24>

0800a8f0 <_close_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4d06      	ldr	r5, [pc, #24]	; (800a90c <_close_r+0x1c>)
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	4608      	mov	r0, r1
 800a8fa:	602b      	str	r3, [r5, #0]
 800a8fc:	f7f8 f882 	bl	8002a04 <_close>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d102      	bne.n	800a90a <_close_r+0x1a>
 800a904:	682b      	ldr	r3, [r5, #0]
 800a906:	b103      	cbz	r3, 800a90a <_close_r+0x1a>
 800a908:	6023      	str	r3, [r4, #0]
 800a90a:	bd38      	pop	{r3, r4, r5, pc}
 800a90c:	2000a9ec 	.word	0x2000a9ec

0800a910 <_lseek_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_lseek_r+0x20>)
 800a914:	4604      	mov	r4, r0
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f8 f897 	bl	8002a52 <_lseek>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_lseek_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_lseek_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	2000a9ec 	.word	0x2000a9ec

0800a934 <_read_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d07      	ldr	r5, [pc, #28]	; (800a954 <_read_r+0x20>)
 800a938:	4604      	mov	r4, r0
 800a93a:	4608      	mov	r0, r1
 800a93c:	4611      	mov	r1, r2
 800a93e:	2200      	movs	r2, #0
 800a940:	602a      	str	r2, [r5, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	f7f8 f825 	bl	8002992 <_read>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d102      	bne.n	800a952 <_read_r+0x1e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	b103      	cbz	r3, 800a952 <_read_r+0x1e>
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	2000a9ec 	.word	0x2000a9ec

0800a958 <_sbrk_r>:
 800a958:	b538      	push	{r3, r4, r5, lr}
 800a95a:	4d06      	ldr	r5, [pc, #24]	; (800a974 <_sbrk_r+0x1c>)
 800a95c:	2300      	movs	r3, #0
 800a95e:	4604      	mov	r4, r0
 800a960:	4608      	mov	r0, r1
 800a962:	602b      	str	r3, [r5, #0]
 800a964:	f7f8 f882 	bl	8002a6c <_sbrk>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_sbrk_r+0x1a>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_sbrk_r+0x1a>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	2000a9ec 	.word	0x2000a9ec

0800a978 <_write_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d07      	ldr	r5, [pc, #28]	; (800a998 <_write_r+0x20>)
 800a97c:	4604      	mov	r4, r0
 800a97e:	4608      	mov	r0, r1
 800a980:	4611      	mov	r1, r2
 800a982:	2200      	movs	r2, #0
 800a984:	602a      	str	r2, [r5, #0]
 800a986:	461a      	mov	r2, r3
 800a988:	f7f8 f820 	bl	80029cc <_write>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_write_r+0x1e>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_write_r+0x1e>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	2000a9ec 	.word	0x2000a9ec

0800a99c <__assert_func>:
 800a99c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a99e:	4614      	mov	r4, r2
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	4b09      	ldr	r3, [pc, #36]	; (800a9c8 <__assert_func+0x2c>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4605      	mov	r5, r0
 800a9a8:	68d8      	ldr	r0, [r3, #12]
 800a9aa:	b14c      	cbz	r4, 800a9c0 <__assert_func+0x24>
 800a9ac:	4b07      	ldr	r3, [pc, #28]	; (800a9cc <__assert_func+0x30>)
 800a9ae:	9100      	str	r1, [sp, #0]
 800a9b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a9b4:	4906      	ldr	r1, [pc, #24]	; (800a9d0 <__assert_func+0x34>)
 800a9b6:	462b      	mov	r3, r5
 800a9b8:	f000 f878 	bl	800aaac <fiprintf>
 800a9bc:	f000 f888 	bl	800aad0 <abort>
 800a9c0:	4b04      	ldr	r3, [pc, #16]	; (800a9d4 <__assert_func+0x38>)
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	e7f3      	b.n	800a9ae <__assert_func+0x12>
 800a9c6:	bf00      	nop
 800a9c8:	20000204 	.word	0x20000204
 800a9cc:	0800ca04 	.word	0x0800ca04
 800a9d0:	0800ca11 	.word	0x0800ca11
 800a9d4:	0800ca3f 	.word	0x0800ca3f

0800a9d8 <_calloc_r>:
 800a9d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9da:	fba1 2402 	umull	r2, r4, r1, r2
 800a9de:	b94c      	cbnz	r4, 800a9f4 <_calloc_r+0x1c>
 800a9e0:	4611      	mov	r1, r2
 800a9e2:	9201      	str	r2, [sp, #4]
 800a9e4:	f7ff f8f2 	bl	8009bcc <_malloc_r>
 800a9e8:	9a01      	ldr	r2, [sp, #4]
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	b930      	cbnz	r0, 800a9fc <_calloc_r+0x24>
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	b003      	add	sp, #12
 800a9f2:	bd30      	pop	{r4, r5, pc}
 800a9f4:	220c      	movs	r2, #12
 800a9f6:	6002      	str	r2, [r0, #0]
 800a9f8:	2500      	movs	r5, #0
 800a9fa:	e7f8      	b.n	800a9ee <_calloc_r+0x16>
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	f7fd fd3b 	bl	8008478 <memset>
 800aa02:	e7f4      	b.n	800a9ee <_calloc_r+0x16>

0800aa04 <_free_r>:
 800aa04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa06:	2900      	cmp	r1, #0
 800aa08:	d044      	beq.n	800aa94 <_free_r+0x90>
 800aa0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa0e:	9001      	str	r0, [sp, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f1a1 0404 	sub.w	r4, r1, #4
 800aa16:	bfb8      	it	lt
 800aa18:	18e4      	addlt	r4, r4, r3
 800aa1a:	f7ff fa17 	bl	8009e4c <__malloc_lock>
 800aa1e:	4a1e      	ldr	r2, [pc, #120]	; (800aa98 <_free_r+0x94>)
 800aa20:	9801      	ldr	r0, [sp, #4]
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	b933      	cbnz	r3, 800aa34 <_free_r+0x30>
 800aa26:	6063      	str	r3, [r4, #4]
 800aa28:	6014      	str	r4, [r2, #0]
 800aa2a:	b003      	add	sp, #12
 800aa2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa30:	f7ff ba12 	b.w	8009e58 <__malloc_unlock>
 800aa34:	42a3      	cmp	r3, r4
 800aa36:	d908      	bls.n	800aa4a <_free_r+0x46>
 800aa38:	6825      	ldr	r5, [r4, #0]
 800aa3a:	1961      	adds	r1, r4, r5
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	bf01      	itttt	eq
 800aa40:	6819      	ldreq	r1, [r3, #0]
 800aa42:	685b      	ldreq	r3, [r3, #4]
 800aa44:	1949      	addeq	r1, r1, r5
 800aa46:	6021      	streq	r1, [r4, #0]
 800aa48:	e7ed      	b.n	800aa26 <_free_r+0x22>
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	b10b      	cbz	r3, 800aa54 <_free_r+0x50>
 800aa50:	42a3      	cmp	r3, r4
 800aa52:	d9fa      	bls.n	800aa4a <_free_r+0x46>
 800aa54:	6811      	ldr	r1, [r2, #0]
 800aa56:	1855      	adds	r5, r2, r1
 800aa58:	42a5      	cmp	r5, r4
 800aa5a:	d10b      	bne.n	800aa74 <_free_r+0x70>
 800aa5c:	6824      	ldr	r4, [r4, #0]
 800aa5e:	4421      	add	r1, r4
 800aa60:	1854      	adds	r4, r2, r1
 800aa62:	42a3      	cmp	r3, r4
 800aa64:	6011      	str	r1, [r2, #0]
 800aa66:	d1e0      	bne.n	800aa2a <_free_r+0x26>
 800aa68:	681c      	ldr	r4, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	6053      	str	r3, [r2, #4]
 800aa6e:	440c      	add	r4, r1
 800aa70:	6014      	str	r4, [r2, #0]
 800aa72:	e7da      	b.n	800aa2a <_free_r+0x26>
 800aa74:	d902      	bls.n	800aa7c <_free_r+0x78>
 800aa76:	230c      	movs	r3, #12
 800aa78:	6003      	str	r3, [r0, #0]
 800aa7a:	e7d6      	b.n	800aa2a <_free_r+0x26>
 800aa7c:	6825      	ldr	r5, [r4, #0]
 800aa7e:	1961      	adds	r1, r4, r5
 800aa80:	428b      	cmp	r3, r1
 800aa82:	bf04      	itt	eq
 800aa84:	6819      	ldreq	r1, [r3, #0]
 800aa86:	685b      	ldreq	r3, [r3, #4]
 800aa88:	6063      	str	r3, [r4, #4]
 800aa8a:	bf04      	itt	eq
 800aa8c:	1949      	addeq	r1, r1, r5
 800aa8e:	6021      	streq	r1, [r4, #0]
 800aa90:	6054      	str	r4, [r2, #4]
 800aa92:	e7ca      	b.n	800aa2a <_free_r+0x26>
 800aa94:	b003      	add	sp, #12
 800aa96:	bd30      	pop	{r4, r5, pc}
 800aa98:	2000a9e4 	.word	0x2000a9e4

0800aa9c <_malloc_usable_size_r>:
 800aa9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa0:	1f18      	subs	r0, r3, #4
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	bfbc      	itt	lt
 800aaa6:	580b      	ldrlt	r3, [r1, r0]
 800aaa8:	18c0      	addlt	r0, r0, r3
 800aaaa:	4770      	bx	lr

0800aaac <fiprintf>:
 800aaac:	b40e      	push	{r1, r2, r3}
 800aaae:	b503      	push	{r0, r1, lr}
 800aab0:	4601      	mov	r1, r0
 800aab2:	ab03      	add	r3, sp, #12
 800aab4:	4805      	ldr	r0, [pc, #20]	; (800aacc <fiprintf+0x20>)
 800aab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaba:	6800      	ldr	r0, [r0, #0]
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	f000 f837 	bl	800ab30 <_vfiprintf_r>
 800aac2:	b002      	add	sp, #8
 800aac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aac8:	b003      	add	sp, #12
 800aaca:	4770      	bx	lr
 800aacc:	20000204 	.word	0x20000204

0800aad0 <abort>:
 800aad0:	b508      	push	{r3, lr}
 800aad2:	2006      	movs	r0, #6
 800aad4:	f000 fa88 	bl	800afe8 <raise>
 800aad8:	2001      	movs	r0, #1
 800aada:	f7f7 ff50 	bl	800297e <_exit>

0800aade <__sfputc_r>:
 800aade:	6893      	ldr	r3, [r2, #8]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	b410      	push	{r4}
 800aae6:	6093      	str	r3, [r2, #8]
 800aae8:	da08      	bge.n	800aafc <__sfputc_r+0x1e>
 800aaea:	6994      	ldr	r4, [r2, #24]
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	db01      	blt.n	800aaf4 <__sfputc_r+0x16>
 800aaf0:	290a      	cmp	r1, #10
 800aaf2:	d103      	bne.n	800aafc <__sfputc_r+0x1e>
 800aaf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaf8:	f000 b934 	b.w	800ad64 <__swbuf_r>
 800aafc:	6813      	ldr	r3, [r2, #0]
 800aafe:	1c58      	adds	r0, r3, #1
 800ab00:	6010      	str	r0, [r2, #0]
 800ab02:	7019      	strb	r1, [r3, #0]
 800ab04:	4608      	mov	r0, r1
 800ab06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <__sfputs_r>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	4614      	mov	r4, r2
 800ab14:	18d5      	adds	r5, r2, r3
 800ab16:	42ac      	cmp	r4, r5
 800ab18:	d101      	bne.n	800ab1e <__sfputs_r+0x12>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e007      	b.n	800ab2e <__sfputs_r+0x22>
 800ab1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab22:	463a      	mov	r2, r7
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff ffda 	bl	800aade <__sfputc_r>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	d1f3      	bne.n	800ab16 <__sfputs_r+0xa>
 800ab2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab30 <_vfiprintf_r>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	460d      	mov	r5, r1
 800ab36:	b09d      	sub	sp, #116	; 0x74
 800ab38:	4614      	mov	r4, r2
 800ab3a:	4698      	mov	r8, r3
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	b118      	cbz	r0, 800ab48 <_vfiprintf_r+0x18>
 800ab40:	6a03      	ldr	r3, [r0, #32]
 800ab42:	b90b      	cbnz	r3, 800ab48 <_vfiprintf_r+0x18>
 800ab44:	f7fc fd80 	bl	8007648 <__sinit>
 800ab48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab4a:	07d9      	lsls	r1, r3, #31
 800ab4c:	d405      	bmi.n	800ab5a <_vfiprintf_r+0x2a>
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	059a      	lsls	r2, r3, #22
 800ab52:	d402      	bmi.n	800ab5a <_vfiprintf_r+0x2a>
 800ab54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab56:	f7fd fcc6 	bl	80084e6 <__retarget_lock_acquire_recursive>
 800ab5a:	89ab      	ldrh	r3, [r5, #12]
 800ab5c:	071b      	lsls	r3, r3, #28
 800ab5e:	d501      	bpl.n	800ab64 <_vfiprintf_r+0x34>
 800ab60:	692b      	ldr	r3, [r5, #16]
 800ab62:	b99b      	cbnz	r3, 800ab8c <_vfiprintf_r+0x5c>
 800ab64:	4629      	mov	r1, r5
 800ab66:	4630      	mov	r0, r6
 800ab68:	f000 f93a 	bl	800ade0 <__swsetup_r>
 800ab6c:	b170      	cbz	r0, 800ab8c <_vfiprintf_r+0x5c>
 800ab6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab70:	07dc      	lsls	r4, r3, #31
 800ab72:	d504      	bpl.n	800ab7e <_vfiprintf_r+0x4e>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab78:	b01d      	add	sp, #116	; 0x74
 800ab7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	0598      	lsls	r0, r3, #22
 800ab82:	d4f7      	bmi.n	800ab74 <_vfiprintf_r+0x44>
 800ab84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab86:	f7fd fcaf 	bl	80084e8 <__retarget_lock_release_recursive>
 800ab8a:	e7f3      	b.n	800ab74 <_vfiprintf_r+0x44>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab90:	2320      	movs	r3, #32
 800ab92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab9a:	2330      	movs	r3, #48	; 0x30
 800ab9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ad50 <_vfiprintf_r+0x220>
 800aba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aba4:	f04f 0901 	mov.w	r9, #1
 800aba8:	4623      	mov	r3, r4
 800abaa:	469a      	mov	sl, r3
 800abac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb0:	b10a      	cbz	r2, 800abb6 <_vfiprintf_r+0x86>
 800abb2:	2a25      	cmp	r2, #37	; 0x25
 800abb4:	d1f9      	bne.n	800abaa <_vfiprintf_r+0x7a>
 800abb6:	ebba 0b04 	subs.w	fp, sl, r4
 800abba:	d00b      	beq.n	800abd4 <_vfiprintf_r+0xa4>
 800abbc:	465b      	mov	r3, fp
 800abbe:	4622      	mov	r2, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ffa2 	bl	800ab0c <__sfputs_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	f000 80a9 	beq.w	800ad20 <_vfiprintf_r+0x1f0>
 800abce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd0:	445a      	add	r2, fp
 800abd2:	9209      	str	r2, [sp, #36]	; 0x24
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 80a1 	beq.w	800ad20 <_vfiprintf_r+0x1f0>
 800abde:	2300      	movs	r3, #0
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	9307      	str	r3, [sp, #28]
 800abf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abf4:	931a      	str	r3, [sp, #104]	; 0x68
 800abf6:	4654      	mov	r4, sl
 800abf8:	2205      	movs	r2, #5
 800abfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfe:	4854      	ldr	r0, [pc, #336]	; (800ad50 <_vfiprintf_r+0x220>)
 800ac00:	f7f5 fb06 	bl	8000210 <memchr>
 800ac04:	9a04      	ldr	r2, [sp, #16]
 800ac06:	b9d8      	cbnz	r0, 800ac40 <_vfiprintf_r+0x110>
 800ac08:	06d1      	lsls	r1, r2, #27
 800ac0a:	bf44      	itt	mi
 800ac0c:	2320      	movmi	r3, #32
 800ac0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac12:	0713      	lsls	r3, r2, #28
 800ac14:	bf44      	itt	mi
 800ac16:	232b      	movmi	r3, #43	; 0x2b
 800ac18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b2a      	cmp	r3, #42	; 0x2a
 800ac22:	d015      	beq.n	800ac50 <_vfiprintf_r+0x120>
 800ac24:	9a07      	ldr	r2, [sp, #28]
 800ac26:	4654      	mov	r4, sl
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac34:	3b30      	subs	r3, #48	; 0x30
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d94d      	bls.n	800acd6 <_vfiprintf_r+0x1a6>
 800ac3a:	b1b0      	cbz	r0, 800ac6a <_vfiprintf_r+0x13a>
 800ac3c:	9207      	str	r2, [sp, #28]
 800ac3e:	e014      	b.n	800ac6a <_vfiprintf_r+0x13a>
 800ac40:	eba0 0308 	sub.w	r3, r0, r8
 800ac44:	fa09 f303 	lsl.w	r3, r9, r3
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	46a2      	mov	sl, r4
 800ac4e:	e7d2      	b.n	800abf6 <_vfiprintf_r+0xc6>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d19      	adds	r1, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9103      	str	r1, [sp, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bfbb      	ittet	lt
 800ac5c:	425b      	neglt	r3, r3
 800ac5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac62:	9307      	strge	r3, [sp, #28]
 800ac64:	9307      	strlt	r3, [sp, #28]
 800ac66:	bfb8      	it	lt
 800ac68:	9204      	strlt	r2, [sp, #16]
 800ac6a:	7823      	ldrb	r3, [r4, #0]
 800ac6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac6e:	d10c      	bne.n	800ac8a <_vfiprintf_r+0x15a>
 800ac70:	7863      	ldrb	r3, [r4, #1]
 800ac72:	2b2a      	cmp	r3, #42	; 0x2a
 800ac74:	d134      	bne.n	800ace0 <_vfiprintf_r+0x1b0>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9203      	str	r2, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ac86:	3402      	adds	r4, #2
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ad60 <_vfiprintf_r+0x230>
 800ac8e:	7821      	ldrb	r1, [r4, #0]
 800ac90:	2203      	movs	r2, #3
 800ac92:	4650      	mov	r0, sl
 800ac94:	f7f5 fabc 	bl	8000210 <memchr>
 800ac98:	b138      	cbz	r0, 800acaa <_vfiprintf_r+0x17a>
 800ac9a:	9b04      	ldr	r3, [sp, #16]
 800ac9c:	eba0 000a 	sub.w	r0, r0, sl
 800aca0:	2240      	movs	r2, #64	; 0x40
 800aca2:	4082      	lsls	r2, r0
 800aca4:	4313      	orrs	r3, r2
 800aca6:	3401      	adds	r4, #1
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acae:	4829      	ldr	r0, [pc, #164]	; (800ad54 <_vfiprintf_r+0x224>)
 800acb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acb4:	2206      	movs	r2, #6
 800acb6:	f7f5 faab 	bl	8000210 <memchr>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d03f      	beq.n	800ad3e <_vfiprintf_r+0x20e>
 800acbe:	4b26      	ldr	r3, [pc, #152]	; (800ad58 <_vfiprintf_r+0x228>)
 800acc0:	bb1b      	cbnz	r3, 800ad0a <_vfiprintf_r+0x1da>
 800acc2:	9b03      	ldr	r3, [sp, #12]
 800acc4:	3307      	adds	r3, #7
 800acc6:	f023 0307 	bic.w	r3, r3, #7
 800acca:	3308      	adds	r3, #8
 800accc:	9303      	str	r3, [sp, #12]
 800acce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd0:	443b      	add	r3, r7
 800acd2:	9309      	str	r3, [sp, #36]	; 0x24
 800acd4:	e768      	b.n	800aba8 <_vfiprintf_r+0x78>
 800acd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800acda:	460c      	mov	r4, r1
 800acdc:	2001      	movs	r0, #1
 800acde:	e7a6      	b.n	800ac2e <_vfiprintf_r+0xfe>
 800ace0:	2300      	movs	r3, #0
 800ace2:	3401      	adds	r4, #1
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	4619      	mov	r1, r3
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	4620      	mov	r0, r4
 800acee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf2:	3a30      	subs	r2, #48	; 0x30
 800acf4:	2a09      	cmp	r2, #9
 800acf6:	d903      	bls.n	800ad00 <_vfiprintf_r+0x1d0>
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0c6      	beq.n	800ac8a <_vfiprintf_r+0x15a>
 800acfc:	9105      	str	r1, [sp, #20]
 800acfe:	e7c4      	b.n	800ac8a <_vfiprintf_r+0x15a>
 800ad00:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad04:	4604      	mov	r4, r0
 800ad06:	2301      	movs	r3, #1
 800ad08:	e7f0      	b.n	800acec <_vfiprintf_r+0x1bc>
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4b12      	ldr	r3, [pc, #72]	; (800ad5c <_vfiprintf_r+0x22c>)
 800ad12:	a904      	add	r1, sp, #16
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7fb fe15 	bl	8006944 <_printf_float>
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	1c78      	adds	r0, r7, #1
 800ad1e:	d1d6      	bne.n	800acce <_vfiprintf_r+0x19e>
 800ad20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	d405      	bmi.n	800ad32 <_vfiprintf_r+0x202>
 800ad26:	89ab      	ldrh	r3, [r5, #12]
 800ad28:	059a      	lsls	r2, r3, #22
 800ad2a:	d402      	bmi.n	800ad32 <_vfiprintf_r+0x202>
 800ad2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad2e:	f7fd fbdb 	bl	80084e8 <__retarget_lock_release_recursive>
 800ad32:	89ab      	ldrh	r3, [r5, #12]
 800ad34:	065b      	lsls	r3, r3, #25
 800ad36:	f53f af1d 	bmi.w	800ab74 <_vfiprintf_r+0x44>
 800ad3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad3c:	e71c      	b.n	800ab78 <_vfiprintf_r+0x48>
 800ad3e:	ab03      	add	r3, sp, #12
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	462a      	mov	r2, r5
 800ad44:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <_vfiprintf_r+0x22c>)
 800ad46:	a904      	add	r1, sp, #16
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7fc f89f 	bl	8006e8c <_printf_i>
 800ad4e:	e7e4      	b.n	800ad1a <_vfiprintf_r+0x1ea>
 800ad50:	0800c89e 	.word	0x0800c89e
 800ad54:	0800c8a8 	.word	0x0800c8a8
 800ad58:	08006945 	.word	0x08006945
 800ad5c:	0800ab0d 	.word	0x0800ab0d
 800ad60:	0800c8a4 	.word	0x0800c8a4

0800ad64 <__swbuf_r>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	460e      	mov	r6, r1
 800ad68:	4614      	mov	r4, r2
 800ad6a:	4605      	mov	r5, r0
 800ad6c:	b118      	cbz	r0, 800ad76 <__swbuf_r+0x12>
 800ad6e:	6a03      	ldr	r3, [r0, #32]
 800ad70:	b90b      	cbnz	r3, 800ad76 <__swbuf_r+0x12>
 800ad72:	f7fc fc69 	bl	8007648 <__sinit>
 800ad76:	69a3      	ldr	r3, [r4, #24]
 800ad78:	60a3      	str	r3, [r4, #8]
 800ad7a:	89a3      	ldrh	r3, [r4, #12]
 800ad7c:	071a      	lsls	r2, r3, #28
 800ad7e:	d525      	bpl.n	800adcc <__swbuf_r+0x68>
 800ad80:	6923      	ldr	r3, [r4, #16]
 800ad82:	b31b      	cbz	r3, 800adcc <__swbuf_r+0x68>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	1a98      	subs	r0, r3, r2
 800ad8a:	6963      	ldr	r3, [r4, #20]
 800ad8c:	b2f6      	uxtb	r6, r6
 800ad8e:	4283      	cmp	r3, r0
 800ad90:	4637      	mov	r7, r6
 800ad92:	dc04      	bgt.n	800ad9e <__swbuf_r+0x3a>
 800ad94:	4621      	mov	r1, r4
 800ad96:	4628      	mov	r0, r5
 800ad98:	f7ff f830 	bl	8009dfc <_fflush_r>
 800ad9c:	b9e0      	cbnz	r0, 800add8 <__swbuf_r+0x74>
 800ad9e:	68a3      	ldr	r3, [r4, #8]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	60a3      	str	r3, [r4, #8]
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	1c5a      	adds	r2, r3, #1
 800ada8:	6022      	str	r2, [r4, #0]
 800adaa:	701e      	strb	r6, [r3, #0]
 800adac:	6962      	ldr	r2, [r4, #20]
 800adae:	1c43      	adds	r3, r0, #1
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d004      	beq.n	800adbe <__swbuf_r+0x5a>
 800adb4:	89a3      	ldrh	r3, [r4, #12]
 800adb6:	07db      	lsls	r3, r3, #31
 800adb8:	d506      	bpl.n	800adc8 <__swbuf_r+0x64>
 800adba:	2e0a      	cmp	r6, #10
 800adbc:	d104      	bne.n	800adc8 <__swbuf_r+0x64>
 800adbe:	4621      	mov	r1, r4
 800adc0:	4628      	mov	r0, r5
 800adc2:	f7ff f81b 	bl	8009dfc <_fflush_r>
 800adc6:	b938      	cbnz	r0, 800add8 <__swbuf_r+0x74>
 800adc8:	4638      	mov	r0, r7
 800adca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adcc:	4621      	mov	r1, r4
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f806 	bl	800ade0 <__swsetup_r>
 800add4:	2800      	cmp	r0, #0
 800add6:	d0d5      	beq.n	800ad84 <__swbuf_r+0x20>
 800add8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800addc:	e7f4      	b.n	800adc8 <__swbuf_r+0x64>
	...

0800ade0 <__swsetup_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4b2a      	ldr	r3, [pc, #168]	; (800ae8c <__swsetup_r+0xac>)
 800ade4:	4605      	mov	r5, r0
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	460c      	mov	r4, r1
 800adea:	b118      	cbz	r0, 800adf4 <__swsetup_r+0x14>
 800adec:	6a03      	ldr	r3, [r0, #32]
 800adee:	b90b      	cbnz	r3, 800adf4 <__swsetup_r+0x14>
 800adf0:	f7fc fc2a 	bl	8007648 <__sinit>
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adfa:	0718      	lsls	r0, r3, #28
 800adfc:	d422      	bmi.n	800ae44 <__swsetup_r+0x64>
 800adfe:	06d9      	lsls	r1, r3, #27
 800ae00:	d407      	bmi.n	800ae12 <__swsetup_r+0x32>
 800ae02:	2309      	movs	r3, #9
 800ae04:	602b      	str	r3, [r5, #0]
 800ae06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae10:	e034      	b.n	800ae7c <__swsetup_r+0x9c>
 800ae12:	0758      	lsls	r0, r3, #29
 800ae14:	d512      	bpl.n	800ae3c <__swsetup_r+0x5c>
 800ae16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae18:	b141      	cbz	r1, 800ae2c <__swsetup_r+0x4c>
 800ae1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae1e:	4299      	cmp	r1, r3
 800ae20:	d002      	beq.n	800ae28 <__swsetup_r+0x48>
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7ff fdee 	bl	800aa04 <_free_r>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	6363      	str	r3, [r4, #52]	; 0x34
 800ae2c:	89a3      	ldrh	r3, [r4, #12]
 800ae2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae32:	81a3      	strh	r3, [r4, #12]
 800ae34:	2300      	movs	r3, #0
 800ae36:	6063      	str	r3, [r4, #4]
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	f043 0308 	orr.w	r3, r3, #8
 800ae42:	81a3      	strh	r3, [r4, #12]
 800ae44:	6923      	ldr	r3, [r4, #16]
 800ae46:	b94b      	cbnz	r3, 800ae5c <__swsetup_r+0x7c>
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae52:	d003      	beq.n	800ae5c <__swsetup_r+0x7c>
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f840 	bl	800aedc <__smakebuf_r>
 800ae5c:	89a0      	ldrh	r0, [r4, #12]
 800ae5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae62:	f010 0301 	ands.w	r3, r0, #1
 800ae66:	d00a      	beq.n	800ae7e <__swsetup_r+0x9e>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60a3      	str	r3, [r4, #8]
 800ae6c:	6963      	ldr	r3, [r4, #20]
 800ae6e:	425b      	negs	r3, r3
 800ae70:	61a3      	str	r3, [r4, #24]
 800ae72:	6923      	ldr	r3, [r4, #16]
 800ae74:	b943      	cbnz	r3, 800ae88 <__swsetup_r+0xa8>
 800ae76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae7a:	d1c4      	bne.n	800ae06 <__swsetup_r+0x26>
 800ae7c:	bd38      	pop	{r3, r4, r5, pc}
 800ae7e:	0781      	lsls	r1, r0, #30
 800ae80:	bf58      	it	pl
 800ae82:	6963      	ldrpl	r3, [r4, #20]
 800ae84:	60a3      	str	r3, [r4, #8]
 800ae86:	e7f4      	b.n	800ae72 <__swsetup_r+0x92>
 800ae88:	2000      	movs	r0, #0
 800ae8a:	e7f7      	b.n	800ae7c <__swsetup_r+0x9c>
 800ae8c:	20000204 	.word	0x20000204

0800ae90 <__swhatbuf_r>:
 800ae90:	b570      	push	{r4, r5, r6, lr}
 800ae92:	460c      	mov	r4, r1
 800ae94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	b096      	sub	sp, #88	; 0x58
 800ae9c:	4615      	mov	r5, r2
 800ae9e:	461e      	mov	r6, r3
 800aea0:	da0d      	bge.n	800aebe <__swhatbuf_r+0x2e>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aea8:	f04f 0100 	mov.w	r1, #0
 800aeac:	bf0c      	ite	eq
 800aeae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aeb2:	2340      	movne	r3, #64	; 0x40
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	6031      	str	r1, [r6, #0]
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	b016      	add	sp, #88	; 0x58
 800aebc:	bd70      	pop	{r4, r5, r6, pc}
 800aebe:	466a      	mov	r2, sp
 800aec0:	f000 f848 	bl	800af54 <_fstat_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	dbec      	blt.n	800aea2 <__swhatbuf_r+0x12>
 800aec8:	9901      	ldr	r1, [sp, #4]
 800aeca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aece:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aed2:	4259      	negs	r1, r3
 800aed4:	4159      	adcs	r1, r3
 800aed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeda:	e7eb      	b.n	800aeb4 <__swhatbuf_r+0x24>

0800aedc <__smakebuf_r>:
 800aedc:	898b      	ldrh	r3, [r1, #12]
 800aede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aee0:	079d      	lsls	r5, r3, #30
 800aee2:	4606      	mov	r6, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	d507      	bpl.n	800aef8 <__smakebuf_r+0x1c>
 800aee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeec:	6023      	str	r3, [r4, #0]
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	2301      	movs	r3, #1
 800aef2:	6163      	str	r3, [r4, #20]
 800aef4:	b002      	add	sp, #8
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	ab01      	add	r3, sp, #4
 800aefa:	466a      	mov	r2, sp
 800aefc:	f7ff ffc8 	bl	800ae90 <__swhatbuf_r>
 800af00:	9900      	ldr	r1, [sp, #0]
 800af02:	4605      	mov	r5, r0
 800af04:	4630      	mov	r0, r6
 800af06:	f7fe fe61 	bl	8009bcc <_malloc_r>
 800af0a:	b948      	cbnz	r0, 800af20 <__smakebuf_r+0x44>
 800af0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af10:	059a      	lsls	r2, r3, #22
 800af12:	d4ef      	bmi.n	800aef4 <__smakebuf_r+0x18>
 800af14:	f023 0303 	bic.w	r3, r3, #3
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	81a3      	strh	r3, [r4, #12]
 800af1e:	e7e3      	b.n	800aee8 <__smakebuf_r+0xc>
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	6020      	str	r0, [r4, #0]
 800af24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af28:	81a3      	strh	r3, [r4, #12]
 800af2a:	9b00      	ldr	r3, [sp, #0]
 800af2c:	6163      	str	r3, [r4, #20]
 800af2e:	9b01      	ldr	r3, [sp, #4]
 800af30:	6120      	str	r0, [r4, #16]
 800af32:	b15b      	cbz	r3, 800af4c <__smakebuf_r+0x70>
 800af34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af38:	4630      	mov	r0, r6
 800af3a:	f000 f81d 	bl	800af78 <_isatty_r>
 800af3e:	b128      	cbz	r0, 800af4c <__smakebuf_r+0x70>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f023 0303 	bic.w	r3, r3, #3
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	81a3      	strh	r3, [r4, #12]
 800af4c:	89a3      	ldrh	r3, [r4, #12]
 800af4e:	431d      	orrs	r5, r3
 800af50:	81a5      	strh	r5, [r4, #12]
 800af52:	e7cf      	b.n	800aef4 <__smakebuf_r+0x18>

0800af54 <_fstat_r>:
 800af54:	b538      	push	{r3, r4, r5, lr}
 800af56:	4d07      	ldr	r5, [pc, #28]	; (800af74 <_fstat_r+0x20>)
 800af58:	2300      	movs	r3, #0
 800af5a:	4604      	mov	r4, r0
 800af5c:	4608      	mov	r0, r1
 800af5e:	4611      	mov	r1, r2
 800af60:	602b      	str	r3, [r5, #0]
 800af62:	f7f7 fd5b 	bl	8002a1c <_fstat>
 800af66:	1c43      	adds	r3, r0, #1
 800af68:	d102      	bne.n	800af70 <_fstat_r+0x1c>
 800af6a:	682b      	ldr	r3, [r5, #0]
 800af6c:	b103      	cbz	r3, 800af70 <_fstat_r+0x1c>
 800af6e:	6023      	str	r3, [r4, #0]
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	bf00      	nop
 800af74:	2000a9ec 	.word	0x2000a9ec

0800af78 <_isatty_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d06      	ldr	r5, [pc, #24]	; (800af94 <_isatty_r+0x1c>)
 800af7c:	2300      	movs	r3, #0
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	602b      	str	r3, [r5, #0]
 800af84:	f7f7 fd5a 	bl	8002a3c <_isatty>
 800af88:	1c43      	adds	r3, r0, #1
 800af8a:	d102      	bne.n	800af92 <_isatty_r+0x1a>
 800af8c:	682b      	ldr	r3, [r5, #0]
 800af8e:	b103      	cbz	r3, 800af92 <_isatty_r+0x1a>
 800af90:	6023      	str	r3, [r4, #0]
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	2000a9ec 	.word	0x2000a9ec

0800af98 <_raise_r>:
 800af98:	291f      	cmp	r1, #31
 800af9a:	b538      	push	{r3, r4, r5, lr}
 800af9c:	4604      	mov	r4, r0
 800af9e:	460d      	mov	r5, r1
 800afa0:	d904      	bls.n	800afac <_raise_r+0x14>
 800afa2:	2316      	movs	r3, #22
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afae:	b112      	cbz	r2, 800afb6 <_raise_r+0x1e>
 800afb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afb4:	b94b      	cbnz	r3, 800afca <_raise_r+0x32>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f830 	bl	800b01c <_getpid_r>
 800afbc:	462a      	mov	r2, r5
 800afbe:	4601      	mov	r1, r0
 800afc0:	4620      	mov	r0, r4
 800afc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc6:	f000 b817 	b.w	800aff8 <_kill_r>
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d00a      	beq.n	800afe4 <_raise_r+0x4c>
 800afce:	1c59      	adds	r1, r3, #1
 800afd0:	d103      	bne.n	800afda <_raise_r+0x42>
 800afd2:	2316      	movs	r3, #22
 800afd4:	6003      	str	r3, [r0, #0]
 800afd6:	2001      	movs	r0, #1
 800afd8:	e7e7      	b.n	800afaa <_raise_r+0x12>
 800afda:	2400      	movs	r4, #0
 800afdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800afe0:	4628      	mov	r0, r5
 800afe2:	4798      	blx	r3
 800afe4:	2000      	movs	r0, #0
 800afe6:	e7e0      	b.n	800afaa <_raise_r+0x12>

0800afe8 <raise>:
 800afe8:	4b02      	ldr	r3, [pc, #8]	; (800aff4 <raise+0xc>)
 800afea:	4601      	mov	r1, r0
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	f7ff bfd3 	b.w	800af98 <_raise_r>
 800aff2:	bf00      	nop
 800aff4:	20000204 	.word	0x20000204

0800aff8 <_kill_r>:
 800aff8:	b538      	push	{r3, r4, r5, lr}
 800affa:	4d07      	ldr	r5, [pc, #28]	; (800b018 <_kill_r+0x20>)
 800affc:	2300      	movs	r3, #0
 800affe:	4604      	mov	r4, r0
 800b000:	4608      	mov	r0, r1
 800b002:	4611      	mov	r1, r2
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	f7f7 fcaa 	bl	800295e <_kill>
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	d102      	bne.n	800b014 <_kill_r+0x1c>
 800b00e:	682b      	ldr	r3, [r5, #0]
 800b010:	b103      	cbz	r3, 800b014 <_kill_r+0x1c>
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	bd38      	pop	{r3, r4, r5, pc}
 800b016:	bf00      	nop
 800b018:	2000a9ec 	.word	0x2000a9ec

0800b01c <_getpid_r>:
 800b01c:	f7f7 bc97 	b.w	800294e <_getpid>

0800b020 <_init>:
 800b020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b022:	bf00      	nop
 800b024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b026:	bc08      	pop	{r3}
 800b028:	469e      	mov	lr, r3
 800b02a:	4770      	bx	lr

0800b02c <_fini>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	bf00      	nop
 800b030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b032:	bc08      	pop	{r3}
 800b034:	469e      	mov	lr, r3
 800b036:	4770      	bx	lr
