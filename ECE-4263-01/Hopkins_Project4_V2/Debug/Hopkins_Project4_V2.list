
Hopkins_Project4_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b210  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d8  0800b3e0  0800b3e0  0001b3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdb8  0800cdb8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdc0  0800cdc0  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdc0  0800cdc0  0001cdc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cdc4  0800cdc4  0001cdc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800cdc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a814  2000020c  0800cfd4  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000aa20  0800cfd4  0002aa20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f39  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032bf  00000000  00000000  000331b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001080  00000000  00000000  00036478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c84  00000000  00000000  000374f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002862d  00000000  00000000  0003817c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015306  00000000  00000000  000607a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee4ed  00000000  00000000  00075aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005908  00000000  00000000  00163f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001698a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3c8 	.word	0x0800b3c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000210 	.word	0x20000210
 800020c:	0800b3c8 	.word	0x0800b3c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <strcmp>:
 80002c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002c8:	2a01      	cmp	r2, #1
 80002ca:	bf28      	it	cs
 80002cc:	429a      	cmpcs	r2, r3
 80002ce:	d0f7      	beq.n	80002c0 <strcmp>
 80002d0:	1ad0      	subs	r0, r2, r3
 80002d2:	4770      	bx	lr

080002d4 <__aeabi_drsub>:
 80002d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d8:	e002      	b.n	80002e0 <__adddf3>
 80002da:	bf00      	nop

080002dc <__aeabi_dsub>:
 80002dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e0 <__adddf3>:
 80002e0:	b530      	push	{r4, r5, lr}
 80002e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ea:	ea94 0f05 	teq	r4, r5
 80002ee:	bf08      	it	eq
 80002f0:	ea90 0f02 	teqeq	r0, r2
 80002f4:	bf1f      	itttt	ne
 80002f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000306:	f000 80e2 	beq.w	80004ce <__adddf3+0x1ee>
 800030a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000312:	bfb8      	it	lt
 8000314:	426d      	neglt	r5, r5
 8000316:	dd0c      	ble.n	8000332 <__adddf3+0x52>
 8000318:	442c      	add	r4, r5
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	ea82 0000 	eor.w	r0, r2, r0
 8000326:	ea83 0101 	eor.w	r1, r3, r1
 800032a:	ea80 0202 	eor.w	r2, r0, r2
 800032e:	ea81 0303 	eor.w	r3, r1, r3
 8000332:	2d36      	cmp	r5, #54	; 0x36
 8000334:	bf88      	it	hi
 8000336:	bd30      	pophi	{r4, r5, pc}
 8000338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800033c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x70>
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000354:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x84>
 800035e:	4252      	negs	r2, r2
 8000360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000364:	ea94 0f05 	teq	r4, r5
 8000368:	f000 80a7 	beq.w	80004ba <__adddf3+0x1da>
 800036c:	f1a4 0401 	sub.w	r4, r4, #1
 8000370:	f1d5 0e20 	rsbs	lr, r5, #32
 8000374:	db0d      	blt.n	8000392 <__adddf3+0xb2>
 8000376:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037a:	fa22 f205 	lsr.w	r2, r2, r5
 800037e:	1880      	adds	r0, r0, r2
 8000380:	f141 0100 	adc.w	r1, r1, #0
 8000384:	fa03 f20e 	lsl.w	r2, r3, lr
 8000388:	1880      	adds	r0, r0, r2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	4159      	adcs	r1, r3
 8000390:	e00e      	b.n	80003b0 <__adddf3+0xd0>
 8000392:	f1a5 0520 	sub.w	r5, r5, #32
 8000396:	f10e 0e20 	add.w	lr, lr, #32
 800039a:	2a01      	cmp	r2, #1
 800039c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a0:	bf28      	it	cs
 80003a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	18c0      	adds	r0, r0, r3
 80003ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b4:	d507      	bpl.n	80003c6 <__adddf3+0xe6>
 80003b6:	f04f 0e00 	mov.w	lr, #0
 80003ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80003be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ca:	d31b      	bcc.n	8000404 <__adddf3+0x124>
 80003cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d0:	d30c      	bcc.n	80003ec <__adddf3+0x10c>
 80003d2:	0849      	lsrs	r1, r1, #1
 80003d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003dc:	f104 0401 	add.w	r4, r4, #1
 80003e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e8:	f080 809a 	bcs.w	8000520 <__adddf3+0x240>
 80003ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f0:	bf08      	it	eq
 80003f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f6:	f150 0000 	adcs.w	r0, r0, #0
 80003fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fe:	ea41 0105 	orr.w	r1, r1, r5
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000408:	4140      	adcs	r0, r0
 800040a:	eb41 0101 	adc.w	r1, r1, r1
 800040e:	3c01      	subs	r4, #1
 8000410:	bf28      	it	cs
 8000412:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000416:	d2e9      	bcs.n	80003ec <__adddf3+0x10c>
 8000418:	f091 0f00 	teq	r1, #0
 800041c:	bf04      	itt	eq
 800041e:	4601      	moveq	r1, r0
 8000420:	2000      	moveq	r0, #0
 8000422:	fab1 f381 	clz	r3, r1
 8000426:	bf08      	it	eq
 8000428:	3320      	addeq	r3, #32
 800042a:	f1a3 030b 	sub.w	r3, r3, #11
 800042e:	f1b3 0220 	subs.w	r2, r3, #32
 8000432:	da0c      	bge.n	800044e <__adddf3+0x16e>
 8000434:	320c      	adds	r2, #12
 8000436:	dd08      	ble.n	800044a <__adddf3+0x16a>
 8000438:	f102 0c14 	add.w	ip, r2, #20
 800043c:	f1c2 020c 	rsb	r2, r2, #12
 8000440:	fa01 f00c 	lsl.w	r0, r1, ip
 8000444:	fa21 f102 	lsr.w	r1, r1, r2
 8000448:	e00c      	b.n	8000464 <__adddf3+0x184>
 800044a:	f102 0214 	add.w	r2, r2, #20
 800044e:	bfd8      	it	le
 8000450:	f1c2 0c20 	rsble	ip, r2, #32
 8000454:	fa01 f102 	lsl.w	r1, r1, r2
 8000458:	fa20 fc0c 	lsr.w	ip, r0, ip
 800045c:	bfdc      	itt	le
 800045e:	ea41 010c 	orrle.w	r1, r1, ip
 8000462:	4090      	lslle	r0, r2
 8000464:	1ae4      	subs	r4, r4, r3
 8000466:	bfa2      	ittt	ge
 8000468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800046c:	4329      	orrge	r1, r5
 800046e:	bd30      	popge	{r4, r5, pc}
 8000470:	ea6f 0404 	mvn.w	r4, r4
 8000474:	3c1f      	subs	r4, #31
 8000476:	da1c      	bge.n	80004b2 <__adddf3+0x1d2>
 8000478:	340c      	adds	r4, #12
 800047a:	dc0e      	bgt.n	800049a <__adddf3+0x1ba>
 800047c:	f104 0414 	add.w	r4, r4, #20
 8000480:	f1c4 0220 	rsb	r2, r4, #32
 8000484:	fa20 f004 	lsr.w	r0, r0, r4
 8000488:	fa01 f302 	lsl.w	r3, r1, r2
 800048c:	ea40 0003 	orr.w	r0, r0, r3
 8000490:	fa21 f304 	lsr.w	r3, r1, r4
 8000494:	ea45 0103 	orr.w	r1, r5, r3
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f1c4 040c 	rsb	r4, r4, #12
 800049e:	f1c4 0220 	rsb	r2, r4, #32
 80004a2:	fa20 f002 	lsr.w	r0, r0, r2
 80004a6:	fa01 f304 	lsl.w	r3, r1, r4
 80004aa:	ea40 0003 	orr.w	r0, r0, r3
 80004ae:	4629      	mov	r1, r5
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	fa21 f004 	lsr.w	r0, r1, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	f094 0f00 	teq	r4, #0
 80004be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c2:	bf06      	itte	eq
 80004c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c8:	3401      	addeq	r4, #1
 80004ca:	3d01      	subne	r5, #1
 80004cc:	e74e      	b.n	800036c <__adddf3+0x8c>
 80004ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d2:	bf18      	it	ne
 80004d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d8:	d029      	beq.n	800052e <__adddf3+0x24e>
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	d005      	beq.n	80004f2 <__adddf3+0x212>
 80004e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ea:	bf04      	itt	eq
 80004ec:	4619      	moveq	r1, r3
 80004ee:	4610      	moveq	r0, r2
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea91 0f03 	teq	r1, r3
 80004f6:	bf1e      	ittt	ne
 80004f8:	2100      	movne	r1, #0
 80004fa:	2000      	movne	r0, #0
 80004fc:	bd30      	popne	{r4, r5, pc}
 80004fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000502:	d105      	bne.n	8000510 <__adddf3+0x230>
 8000504:	0040      	lsls	r0, r0, #1
 8000506:	4149      	adcs	r1, r1
 8000508:	bf28      	it	cs
 800050a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000514:	bf3c      	itt	cc
 8000516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051a:	bd30      	popcc	{r4, r5, pc}
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000528:	f04f 0000 	mov.w	r0, #0
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf1a      	itte	ne
 8000534:	4619      	movne	r1, r3
 8000536:	4610      	movne	r0, r2
 8000538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800053c:	bf1c      	itt	ne
 800053e:	460b      	movne	r3, r1
 8000540:	4602      	movne	r2, r0
 8000542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000546:	bf06      	itte	eq
 8000548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800054c:	ea91 0f03 	teqeq	r1, r3
 8000550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	bf00      	nop

08000558 <__aeabi_ui2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f04f 0500 	mov.w	r5, #0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e750      	b.n	8000418 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_i2d>:
 8000578:	f090 0f00 	teq	r0, #0
 800057c:	bf04      	itt	eq
 800057e:	2100      	moveq	r1, #0
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000588:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000590:	bf48      	it	mi
 8000592:	4240      	negmi	r0, r0
 8000594:	f04f 0100 	mov.w	r1, #0
 8000598:	e73e      	b.n	8000418 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_f2d>:
 800059c:	0042      	lsls	r2, r0, #1
 800059e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005aa:	bf1f      	itttt	ne
 80005ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b8:	4770      	bxne	lr
 80005ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005be:	bf08      	it	eq
 80005c0:	4770      	bxeq	lr
 80005c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c6:	bf04      	itt	eq
 80005c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	e71c      	b.n	8000418 <__adddf3+0x138>
 80005de:	bf00      	nop

080005e0 <__aeabi_ul2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f04f 0500 	mov.w	r5, #0
 80005ee:	e00a      	b.n	8000606 <__aeabi_l2d+0x16>

080005f0 <__aeabi_l2d>:
 80005f0:	ea50 0201 	orrs.w	r2, r0, r1
 80005f4:	bf08      	it	eq
 80005f6:	4770      	bxeq	lr
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fe:	d502      	bpl.n	8000606 <__aeabi_l2d+0x16>
 8000600:	4240      	negs	r0, r0
 8000602:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000606:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000612:	f43f aed8 	beq.w	80003c6 <__adddf3+0xe6>
 8000616:	f04f 0203 	mov.w	r2, #3
 800061a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061e:	bf18      	it	ne
 8000620:	3203      	addne	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062e:	f1c2 0320 	rsb	r3, r2, #32
 8000632:	fa00 fc03 	lsl.w	ip, r0, r3
 8000636:	fa20 f002 	lsr.w	r0, r0, r2
 800063a:	fa01 fe03 	lsl.w	lr, r1, r3
 800063e:	ea40 000e 	orr.w	r0, r0, lr
 8000642:	fa21 f102 	lsr.w	r1, r1, r2
 8000646:	4414      	add	r4, r2
 8000648:	e6bd      	b.n	80003c6 <__adddf3+0xe6>
 800064a:	bf00      	nop

0800064c <__aeabi_dmul>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000652:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000656:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065a:	bf1d      	ittte	ne
 800065c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000660:	ea94 0f0c 	teqne	r4, ip
 8000664:	ea95 0f0c 	teqne	r5, ip
 8000668:	f000 f8de 	bleq	8000828 <__aeabi_dmul+0x1dc>
 800066c:	442c      	add	r4, r5
 800066e:	ea81 0603 	eor.w	r6, r1, r3
 8000672:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000676:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067e:	bf18      	it	ne
 8000680:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800068c:	d038      	beq.n	8000700 <__aeabi_dmul+0xb4>
 800068e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a2:	f04f 0600 	mov.w	r6, #0
 80006a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006aa:	f09c 0f00 	teq	ip, #0
 80006ae:	bf18      	it	ne
 80006b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c0:	d204      	bcs.n	80006cc <__aeabi_dmul+0x80>
 80006c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c6:	416d      	adcs	r5, r5
 80006c8:	eb46 0606 	adc.w	r6, r6, r6
 80006cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e4:	bf88      	it	hi
 80006e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ea:	d81e      	bhi.n	800072a <__aeabi_dmul+0xde>
 80006ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f0:	bf08      	it	eq
 80006f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f6:	f150 0000 	adcs.w	r0, r0, #0
 80006fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000704:	ea46 0101 	orr.w	r1, r6, r1
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000714:	bfc2      	ittt	gt
 8000716:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071e:	bd70      	popgt	{r4, r5, r6, pc}
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f04f 0e00 	mov.w	lr, #0
 8000728:	3c01      	subs	r4, #1
 800072a:	f300 80ab 	bgt.w	8000884 <__aeabi_dmul+0x238>
 800072e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000732:	bfde      	ittt	le
 8000734:	2000      	movle	r0, #0
 8000736:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073a:	bd70      	pople	{r4, r5, r6, pc}
 800073c:	f1c4 0400 	rsb	r4, r4, #0
 8000740:	3c20      	subs	r4, #32
 8000742:	da35      	bge.n	80007b0 <__aeabi_dmul+0x164>
 8000744:	340c      	adds	r4, #12
 8000746:	dc1b      	bgt.n	8000780 <__aeabi_dmul+0x134>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f305 	lsl.w	r3, r0, r5
 8000754:	fa20 f004 	lsr.w	r0, r0, r4
 8000758:	fa01 f205 	lsl.w	r2, r1, r5
 800075c:	ea40 0002 	orr.w	r0, r0, r2
 8000760:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	fa21 f604 	lsr.w	r6, r1, r4
 8000770:	eb42 0106 	adc.w	r1, r2, r6
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 040c 	rsb	r4, r4, #12
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f304 	lsl.w	r3, r0, r4
 800078c:	fa20 f005 	lsr.w	r0, r0, r5
 8000790:	fa01 f204 	lsl.w	r2, r1, r4
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a0:	f141 0100 	adc.w	r1, r1, #0
 80007a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a8:	bf08      	it	eq
 80007aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f205 	lsl.w	r2, r0, r5
 80007b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007bc:	fa20 f304 	lsr.w	r3, r0, r4
 80007c0:	fa01 f205 	lsl.w	r2, r1, r5
 80007c4:	ea43 0302 	orr.w	r3, r3, r2
 80007c8:	fa21 f004 	lsr.w	r0, r1, r4
 80007cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d0:	fa21 f204 	lsr.w	r2, r1, r4
 80007d4:	ea20 0002 	bic.w	r0, r0, r2
 80007d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e0:	bf08      	it	eq
 80007e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e6:	bd70      	pop	{r4, r5, r6, pc}
 80007e8:	f094 0f00 	teq	r4, #0
 80007ec:	d10f      	bne.n	800080e <__aeabi_dmul+0x1c2>
 80007ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f2:	0040      	lsls	r0, r0, #1
 80007f4:	eb41 0101 	adc.w	r1, r1, r1
 80007f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3c01      	subeq	r4, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1a6>
 8000802:	ea41 0106 	orr.w	r1, r1, r6
 8000806:	f095 0f00 	teq	r5, #0
 800080a:	bf18      	it	ne
 800080c:	4770      	bxne	lr
 800080e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000812:	0052      	lsls	r2, r2, #1
 8000814:	eb43 0303 	adc.w	r3, r3, r3
 8000818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800081c:	bf08      	it	eq
 800081e:	3d01      	subeq	r5, #1
 8000820:	d0f7      	beq.n	8000812 <__aeabi_dmul+0x1c6>
 8000822:	ea43 0306 	orr.w	r3, r3, r6
 8000826:	4770      	bx	lr
 8000828:	ea94 0f0c 	teq	r4, ip
 800082c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000830:	bf18      	it	ne
 8000832:	ea95 0f0c 	teqne	r5, ip
 8000836:	d00c      	beq.n	8000852 <__aeabi_dmul+0x206>
 8000838:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083c:	bf18      	it	ne
 800083e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000842:	d1d1      	bne.n	80007e8 <__aeabi_dmul+0x19c>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000856:	bf06      	itte	eq
 8000858:	4610      	moveq	r0, r2
 800085a:	4619      	moveq	r1, r3
 800085c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000860:	d019      	beq.n	8000896 <__aeabi_dmul+0x24a>
 8000862:	ea94 0f0c 	teq	r4, ip
 8000866:	d102      	bne.n	800086e <__aeabi_dmul+0x222>
 8000868:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800086c:	d113      	bne.n	8000896 <__aeabi_dmul+0x24a>
 800086e:	ea95 0f0c 	teq	r5, ip
 8000872:	d105      	bne.n	8000880 <__aeabi_dmul+0x234>
 8000874:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000878:	bf1c      	itt	ne
 800087a:	4610      	movne	r0, r2
 800087c:	4619      	movne	r1, r3
 800087e:	d10a      	bne.n	8000896 <__aeabi_dmul+0x24a>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000890:	f04f 0000 	mov.w	r0, #0
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__aeabi_ddiv>:
 80008a0:	b570      	push	{r4, r5, r6, lr}
 80008a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ae:	bf1d      	ittte	ne
 80008b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b4:	ea94 0f0c 	teqne	r4, ip
 80008b8:	ea95 0f0c 	teqne	r5, ip
 80008bc:	f000 f8a7 	bleq	8000a0e <__aeabi_ddiv+0x16e>
 80008c0:	eba4 0405 	sub.w	r4, r4, r5
 80008c4:	ea81 0e03 	eor.w	lr, r1, r3
 80008c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d0:	f000 8088 	beq.w	80009e4 <__aeabi_ddiv+0x144>
 80008d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f8:	429d      	cmp	r5, r3
 80008fa:	bf08      	it	eq
 80008fc:	4296      	cmpeq	r6, r2
 80008fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000902:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000906:	d202      	bcs.n	800090e <__aeabi_ddiv+0x6e>
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	1ab6      	subs	r6, r6, r2
 8000910:	eb65 0503 	sbc.w	r5, r5, r3
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000922:	ebb6 0e02 	subs.w	lr, r6, r2
 8000926:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092a:	bf22      	ittt	cs
 800092c:	1ab6      	subcs	r6, r6, r2
 800092e:	4675      	movcs	r5, lr
 8000930:	ea40 000c 	orrcs.w	r0, r0, ip
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	ebb6 0e02 	subs.w	lr, r6, r2
 800093e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000942:	bf22      	ittt	cs
 8000944:	1ab6      	subcs	r6, r6, r2
 8000946:	4675      	movcs	r5, lr
 8000948:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000952:	ebb6 0e02 	subs.w	lr, r6, r2
 8000956:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095a:	bf22      	ittt	cs
 800095c:	1ab6      	subcs	r6, r6, r2
 800095e:	4675      	movcs	r5, lr
 8000960:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	ebb6 0e02 	subs.w	lr, r6, r2
 800096e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000972:	bf22      	ittt	cs
 8000974:	1ab6      	subcs	r6, r6, r2
 8000976:	4675      	movcs	r5, lr
 8000978:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800097c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000980:	d018      	beq.n	80009b4 <__aeabi_ddiv+0x114>
 8000982:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000986:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000992:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000996:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099e:	d1c0      	bne.n	8000922 <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	d10b      	bne.n	80009be <__aeabi_ddiv+0x11e>
 80009a6:	ea41 0100 	orr.w	r1, r1, r0
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b2:	e7b6      	b.n	8000922 <__aeabi_ddiv+0x82>
 80009b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b8:	bf04      	itt	eq
 80009ba:	4301      	orreq	r1, r0
 80009bc:	2000      	moveq	r0, #0
 80009be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c2:	bf88      	it	hi
 80009c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c8:	f63f aeaf 	bhi.w	800072a <__aeabi_dmul+0xde>
 80009cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d0:	bf04      	itt	eq
 80009d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009da:	f150 0000 	adcs.w	r0, r0, #0
 80009de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e2:	bd70      	pop	{r4, r5, r6, pc}
 80009e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f0:	bfc2      	ittt	gt
 80009f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fa:	bd70      	popgt	{r4, r5, r6, pc}
 80009fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a00:	f04f 0e00 	mov.w	lr, #0
 8000a04:	3c01      	subs	r4, #1
 8000a06:	e690      	b.n	800072a <__aeabi_dmul+0xde>
 8000a08:	ea45 0e06 	orr.w	lr, r5, r6
 8000a0c:	e68d      	b.n	800072a <__aeabi_dmul+0xde>
 8000a0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a12:	ea94 0f0c 	teq	r4, ip
 8000a16:	bf08      	it	eq
 8000a18:	ea95 0f0c 	teqeq	r5, ip
 8000a1c:	f43f af3b 	beq.w	8000896 <__aeabi_dmul+0x24a>
 8000a20:	ea94 0f0c 	teq	r4, ip
 8000a24:	d10a      	bne.n	8000a3c <__aeabi_ddiv+0x19c>
 8000a26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2a:	f47f af34 	bne.w	8000896 <__aeabi_dmul+0x24a>
 8000a2e:	ea95 0f0c 	teq	r5, ip
 8000a32:	f47f af25 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e72c      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a3c:	ea95 0f0c 	teq	r5, ip
 8000a40:	d106      	bne.n	8000a50 <__aeabi_ddiv+0x1b0>
 8000a42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a46:	f43f aefd 	beq.w	8000844 <__aeabi_dmul+0x1f8>
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	e722      	b.n	8000896 <__aeabi_dmul+0x24a>
 8000a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5a:	f47f aec5 	bne.w	80007e8 <__aeabi_dmul+0x19c>
 8000a5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a62:	f47f af0d 	bne.w	8000880 <__aeabi_dmul+0x234>
 8000a66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6a:	f47f aeeb 	bne.w	8000844 <__aeabi_dmul+0x1f8>
 8000a6e:	e712      	b.n	8000896 <__aeabi_dmul+0x24a>

08000a70 <__gedf2>:
 8000a70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a74:	e006      	b.n	8000a84 <__cmpdf2+0x4>
 8000a76:	bf00      	nop

08000a78 <__ledf2>:
 8000a78:	f04f 0c01 	mov.w	ip, #1
 8000a7c:	e002      	b.n	8000a84 <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__cmpdf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	bf18      	it	ne
 8000a96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9a:	d01b      	beq.n	8000ad4 <__cmpdf2+0x54>
 8000a9c:	b001      	add	sp, #4
 8000a9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa2:	bf0c      	ite	eq
 8000aa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa8:	ea91 0f03 	teqne	r1, r3
 8000aac:	bf02      	ittt	eq
 8000aae:	ea90 0f02 	teqeq	r0, r2
 8000ab2:	2000      	moveq	r0, #0
 8000ab4:	4770      	bxeq	lr
 8000ab6:	f110 0f00 	cmn.w	r0, #0
 8000aba:	ea91 0f03 	teq	r1, r3
 8000abe:	bf58      	it	pl
 8000ac0:	4299      	cmppl	r1, r3
 8000ac2:	bf08      	it	eq
 8000ac4:	4290      	cmpeq	r0, r2
 8000ac6:	bf2c      	ite	cs
 8000ac8:	17d8      	asrcs	r0, r3, #31
 8000aca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ace:	f040 0001 	orr.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__cmpdf2+0x64>
 8000ade:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae2:	d107      	bne.n	8000af4 <__cmpdf2+0x74>
 8000ae4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d1d6      	bne.n	8000a9c <__cmpdf2+0x1c>
 8000aee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af2:	d0d3      	beq.n	8000a9c <__cmpdf2+0x1c>
 8000af4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_cdrcmple>:
 8000afc:	4684      	mov	ip, r0
 8000afe:	4610      	mov	r0, r2
 8000b00:	4662      	mov	r2, ip
 8000b02:	468c      	mov	ip, r1
 8000b04:	4619      	mov	r1, r3
 8000b06:	4663      	mov	r3, ip
 8000b08:	e000      	b.n	8000b0c <__aeabi_cdcmpeq>
 8000b0a:	bf00      	nop

08000b0c <__aeabi_cdcmpeq>:
 8000b0c:	b501      	push	{r0, lr}
 8000b0e:	f7ff ffb7 	bl	8000a80 <__cmpdf2>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	bf48      	it	mi
 8000b16:	f110 0f00 	cmnmi.w	r0, #0
 8000b1a:	bd01      	pop	{r0, pc}

08000b1c <__aeabi_dcmpeq>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff fff4 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b24:	bf0c      	ite	eq
 8000b26:	2001      	moveq	r0, #1
 8000b28:	2000      	movne	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmplt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffea 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmple>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffe0 	bl	8000b0c <__aeabi_cdcmpeq>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpge>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffce 	bl	8000afc <__aeabi_cdrcmple>
 8000b60:	bf94      	ite	ls
 8000b62:	2001      	movls	r0, #1
 8000b64:	2000      	movhi	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpgt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffc4 	bl	8000afc <__aeabi_cdrcmple>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpun>:
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x10>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d10a      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_dcmpun+0x20>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_dcmpun+0x26>
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0001 	mov.w	r0, #1
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2iz>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d215      	bcs.n	8000be2 <__aeabi_d2iz+0x36>
 8000bb6:	d511      	bpl.n	8000bdc <__aeabi_d2iz+0x30>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d912      	bls.n	8000be8 <__aeabi_d2iz+0x3c>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	4240      	negne	r0, r0
 8000bda:	4770      	bx	lr
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be6:	d105      	bne.n	8000bf4 <__aeabi_d2iz+0x48>
 8000be8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	bf08      	it	eq
 8000bee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf2:	4770      	bx	lr
 8000bf4:	f04f 0000 	mov.w	r0, #0
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2uiz>:
 8000bfc:	004a      	lsls	r2, r1, #1
 8000bfe:	d211      	bcs.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c04:	d211      	bcs.n	8000c2a <__aeabi_d2uiz+0x2e>
 8000c06:	d50d      	bpl.n	8000c24 <__aeabi_d2uiz+0x28>
 8000c08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c10:	d40e      	bmi.n	8000c30 <__aeabi_d2uiz+0x34>
 8000c12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	4770      	bx	lr
 8000c24:	f04f 0000 	mov.w	r0, #0
 8000c28:	4770      	bx	lr
 8000c2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2e:	d102      	bne.n	8000c36 <__aeabi_d2uiz+0x3a>
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c34:	4770      	bx	lr
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2f>:
 8000c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c44:	bf24      	itt	cs
 8000c46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4e:	d90d      	bls.n	8000c6c <__aeabi_d2f+0x30>
 8000c50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c64:	bf08      	it	eq
 8000c66:	f020 0001 	biceq.w	r0, r0, #1
 8000c6a:	4770      	bx	lr
 8000c6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c70:	d121      	bne.n	8000cb6 <__aeabi_d2f+0x7a>
 8000c72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c76:	bfbc      	itt	lt
 8000c78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	4770      	bxlt	lr
 8000c7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c86:	f1c2 0218 	rsb	r2, r2, #24
 8000c8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c92:	fa20 f002 	lsr.w	r0, r0, r2
 8000c96:	bf18      	it	ne
 8000c98:	f040 0001 	orrne.w	r0, r0, #1
 8000c9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca8:	ea40 000c 	orr.w	r0, r0, ip
 8000cac:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb4:	e7cc      	b.n	8000c50 <__aeabi_d2f+0x14>
 8000cb6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cba:	d107      	bne.n	8000ccc <__aeabi_d2f+0x90>
 8000cbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc0:	bf1e      	ittt	ne
 8000cc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cca:	4770      	bxne	lr
 8000ccc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop

08000cdc <__aeabi_uldivmod>:
 8000cdc:	b953      	cbnz	r3, 8000cf4 <__aeabi_uldivmod+0x18>
 8000cde:	b94a      	cbnz	r2, 8000cf4 <__aeabi_uldivmod+0x18>
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	2800      	cmpeq	r0, #0
 8000ce6:	bf1c      	itt	ne
 8000ce8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cf0:	f000 b9a6 	b.w	8001040 <__aeabi_idiv0>
 8000cf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cfc:	f000 f83c 	bl	8000d78 <__udivmoddi4>
 8000d00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d08:	b004      	add	sp, #16
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_d2lz>:
 8000d0c:	b538      	push	{r3, r4, r5, lr}
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2300      	movs	r3, #0
 8000d12:	4604      	mov	r4, r0
 8000d14:	460d      	mov	r5, r1
 8000d16:	f7ff ff0b 	bl	8000b30 <__aeabi_dcmplt>
 8000d1a:	b928      	cbnz	r0, 8000d28 <__aeabi_d2lz+0x1c>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	4629      	mov	r1, r5
 8000d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d24:	f000 b80a 	b.w	8000d3c <__aeabi_d2ulz>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2e:	f000 f805 	bl	8000d3c <__aeabi_d2ulz>
 8000d32:	4240      	negs	r0, r0
 8000d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d38:	bd38      	pop	{r3, r4, r5, pc}
 8000d3a:	bf00      	nop

08000d3c <__aeabi_d2ulz>:
 8000d3c:	b5d0      	push	{r4, r6, r7, lr}
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__aeabi_d2ulz+0x34>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	4606      	mov	r6, r0
 8000d44:	460f      	mov	r7, r1
 8000d46:	f7ff fc81 	bl	800064c <__aeabi_dmul>
 8000d4a:	f7ff ff57 	bl	8000bfc <__aeabi_d2uiz>
 8000d4e:	4604      	mov	r4, r0
 8000d50:	f7ff fc02 	bl	8000558 <__aeabi_ui2d>
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <__aeabi_d2ulz+0x38>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	f7ff fc78 	bl	800064c <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4630      	mov	r0, r6
 8000d62:	4639      	mov	r1, r7
 8000d64:	f7ff faba 	bl	80002dc <__aeabi_dsub>
 8000d68:	f7ff ff48 	bl	8000bfc <__aeabi_d2uiz>
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	bdd0      	pop	{r4, r6, r7, pc}
 8000d70:	3df00000 	.word	0x3df00000
 8000d74:	41f00000 	.word	0x41f00000

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	460d      	mov	r5, r1
 8000d80:	4604      	mov	r4, r0
 8000d82:	460f      	mov	r7, r1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d14a      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4694      	mov	ip, r2
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0xe2>
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	b143      	cbz	r3, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d98:	f1c3 0220 	rsb	r2, r3, #32
 8000d9c:	409f      	lsls	r7, r3
 8000d9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000da2:	4317      	orrs	r7, r2
 8000da4:	409c      	lsls	r4, r3
 8000da6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000daa:	fa1f f58c 	uxth.w	r5, ip
 8000dae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000db2:	0c22      	lsrs	r2, r4, #16
 8000db4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dbc:	fb01 f005 	mul.w	r0, r1, r5
 8000dc0:	4290      	cmp	r0, r2
 8000dc2:	d90a      	bls.n	8000dda <__udivmoddi4+0x62>
 8000dc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000dcc:	f080 811c 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dd0:	4290      	cmp	r0, r2
 8000dd2:	f240 8119 	bls.w	8001008 <__udivmoddi4+0x290>
 8000dd6:	3902      	subs	r1, #2
 8000dd8:	4462      	add	r2, ip
 8000dda:	1a12      	subs	r2, r2, r0
 8000ddc:	b2a4      	uxth	r4, r4
 8000dde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000de2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dea:	fb00 f505 	mul.w	r5, r0, r5
 8000dee:	42a5      	cmp	r5, r4
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x90>
 8000df2:	eb1c 0404 	adds.w	r4, ip, r4
 8000df6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dfa:	f080 8107 	bcs.w	800100c <__udivmoddi4+0x294>
 8000dfe:	42a5      	cmp	r5, r4
 8000e00:	f240 8104 	bls.w	800100c <__udivmoddi4+0x294>
 8000e04:	4464      	add	r4, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11e      	cbz	r6, 8000e1a <__udivmoddi4+0xa2>
 8000e12:	40dc      	lsrs	r4, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	e9c6 4300 	strd	r4, r3, [r6]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0xbc>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80ed 	beq.w	8001002 <__udivmoddi4+0x28a>
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	fab3 f183 	clz	r1, r3
 8000e38:	2900      	cmp	r1, #0
 8000e3a:	d149      	bne.n	8000ed0 <__udivmoddi4+0x158>
 8000e3c:	42ab      	cmp	r3, r5
 8000e3e:	d302      	bcc.n	8000e46 <__udivmoddi4+0xce>
 8000e40:	4282      	cmp	r2, r0
 8000e42:	f200 80f8 	bhi.w	8001036 <__udivmoddi4+0x2be>
 8000e46:	1a84      	subs	r4, r0, r2
 8000e48:	eb65 0203 	sbc.w	r2, r5, r3
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	4617      	mov	r7, r2
 8000e50:	2e00      	cmp	r6, #0
 8000e52:	d0e2      	beq.n	8000e1a <__udivmoddi4+0xa2>
 8000e54:	e9c6 4700 	strd	r4, r7, [r6]
 8000e58:	e7df      	b.n	8000e1a <__udivmoddi4+0xa2>
 8000e5a:	b902      	cbnz	r2, 8000e5e <__udivmoddi4+0xe6>
 8000e5c:	deff      	udf	#255	; 0xff
 8000e5e:	fab2 f382 	clz	r3, r2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f040 8090 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6e:	fa1f fe8c 	uxth.w	lr, ip
 8000e72:	2101      	movs	r1, #1
 8000e74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e78:	fb07 2015 	mls	r0, r7, r5, r2
 8000e7c:	0c22      	lsrs	r2, r4, #16
 8000e7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e82:	fb0e f005 	mul.w	r0, lr, r5
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 80cb 	bhi.w	8001030 <__udivmoddi4+0x2b8>
 8000e9a:	4645      	mov	r5, r8
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea4:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eac:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x14e>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x14c>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 80bb 	bhi.w	800103a <__udivmoddi4+0x2c2>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	eba4 040e 	sub.w	r4, r4, lr
 8000eca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ece:	e79f      	b.n	8000e10 <__udivmoddi4+0x98>
 8000ed0:	f1c1 0720 	rsb	r7, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ede:	fa05 f401 	lsl.w	r4, r5, r1
 8000ee2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee6:	40fd      	lsrs	r5, r7
 8000ee8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	fb09 5518 	mls	r5, r9, r8, r5
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f00:	fb08 f50e 	mul.w	r5, r8, lr
 8000f04:	42a5      	cmp	r5, r4
 8000f06:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f18:	f080 8088 	bcs.w	800102c <__udivmoddi4+0x2b4>
 8000f1c:	42a5      	cmp	r5, r4
 8000f1e:	f240 8085 	bls.w	800102c <__udivmoddi4+0x2b4>
 8000f22:	f1a8 0802 	sub.w	r8, r8, #2
 8000f26:	4464      	add	r4, ip
 8000f28:	1b64      	subs	r4, r4, r5
 8000f2a:	b29d      	uxth	r5, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f48:	d26c      	bcs.n	8001024 <__udivmoddi4+0x2ac>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	d96a      	bls.n	8001024 <__udivmoddi4+0x2ac>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	4464      	add	r4, ip
 8000f52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f56:	fba3 9502 	umull	r9, r5, r3, r2
 8000f5a:	eba4 040e 	sub.w	r4, r4, lr
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	46c8      	mov	r8, r9
 8000f62:	46ae      	mov	lr, r5
 8000f64:	d356      	bcc.n	8001014 <__udivmoddi4+0x29c>
 8000f66:	d053      	beq.n	8001010 <__udivmoddi4+0x298>
 8000f68:	b156      	cbz	r6, 8000f80 <__udivmoddi4+0x208>
 8000f6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000f72:	fa04 f707 	lsl.w	r7, r4, r7
 8000f76:	40ca      	lsrs	r2, r1
 8000f78:	40cc      	lsrs	r4, r1
 8000f7a:	4317      	orrs	r7, r2
 8000f7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f80:	4618      	mov	r0, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f88:	f1c3 0120 	rsb	r1, r3, #32
 8000f8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f90:	fa20 f201 	lsr.w	r2, r0, r1
 8000f94:	fa25 f101 	lsr.w	r1, r5, r1
 8000f98:	409d      	lsls	r5, r3
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa0:	fa1f fe8c 	uxth.w	lr, ip
 8000fa4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa8:	fb07 1510 	mls	r5, r7, r0, r1
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb6:	428d      	cmp	r5, r1
 8000fb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x258>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fc6:	d22f      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000fc8:	428d      	cmp	r5, r1
 8000fca:	d92d      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000fcc:	3802      	subs	r0, #2
 8000fce:	4461      	add	r1, ip
 8000fd0:	1b49      	subs	r1, r1, r5
 8000fd2:	b292      	uxth	r2, r2
 8000fd4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd8:	fb07 1115 	mls	r1, r7, r5, r1
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe4:	4291      	cmp	r1, r2
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x282>
 8000fe8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ff0:	d216      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	d914      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000ff6:	3d02      	subs	r5, #2
 8000ff8:	4462      	add	r2, ip
 8000ffa:	1a52      	subs	r2, r2, r1
 8000ffc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001000:	e738      	b.n	8000e74 <__udivmoddi4+0xfc>
 8001002:	4631      	mov	r1, r6
 8001004:	4630      	mov	r0, r6
 8001006:	e708      	b.n	8000e1a <__udivmoddi4+0xa2>
 8001008:	4639      	mov	r1, r7
 800100a:	e6e6      	b.n	8000dda <__udivmoddi4+0x62>
 800100c:	4610      	mov	r0, r2
 800100e:	e6fb      	b.n	8000e08 <__udivmoddi4+0x90>
 8001010:	4548      	cmp	r0, r9
 8001012:	d2a9      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001014:	ebb9 0802 	subs.w	r8, r9, r2
 8001018:	eb65 0e0c 	sbc.w	lr, r5, ip
 800101c:	3b01      	subs	r3, #1
 800101e:	e7a3      	b.n	8000f68 <__udivmoddi4+0x1f0>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ea      	b.n	8000ffa <__udivmoddi4+0x282>
 8001024:	462b      	mov	r3, r5
 8001026:	e794      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001028:	4640      	mov	r0, r8
 800102a:	e7d1      	b.n	8000fd0 <__udivmoddi4+0x258>
 800102c:	46d0      	mov	r8, sl
 800102e:	e77b      	b.n	8000f28 <__udivmoddi4+0x1b0>
 8001030:	3d02      	subs	r5, #2
 8001032:	4462      	add	r2, ip
 8001034:	e732      	b.n	8000e9c <__udivmoddi4+0x124>
 8001036:	4608      	mov	r0, r1
 8001038:	e70a      	b.n	8000e50 <__udivmoddi4+0xd8>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e742      	b.n	8000ec6 <__udivmoddi4+0x14e>

08001040 <__aeabi_idiv0>:
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <getTitleScreen>:

extern char inputPassword[10];


void getTitleScreen()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af02      	add	r7, sp, #8
	//INITIALIZE TITLE SCREEN UI/UX
	ILI9163_init(0);
 800104a:	2000      	movs	r0, #0
 800104c:	f000 fb1c 	bl	8001688 <ILI9163_init>
	HAL_Delay(1000);
 8001050:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001054:	f001 fda0 	bl	8002b98 <HAL_Delay>
	ILI9163_newFrame();
 8001058:	f000 fbfe 	bl	8001858 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 800105c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	22a0      	movs	r2, #160	; 0xa0
 8001066:	2100      	movs	r1, #0
 8001068:	2000      	movs	r0, #0
 800106a:	f000 fc63 	bl	8001934 <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(36, 5, Font_11x18, WHITE, "Password");
 800106e:	4b6e      	ldr	r3, [pc, #440]	; (8001228 <getTitleScreen+0x1e4>)
 8001070:	4a6e      	ldr	r2, [pc, #440]	; (800122c <getTitleScreen+0x1e8>)
 8001072:	9201      	str	r2, [sp, #4]
 8001074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	cb0c      	ldmia	r3, {r2, r3}
 800107c:	2105      	movs	r1, #5
 800107e:	2024      	movs	r0, #36	; 0x24
 8001080:	f000 fd55 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(14, 25, Font_11x18, WHITE, "Keypad Guide");
 8001084:	4b68      	ldr	r3, [pc, #416]	; (8001228 <getTitleScreen+0x1e4>)
 8001086:	4a6a      	ldr	r2, [pc, #424]	; (8001230 <getTitleScreen+0x1ec>)
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	cb0c      	ldmia	r3, {r2, r3}
 8001092:	2119      	movs	r1, #25
 8001094:	200e      	movs	r0, #14
 8001096:	f000 fd4a 	bl	8001b2e <ILI9163_drawStringF>

	//RECTANGLE BOARDER
	ILI9163_drawRect(5, 45, 155, 123, 3, BLACK);
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	2303      	movs	r3, #3
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	237b      	movs	r3, #123	; 0x7b
 80010a4:	229b      	movs	r2, #155	; 0x9b
 80010a6:	212d      	movs	r1, #45	; 0x2d
 80010a8:	2005      	movs	r0, #5
 80010aa:	f000 fc71 	bl	8001990 <ILI9163_drawRect>

	//CALCULATOR KEY PAD ROW 1
	ILI9163_drawStringF(10, 50, Font_11x18, WHITE, "1");
 80010ae:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <getTitleScreen+0x1e4>)
 80010b0:	4a60      	ldr	r2, [pc, #384]	; (8001234 <getTitleScreen+0x1f0>)
 80010b2:	9201      	str	r2, [sp, #4]
 80010b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b8:	9200      	str	r2, [sp, #0]
 80010ba:	cb0c      	ldmia	r3, {r2, r3}
 80010bc:	2132      	movs	r1, #50	; 0x32
 80010be:	200a      	movs	r0, #10
 80010c0:	f000 fd35 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 50, Font_11x18, WHITE, "2");
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <getTitleScreen+0x1e4>)
 80010c6:	4a5c      	ldr	r2, [pc, #368]	; (8001238 <getTitleScreen+0x1f4>)
 80010c8:	9201      	str	r2, [sp, #4]
 80010ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	cb0c      	ldmia	r3, {r2, r3}
 80010d2:	2132      	movs	r1, #50	; 0x32
 80010d4:	202f      	movs	r0, #47	; 0x2f
 80010d6:	f000 fd2a 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 50, Font_11x18, WHITE, "3");
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <getTitleScreen+0x1e4>)
 80010dc:	4a57      	ldr	r2, [pc, #348]	; (800123c <getTitleScreen+0x1f8>)
 80010de:	9201      	str	r2, [sp, #4]
 80010e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	cb0c      	ldmia	r3, {r2, r3}
 80010e8:	2132      	movs	r1, #50	; 0x32
 80010ea:	205a      	movs	r0, #90	; 0x5a
 80010ec:	f000 fd1f 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 50, Font_7x10, WHITE, "set");
 80010f0:	4b53      	ldr	r3, [pc, #332]	; (8001240 <getTitleScreen+0x1fc>)
 80010f2:	4a54      	ldr	r2, [pc, #336]	; (8001244 <getTitleScreen+0x200>)
 80010f4:	9201      	str	r2, [sp, #4]
 80010f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fa:	9200      	str	r2, [sp, #0]
 80010fc:	cb0c      	ldmia	r3, {r2, r3}
 80010fe:	2132      	movs	r1, #50	; 0x32
 8001100:	2084      	movs	r0, #132	; 0x84
 8001102:	f000 fd14 	bl	8001b2e <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 2
	ILI9163_drawStringF(10, 68, Font_11x18, WHITE, "4");
 8001106:	4b48      	ldr	r3, [pc, #288]	; (8001228 <getTitleScreen+0x1e4>)
 8001108:	4a4f      	ldr	r2, [pc, #316]	; (8001248 <getTitleScreen+0x204>)
 800110a:	9201      	str	r2, [sp, #4]
 800110c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001110:	9200      	str	r2, [sp, #0]
 8001112:	cb0c      	ldmia	r3, {r2, r3}
 8001114:	2144      	movs	r1, #68	; 0x44
 8001116:	200a      	movs	r0, #10
 8001118:	f000 fd09 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 68, Font_11x18, WHITE, "5");
 800111c:	4b42      	ldr	r3, [pc, #264]	; (8001228 <getTitleScreen+0x1e4>)
 800111e:	4a4b      	ldr	r2, [pc, #300]	; (800124c <getTitleScreen+0x208>)
 8001120:	9201      	str	r2, [sp, #4]
 8001122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	cb0c      	ldmia	r3, {r2, r3}
 800112a:	2144      	movs	r1, #68	; 0x44
 800112c:	202f      	movs	r0, #47	; 0x2f
 800112e:	f000 fcfe 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 68, Font_11x18, WHITE, "6");
 8001132:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <getTitleScreen+0x1e4>)
 8001134:	4a46      	ldr	r2, [pc, #280]	; (8001250 <getTitleScreen+0x20c>)
 8001136:	9201      	str	r2, [sp, #4]
 8001138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113c:	9200      	str	r2, [sp, #0]
 800113e:	cb0c      	ldmia	r3, {r2, r3}
 8001140:	2144      	movs	r1, #68	; 0x44
 8001142:	205a      	movs	r0, #90	; 0x5a
 8001144:	f000 fcf3 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(130, 68, Font_7x10, WHITE, "bck");
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <getTitleScreen+0x1fc>)
 800114a:	4a42      	ldr	r2, [pc, #264]	; (8001254 <getTitleScreen+0x210>)
 800114c:	9201      	str	r2, [sp, #4]
 800114e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001152:	9200      	str	r2, [sp, #0]
 8001154:	cb0c      	ldmia	r3, {r2, r3}
 8001156:	2144      	movs	r1, #68	; 0x44
 8001158:	2082      	movs	r0, #130	; 0x82
 800115a:	f000 fce8 	bl	8001b2e <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 3
	ILI9163_drawStringF(10, 86, Font_11x18, WHITE, "7");
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <getTitleScreen+0x1e4>)
 8001160:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <getTitleScreen+0x214>)
 8001162:	9201      	str	r2, [sp, #4]
 8001164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001168:	9200      	str	r2, [sp, #0]
 800116a:	cb0c      	ldmia	r3, {r2, r3}
 800116c:	2156      	movs	r1, #86	; 0x56
 800116e:	200a      	movs	r0, #10
 8001170:	f000 fcdd 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 86, Font_11x18, WHITE, "8");
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <getTitleScreen+0x1e4>)
 8001176:	4a39      	ldr	r2, [pc, #228]	; (800125c <getTitleScreen+0x218>)
 8001178:	9201      	str	r2, [sp, #4]
 800117a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800117e:	9200      	str	r2, [sp, #0]
 8001180:	cb0c      	ldmia	r3, {r2, r3}
 8001182:	2156      	movs	r1, #86	; 0x56
 8001184:	202f      	movs	r0, #47	; 0x2f
 8001186:	f000 fcd2 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 86, Font_11x18, WHITE, "9");
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <getTitleScreen+0x1e4>)
 800118c:	4a34      	ldr	r2, [pc, #208]	; (8001260 <getTitleScreen+0x21c>)
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001194:	9200      	str	r2, [sp, #0]
 8001196:	cb0c      	ldmia	r3, {r2, r3}
 8001198:	2156      	movs	r1, #86	; 0x56
 800119a:	205a      	movs	r0, #90	; 0x5a
 800119c:	f000 fcc7 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(130, 86, Font_7x10, WHITE, "clr");
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <getTitleScreen+0x1fc>)
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <getTitleScreen+0x220>)
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	cb0c      	ldmia	r3, {r2, r3}
 80011ae:	2156      	movs	r1, #86	; 0x56
 80011b0:	2082      	movs	r0, #130	; 0x82
 80011b2:	f000 fcbc 	bl	8001b2e <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 4
	ILI9163_drawString(10, 107, Font_7x10, WHITE, "\0");
 80011b6:	4b22      	ldr	r3, [pc, #136]	; (8001240 <getTitleScreen+0x1fc>)
 80011b8:	4a2b      	ldr	r2, [pc, #172]	; (8001268 <getTitleScreen+0x224>)
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	cb0c      	ldmia	r3, {r2, r3}
 80011c4:	216b      	movs	r1, #107	; 0x6b
 80011c6:	200a      	movs	r0, #10
 80011c8:	f000 fc70 	bl	8001aac <ILI9163_drawString>
	ILI9163_drawStringF(47, 104, Font_11x18, WHITE, "0");
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <getTitleScreen+0x1e4>)
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <getTitleScreen+0x228>)
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d6:	9200      	str	r2, [sp, #0]
 80011d8:	cb0c      	ldmia	r3, {r2, r3}
 80011da:	2168      	movs	r1, #104	; 0x68
 80011dc:	202f      	movs	r0, #47	; 0x2f
 80011de:	f000 fca6 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 107, Font_7x10, WHITE, "chk");
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <getTitleScreen+0x1fc>)
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <getTitleScreen+0x22c>)
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ec:	9200      	str	r2, [sp, #0]
 80011ee:	cb0c      	ldmia	r3, {r2, r3}
 80011f0:	216b      	movs	r1, #107	; 0x6b
 80011f2:	205a      	movs	r0, #90	; 0x5a
 80011f4:	f000 fc9b 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(130, 104, Font_11x18, WHITE, "\0");
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <getTitleScreen+0x1e4>)
 80011fa:	4a1b      	ldr	r2, [pc, #108]	; (8001268 <getTitleScreen+0x224>)
 80011fc:	9201      	str	r2, [sp, #4]
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	9200      	str	r2, [sp, #0]
 8001204:	cb0c      	ldmia	r3, {r2, r3}
 8001206:	2168      	movs	r1, #104	; 0x68
 8001208:	2082      	movs	r0, #130	; 0x82
 800120a:	f000 fc90 	bl	8001b2e <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(50);
 800120e:	2032      	movs	r0, #50	; 0x32
 8001210:	f001 fcc2 	bl	8002b98 <HAL_Delay>
	ILI9163_render();
 8001214:	f000 fb3c 	bl	8001890 <ILI9163_render>
	HAL_Delay(1000);
 8001218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121c:	f001 fcbc 	bl	8002b98 <HAL_Delay>
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	0800b3e0 	.word	0x0800b3e0
 8001230:	0800b3ec 	.word	0x0800b3ec
 8001234:	0800b3fc 	.word	0x0800b3fc
 8001238:	0800b400 	.word	0x0800b400
 800123c:	0800b404 	.word	0x0800b404
 8001240:	20000000 	.word	0x20000000
 8001244:	0800b408 	.word	0x0800b408
 8001248:	0800b40c 	.word	0x0800b40c
 800124c:	0800b410 	.word	0x0800b410
 8001250:	0800b414 	.word	0x0800b414
 8001254:	0800b418 	.word	0x0800b418
 8001258:	0800b41c 	.word	0x0800b41c
 800125c:	0800b420 	.word	0x0800b420
 8001260:	0800b424 	.word	0x0800b424
 8001264:	0800b428 	.word	0x0800b428
 8001268:	0800b42c 	.word	0x0800b42c
 800126c:	0800b430 	.word	0x0800b430
 8001270:	0800b434 	.word	0x0800b434

08001274 <displayInput>:

void displayInput()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 fa04 	bl	8001688 <ILI9163_init>
	ILI9163_newFrame();
 8001280:	f000 faea 	bl	8001858 <ILI9163_newFrame>
	ILI9163_drawStringF(5, 5, Font_11x18, BLUE, inputPassword);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <displayInput+0x30>)
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <displayInput+0x34>)
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800128e:	9200      	str	r2, [sp, #0]
 8001290:	cb0c      	ldmia	r3, {r2, r3}
 8001292:	2105      	movs	r1, #5
 8001294:	2005      	movs	r0, #5
 8001296:	f000 fc4a 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_render();
 800129a:	f000 faf9 	bl	8001890 <ILI9163_render>
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000008 	.word	0x20000008
 80012a8:	2000a88c 	.word	0x2000a88c

080012ac <savedPassword>:
void savedPassword()
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f000 f9e8 	bl	8001688 <ILI9163_init>
	ILI9163_newFrame();
 80012b8:	f000 face 	bl	8001858 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 80012bc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	22a0      	movs	r2, #160	; 0xa0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2000      	movs	r0, #0
 80012ca:	f000 fb33 	bl	8001934 <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawString(3, 41, Font_11x18, WHITE, "A new password");
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <savedPassword+0x68>)
 80012d0:	4a11      	ldr	r2, [pc, #68]	; (8001318 <savedPassword+0x6c>)
 80012d2:	9201      	str	r2, [sp, #4]
 80012d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d8:	9200      	str	r2, [sp, #0]
 80012da:	cb0c      	ldmia	r3, {r2, r3}
 80012dc:	2129      	movs	r1, #41	; 0x29
 80012de:	2003      	movs	r0, #3
 80012e0:	f000 fbe4 	bl	8001aac <ILI9163_drawString>
	ILI9163_drawString(3, 64, Font_11x18, WHITE, "has been saved");
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <savedPassword+0x68>)
 80012e6:	4a0d      	ldr	r2, [pc, #52]	; (800131c <savedPassword+0x70>)
 80012e8:	9201      	str	r2, [sp, #4]
 80012ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	cb0c      	ldmia	r3, {r2, r3}
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 fbd9 	bl	8001aac <ILI9163_drawString>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 80012fa:	2064      	movs	r0, #100	; 0x64
 80012fc:	f001 fc4c 	bl	8002b98 <HAL_Delay>
	ILI9163_render();
 8001300:	f000 fac6 	bl	8001890 <ILI9163_render>
	HAL_Delay(2000);
 8001304:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001308:	f001 fc46 	bl	8002b98 <HAL_Delay>
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008
 8001318:	0800b438 	.word	0x0800b438
 800131c:	0800b448 	.word	0x0800b448

08001320 <enterPassword>:

void enterPassword()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f9ae 	bl	8001688 <ILI9163_init>
	ILI9163_newFrame();
 800132c:	f000 fa94 	bl	8001858 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 8001330:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	22a0      	movs	r2, #160	; 0xa0
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f000 faf9 	bl	8001934 <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawString(3, 41, Font_11x18, WHITE, "Enter password");
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <enterPassword+0x68>)
 8001344:	4a11      	ldr	r2, [pc, #68]	; (800138c <enterPassword+0x6c>)
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800134c:	9200      	str	r2, [sp, #0]
 800134e:	cb0c      	ldmia	r3, {r2, r3}
 8001350:	2129      	movs	r1, #41	; 0x29
 8001352:	2003      	movs	r0, #3
 8001354:	f000 fbaa 	bl	8001aac <ILI9163_drawString>
	ILI9163_drawString(36, 64, Font_11x18, WHITE, "to login");
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <enterPassword+0x68>)
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <enterPassword+0x70>)
 800135c:	9201      	str	r2, [sp, #4]
 800135e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001362:	9200      	str	r2, [sp, #0]
 8001364:	cb0c      	ldmia	r3, {r2, r3}
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	2024      	movs	r0, #36	; 0x24
 800136a:	f000 fb9f 	bl	8001aac <ILI9163_drawString>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 800136e:	2064      	movs	r0, #100	; 0x64
 8001370:	f001 fc12 	bl	8002b98 <HAL_Delay>
	ILI9163_render();
 8001374:	f000 fa8c 	bl	8001890 <ILI9163_render>
	HAL_Delay(2000);
 8001378:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800137c:	f001 fc0c 	bl	8002b98 <HAL_Delay>
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	0800b458 	.word	0x0800b458
 8001390:	0800b468 	.word	0x0800b468

08001394 <correctPassword>:

void correctPassword()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 800139a:	2000      	movs	r0, #0
 800139c:	f000 f974 	bl	8001688 <ILI9163_init>
	HAL_Delay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f001 fbf8 	bl	8002b98 <HAL_Delay>
	ILI9163_newFrame();
 80013a8:	f000 fa56 	bl	8001858 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, GREEN);
 80013ac:	230c      	movs	r3, #12
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	22a0      	movs	r2, #160	; 0xa0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2000      	movs	r0, #0
 80013b8:	f000 fabc 	bl	8001934 <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(41, 55, Font_11x18, WHITE, "Correct");
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <correctPassword+0x58>)
 80013be:	4a0c      	ldr	r2, [pc, #48]	; (80013f0 <correctPassword+0x5c>)
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c6:	9200      	str	r2, [sp, #0]
 80013c8:	cb0c      	ldmia	r3, {r2, r3}
 80013ca:	2137      	movs	r1, #55	; 0x37
 80013cc:	2029      	movs	r0, #41	; 0x29
 80013ce:	f000 fbae 	bl	8001b2e <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f001 fbe0 	bl	8002b98 <HAL_Delay>
	ILI9163_render();
 80013d8:	f000 fa5a 	bl	8001890 <ILI9163_render>
	HAL_Delay(1000);
 80013dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013e0:	f001 fbda 	bl	8002b98 <HAL_Delay>
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000008 	.word	0x20000008
 80013f0:	0800b474 	.word	0x0800b474

080013f4 <incorrectPassword>:

void incorrectPassword()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af02      	add	r7, sp, #8
	ILI9163_init(0);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f000 f944 	bl	8001688 <ILI9163_init>
	HAL_Delay(1000);
 8001400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001404:	f001 fbc8 	bl	8002b98 <HAL_Delay>
	ILI9163_newFrame();
 8001408:	f000 fa26 	bl	8001858 <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, RED);
 800140c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	22a0      	movs	r2, #160	; 0xa0
 8001416:	2100      	movs	r1, #0
 8001418:	2000      	movs	r0, #0
 800141a:	f000 fa8b 	bl	8001934 <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(30.5, 41, Font_11x18, WHITE, "Incorrect");
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <incorrectPassword+0x70>)
 8001420:	4a11      	ldr	r2, [pc, #68]	; (8001468 <incorrectPassword+0x74>)
 8001422:	9201      	str	r2, [sp, #4]
 8001424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001428:	9200      	str	r2, [sp, #0]
 800142a:	cb0c      	ldmia	r3, {r2, r3}
 800142c:	2129      	movs	r1, #41	; 0x29
 800142e:	201e      	movs	r0, #30
 8001430:	f000 fb7d 	bl	8001b2e <ILI9163_drawStringF>
	ILI9163_drawStringF(14, 64, Font_11x18, WHITE, "Please retry");
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <incorrectPassword+0x70>)
 8001436:	4a0d      	ldr	r2, [pc, #52]	; (800146c <incorrectPassword+0x78>)
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143e:	9200      	str	r2, [sp, #0]
 8001440:	cb0c      	ldmia	r3, {r2, r3}
 8001442:	2140      	movs	r1, #64	; 0x40
 8001444:	200e      	movs	r0, #14
 8001446:	f000 fb72 	bl	8001b2e <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 800144a:	2064      	movs	r0, #100	; 0x64
 800144c:	f001 fba4 	bl	8002b98 <HAL_Delay>
	ILI9163_render();
 8001450:	f000 fa1e 	bl	8001890 <ILI9163_render>
	HAL_Delay(1000);
 8001454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001458:	f001 fb9e 	bl	8002b98 <HAL_Delay>
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008
 8001468:	0800b47c 	.word	0x0800b47c
 800146c:	0800b488 	.word	0x0800b488

08001470 <writeDataToFlash>:
// Define the address where you want to store your data
#define FLASH_DATA_ADDRESS ((uint32_t)0x08040000) // Address within sector 6

// Function to write data to flash memory
void writeDataToFlash(uint32_t* data, uint32_t size)
{
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 800147a:	f002 f907 	bl	800368c <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < size; i += 4)
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e013      	b.n	80014ac <writeDataToFlash+0x3c>
    {
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_DATA_ADDRESS + i, data[i / 4]);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	490e      	ldr	r1, [pc, #56]	; (80014c0 <writeDataToFlash+0x50>)
 8001488:	4419      	add	r1, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f023 0303 	bic.w	r3, r3, #3
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2200      	movs	r2, #0
 8001498:	461c      	mov	r4, r3
 800149a:	4615      	mov	r5, r2
 800149c:	4622      	mov	r2, r4
 800149e:	462b      	mov	r3, r5
 80014a0:	2002      	movs	r0, #2
 80014a2:	f002 f897 	bl	80035d4 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < size; i += 4)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3304      	adds	r3, #4
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d3e7      	bcc.n	8001484 <writeDataToFlash+0x14>
    }

    HAL_FLASH_Lock();
 80014b4:	f002 f90c 	bl	80036d0 <HAL_FLASH_Lock>
}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bdb0      	pop	{r4, r5, r7, pc}
 80014c0:	08040000 	.word	0x08040000

080014c4 <readDataFromFlash>:

// Function to read data from flash memory
void readDataFromFlash(uint32_t* data, uint32_t size)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < size; i += 4)
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e00d      	b.n	80014f0 <readDataFromFlash+0x2c>
    {
        data[i / 4] = *(__IO uint32_t*)(FLASH_DATA_ADDRESS + i);
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <readDataFromFlash+0x44>)
 80014d8:	4413      	add	r3, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	4413      	add	r3, r2
 80014e6:	680a      	ldr	r2, [r1, #0]
 80014e8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i += 4)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3304      	adds	r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d3ed      	bcc.n	80014d4 <readDataFromFlash+0x10>
    }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	08040000 	.word	0x08040000

0800150c <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <ILI9163_writeCommand+0x44>)
 800151e:	f002 fc27 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <ILI9163_writeCommand+0x44>)
 800152a:	f002 fc21 	bl	8003d70 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 800152e:	1df9      	adds	r1, r7, #7
 8001530:	2300      	movs	r3, #0
 8001532:	2201      	movs	r2, #1
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <ILI9163_writeCommand+0x48>)
 8001536:	f003 ff30 	bl	800539a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <ILI9163_writeCommand+0x44>)
 8001542:	f002 fc15 	bl	8003d70 <HAL_GPIO_WritePin>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40020400 	.word	0x40020400
 8001554:	2000a228 	.word	0x2000a228

08001558 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <ILI9163_writeData+0x44>)
 800156a:	f002 fc01 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001574:	4809      	ldr	r0, [pc, #36]	; (800159c <ILI9163_writeData+0x44>)
 8001576:	f002 fbfb 	bl	8003d70 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800157a:	1df9      	adds	r1, r7, #7
 800157c:	2300      	movs	r3, #0
 800157e:	2201      	movs	r2, #1
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <ILI9163_writeData+0x48>)
 8001582:	f003 ff0a 	bl	800539a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <ILI9163_writeData+0x44>)
 800158e:	f002 fbef 	bl	8003d70 <HAL_GPIO_WritePin>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40020400 	.word	0x40020400
 80015a0:	2000a228 	.word	0x2000a228

080015a4 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b4:	4810      	ldr	r0, [pc, #64]	; (80015f8 <ILI9163_writeData16+0x54>)
 80015b6:	f002 fbdb 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <ILI9163_writeData16+0x54>)
 80015c2:	f002 fbd5 	bl	8003d70 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	733b      	strb	r3, [r7, #12]
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 80015d6:	f107 010c 	add.w	r1, r7, #12
 80015da:	2300      	movs	r3, #0
 80015dc:	2202      	movs	r2, #2
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <ILI9163_writeData16+0x58>)
 80015e0:	f003 fedb 	bl	800539a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <ILI9163_writeData16+0x54>)
 80015ec:	f002 fbc0 	bl	8003d70 <HAL_GPIO_WritePin>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40020400 	.word	0x40020400
 80015fc:	2000a228 	.word	0x2000a228

08001600 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4623      	mov	r3, r4
 8001610:	80fb      	strh	r3, [r7, #6]
 8001612:	4603      	mov	r3, r0
 8001614:	80bb      	strh	r3, [r7, #4]
 8001616:	460b      	mov	r3, r1
 8001618:	807b      	strh	r3, [r7, #2]
 800161a:	4613      	mov	r3, r2
 800161c:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800161e:	202a      	movs	r0, #42	; 0x2a
 8001620:	f7ff ff74 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ffbc 	bl	80015a4 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ffb8 	bl	80015a4 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8001634:	202b      	movs	r0, #43	; 0x2b
 8001636:	f7ff ff69 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ffb1 	bl	80015a4 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 8001642:	883b      	ldrh	r3, [r7, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ffad 	bl	80015a4 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 800164a:	202c      	movs	r0, #44	; 0x2c
 800164c:	f7ff ff5e 	bl	800150c <ILI9163_writeCommand>
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bd90      	pop	{r4, r7, pc}

08001658 <ILI9163_reset>:

void ILI9163_reset(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <ILI9163_reset+0x2c>)
 8001664:	f002 fb84 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001668:	2032      	movs	r0, #50	; 0x32
 800166a:	f001 fa95 	bl	8002b98 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <ILI9163_reset+0x2c>)
 8001676:	f002 fb7b 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800167a:	2064      	movs	r0, #100	; 0x64
 800167c:	f001 fa8c 	bl	8002b98 <HAL_Delay>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40020c00 	.word	0x40020c00

08001688 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8001690:	2201      	movs	r2, #1
 8001692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001696:	486e      	ldr	r0, [pc, #440]	; (8001850 <ILI9163_init+0x1c8>)
 8001698:	f002 fb6a 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800169c:	2201      	movs	r2, #1
 800169e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a2:	486c      	ldr	r0, [pc, #432]	; (8001854 <ILI9163_init+0x1cc>)
 80016a4:	f002 fb64 	bl	8003d70 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80016a8:	f7ff ffd6 	bl	8001658 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 80016ac:	2011      	movs	r0, #17
 80016ae:	f7ff ff2d 	bl	800150c <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 80016b2:	2005      	movs	r0, #5
 80016b4:	f001 fa70 	bl	8002b98 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 80016b8:	203a      	movs	r0, #58	; 0x3a
 80016ba:	f7ff ff27 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 80016be:	2005      	movs	r0, #5
 80016c0:	f7ff ff4a 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 80016c4:	2026      	movs	r0, #38	; 0x26
 80016c6:	f7ff ff21 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 80016ca:	2004      	movs	r0, #4
 80016cc:	f7ff ff44 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 80016d0:	20f2      	movs	r0, #242	; 0xf2
 80016d2:	f7ff ff1b 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 80016d6:	2001      	movs	r0, #1
 80016d8:	f7ff ff3e 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 80016dc:	20e0      	movs	r0, #224	; 0xe0
 80016de:	f7ff ff15 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 80016e2:	203f      	movs	r0, #63	; 0x3f
 80016e4:	f7ff ff38 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80016e8:	2025      	movs	r0, #37	; 0x25
 80016ea:	f7ff ff35 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 80016ee:	201c      	movs	r0, #28
 80016f0:	f7ff ff32 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 80016f4:	201e      	movs	r0, #30
 80016f6:	f7ff ff2f 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80016fa:	2020      	movs	r0, #32
 80016fc:	f7ff ff2c 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8001700:	2012      	movs	r0, #18
 8001702:	f7ff ff29 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8001706:	202a      	movs	r0, #42	; 0x2a
 8001708:	f7ff ff26 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 800170c:	2090      	movs	r0, #144	; 0x90
 800170e:	f7ff ff23 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8001712:	2024      	movs	r0, #36	; 0x24
 8001714:	f7ff ff20 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 8001718:	2011      	movs	r0, #17
 800171a:	f7ff ff1d 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff ff1a 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff ff17 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff ff14 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff ff11 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff ff0e 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 800173c:	20e1      	movs	r0, #225	; 0xe1
 800173e:	f7ff fee5 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8001742:	2020      	movs	r0, #32
 8001744:	f7ff ff08 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8001748:	2020      	movs	r0, #32
 800174a:	f7ff ff05 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800174e:	2020      	movs	r0, #32
 8001750:	f7ff ff02 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 8001754:	2020      	movs	r0, #32
 8001756:	f7ff feff 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 800175a:	2005      	movs	r0, #5
 800175c:	f7ff fefc 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fef9 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8001766:	2015      	movs	r0, #21
 8001768:	f7ff fef6 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 800176c:	20a7      	movs	r0, #167	; 0xa7
 800176e:	f7ff fef3 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8001772:	203d      	movs	r0, #61	; 0x3d
 8001774:	f7ff fef0 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8001778:	2018      	movs	r0, #24
 800177a:	f7ff feed 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800177e:	2025      	movs	r0, #37	; 0x25
 8001780:	f7ff feea 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8001784:	202a      	movs	r0, #42	; 0x2a
 8001786:	f7ff fee7 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800178a:	202b      	movs	r0, #43	; 0x2b
 800178c:	f7ff fee4 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8001790:	202b      	movs	r0, #43	; 0x2b
 8001792:	f7ff fee1 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8001796:	203a      	movs	r0, #58	; 0x3a
 8001798:	f7ff fede 	bl	8001558 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 800179c:	20b1      	movs	r0, #177	; 0xb1
 800179e:	f7ff feb5 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80017a2:	2008      	movs	r0, #8
 80017a4:	f7ff fed8 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fed5 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 80017ae:	20b2      	movs	r0, #178	; 0xb2
 80017b0:	f7ff feac 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80017b4:	2008      	movs	r0, #8
 80017b6:	f7ff fecf 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff fecc 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 80017c0:	20b3      	movs	r0, #179	; 0xb3
 80017c2:	f7ff fea3 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80017c6:	2008      	movs	r0, #8
 80017c8:	f7ff fec6 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff fec3 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 80017d2:	20b4      	movs	r0, #180	; 0xb4
 80017d4:	f7ff fe9a 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 80017d8:	2007      	movs	r0, #7
 80017da:	f7ff febd 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80017de:	202a      	movs	r0, #42	; 0x2a
 80017e0:	f7ff fe94 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff feb7 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 80017ea:	2000      	movs	r0, #0
 80017ec:	f7ff feb4 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 80017f0:	2000      	movs	r0, #0
 80017f2:	f7ff feb1 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 80017f6:	207f      	movs	r0, #127	; 0x7f
 80017f8:	f7ff feae 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80017fc:	202b      	movs	r0, #43	; 0x2b
 80017fe:	f7ff fe85 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fea8 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fea5 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fea2 	bl	8001558 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8001814:	209f      	movs	r0, #159	; 0x9f
 8001816:	f7ff fe9f 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800181a:	2036      	movs	r0, #54	; 0x36
 800181c:	f7ff fe76 	bl	800150c <ILI9163_writeCommand>
	if(rotation)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 8001826:	20a8      	movs	r0, #168	; 0xa8
 8001828:	f7ff fe96 	bl	8001558 <ILI9163_writeData>
 800182c:	e002      	b.n	8001834 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 800182e:	2068      	movs	r0, #104	; 0x68
 8001830:	f7ff fe92 	bl	8001558 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8001834:	2013      	movs	r0, #19
 8001836:	f7ff fe69 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800183a:	2029      	movs	r0, #41	; 0x29
 800183c:	f7ff fe66 	bl	800150c <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8001840:	202c      	movs	r0, #44	; 0x2c
 8001842:	f7ff fe63 	bl	800150c <ILI9163_writeCommand>
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020400 	.word	0x40020400
 8001854:	40020c00 	.word	0x40020c00

08001858 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	e008      	b.n	8001876 <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <ILI9163_newFrame+0x34>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800186c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800187c:	d3f2      	bcc.n	8001864 <ILI9163_newFrame+0xc>

}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	20000228 	.word	0x20000228

08001890 <ILI9163_render>:

void ILI9163_render()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	22a0      	movs	r2, #160	; 0xa0
 8001898:	2100      	movs	r1, #0
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff feb0 	bl	8001600 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	480d      	ldr	r0, [pc, #52]	; (80018dc <ILI9163_render+0x4c>)
 80018a8:	f002 fa62 	bl	8003d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b2:	480a      	ldr	r0, [pc, #40]	; (80018dc <ILI9163_render+0x4c>)
 80018b4:	f002 fa5c 	bl	8003d70 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 80018b8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80018bc:	4908      	ldr	r1, [pc, #32]	; (80018e0 <ILI9163_render+0x50>)
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <ILI9163_render+0x54>)
 80018c0:	f003 feda 	bl	8005678 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <ILI9163_render+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
	while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 80018ca:	bf00      	nop
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <ILI9163_render+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0fb      	beq.n	80018cc <ILI9163_render+0x3c>
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40020400 	.word	0x40020400
 80018e0:	20000228 	.word	0x20000228
 80018e4:	2000a228 	.word	0x2000a228
 80018e8:	2000a8ac 	.word	0x2000a8ac

080018ec <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	460b      	mov	r3, r1
 80018f8:	71bb      	strb	r3, [r7, #6]
 80018fa:	4613      	mov	r3, r2
 80018fc:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	2b9f      	cmp	r3, #159	; 0x9f
 8001902:	d80f      	bhi.n	8001924 <ILI9163_drawPixel+0x38>
 8001904:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0b      	blt.n	8001924 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 800190c:	79f9      	ldrb	r1, [r7, #7]
 800190e:	79ba      	ldrb	r2, [r7, #6]
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	015b      	lsls	r3, r3, #5
 8001918:	440b      	add	r3, r1
 800191a:	4905      	ldr	r1, [pc, #20]	; (8001930 <ILI9163_drawPixel+0x44>)
 800191c:	88ba      	ldrh	r2, [r7, #4]
 800191e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001922:	e000      	b.n	8001926 <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8001924:	bf00      	nop
}
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	20000228 	.word	0x20000228

08001934 <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	4603      	mov	r3, r0
 8001948:	71bb      	strb	r3, [r7, #6]
 800194a:	460b      	mov	r3, r1
 800194c:	717b      	strb	r3, [r7, #5]
 800194e:	4613      	mov	r3, r2
 8001950:	713b      	strb	r3, [r7, #4]
	for(uint8_t x = x1; x < x2; x++)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	73fb      	strb	r3, [r7, #15]
 8001956:	e012      	b.n	800197e <ILI9163_fillRect+0x4a>
		for(uint8_t y = y1; y < y2; y++)
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	73bb      	strb	r3, [r7, #14]
 800195c:	e008      	b.n	8001970 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 800195e:	8c3a      	ldrh	r2, [r7, #32]
 8001960:	7bb9      	ldrb	r1, [r7, #14]
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ffc1 	bl	80018ec <ILI9163_drawPixel>
		for(uint8_t y = y1; y < y2; y++)
 800196a:	7bbb      	ldrb	r3, [r7, #14]
 800196c:	3301      	adds	r3, #1
 800196e:	73bb      	strb	r3, [r7, #14]
 8001970:	7bba      	ldrb	r2, [r7, #14]
 8001972:	793b      	ldrb	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	d3f2      	bcc.n	800195e <ILI9163_fillRect+0x2a>
	for(uint8_t x = x1; x < x2; x++)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	3301      	adds	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	7bfa      	ldrb	r2, [r7, #15]
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	429a      	cmp	r2, r3
 8001984:	d3e8      	bcc.n	8001958 <ILI9163_fillRect+0x24>
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <ILI9163_drawRect>:

void ILI9163_drawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint8_t thickness, uint16_t color) {
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b085      	sub	sp, #20
 8001994:	af02      	add	r7, sp, #8
 8001996:	4604      	mov	r4, r0
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4623      	mov	r3, r4
 80019a0:	71fb      	strb	r3, [r7, #7]
 80019a2:	4603      	mov	r3, r0
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	460b      	mov	r3, r1
 80019a8:	717b      	strb	r3, [r7, #5]
 80019aa:	4613      	mov	r3, r2
 80019ac:	713b      	strb	r3, [r7, #4]
	ILI9163_fillRect(x1, y1, x2, y1+thickness, color);
 80019ae:	79ba      	ldrb	r2, [r7, #6]
 80019b0:	7e3b      	ldrb	r3, [r7, #24]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2dc      	uxtb	r4, r3
 80019b6:	797a      	ldrb	r2, [r7, #5]
 80019b8:	79b9      	ldrb	r1, [r7, #6]
 80019ba:	79f8      	ldrb	r0, [r7, #7]
 80019bc:	8bbb      	ldrh	r3, [r7, #28]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4623      	mov	r3, r4
 80019c2:	f7ff ffb7 	bl	8001934 <ILI9163_fillRect>
	ILI9163_fillRect(x1, y2-thickness, x2, y2, color);
 80019c6:	793a      	ldrb	r2, [r7, #4]
 80019c8:	7e3b      	ldrb	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b2d9      	uxtb	r1, r3
 80019ce:	793c      	ldrb	r4, [r7, #4]
 80019d0:	797a      	ldrb	r2, [r7, #5]
 80019d2:	79f8      	ldrb	r0, [r7, #7]
 80019d4:	8bbb      	ldrh	r3, [r7, #28]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4623      	mov	r3, r4
 80019da:	f7ff ffab 	bl	8001934 <ILI9163_fillRect>

	ILI9163_fillRect(x1, y1, x1+thickness, y2, color);
 80019de:	79fa      	ldrb	r2, [r7, #7]
 80019e0:	7e3b      	ldrb	r3, [r7, #24]
 80019e2:	4413      	add	r3, r2
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	793c      	ldrb	r4, [r7, #4]
 80019e8:	79b9      	ldrb	r1, [r7, #6]
 80019ea:	79f8      	ldrb	r0, [r7, #7]
 80019ec:	8bbb      	ldrh	r3, [r7, #28]
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	4623      	mov	r3, r4
 80019f2:	f7ff ff9f 	bl	8001934 <ILI9163_fillRect>
	ILI9163_fillRect(x2-thickness, y1, x2, y2, color);
 80019f6:	797a      	ldrb	r2, [r7, #5]
 80019f8:	7e3b      	ldrb	r3, [r7, #24]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b2d8      	uxtb	r0, r3
 80019fe:	793c      	ldrb	r4, [r7, #4]
 8001a00:	797a      	ldrb	r2, [r7, #5]
 8001a02:	79b9      	ldrb	r1, [r7, #6]
 8001a04:	8bbb      	ldrh	r3, [r7, #28]
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4623      	mov	r3, r4
 8001a0a:	f7ff ff93 	bl	8001934 <ILI9163_fillRect>
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}

08001a16 <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 8001a16:	b082      	sub	sp, #8
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	460b      	mov	r3, r1
 8001a26:	71bb      	strb	r3, [r7, #6]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	81fb      	strh	r3, [r7, #14]
 8001a30:	e02f      	b.n	8001a92 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	797b      	ldrb	r3, [r7, #5]
 8001a36:	3b20      	subs	r3, #32
 8001a38:	7f79      	ldrb	r1, [r7, #29]
 8001a3a:	fb03 f101 	mul.w	r1, r3, r1
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
 8001a40:	440b      	add	r3, r1
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	81bb      	strh	r3, [r7, #12]
 8001a4e:	e018      	b.n	8001a82 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8001a50:	897a      	ldrh	r2, [r7, #10]
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8001a60:	89bb      	ldrh	r3, [r7, #12]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4413      	add	r3, r2
 8001a68:	b2d8      	uxtb	r0, r3
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	79bb      	ldrb	r3, [r7, #6]
 8001a70:	4413      	add	r3, r2
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff ff38 	bl	80018ec <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8001a7c:	89bb      	ldrh	r3, [r7, #12]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	81bb      	strh	r3, [r7, #12]
 8001a82:	7f3b      	ldrb	r3, [r7, #28]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	89ba      	ldrh	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d3e1      	bcc.n	8001a50 <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8001a8c:	89fb      	ldrh	r3, [r7, #14]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	81fb      	strh	r3, [r7, #14]
 8001a92:	7f7b      	ldrb	r3, [r7, #29]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	89fa      	ldrh	r2, [r7, #14]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3ca      	bcc.n	8001a32 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001aa8:	b002      	add	sp, #8
 8001aaa:	4770      	bx	lr

08001aac <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	4604      	mov	r4, r0
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	1d39      	adds	r1, r7, #4
 8001ab8:	e881 000c 	stmia.w	r1, {r2, r3}
 8001abc:	4623      	mov	r3, r4
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8001ac4:	e029      	b.n	8001b1a <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	793a      	ldrb	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	2b9f      	cmp	r3, #159	; 0x9f
 8001ace:	dd12      	ble.n	8001af6 <ILI9163_drawString+0x4a>
			x = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8001ad4:	797a      	ldrb	r2, [r7, #5]
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	4413      	add	r3, r2
 8001ada:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	797a      	ldrb	r2, [r7, #5]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ae4:	dc1e      	bgt.n	8001b24 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b20      	cmp	r3, #32
 8001aec:	d103      	bne.n	8001af6 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8001af4:	e011      	b.n	8001b1a <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	7bb9      	ldrb	r1, [r7, #14]
 8001afc:	7bf8      	ldrb	r0, [r7, #15]
 8001afe:	8c3b      	ldrh	r3, [r7, #32]
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f7ff ff85 	bl	8001a16 <ILI9163_drawChar>

		x += font.width;
 8001b0c:	793a      	ldrb	r2, [r7, #4]
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	4413      	add	r3, r2
 8001b12:	73fb      	strb	r3, [r7, #15]
		string++;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	3301      	adds	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1d1      	bne.n	8001ac6 <ILI9163_drawString+0x1a>
	}
}
 8001b22:	e000      	b.n	8001b26 <ILI9163_drawString+0x7a>
				break;
 8001b24:	bf00      	nop
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd90      	pop	{r4, r7, pc}

08001b2e <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8001b2e:	b590      	push	{r4, r7, lr}
 8001b30:	b099      	sub	sp, #100	; 0x64
 8001b32:	af02      	add	r7, sp, #8
 8001b34:	4604      	mov	r4, r0
 8001b36:	4608      	mov	r0, r1
 8001b38:	1d39      	adds	r1, r7, #4
 8001b3a:	e881 000c 	stmia.w	r1, {r2, r3}
 8001b3e:	4623      	mov	r3, r4
 8001b40:	73fb      	strb	r3, [r7, #15]
 8001b42:	4603      	mov	r3, r0
 8001b44:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8001b46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b4a:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8001b4c:	f107 0018 	add.w	r0, r7, #24
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001b54:	213f      	movs	r1, #63	; 0x3f
 8001b56:	f006 fe43 	bl	80087e0 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8001b5a:	7bb9      	ldrb	r1, [r7, #14]
 8001b5c:	7bf8      	ldrb	r0, [r7, #15]
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	cb0c      	ldmia	r3, {r2, r3}
 8001b6e:	f7ff ff9d 	bl	8001aac <ILI9163_drawString>
}
 8001b72:	bf00      	nop
 8001b74:	375c      	adds	r7, #92	; 0x5c
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
	...

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f000 ffad 	bl	8002ade <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_FLASH_Unlock();
 8001b84:	f001 fd82 	bl	800368c <HAL_FLASH_Unlock>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b88:	f000 f8a6 	bl	8001cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b8c:	f000 f9c6 	bl	8001f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b90:	f000 f9a6 	bl	8001ee0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001b94:	f000 f946 	bl	8001e24 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b98:	f000 f974 	bl	8001e84 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001b9c:	f000 f904 	bl	8001da8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  getTitleScreen();
 8001ba0:	f7ff fa50 	bl	8001044 <getTitleScreen>
  readDataFromFlash((uint32_t*)password, passLen);
 8001ba4:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <main+0x134>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4842      	ldr	r0, [pc, #264]	; (8001cb4 <main+0x138>)
 8001bac:	f7ff fc8a 	bl	80014c4 <readDataFromFlash>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//Basic key pad functionality
	if (keyChar != 0)
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <main+0x13c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <main+0x54>
	{
		keyChar = 0;
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <main+0x13c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
		displayInput(); //GUI to display input
 8001bbe:	f7ff fb59 	bl	8001274 <displayInput>
		stringSize = strlen(inputPassword);
 8001bc2:	483e      	ldr	r0, [pc, #248]	; (8001cbc <main+0x140>)
 8001bc4:	f7fe fb74 	bl	80002b0 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <main+0x144>)
 8001bce:	601a      	str	r2, [r3, #0]
	}
	if (backspaceFlag == 1)
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <main+0x148>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d104      	bne.n	8001be2 <main+0x66>
	{
		backspaceFlag = 0;
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <main+0x148>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
		displayInput(); //GUI to display input
 8001bde:	f7ff fb49 	bl	8001274 <displayInput>
	}
	if (screenClrFlag == 1)
 8001be2:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <main+0x14c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d104      	bne.n	8001bf4 <main+0x78>
	{
		screenClrFlag = 0;
 8001bea:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <main+0x14c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
		displayInput(); //GUI to display input
 8001bf0:	f7ff fb40 	bl	8001274 <displayInput>
	}
	if (setPassFlag == 1)
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <main+0x150>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d120      	bne.n	8001c3e <main+0xc2>
	{
		setPassFlag = 0;
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <main+0x150>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]

		FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 8001c02:	2102      	movs	r1, #2
 8001c04:	2006      	movs	r0, #6
 8001c06:	f001 fea3 	bl	8003950 <FLASH_Erase_Sector>

		passLen = strlen(password);
 8001c0a:	482a      	ldr	r0, [pc, #168]	; (8001cb4 <main+0x138>)
 8001c0c:	f7fe fb50 	bl	80002b0 <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <main+0x134>)
 8001c14:	6013      	str	r3, [r2, #0]
		password[passLen] = '\0';
 8001c16:	4b26      	ldr	r3, [pc, #152]	; (8001cb0 <main+0x134>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <main+0x138>)
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	54d1      	strb	r1, [r2, r3]

	    writeDataToFlash((uint32_t*)password, passLen);
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <main+0x134>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4823      	ldr	r0, [pc, #140]	; (8001cb4 <main+0x138>)
 8001c28:	f7ff fc22 	bl	8001470 <writeDataToFlash>

	    savedPassword(); //GUI to display the password has been set
 8001c2c:	f7ff fb3e 	bl	80012ac <savedPassword>
	    enterPassword(); //GUI to ask user to enter password
 8001c30:	f7ff fb76 	bl	8001320 <enterPassword>
		inputPassword[0] = '\0';
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <main+0x140>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
		displayInput(); //GUI to display input
 8001c3a:	f7ff fb1b 	bl	8001274 <displayInput>
	}
	if (enterFlag == 1)
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <main+0x154>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d1b4      	bne.n	8001bb0 <main+0x34>
	{
		inputPassword[stringSize] = '\0';
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <main+0x144>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <main+0x140>)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	54d1      	strb	r1, [r2, r3]
		if(strcmp(inputPassword, password) == 0)
 8001c50:	4918      	ldr	r1, [pc, #96]	; (8001cb4 <main+0x138>)
 8001c52:	481a      	ldr	r0, [pc, #104]	; (8001cbc <main+0x140>)
 8001c54:	f7fe fb34 	bl	80002c0 <strcmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10e      	bne.n	8001c7c <main+0x100>
		{
			correctPassword(); //GUI to display correct password screen
 8001c5e:	f7ff fb99 	bl	8001394 <correctPassword>
			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8001c62:	2101      	movs	r1, #1
 8001c64:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <main+0x158>)
 8001c66:	f002 f89c 	bl	8003da2 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8001c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c6e:	f000 ff93 	bl	8002b98 <HAL_Delay>
			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_0);
 8001c72:	2101      	movs	r1, #1
 8001c74:	4817      	ldr	r0, [pc, #92]	; (8001cd4 <main+0x158>)
 8001c76:	f002 f894 	bl	8003da2 <HAL_GPIO_TogglePin>
 8001c7a:	e00f      	b.n	8001c9c <main+0x120>
		}
		else
		{
			incorrectPassword(); //GUI to display incorrect password screen
 8001c7c:	f7ff fbba 	bl	80013f4 <incorrectPassword>
			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8001c80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c84:	4813      	ldr	r0, [pc, #76]	; (8001cd4 <main+0x158>)
 8001c86:	f002 f88c 	bl	8003da2 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8e:	f000 ff83 	bl	8002b98 <HAL_Delay>
			HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8001c92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c96:	480f      	ldr	r0, [pc, #60]	; (8001cd4 <main+0x158>)
 8001c98:	f002 f883 	bl	8003da2 <HAL_GPIO_TogglePin>
		}
		inputPassword[0] = '\0';
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <main+0x140>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
		displayInput(); //GUI to display input
 8001ca2:	f7ff fae7 	bl	8001274 <displayInput>
		enterFlag = 0;
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	; (8001cd0 <main+0x154>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
	if (keyChar != 0)
 8001cac:	e780      	b.n	8001bb0 <main+0x34>
 8001cae:	bf00      	nop
 8001cb0:	20000010 	.word	0x20000010
 8001cb4:	2000a880 	.word	0x2000a880
 8001cb8:	2000a87c 	.word	0x2000a87c
 8001cbc:	2000a88c 	.word	0x2000a88c
 8001cc0:	2000a8a8 	.word	0x2000a8a8
 8001cc4:	2000a8a0 	.word	0x2000a8a0
 8001cc8:	2000a8a4 	.word	0x2000a8a4
 8001ccc:	2000a89c 	.word	0x2000a89c
 8001cd0:	2000a898 	.word	0x2000a898
 8001cd4:	40020400 	.word	0x40020400

08001cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b094      	sub	sp, #80	; 0x50
 8001cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	2230      	movs	r2, #48	; 0x30
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f006 fd9a 	bl	8008820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cfc:	f002 f9d8 	bl	80040b0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <SystemClock_Config+0xc8>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	4a26      	ldr	r2, [pc, #152]	; (8001da0 <SystemClock_Config+0xc8>)
 8001d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <SystemClock_Config+0xc8>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d18:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <SystemClock_Config+0xcc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d20:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <SystemClock_Config+0xcc>)
 8001d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <SystemClock_Config+0xcc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001d4c:	2348      	movs	r3, #72	; 0x48
 8001d4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d50:	2302      	movs	r3, #2
 8001d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d54:	2303      	movs	r3, #3
 8001d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d58:	f107 0320 	add.w	r3, r7, #32
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 f9b7 	bl	80040d0 <HAL_RCC_OscConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d68:	f000 f9f2 	bl	8002150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d70:	2302      	movs	r3, #2
 8001d72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 fc45 	bl	8004618 <HAL_RCC_ClockConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d94:	f000 f9dc 	bl	8002150 <Error_Handler>
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3750      	adds	r7, #80	; 0x50
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000

08001da8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <MX_SPI1_Init+0x78>)
 8001db0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dba:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc8:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ddc:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dde:	2208      	movs	r2, #8
 8001de0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001df6:	2207      	movs	r2, #7
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e06:	4805      	ldr	r0, [pc, #20]	; (8001e1c <MX_SPI1_Init+0x74>)
 8001e08:	f003 fa1c 	bl	8005244 <HAL_SPI_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e12:	f000 f99d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000a228 	.word	0x2000a228
 8001e20:	40013000 	.word	0x40013000

08001e24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <MX_USART3_UART_Init+0x5c>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_USART3_UART_Init+0x58>)
 8001e68:	f003 ff58 	bl	8005d1c <HAL_UART_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e72:	f000 f96d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000a2ec 	.word	0x2000a2ec
 8001e80:	40004800 	.word	0x40004800

08001e84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e92:	2206      	movs	r2, #6
 8001e94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e96:	4b11      	ldr	r3, [pc, #68]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e98:	2202      	movs	r2, #2
 8001e9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ea2:	4b0e      	ldr	r3, [pc, #56]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ec8:	f001 ffa9 	bl	8003e1e <HAL_PCD_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001ed2:	f000 f93d 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2000a374 	.word	0x2000a374

08001ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_DMA_Init+0x38>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <MX_DMA_Init+0x38>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_DMA_Init+0x38>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	203b      	movs	r0, #59	; 0x3b
 8001f04:	f000 ff47 	bl	8002d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001f08:	203b      	movs	r0, #59	; 0x3b
 8001f0a:	f000 ff60 	bl	8002dce <HAL_NVIC_EnableIRQ>

}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800

08001f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f32:	4b72      	ldr	r3, [pc, #456]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a71      	ldr	r2, [pc, #452]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	4b6c      	ldr	r3, [pc, #432]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	4a6b      	ldr	r2, [pc, #428]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	6313      	str	r3, [r2, #48]	; 0x30
 8001f56:	4b69      	ldr	r3, [pc, #420]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b66      	ldr	r3, [pc, #408]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	4b60      	ldr	r3, [pc, #384]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f92:	4b5a      	ldr	r3, [pc, #360]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a59      	ldr	r2, [pc, #356]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b57      	ldr	r3, [pc, #348]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001faa:	4b54      	ldr	r3, [pc, #336]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a53      	ldr	r2, [pc, #332]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <MX_GPIO_Init+0x1e0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_13|LD3_Pin
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f24e 3193 	movw	r1, #58259	; 0xe393
 8001fc8:	484d      	ldr	r0, [pc, #308]	; (8002100 <MX_GPIO_Init+0x1e4>)
 8001fca:	f001 fed1 	bl	8003d70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	484c      	ldr	r0, [pc, #304]	; (8002104 <MX_GPIO_Init+0x1e8>)
 8001fd4:	f001 fecc 	bl	8003d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fe2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4846      	ldr	r0, [pc, #280]	; (8002108 <MX_GPIO_Init+0x1ec>)
 8001ff0:	f001 fcfa 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ff4:	2332      	movs	r3, #50	; 0x32
 8001ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002004:	230b      	movs	r3, #11
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	483e      	ldr	r0, [pc, #248]	; (8002108 <MX_GPIO_Init+0x1ec>)
 8002010:	f001 fcea 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002014:	2386      	movs	r3, #134	; 0x86
 8002016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002024:	230b      	movs	r3, #11
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	4837      	ldr	r0, [pc, #220]	; (800210c <MX_GPIO_Init+0x1f0>)
 8002030:	f001 fcda 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_7|GPIO_PIN_8
 8002034:	f244 3381 	movw	r3, #17281	; 0x4381
 8002038:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 031c 	add.w	r3, r7, #28
 800204a:	4619      	mov	r1, r3
 800204c:	482c      	ldr	r0, [pc, #176]	; (8002100 <MX_GPIO_Init+0x1e4>)
 800204e:	f001 fccb 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB15 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4;
 8002052:	f24a 0312 	movw	r3, #40978	; 0xa012
 8002056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	2301      	movs	r3, #1
 800205a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800205c:	2302      	movs	r3, #2
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	4619      	mov	r1, r3
 800206a:	4825      	ldr	r0, [pc, #148]	; (8002100 <MX_GPIO_Init+0x1e4>)
 800206c:	f001 fcbc 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002070:	2340      	movs	r3, #64	; 0x40
 8002072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	4619      	mov	r1, r3
 8002086:	481f      	ldr	r0, [pc, #124]	; (8002104 <MX_GPIO_Init+0x1e8>)
 8002088:	f001 fcae 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002098:	f107 031c 	add.w	r3, r7, #28
 800209c:	4619      	mov	r1, r3
 800209e:	4819      	ldr	r0, [pc, #100]	; (8002104 <MX_GPIO_Init+0x1e8>)
 80020a0:	f001 fca2 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80020a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80020a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	4813      	ldr	r0, [pc, #76]	; (8002108 <MX_GPIO_Init+0x1ec>)
 80020bc:	f001 fc94 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80020c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d2:	230b      	movs	r3, #11
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	4809      	ldr	r0, [pc, #36]	; (8002104 <MX_GPIO_Init+0x1e8>)
 80020de:	f001 fc83 	bl	80039e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2017      	movs	r0, #23
 80020e8:	f000 fe55 	bl	8002d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020ec:	2017      	movs	r0, #23
 80020ee:	f000 fe6e 	bl	8002dce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f2:	bf00      	nop
 80020f4:	3730      	adds	r7, #48	; 0x30
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020400 	.word	0x40020400
 8002104:	40021800 	.word	0x40021800
 8002108:	40020800 	.word	0x40020800
 800210c:	40020000 	.word	0x40020000

08002110 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t SPI_DMA_FL = 0;
uint32_t SPI_DMA_CNT=1;
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){SPI_DMA_CNT--;     if(SPI_DMA_CNT==0)     {         HAL_SPI_DMAStop(&hspi1);         SPI_DMA_CNT=1;         SPI_DMA_FL=1;     } }
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_SPI_TxCpltCallback+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3b01      	subs	r3, #1
 800211e:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_SPI_TxCpltCallback+0x34>)
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b08      	ldr	r3, [pc, #32]	; (8002144 <HAL_SPI_TxCpltCallback+0x34>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d108      	bne.n	800213c <HAL_SPI_TxCpltCallback+0x2c>
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <HAL_SPI_TxCpltCallback+0x38>)
 800212c:	f003 fb98 	bl	8005860 <HAL_SPI_DMAStop>
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_SPI_TxCpltCallback+0x34>)
 8002132:	2201      	movs	r2, #1
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_SPI_TxCpltCallback+0x3c>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	bf00      	nop
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000014 	.word	0x20000014
 8002148:	2000a228 	.word	0x2000a228
 800214c:	2000a8ac 	.word	0x2000a8ac

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002154:	b672      	cpsid	i
}
 8002156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002158:	e7fe      	b.n	8002158 <Error_Handler+0x8>
	...

0800215c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_MspInit+0x44>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_MspInit+0x44>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	; 0x40
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_MspInit+0x44>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_MspInit+0x44>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_MspInit+0x44>)
 8002180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_MspInit+0x44>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a41      	ldr	r2, [pc, #260]	; (80022c8 <HAL_SPI_MspInit+0x124>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d17c      	bne.n	80022c0 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a40      	ldr	r2, [pc, #256]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b38      	ldr	r3, [pc, #224]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f6:	4b35      	ldr	r3, [pc, #212]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a34      	ldr	r2, [pc, #208]	; (80022cc <HAL_SPI_MspInit+0x128>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b32      	ldr	r3, [pc, #200]	; (80022cc <HAL_SPI_MspInit+0x128>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800220e:	2360      	movs	r3, #96	; 0x60
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221a:	2303      	movs	r3, #3
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800221e:	2305      	movs	r3, #5
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4829      	ldr	r0, [pc, #164]	; (80022d0 <HAL_SPI_MspInit+0x12c>)
 800222a:	f001 fbdd 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800222e:	2320      	movs	r3, #32
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223e:	2305      	movs	r3, #5
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4822      	ldr	r0, [pc, #136]	; (80022d4 <HAL_SPI_MspInit+0x130>)
 800224a:	f001 fbcd 	bl	80039e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002250:	4a22      	ldr	r2, [pc, #136]	; (80022dc <HAL_SPI_MspInit+0x138>)
 8002252:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002256:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800225a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002264:	2200      	movs	r2, #0
 8002266:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 800226a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800226e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002270:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002276:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 800227a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800227e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002282:	2200      	movs	r2, #0
 8002284:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002288:	2200      	movs	r2, #0
 800228a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 800228e:	2204      	movs	r2, #4
 8002290:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 8002294:	2201      	movs	r2, #1
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 800229a:	2200      	movs	r2, #0
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 80022a6:	f000 fdad 	bl	8002e04 <HAL_DMA_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80022b0:	f7ff ff4e 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 80022b8:	655a      	str	r2, [r3, #84]	; 0x54
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_SPI_MspInit+0x134>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022c0:	bf00      	nop
 80022c2:	3728      	adds	r7, #40	; 0x28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40013000 	.word	0x40013000
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	2000a28c 	.word	0x2000a28c
 80022dc:	40026458 	.word	0x40026458

080022e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0aa      	sub	sp, #168	; 0xa8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2284      	movs	r2, #132	; 0x84
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f006 fa8d 	bl	8008820 <memset>
  if(huart->Instance==USART3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a22      	ldr	r2, [pc, #136]	; (8002394 <HAL_UART_MspInit+0xb4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d13c      	bne.n	800238a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002314:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002316:	2300      	movs	r3, #0
 8002318:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	4618      	mov	r0, r3
 8002320:	f002 fba0 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800232a:	f7ff ff11 	bl	8002150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_UART_MspInit+0xb8>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_UART_MspInit+0xb8>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_UART_MspInit+0xb8>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_UART_MspInit+0xb8>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_UART_MspInit+0xb8>)
 800234c:	f043 0308 	orr.w	r3, r3, #8
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_UART_MspInit+0xb8>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	60bb      	str	r3, [r7, #8]
 800235c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800235e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236c:	2301      	movs	r3, #1
 800236e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800237e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_UART_MspInit+0xbc>)
 8002386:	f001 fb2f 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	37a8      	adds	r7, #168	; 0xa8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40004800 	.word	0x40004800
 8002398:	40023800 	.word	0x40023800
 800239c:	40020c00 	.word	0x40020c00

080023a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0ac      	sub	sp, #176	; 0xb0
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023b8:	f107 0318 	add.w	r3, r7, #24
 80023bc:	2284      	movs	r2, #132	; 0x84
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f006 fa2d 	bl	8008820 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ce:	d159      	bne.n	8002484 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80023d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023dc:	f107 0318 	add.w	r3, r7, #24
 80023e0:	4618      	mov	r0, r3
 80023e2:	f002 fb3f 	bl	8004a64 <HAL_RCCEx_PeriphCLKConfig>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80023ec:	f7ff feb0 	bl	8002150 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_PCD_MspInit+0xec>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_PCD_MspInit+0xec>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6313      	str	r3, [r2, #48]	; 0x30
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_PCD_MspInit+0xec>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002408:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800240c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002422:	230a      	movs	r3, #10
 8002424:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800242c:	4619      	mov	r1, r3
 800242e:	4818      	ldr	r0, [pc, #96]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 8002430:	f001 fada 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800244c:	4619      	mov	r1, r3
 800244e:	4810      	ldr	r0, [pc, #64]	; (8002490 <HAL_PCD_MspInit+0xf0>)
 8002450:	f001 faca 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002454:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_PCD_MspInit+0xec>)
 8002456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002458:	4a0c      	ldr	r2, [pc, #48]	; (800248c <HAL_PCD_MspInit+0xec>)
 800245a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245e:	6353      	str	r3, [r2, #52]	; 0x34
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_PCD_MspInit+0xec>)
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_PCD_MspInit+0xec>)
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_PCD_MspInit+0xec>)
 8002472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002476:	6453      	str	r3, [r2, #68]	; 0x44
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_PCD_MspInit+0xec>)
 800247a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	37b0      	adds	r7, #176	; 0xb0
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f000 fb3a 	bl	8002b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 80024ee:	4b54      	ldr	r3, [pc, #336]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	801a      	strh	r2, [r3, #0]
	for(uint8_t c=0 ; c<4 ; c++)
 80024f4:	2300      	movs	r3, #0
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	e075      	b.n	80025e6 <EXTI9_5_IRQHandler+0xfe>
	{
		for(uint8_t i=0 ; i<4 ; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	71bb      	strb	r3, [r7, #6]
 80024fe:	e00e      	b.n	800251e <EXTI9_5_IRQHandler+0x36>
		{
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8002500:	79bb      	ldrb	r3, [r7, #6]
 8002502:	4a50      	ldr	r2, [pc, #320]	; (8002644 <EXTI9_5_IRQHandler+0x15c>)
 8002504:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002508:	79bb      	ldrb	r3, [r7, #6]
 800250a:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <EXTI9_5_IRQHandler+0x160>)
 800250c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002510:	2201      	movs	r2, #1
 8002512:	4619      	mov	r1, r3
 8002514:	f001 fc2c 	bl	8003d70 <HAL_GPIO_WritePin>
		for(uint8_t i=0 ; i<4 ; i++)
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	3301      	adds	r3, #1
 800251c:	71bb      	strb	r3, [r7, #6]
 800251e:	79bb      	ldrb	r3, [r7, #6]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d9ed      	bls.n	8002500 <EXTI9_5_IRQHandler+0x18>
		}
		HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	4a47      	ldr	r2, [pc, #284]	; (8002644 <EXTI9_5_IRQHandler+0x15c>)
 8002528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	4a46      	ldr	r2, [pc, #280]	; (8002648 <EXTI9_5_IRQHandler+0x160>)
 8002530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002534:	2200      	movs	r2, #0
 8002536:	4619      	mov	r1, r3
 8002538:	f001 fc1a 	bl	8003d70 <HAL_GPIO_WritePin>
		for(uint8_t r=0 ; r<4 ; r++)
 800253c:	2300      	movs	r3, #0
 800253e:	717b      	strb	r3, [r7, #5]
 8002540:	e04b      	b.n	80025da <EXTI9_5_IRQHandler+0xf2>
		{
			if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8002542:	797b      	ldrb	r3, [r7, #5]
 8002544:	4a41      	ldr	r2, [pc, #260]	; (800264c <EXTI9_5_IRQHandler+0x164>)
 8002546:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800254a:	797b      	ldrb	r3, [r7, #5]
 800254c:	4940      	ldr	r1, [pc, #256]	; (8002650 <EXTI9_5_IRQHandler+0x168>)
 800254e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f001 fbf3 	bl	8003d40 <HAL_GPIO_ReadPin>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d139      	bne.n	80025d4 <EXTI9_5_IRQHandler+0xec>
			{
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8002560:	797b      	ldrb	r3, [r7, #5]
 8002562:	4a3a      	ldr	r2, [pc, #232]	; (800264c <EXTI9_5_IRQHandler+0x164>)
 8002564:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002568:	797b      	ldrb	r3, [r7, #5]
 800256a:	4939      	ldr	r1, [pc, #228]	; (8002650 <EXTI9_5_IRQHandler+0x168>)
 800256c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002570:	4619      	mov	r1, r3
 8002572:	4610      	mov	r0, r2
 8002574:	f001 fbe4 	bl	8003d40 <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d12a      	bne.n	80025d4 <EXTI9_5_IRQHandler+0xec>
				{
					key |= 1<<c;
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	2201      	movs	r2, #1
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	b21a      	sxth	r2, r3
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b21b      	sxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	b21b      	sxth	r3, r3
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 8002596:	801a      	strh	r2, [r3, #0]
					key |= 1<<(r+8);
 8002598:	797b      	ldrb	r3, [r7, #5]
 800259a:	3308      	adds	r3, #8
 800259c:	2201      	movs	r2, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	b21a      	sxth	r2, r3
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b21b      	sxth	r3, r3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 80025b2:	801a      	strh	r2, [r3, #0]
					while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80025b4:	bf00      	nop
 80025b6:	797b      	ldrb	r3, [r7, #5]
 80025b8:	4a24      	ldr	r2, [pc, #144]	; (800264c <EXTI9_5_IRQHandler+0x164>)
 80025ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025be:	797b      	ldrb	r3, [r7, #5]
 80025c0:	4923      	ldr	r1, [pc, #140]	; (8002650 <EXTI9_5_IRQHandler+0x168>)
 80025c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f001 fbb9 	bl	8003d40 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <EXTI9_5_IRQHandler+0xce>
		for(uint8_t r=0 ; r<4 ; r++)
 80025d4:	797b      	ldrb	r3, [r7, #5]
 80025d6:	3301      	adds	r3, #1
 80025d8:	717b      	strb	r3, [r7, #5]
 80025da:	797b      	ldrb	r3, [r7, #5]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d9b0      	bls.n	8002542 <EXTI9_5_IRQHandler+0x5a>
	for(uint8_t c=0 ; c<4 ; c++)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	3301      	adds	r3, #1
 80025e4:	71fb      	strb	r3, [r7, #7]
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d986      	bls.n	80024fa <EXTI9_5_IRQHandler+0x12>
//		append(input, keyChar);
//		key = 0;
//	}
//	else
//	{
	keyChar = KeyPadGetChar(key);
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f83f 	bl	8002674 <KeyPadGetChar>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <EXTI9_5_IRQHandler+0x16c>)
 80025fc:	701a      	strb	r2, [r3, #0]
	append(inputPassword, keyChar);
 80025fe:	4b15      	ldr	r3, [pc, #84]	; (8002654 <EXTI9_5_IRQHandler+0x16c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4814      	ldr	r0, [pc, #80]	; (8002658 <EXTI9_5_IRQHandler+0x170>)
 8002606:	f000 f8f1 	bl	80027ec <append>
	key = 0;
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <EXTI9_5_IRQHandler+0x158>)
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]
//	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8002610:	2200      	movs	r2, #0
 8002612:	f24a 0112 	movw	r1, #40978	; 0xa012
 8002616:	4811      	ldr	r0, [pc, #68]	; (800265c <EXTI9_5_IRQHandler+0x174>)
 8002618:	f001 fbaa 	bl	8003d70 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800261c:	2040      	movs	r0, #64	; 0x40
 800261e:	f001 fbdb 	bl	8003dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002622:	2080      	movs	r0, #128	; 0x80
 8002624:	f001 fbd8 	bl	8003dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002628:	f44f 7080 	mov.w	r0, #256	; 0x100
 800262c:	f001 fbd4 	bl	8003dd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002630:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002634:	f001 fbd0 	bl	8003dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2000a87e 	.word	0x2000a87e
 8002644:	20000018 	.word	0x20000018
 8002648:	0800c960 	.word	0x0800c960
 800264c:	20000028 	.word	0x20000028
 8002650:	0800c968 	.word	0x0800c968
 8002654:	2000a87c 	.word	0x2000a87c
 8002658:	2000a88c 	.word	0x2000a88c
 800265c:	40020400 	.word	0x40020400

08002660 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <DMA2_Stream3_IRQHandler+0x10>)
 8002666:	f000 fd4b 	bl	8003100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	2000a28c 	.word	0x2000a28c

08002674 <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	80fb      	strh	r3, [r7, #6]
  switch(key)
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	f640 0208 	movw	r2, #2056	; 0x808
 8002684:	4293      	cmp	r3, r2
 8002686:	f300 80aa 	bgt.w	80027de <KeyPadGetChar+0x16a>
 800268a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268e:	dc1a      	bgt.n	80026c6 <KeyPadGetChar+0x52>
 8002690:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8002694:	f300 80a3 	bgt.w	80027de <KeyPadGetChar+0x16a>
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	dc2c      	bgt.n	80026f8 <KeyPadGetChar+0x84>
 800269e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80026a2:	f300 809c 	bgt.w	80027de <KeyPadGetChar+0x16a>
 80026a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026aa:	dc3d      	bgt.n	8002728 <KeyPadGetChar+0xb4>
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06b      	beq.n	8002788 <KeyPadGetChar+0x114>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f2c0 8094 	blt.w	80027de <KeyPadGetChar+0x16a>
 80026b6:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80026ba:	f300 8090 	bgt.w	80027de <KeyPadGetChar+0x16a>
 80026be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c2:	dc49      	bgt.n	8002758 <KeyPadGetChar+0xe4>
 80026c4:	e08b      	b.n	80027de <KeyPadGetChar+0x16a>
 80026c6:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 80026ca:	2b07      	cmp	r3, #7
 80026cc:	f200 8087 	bhi.w	80027de <KeyPadGetChar+0x16a>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <KeyPadGetChar+0x64>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	08002799 	.word	0x08002799
 80026dc:	080027ad 	.word	0x080027ad
 80026e0:	080027df 	.word	0x080027df
 80026e4:	080027c1 	.word	0x080027c1
 80026e8:	080027df 	.word	0x080027df
 80026ec:	080027df 	.word	0x080027df
 80026f0:	080027df 	.word	0x080027df
 80026f4:	080027db 	.word	0x080027db
 80026f8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80026fc:	2b07      	cmp	r3, #7
 80026fe:	d86e      	bhi.n	80027de <KeyPadGetChar+0x16a>
 8002700:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <KeyPadGetChar+0x94>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	08002795 	.word	0x08002795
 800270c:	080027a9 	.word	0x080027a9
 8002710:	080027df 	.word	0x080027df
 8002714:	080027bd 	.word	0x080027bd
 8002718:	080027df 	.word	0x080027df
 800271c:	080027df 	.word	0x080027df
 8002720:	080027df 	.word	0x080027df
 8002724:	080027d1 	.word	0x080027d1
 8002728:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800272c:	2b07      	cmp	r3, #7
 800272e:	d856      	bhi.n	80027de <KeyPadGetChar+0x16a>
 8002730:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <KeyPadGetChar+0xc4>)
 8002732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002736:	bf00      	nop
 8002738:	08002791 	.word	0x08002791
 800273c:	080027a5 	.word	0x080027a5
 8002740:	080027df 	.word	0x080027df
 8002744:	080027b9 	.word	0x080027b9
 8002748:	080027df 	.word	0x080027df
 800274c:	080027df 	.word	0x080027df
 8002750:	080027df 	.word	0x080027df
 8002754:	080027cd 	.word	0x080027cd
 8002758:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800275c:	2b07      	cmp	r3, #7
 800275e:	d83e      	bhi.n	80027de <KeyPadGetChar+0x16a>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <KeyPadGetChar+0xf4>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	0800278d 	.word	0x0800278d
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027df 	.word	0x080027df
 8002774:	080027b5 	.word	0x080027b5
 8002778:	080027df 	.word	0x080027df
 800277c:	080027df 	.word	0x080027df
 8002780:	080027df 	.word	0x080027df
 8002784:	080027c9 	.word	0x080027c9
  {
    case 0x0000:
    	return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e029      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0101:
		return '1';
 800278c:	2331      	movs	r3, #49	; 0x31
 800278e:	e027      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0201:
		return '2';
 8002790:	2332      	movs	r3, #50	; 0x32
 8002792:	e025      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0401:
		return '3';
 8002794:	2333      	movs	r3, #51	; 0x33
 8002796:	e023      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0801:
		setPassword(); //Was 'A' changed to setPassword() function
 8002798:	f000 f86c 	bl	8002874 <setPassword>
		return 0;
 800279c:	2300      	movs	r3, #0
 800279e:	e01f      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0102:
		return '4';
 80027a0:	2334      	movs	r3, #52	; 0x34
 80027a2:	e01d      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0202:
		return '5';
 80027a4:	2335      	movs	r3, #53	; 0x35
 80027a6:	e01b      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0402:
		return '6';
 80027a8:	2336      	movs	r3, #54	; 0x36
 80027aa:	e019      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0802:
		backspace();
 80027ac:	f000 f84a 	bl	8002844 <backspace>
		return 0; ////Was 'B' changed to backspace() function
 80027b0:	2300      	movs	r3, #0
 80027b2:	e015      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0104:
		return '7';
 80027b4:	2337      	movs	r3, #55	; 0x37
 80027b6:	e013      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0204:
		return '8';
 80027b8:	2338      	movs	r3, #56	; 0x38
 80027ba:	e011      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0404:
		return '9';
 80027bc:	2339      	movs	r3, #57	; 0x39
 80027be:	e00f      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0804:
		screenClear();
 80027c0:	f000 f82e 	bl	8002820 <screenClear>
		return 0; //Was 'C' changed to screenClear() function
 80027c4:	2300      	movs	r3, #0
 80027c6:	e00b      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0108:
		return '*'; //Shift key
 80027c8:	232a      	movs	r3, #42	; 0x2a
 80027ca:	e009      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0208:
		return '0';
 80027cc:	2330      	movs	r3, #48	; 0x30
 80027ce:	e007      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0408:
		enterFlag = 1;
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <KeyPadGetChar+0x174>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
		return 0; //Was '#' changed to enterFlag = 1
 80027d6:	2300      	movs	r3, #0
 80027d8:	e002      	b.n	80027e0 <KeyPadGetChar+0x16c>
	case 0x0808:
		return 0; //Was 'D' changed to return 0
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <KeyPadGetChar+0x16c>
	default:
		return 0;
 80027de:	2300      	movs	r3, #0
	}
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000a898 	.word	0x2000a898

080027ec <append>:

void append(char* input, char keyChar)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	70fb      	strb	r3, [r7, #3]
	int len = strlen(input);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fd fd59 	bl	80002b0 <strlen>
 80027fe:	4603      	mov	r3, r0
 8002800:	60fb      	str	r3, [r7, #12]
	input[len] = keyChar;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	4413      	add	r3, r2
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	701a      	strb	r2, [r3, #0]
	input[len+1] = '\0';
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3301      	adds	r3, #1
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <screenClear>:
void screenClear()
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
	inputPassword[0] = '\0';
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <screenClear+0x1c>)
 8002826:	2200      	movs	r2, #0
 8002828:	701a      	strb	r2, [r3, #0]
	screenClrFlag = 1;
 800282a:	4b05      	ldr	r3, [pc, #20]	; (8002840 <screenClear+0x20>)
 800282c:	2201      	movs	r2, #1
 800282e:	601a      	str	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	2000a88c 	.word	0x2000a88c
 8002840:	2000a8a4 	.word	0x2000a8a4

08002844 <backspace>:
void backspace()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
	int len = strlen(inputPassword);
 800284a:	4808      	ldr	r0, [pc, #32]	; (800286c <backspace+0x28>)
 800284c:	f7fd fd30 	bl	80002b0 <strlen>
 8002850:	4603      	mov	r3, r0
 8002852:	607b      	str	r3, [r7, #4]
	inputPassword[len-1] = '\0';
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <backspace+0x28>)
 800285a:	2100      	movs	r1, #0
 800285c:	54d1      	strb	r1, [r2, r3]
	backspaceFlag = 1;
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <backspace+0x2c>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	2000a88c 	.word	0x2000a88c
 8002870:	2000a8a0 	.word	0x2000a8a0

08002874 <setPassword>:
void setPassword()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
	password[0] = '\0';
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <setPassword+0x5c>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= strlen(inputPassword); i++)
 8002880:	2300      	movs	r3, #0
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e00b      	b.n	800289e <setPassword+0x2a>
	{
		password[i] = inputPassword[i];
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <setPassword+0x60>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4413      	add	r3, r2
 800288c:	7819      	ldrb	r1, [r3, #0]
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <setPassword+0x5c>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4413      	add	r3, r2
 8002894:	460a      	mov	r2, r1
 8002896:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= strlen(inputPassword); i++)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	480d      	ldr	r0, [pc, #52]	; (80028d4 <setPassword+0x60>)
 80028a0:	f7fd fd06 	bl	80002b0 <strlen>
 80028a4:	4602      	mov	r2, r0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d2ec      	bcs.n	8002886 <setPassword+0x12>
	}
	int len = strlen(password);
 80028ac:	4808      	ldr	r0, [pc, #32]	; (80028d0 <setPassword+0x5c>)
 80028ae:	f7fd fcff 	bl	80002b0 <strlen>
 80028b2:	4603      	mov	r3, r0
 80028b4:	603b      	str	r3, [r7, #0]
	password[len] = '\0';
 80028b6:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <setPassword+0x5c>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
	setPassFlag = 1;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <setPassword+0x64>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000a880 	.word	0x2000a880
 80028d4:	2000a88c 	.word	0x2000a88c
 80028d8:	2000a89c 	.word	0x2000a89c

080028dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return 1;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_kill>:

int _kill(int pid, int sig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028f6:	f005 ff9f 	bl	8008838 <__errno>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2216      	movs	r2, #22
 80028fe:	601a      	str	r2, [r3, #0]
  return -1;
 8002900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002904:	4618      	mov	r0, r3
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <_exit>:

void _exit (int status)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002914:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ffe7 	bl	80028ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800291e:	e7fe      	b.n	800291e <_exit+0x12>

08002920 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	e00a      	b.n	8002948 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002932:	f3af 8000 	nop.w
 8002936:	4601      	mov	r1, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	60ba      	str	r2, [r7, #8]
 800293e:	b2ca      	uxtb	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	dbf0      	blt.n	8002932 <_read+0x12>
  }

  return len;
 8002950:	687b      	ldr	r3, [r7, #4]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e009      	b.n	8002980 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	60ba      	str	r2, [r7, #8]
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	3301      	adds	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	429a      	cmp	r2, r3
 8002986:	dbf1      	blt.n	800296c <_write+0x12>
  }
  return len;
 8002988:	687b      	ldr	r3, [r7, #4]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_close>:

int _close(int file)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
 80029b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ba:	605a      	str	r2, [r3, #4]
  return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_isatty>:

int _isatty(int file)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029d2:	2301      	movs	r3, #1
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f005 ff04 	bl	8008838 <__errno>
 8002a30:	4603      	mov	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a05      	ldr	r2, [pc, #20]	; (8002a60 <_sbrk+0x64>)
 8002a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20050000 	.word	0x20050000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	2000a8b0 	.word	0x2000a8b0
 8002a64:	2000aa20 	.word	0x2000aa20

08002a68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <SystemInit+0x20>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <SystemInit+0x20>)
 8002a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a90:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a92:	490e      	ldr	r1, [pc, #56]	; (8002acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0b      	ldr	r2, [pc, #44]	; (8002ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa8:	4c0b      	ldr	r4, [pc, #44]	; (8002ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ab6:	f7ff ffd7 	bl	8002a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aba:	f005 fec3 	bl	8008844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002abe:	f7ff f85d 	bl	8001b7c <main>
  bx  lr    
 8002ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ac4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002acc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8002ad0:	0800cdc8 	.word	0x0800cdc8
  ldr r2, =_sbss
 8002ad4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002ad8:	2000aa20 	.word	0x2000aa20

08002adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002adc:	e7fe      	b.n	8002adc <ADC_IRQHandler>

08002ade <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae2:	2003      	movs	r0, #3
 8002ae4:	f000 f94c 	bl	8002d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f000 f805 	bl	8002af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aee:	f7ff fb35 	bl	800215c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <HAL_InitTick+0x54>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_InitTick+0x58>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f967 	bl	8002dea <HAL_SYSTICK_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00e      	b.n	8002b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b0f      	cmp	r3, #15
 8002b2a:	d80a      	bhi.n	8002b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b34:	f000 f92f 	bl	8002d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b38:	4a06      	ldr	r2, [pc, #24]	; (8002b54 <HAL_InitTick+0x5c>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	e000      	b.n	8002b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20000038 	.word	0x20000038
 8002b50:	20000040 	.word	0x20000040
 8002b54:	2000003c 	.word	0x2000003c

08002b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_IncTick+0x20>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	461a      	mov	r2, r3
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_IncTick+0x24>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4413      	add	r3, r2
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <HAL_IncTick+0x24>)
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000040 	.word	0x20000040
 8002b7c:	2000a8b4 	.word	0x2000a8b4

08002b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return uwTick;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_GetTick+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	2000a8b4 	.word	0x2000a8b4

08002b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff ffee 	bl	8002b80 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb0:	d005      	beq.n	8002bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bb2:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <HAL_Delay+0x44>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bbe:	bf00      	nop
 8002bc0:	f7ff ffde 	bl	8002b80 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d8f7      	bhi.n	8002bc0 <HAL_Delay+0x28>
  {
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000040 	.word	0x20000040

08002be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <__NVIC_SetPriorityGrouping+0x40>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <__NVIC_SetPriorityGrouping+0x40>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00
 8002c24:	05fa0000 	.word	0x05fa0000

08002c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <__NVIC_GetPriorityGrouping+0x18>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 0307 	and.w	r3, r3, #7
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db0b      	blt.n	8002c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <__NVIC_EnableIRQ+0x38>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	490c      	ldr	r1, [pc, #48]	; (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	bf28      	it	cs
 8002cf2:	2304      	movcs	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b03      	subs	r3, #3
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	401a      	ands	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	4313      	orrs	r3, r2
         );
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d4c:	d301      	bcc.n	8002d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00f      	b.n	8002d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d52:	4a0a      	ldr	r2, [pc, #40]	; (8002d7c <SysTick_Config+0x40>)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d60:	f7ff ff8e 	bl	8002c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <SysTick_Config+0x40>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d6a:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <SysTick_Config+0x40>)
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	e000e010 	.word	0xe000e010

08002d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff ff29 	bl	8002be0 <__NVIC_SetPriorityGrouping>
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b086      	sub	sp, #24
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002da8:	f7ff ff3e 	bl	8002c28 <__NVIC_GetPriorityGrouping>
 8002dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	6978      	ldr	r0, [r7, #20]
 8002db4:	f7ff ff8e 	bl	8002cd4 <NVIC_EncodePriority>
 8002db8:	4602      	mov	r2, r0
 8002dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff5d 	bl	8002c80 <__NVIC_SetPriority>
}
 8002dc6:	bf00      	nop
 8002dc8:	3718      	adds	r7, #24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff ff31 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b082      	sub	sp, #8
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7ff ffa2 	bl	8002d3c <SysTick_Config>
 8002df8:	4603      	mov	r3, r0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e10:	f7ff feb6 	bl	8002b80 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e099      	b.n	8002f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e40:	e00f      	b.n	8002e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e42:	f7ff fe9d 	bl	8002b80 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d908      	bls.n	8002e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2203      	movs	r2, #3
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e078      	b.n	8002f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e8      	bne.n	8002e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	4b38      	ldr	r3, [pc, #224]	; (8002f5c <HAL_DMA_Init+0x158>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d107      	bne.n	8002ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f023 0307 	bic.w	r3, r3, #7
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d117      	bne.n	8002f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00e      	beq.n	8002f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fae7 	bl	80034dc <DMA_CheckFifoParam>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2240      	movs	r2, #64	; 0x40
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f22:	2301      	movs	r3, #1
 8002f24:	e016      	b.n	8002f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa9e 	bl	8003470 <DMA_CalcBaseAndBitshift>
 8002f34:	4603      	mov	r3, r0
 8002f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	223f      	movs	r2, #63	; 0x3f
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	f010803f 	.word	0xf010803f

08002f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <HAL_DMA_Start_IT+0x26>
 8002f82:	2302      	movs	r3, #2
 8002f84:	e048      	b.n	8003018 <HAL_DMA_Start_IT+0xb8>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d137      	bne.n	800300a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fa30 	bl	8003414 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	223f      	movs	r2, #63	; 0x3f
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0216 	orr.w	r2, r2, #22
 8002fce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fde:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d007      	beq.n	8002ff8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0208 	orr.w	r2, r2, #8
 8002ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e005      	b.n	8003016 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003016:	7dfb      	ldrb	r3, [r7, #23]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800302e:	f7ff fda7 	bl	8002b80 <HAL_GetTick>
 8003032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d008      	beq.n	8003052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e052      	b.n	80030f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0216 	bic.w	r2, r2, #22
 8003060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_DMA_Abort+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0208 	bic.w	r2, r2, #8
 8003090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a2:	e013      	b.n	80030cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030a4:	f7ff fd6c 	bl	8002b80 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d90c      	bls.n	80030cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e015      	b.n	80030f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1e4      	bne.n	80030a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	223f      	movs	r2, #63	; 0x3f
 80030e0:	409a      	lsls	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800310c:	4b8e      	ldr	r3, [pc, #568]	; (8003348 <HAL_DMA_IRQHandler+0x248>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a8e      	ldr	r2, [pc, #568]	; (800334c <HAL_DMA_IRQHandler+0x24c>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	2208      	movs	r2, #8
 800312c:	409a      	lsls	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01a      	beq.n	800316c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d013      	beq.n	800316c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0204 	bic.w	r2, r2, #4
 8003152:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003158:	2208      	movs	r2, #8
 800315a:	409a      	lsls	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003164:	f043 0201 	orr.w	r2, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d012      	beq.n	80031a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	f043 0202 	orr.w	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	2204      	movs	r2, #4
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2204      	movs	r2, #4
 80031c6:	409a      	lsls	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f043 0204 	orr.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2210      	movs	r2, #16
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d043      	beq.n	8003270 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d03c      	beq.n	8003270 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2210      	movs	r2, #16
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d018      	beq.n	8003242 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d108      	bne.n	8003230 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d024      	beq.n	8003270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	4798      	blx	r3
 800322e:	e01f      	b.n	8003270 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003234:	2b00      	cmp	r3, #0
 8003236:	d01b      	beq.n	8003270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e016      	b.n	8003270 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d107      	bne.n	8003260 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0208 	bic.w	r2, r2, #8
 800325e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003274:	2220      	movs	r2, #32
 8003276:	409a      	lsls	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 808f 	beq.w	80033a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 8087 	beq.w	80033a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003296:	2220      	movs	r2, #32
 8003298:	409a      	lsls	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b05      	cmp	r3, #5
 80032a8:	d136      	bne.n	8003318 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0216 	bic.w	r2, r2, #22
 80032b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_DMA_IRQHandler+0x1da>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d007      	beq.n	80032ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0208 	bic.w	r2, r2, #8
 80032e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ee:	223f      	movs	r2, #63	; 0x3f
 80032f0:	409a      	lsls	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800330a:	2b00      	cmp	r3, #0
 800330c:	d07e      	beq.n	800340c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4798      	blx	r3
        }
        return;
 8003316:	e079      	b.n	800340c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01d      	beq.n	8003362 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003338:	2b00      	cmp	r3, #0
 800333a:	d031      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
 8003344:	e02c      	b.n	80033a0 <HAL_DMA_IRQHandler+0x2a0>
 8003346:	bf00      	nop
 8003348:	20000038 	.word	0x20000038
 800334c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d023      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	4798      	blx	r3
 8003360:	e01e      	b.n	80033a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10f      	bne.n	8003390 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0210 	bic.w	r2, r2, #16
 800337e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d032      	beq.n	800340e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d022      	beq.n	80033fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2205      	movs	r2, #5
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d307      	bcc.n	80033e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f2      	bne.n	80033cc <HAL_DMA_IRQHandler+0x2cc>
 80033e6:	e000      	b.n	80033ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
 800340a:	e000      	b.n	800340e <HAL_DMA_IRQHandler+0x30e>
        return;
 800340c:	bf00      	nop
    }
  }
}
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
 8003420:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003430:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d108      	bne.n	8003454 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003452:	e007      	b.n	8003464 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	60da      	str	r2, [r3, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3b10      	subs	r3, #16
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <DMA_CalcBaseAndBitshift+0x60>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <DMA_CalcBaseAndBitshift+0x64>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d908      	bls.n	80034b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <DMA_CalcBaseAndBitshift+0x68>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	1d1a      	adds	r2, r3, #4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	659a      	str	r2, [r3, #88]	; 0x58
 80034ae:	e006      	b.n	80034be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <DMA_CalcBaseAndBitshift+0x68>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	aaaaaaab 	.word	0xaaaaaaab
 80034d4:	0800c988 	.word	0x0800c988
 80034d8:	fffffc00 	.word	0xfffffc00

080034dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11f      	bne.n	8003536 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d856      	bhi.n	80035aa <DMA_CheckFifoParam+0xce>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <DMA_CheckFifoParam+0x28>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003515 	.word	0x08003515
 8003508:	08003527 	.word	0x08003527
 800350c:	08003515 	.word	0x08003515
 8003510:	080035ab 	.word	0x080035ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d046      	beq.n	80035ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003524:	e043      	b.n	80035ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800352e:	d140      	bne.n	80035b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003534:	e03d      	b.n	80035b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353e:	d121      	bne.n	8003584 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d837      	bhi.n	80035b6 <DMA_CheckFifoParam+0xda>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <DMA_CheckFifoParam+0x70>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	0800355d 	.word	0x0800355d
 8003550:	08003563 	.word	0x08003563
 8003554:	0800355d 	.word	0x0800355d
 8003558:	08003575 	.word	0x08003575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e030      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d025      	beq.n	80035ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003572:	e022      	b.n	80035ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800357c:	d11f      	bne.n	80035be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003582:	e01c      	b.n	80035be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d903      	bls.n	8003592 <DMA_CheckFifoParam+0xb6>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d003      	beq.n	8003598 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003590:	e018      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      break;
 8003596:	e015      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	e00b      	b.n	80035c2 <DMA_CheckFifoParam+0xe6>
      break;
 80035aa:	bf00      	nop
 80035ac:	e00a      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ae:	bf00      	nop
 80035b0:	e008      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b2:	bf00      	nop
 80035b4:	e006      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
    }
  } 
  
  return status; 
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop

080035d4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <HAL_FLASH_Program+0xb0>)
 80035e8:	7d1b      	ldrb	r3, [r3, #20]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_FLASH_Program+0x1e>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e043      	b.n	800367a <HAL_FLASH_Program+0xa6>
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <HAL_FLASH_Program+0xb0>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80035fc:	f000 f878 	bl	80036f0 <FLASH_WaitForLastOperation>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003604:	7dfb      	ldrb	r3, [r7, #23]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d133      	bne.n	8003672 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d823      	bhi.n	8003658 <HAL_FLASH_Program+0x84>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <HAL_FLASH_Program+0x44>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	08003635 	.word	0x08003635
 8003620:	08003641 	.word	0x08003641
 8003624:	0800364d 	.word	0x0800364d
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8003628:	783b      	ldrb	r3, [r7, #0]
 800362a:	4619      	mov	r1, r3
 800362c:	68b8      	ldr	r0, [r7, #8]
 800362e:	f000 f921 	bl	8003874 <FLASH_Program_Byte>
        break;
 8003632:	e012      	b.n	800365a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003634:	883b      	ldrh	r3, [r7, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	68b8      	ldr	r0, [r7, #8]
 800363a:	f000 f8f5 	bl	8003828 <FLASH_Program_HalfWord>
        break;
 800363e:	e00c      	b.n	800365a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	4619      	mov	r1, r3
 8003644:	68b8      	ldr	r0, [r7, #8]
 8003646:	f000 f8c9 	bl	80037dc <FLASH_Program_Word>
        break;
 800364a:	e006      	b.n	800365a <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 800364c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003650:	68b8      	ldr	r0, [r7, #8]
 8003652:	f000 f88d 	bl	8003770 <FLASH_Program_DoubleWord>
        break;
 8003656:	e000      	b.n	800365a <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8003658:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800365a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800365e:	f000 f847 	bl	80036f0 <FLASH_WaitForLastOperation>
 8003662:	4603      	mov	r3, r0
 8003664:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003666:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_FLASH_Program+0xb4>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_FLASH_Program+0xb4>)
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <HAL_FLASH_Program+0xb0>)
 8003674:	2200      	movs	r2, #0
 8003676:	751a      	strb	r2, [r3, #20]

  return status;
 8003678:	7dfb      	ldrb	r3, [r7, #23]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	2000a8b8 	.word	0x2000a8b8
 8003688:	40023c00 	.word	0x40023c00

0800368c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003692:	2300      	movs	r3, #0
 8003694:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_FLASH_Unlock+0x38>)
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da0b      	bge.n	80036b6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_FLASH_Unlock+0x38>)
 80036a0:	4a09      	ldr	r2, [pc, #36]	; (80036c8 <HAL_FLASH_Unlock+0x3c>)
 80036a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <HAL_FLASH_Unlock+0x38>)
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <HAL_FLASH_Unlock+0x40>)
 80036a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_FLASH_Unlock+0x38>)
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da01      	bge.n	80036b6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80036b6:	79fb      	ldrb	r3, [r7, #7]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40023c00 	.word	0x40023c00
 80036c8:	45670123 	.word	0x45670123
 80036cc:	cdef89ab 	.word	0xcdef89ab

080036d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_FLASH_Lock+0x1c>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_FLASH_Lock+0x1c>)
 80036da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036de:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40023c00 	.word	0x40023c00

080036f0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036fc:	4b1a      	ldr	r3, [pc, #104]	; (8003768 <FLASH_WaitForLastOperation+0x78>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003702:	f7ff fa3d 	bl	8002b80 <HAL_GetTick>
 8003706:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003708:	e010      	b.n	800372c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003710:	d00c      	beq.n	800372c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d007      	beq.n	8003728 <FLASH_WaitForLastOperation+0x38>
 8003718:	f7ff fa32 	bl	8002b80 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	429a      	cmp	r2, r3
 8003726:	d201      	bcs.n	800372c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e019      	b.n	8003760 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <FLASH_WaitForLastOperation+0x7c>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e8      	bne.n	800370a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <FLASH_WaitForLastOperation+0x7c>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003744:	f000 f8ba 	bl	80038bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e009      	b.n	8003760 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <FLASH_WaitForLastOperation+0x7c>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <FLASH_WaitForLastOperation+0x7c>)
 800375a:	2201      	movs	r2, #1
 800375c:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
  
}  
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2000a8b8 	.word	0x2000a8b8
 800376c:	40023c00 	.word	0x40023c00

08003770 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800377c:	4b16      	ldr	r3, [pc, #88]	; (80037d8 <FLASH_Program_DoubleWord+0x68>)
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	4a15      	ldr	r2, [pc, #84]	; (80037d8 <FLASH_Program_DoubleWord+0x68>)
 8003782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003786:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003788:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <FLASH_Program_DoubleWord+0x68>)
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	4a12      	ldr	r2, [pc, #72]	; (80037d8 <FLASH_Program_DoubleWord+0x68>)
 800378e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003792:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003794:	4b10      	ldr	r3, [pc, #64]	; (80037d8 <FLASH_Program_DoubleWord+0x68>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4a0f      	ldr	r2, [pc, #60]	; (80037d8 <FLASH_Program_DoubleWord+0x68>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80037a6:	f3bf 8f6f 	isb	sy
}
 80037aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80037ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	000a      	movs	r2, r1
 80037ba:	2300      	movs	r3, #0
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	3104      	adds	r1, #4
 80037c0:	4613      	mov	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037c4:	f3bf 8f4f 	dsb	sy
}
 80037c8:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40023c00 	.word	0x40023c00

080037dc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <FLASH_Program_Word+0x48>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <FLASH_Program_Word+0x48>)
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <FLASH_Program_Word+0x48>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <FLASH_Program_Word+0x48>)
 80037f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <FLASH_Program_Word+0x48>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <FLASH_Program_Word+0x48>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8003810:	f3bf 8f4f 	dsb	sy
}
 8003814:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40023c00 	.word	0x40023c00

08003828 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <FLASH_Program_HalfWord+0x48>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a0d      	ldr	r2, [pc, #52]	; (8003870 <FLASH_Program_HalfWord+0x48>)
 800383a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003840:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <FLASH_Program_HalfWord+0x48>)
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <FLASH_Program_HalfWord+0x48>)
 8003846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <FLASH_Program_HalfWord+0x48>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <FLASH_Program_HalfWord+0x48>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800385e:	f3bf 8f4f 	dsb	sy
}
 8003862:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr
 8003870:	40023c00 	.word	0x40023c00

08003874 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <FLASH_Program_Byte+0x44>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <FLASH_Program_Byte+0x44>)
 8003886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800388a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <FLASH_Program_Byte+0x44>)
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <FLASH_Program_Byte+0x44>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <FLASH_Program_Byte+0x44>)
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <FLASH_Program_Byte+0x44>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80038a6:	f3bf 8f4f 	dsb	sy
}
 80038aa:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40023c00 	.word	0x40023c00

080038bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <FLASH_SetErrorCode+0x8c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80038cc:	4b1f      	ldr	r3, [pc, #124]	; (800394c <FLASH_SetErrorCode+0x90>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f043 0320 	orr.w	r3, r3, #32
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <FLASH_SetErrorCode+0x90>)
 80038d6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <FLASH_SetErrorCode+0x8c>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <FLASH_SetErrorCode+0x90>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f043 0310 	orr.w	r3, r3, #16
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <FLASH_SetErrorCode+0x90>)
 80038ee:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <FLASH_SetErrorCode+0x8c>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d005      	beq.n	8003908 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80038fc:	4b13      	ldr	r3, [pc, #76]	; (800394c <FLASH_SetErrorCode+0x90>)
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <FLASH_SetErrorCode+0x90>)
 8003906:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <FLASH_SetErrorCode+0x8c>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <FLASH_SetErrorCode+0x90>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f043 0304 	orr.w	r3, r3, #4
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <FLASH_SetErrorCode+0x90>)
 800391e:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <FLASH_SetErrorCode+0x8c>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <FLASH_SetErrorCode+0x90>)
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	4a05      	ldr	r2, [pc, #20]	; (800394c <FLASH_SetErrorCode+0x90>)
 8003936:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <FLASH_SetErrorCode+0x8c>)
 800393a:	22f2      	movs	r2, #242	; 0xf2
 800393c:	60da      	str	r2, [r3, #12]
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40023c00 	.word	0x40023c00
 800394c:	2000a8b8 	.word	0x2000a8b8

08003950 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e010      	b.n	800398e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d103      	bne.n	800397a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003972:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	e009      	b.n	800398e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d103      	bne.n	8003988 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e002      	b.n	800398e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003988:	f44f 7340 	mov.w	r3, #768	; 0x300
 800398c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800398e:	4b15      	ldr	r3, [pc, #84]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 8003994:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003998:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	4911      	ldr	r1, [pc, #68]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80039b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4313      	orrs	r3, r2
 80039bc:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	4a06      	ldr	r2, [pc, #24]	; (80039e4 <FLASH_Erase_Sector+0x94>)
 80039ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ce:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80039d0:	f3bf 8f4f 	dsb	sy
}
 80039d4:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40023c00 	.word	0x40023c00

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039fa:	2300      	movs	r3, #0
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e175      	b.n	8003cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f040 8164 	bne.w	8003cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d005      	beq.n	8003a3e <HAL_GPIO_Init+0x56>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d130      	bne.n	8003aa0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4013      	ands	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a74:	2201      	movs	r2, #1
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 0201 	and.w	r2, r3, #1
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d017      	beq.n	8003adc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d123      	bne.n	8003b30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	08da      	lsrs	r2, r3, #3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3208      	adds	r2, #8
 8003af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	4013      	ands	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f003 0203 	and.w	r2, r3, #3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80be 	beq.w	8003cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b72:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_GPIO_Init+0x324>)
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	4a65      	ldr	r2, [pc, #404]	; (8003d0c <HAL_GPIO_Init+0x324>)
 8003b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_GPIO_Init+0x324>)
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b8a:	4a61      	ldr	r2, [pc, #388]	; (8003d10 <HAL_GPIO_Init+0x328>)
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	089b      	lsrs	r3, r3, #2
 8003b90:	3302      	adds	r3, #2
 8003b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a58      	ldr	r2, [pc, #352]	; (8003d14 <HAL_GPIO_Init+0x32c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d037      	beq.n	8003c26 <HAL_GPIO_Init+0x23e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a57      	ldr	r2, [pc, #348]	; (8003d18 <HAL_GPIO_Init+0x330>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d031      	beq.n	8003c22 <HAL_GPIO_Init+0x23a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a56      	ldr	r2, [pc, #344]	; (8003d1c <HAL_GPIO_Init+0x334>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d02b      	beq.n	8003c1e <HAL_GPIO_Init+0x236>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a55      	ldr	r2, [pc, #340]	; (8003d20 <HAL_GPIO_Init+0x338>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d025      	beq.n	8003c1a <HAL_GPIO_Init+0x232>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a54      	ldr	r2, [pc, #336]	; (8003d24 <HAL_GPIO_Init+0x33c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01f      	beq.n	8003c16 <HAL_GPIO_Init+0x22e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a53      	ldr	r2, [pc, #332]	; (8003d28 <HAL_GPIO_Init+0x340>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d019      	beq.n	8003c12 <HAL_GPIO_Init+0x22a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a52      	ldr	r2, [pc, #328]	; (8003d2c <HAL_GPIO_Init+0x344>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_GPIO_Init+0x226>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_GPIO_Init+0x348>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d00d      	beq.n	8003c0a <HAL_GPIO_Init+0x222>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a50      	ldr	r2, [pc, #320]	; (8003d34 <HAL_GPIO_Init+0x34c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d007      	beq.n	8003c06 <HAL_GPIO_Init+0x21e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4f      	ldr	r2, [pc, #316]	; (8003d38 <HAL_GPIO_Init+0x350>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d101      	bne.n	8003c02 <HAL_GPIO_Init+0x21a>
 8003bfe:	2309      	movs	r3, #9
 8003c00:	e012      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c02:	230a      	movs	r3, #10
 8003c04:	e010      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c06:	2308      	movs	r3, #8
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0a:	2307      	movs	r3, #7
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x240>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	; (8003d10 <HAL_GPIO_Init+0x328>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c46:	4b3d      	ldr	r3, [pc, #244]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6a:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c94:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9a:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbe:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce8:	4a14      	ldr	r2, [pc, #80]	; (8003d3c <HAL_GPIO_Init+0x354>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae86 	bls.w	8003a08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40022400 	.word	0x40022400
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	e001      	b.n	8003d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	807b      	strh	r3, [r7, #2]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d80:	787b      	ldrb	r3, [r7, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d86:	887a      	ldrh	r2, [r7, #2]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d8c:	e003      	b.n	8003d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	041a      	lsls	r2, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	619a      	str	r2, [r3, #24]
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003db4:	887a      	ldrh	r2, [r7, #2]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4013      	ands	r3, r2
 8003dba:	041a      	lsls	r2, r3, #16
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	43d9      	mvns	r1, r3
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	400b      	ands	r3, r1
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	619a      	str	r2, [r3, #24]
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003de2:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003de4:	695a      	ldr	r2, [r3, #20]
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d006      	beq.n	8003dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f806 	bl	8003e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e20:	b08f      	sub	sp, #60	; 0x3c
 8003e22:	af0a      	add	r7, sp, #40	; 0x28
 8003e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e116      	b.n	800405e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d106      	bne.n	8003e50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7fe faa8 	bl	80023a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2203      	movs	r2, #3
 8003e54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 fbfe 	bl	8006670 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	687e      	ldr	r6, [r7, #4]
 8003e7c:	466d      	mov	r5, sp
 8003e7e:	f106 0410 	add.w	r4, r6, #16
 8003e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e92:	1d33      	adds	r3, r6, #4
 8003e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f002 fb92 	bl	80065c0 <USB_CoreInit>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0d7      	b.n	800405e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f002 fbec 	bl	8006692 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	73fb      	strb	r3, [r7, #15]
 8003ebe:	e04a      	b.n	8003f56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	333d      	adds	r3, #61	; 0x3d
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ed4:	7bfa      	ldrb	r2, [r7, #15]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	333c      	adds	r3, #60	; 0x3c
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	b298      	uxth	r0, r3
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	3344      	adds	r3, #68	; 0x44
 8003efc:	4602      	mov	r2, r0
 8003efe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f00:	7bfa      	ldrb	r2, [r7, #15]
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	440b      	add	r3, r1
 8003f0e:	3340      	adds	r3, #64	; 0x40
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f14:	7bfa      	ldrb	r2, [r7, #15]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	3348      	adds	r3, #72	; 0x48
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	334c      	adds	r3, #76	; 0x4c
 8003f38:	2200      	movs	r2, #0
 8003f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f3c:	7bfa      	ldrb	r2, [r7, #15]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4413      	add	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3354      	adds	r3, #84	; 0x54
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	3301      	adds	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
 8003f56:	7bfa      	ldrb	r2, [r7, #15]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d3af      	bcc.n	8003ec0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	e044      	b.n	8003ff0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f66:	7bfa      	ldrb	r2, [r7, #15]
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	6879      	ldr	r1, [r7, #4]
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	440b      	add	r3, r1
 8003fa0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003fba:	2200      	movs	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
 8003fec:	3301      	adds	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3b5      	bcc.n	8003f66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	687e      	ldr	r6, [r7, #4]
 8004002:	466d      	mov	r5, sp
 8004004:	f106 0410 	add.w	r4, r6, #16
 8004008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800400c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800400e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004014:	e885 0003 	stmia.w	r5, {r0, r1}
 8004018:	1d33      	adds	r3, r6, #4
 800401a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800401c:	6838      	ldr	r0, [r7, #0]
 800401e:	f002 fb85 	bl	800672c <USB_DevInit>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e014      	b.n	800405e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2b01      	cmp	r3, #1
 800404a:	d102      	bne.n	8004052 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f80b 	bl	8004068 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f002 fd43 	bl	8006ae2 <USB_DevDisconnect>

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004068 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_PCDEx_ActivateLPM+0x44>)
 8004098:	4313      	orrs	r3, r2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	10000003 	.word	0x10000003

080040b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b4:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040be:	6013      	str	r3, [r2, #0]
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40007000 	.word	0x40007000

080040d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040d8:	2300      	movs	r3, #0
 80040da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e291      	b.n	800460a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 8087 	beq.w	8004202 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040f4:	4b96      	ldr	r3, [pc, #600]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d00c      	beq.n	800411a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004100:	4b93      	ldr	r3, [pc, #588]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d112      	bne.n	8004132 <HAL_RCC_OscConfig+0x62>
 800410c:	4b90      	ldr	r3, [pc, #576]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004118:	d10b      	bne.n	8004132 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411a:	4b8d      	ldr	r3, [pc, #564]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d06c      	beq.n	8004200 <HAL_RCC_OscConfig+0x130>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d168      	bne.n	8004200 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e26b      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413a:	d106      	bne.n	800414a <HAL_RCC_OscConfig+0x7a>
 800413c:	4b84      	ldr	r3, [pc, #528]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a83      	ldr	r2, [pc, #524]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	e02e      	b.n	80041a8 <HAL_RCC_OscConfig+0xd8>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10c      	bne.n	800416c <HAL_RCC_OscConfig+0x9c>
 8004152:	4b7f      	ldr	r3, [pc, #508]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7e      	ldr	r2, [pc, #504]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b7c      	ldr	r3, [pc, #496]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7b      	ldr	r2, [pc, #492]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e01d      	b.n	80041a8 <HAL_RCC_OscConfig+0xd8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004174:	d10c      	bne.n	8004190 <HAL_RCC_OscConfig+0xc0>
 8004176:	4b76      	ldr	r3, [pc, #472]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a75      	ldr	r2, [pc, #468]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800417c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	4b73      	ldr	r3, [pc, #460]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a72      	ldr	r2, [pc, #456]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e00b      	b.n	80041a8 <HAL_RCC_OscConfig+0xd8>
 8004190:	4b6f      	ldr	r3, [pc, #444]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6e      	ldr	r2, [pc, #440]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b6c      	ldr	r3, [pc, #432]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a6b      	ldr	r2, [pc, #428]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d013      	beq.n	80041d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fe fce6 	bl	8002b80 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b8:	f7fe fce2 	bl	8002b80 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e21f      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ca:	4b61      	ldr	r3, [pc, #388]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe8>
 80041d6:	e014      	b.n	8004202 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe fcd2 	bl	8002b80 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e0:	f7fe fcce 	bl	8002b80 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e20b      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041f2:	4b57      	ldr	r3, [pc, #348]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x110>
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d069      	beq.n	80042e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800420e:	4b50      	ldr	r3, [pc, #320]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800421a:	4b4d      	ldr	r3, [pc, #308]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b08      	cmp	r3, #8
 8004224:	d11c      	bne.n	8004260 <HAL_RCC_OscConfig+0x190>
 8004226:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d116      	bne.n	8004260 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004232:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_RCC_OscConfig+0x17a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d001      	beq.n	800424a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e1df      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424a:	4b41      	ldr	r3, [pc, #260]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	493d      	ldr	r1, [pc, #244]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425e:	e040      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d023      	beq.n	80042b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004268:	4b39      	ldr	r3, [pc, #228]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a38      	ldr	r2, [pc, #224]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fe fc84 	bl	8002b80 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427c:	f7fe fc80 	bl	8002b80 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e1bd      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428e:	4b30      	ldr	r3, [pc, #192]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429a:	4b2d      	ldr	r3, [pc, #180]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	4929      	ldr	r1, [pc, #164]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]
 80042ae:	e018      	b.n	80042e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b0:	4b27      	ldr	r3, [pc, #156]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a26      	ldr	r2, [pc, #152]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042bc:	f7fe fc60 	bl	8002b80 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042c4:	f7fe fc5c 	bl	8002b80 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e199      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1f0      	bne.n	80042c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d038      	beq.n	8004360 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d019      	beq.n	800432a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f6:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80042f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fa:	4a15      	ldr	r2, [pc, #84]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fe fc3d 	bl	8002b80 <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430a:	f7fe fc39 	bl	8002b80 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e176      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCC_OscConfig+0x23a>
 8004328:	e01a      	b.n	8004360 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800432a:	4b09      	ldr	r3, [pc, #36]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <HAL_RCC_OscConfig+0x280>)
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004336:	f7fe fc23 	bl	8002b80 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433c:	e00a      	b.n	8004354 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800433e:	f7fe fc1f 	bl	8002b80 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d903      	bls.n	8004354 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e15c      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
 8004350:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004354:	4b91      	ldr	r3, [pc, #580]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ee      	bne.n	800433e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a4 	beq.w	80044b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436e:	4b8b      	ldr	r3, [pc, #556]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	4b88      	ldr	r3, [pc, #544]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a87      	ldr	r2, [pc, #540]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b85      	ldr	r3, [pc, #532]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004396:	4b82      	ldr	r3, [pc, #520]	; (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80043a2:	4b7f      	ldr	r3, [pc, #508]	; (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7e      	ldr	r2, [pc, #504]	; (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ae:	f7fe fbe7 	bl	8002b80 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fe fbe3 	bl	8002b80 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b64      	cmp	r3, #100	; 0x64
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e120      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c8:	4b75      	ldr	r3, [pc, #468]	; (80045a0 <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x31a>
 80043dc:	4b6f      	ldr	r3, [pc, #444]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a6e      	ldr	r2, [pc, #440]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	e02d      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x33c>
 80043f2:	4b6a      	ldr	r3, [pc, #424]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a69      	ldr	r2, [pc, #420]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
 80043fe:	4b67      	ldr	r3, [pc, #412]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004402:	4a66      	ldr	r2, [pc, #408]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004404:	f023 0304 	bic.w	r3, r3, #4
 8004408:	6713      	str	r3, [r2, #112]	; 0x70
 800440a:	e01c      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	2b05      	cmp	r3, #5
 8004412:	d10c      	bne.n	800442e <HAL_RCC_OscConfig+0x35e>
 8004414:	4b61      	ldr	r3, [pc, #388]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	4a60      	ldr	r2, [pc, #384]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800441a:	f043 0304 	orr.w	r3, r3, #4
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
 8004420:	4b5e      	ldr	r3, [pc, #376]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a5d      	ldr	r2, [pc, #372]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
 800442c:	e00b      	b.n	8004446 <HAL_RCC_OscConfig+0x376>
 800442e:	4b5b      	ldr	r3, [pc, #364]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a5a      	ldr	r2, [pc, #360]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	6713      	str	r3, [r2, #112]	; 0x70
 800443a:	4b58      	ldr	r3, [pc, #352]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443e:	4a57      	ldr	r2, [pc, #348]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004440:	f023 0304 	bic.w	r3, r3, #4
 8004444:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d015      	beq.n	800447a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444e:	f7fe fb97 	bl	8002b80 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004454:	e00a      	b.n	800446c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fe fb93 	bl	8002b80 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0ce      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446c:	4b4b      	ldr	r3, [pc, #300]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ee      	beq.n	8004456 <HAL_RCC_OscConfig+0x386>
 8004478:	e014      	b.n	80044a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447a:	f7fe fb81 	bl	8002b80 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004480:	e00a      	b.n	8004498 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fe fb7d 	bl	8002b80 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e0b8      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004498:	4b40      	ldr	r3, [pc, #256]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1ee      	bne.n	8004482 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044a4:	7dfb      	ldrb	r3, [r7, #23]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d105      	bne.n	80044b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044aa:	4b3c      	ldr	r3, [pc, #240]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	4a3b      	ldr	r2, [pc, #236]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80a4 	beq.w	8004608 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c0:	4b36      	ldr	r3, [pc, #216]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d06b      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d149      	bne.n	8004568 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a30      	ldr	r2, [pc, #192]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80044da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fe fb4e 	bl	8002b80 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fe fb4a 	bl	8002b80 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e087      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	019b      	lsls	r3, r3, #6
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	041b      	lsls	r3, r3, #16
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	4313      	orrs	r3, r2
 800452c:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800452e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004532:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a18      	ldr	r2, [pc, #96]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800453a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fe fb1e 	bl	8002b80 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004548:	f7fe fb1a 	bl	8002b80 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e057      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCC_OscConfig+0x478>
 8004566:	e04f      	b.n	8004608 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0b      	ldr	r2, [pc, #44]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe fb04 	bl	8002b80 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800457c:	f7fe fb00 	bl	8002b80 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e03d      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458e:	4b03      	ldr	r3, [pc, #12]	; (800459c <HAL_RCC_OscConfig+0x4cc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f0      	bne.n	800457c <HAL_RCC_OscConfig+0x4ac>
 800459a:	e035      	b.n	8004608 <HAL_RCC_OscConfig+0x538>
 800459c:	40023800 	.word	0x40023800
 80045a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80045a4:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCC_OscConfig+0x544>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d028      	beq.n	8004604 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d121      	bne.n	8004604 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d11a      	bne.n	8004604 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045dc:	4293      	cmp	r3, r2
 80045de:	d111      	bne.n	8004604 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	3b01      	subs	r3, #1
 80045ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800

08004618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e0d0      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004630:	4b6a      	ldr	r3, [pc, #424]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 030f 	and.w	r3, r3, #15
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d910      	bls.n	8004660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b67      	ldr	r3, [pc, #412]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f023 020f 	bic.w	r2, r3, #15
 8004646:	4965      	ldr	r1, [pc, #404]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800464e:	4b63      	ldr	r3, [pc, #396]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	683a      	ldr	r2, [r7, #0]
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0b8      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d020      	beq.n	80046ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004678:	4b59      	ldr	r3, [pc, #356]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a58      	ldr	r2, [pc, #352]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 800467e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d005      	beq.n	800469c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004690:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004696:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800469a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469c:	4b50      	ldr	r3, [pc, #320]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	494d      	ldr	r1, [pc, #308]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d040      	beq.n	800473c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b47      	ldr	r3, [pc, #284]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d115      	bne.n	80046fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e07f      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046da:	4b41      	ldr	r3, [pc, #260]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e073      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ea:	4b3d      	ldr	r3, [pc, #244]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e06b      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046fa:	4b39      	ldr	r3, [pc, #228]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0203 	bic.w	r2, r3, #3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4936      	ldr	r1, [pc, #216]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004708:	4313      	orrs	r3, r2
 800470a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470c:	f7fe fa38 	bl	8002b80 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fe fa34 	bl	8002b80 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e053      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800472a:	4b2d      	ldr	r3, [pc, #180]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 020c 	and.w	r2, r3, #12
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	429a      	cmp	r2, r3
 800473a:	d1eb      	bne.n	8004714 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d210      	bcs.n	800476c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b24      	ldr	r3, [pc, #144]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 020f 	bic.w	r2, r3, #15
 8004752:	4922      	ldr	r1, [pc, #136]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e032      	b.n	80047d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004778:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4916      	ldr	r1, [pc, #88]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	490e      	ldr	r1, [pc, #56]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047aa:	f000 f821 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	490a      	ldr	r1, [pc, #40]	; (80047e4 <HAL_RCC_ClockConfig+0x1cc>)
 80047bc:	5ccb      	ldrb	r3, [r1, r3]
 80047be:	fa22 f303 	lsr.w	r3, r2, r3
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <HAL_RCC_ClockConfig+0x1d0>)
 80047c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047c6:	4b09      	ldr	r3, [pc, #36]	; (80047ec <HAL_RCC_ClockConfig+0x1d4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe f994 	bl	8002af8 <HAL_InitTick>

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40023c00 	.word	0x40023c00
 80047e0:	40023800 	.word	0x40023800
 80047e4:	0800c970 	.word	0x0800c970
 80047e8:	20000038 	.word	0x20000038
 80047ec:	2000003c 	.word	0x2000003c

080047f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b094      	sub	sp, #80	; 0x50
 80047f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
 80047fc:	2300      	movs	r3, #0
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	2300      	movs	r3, #0
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004808:	4b79      	ldr	r3, [pc, #484]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	2b08      	cmp	r3, #8
 8004812:	d00d      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x40>
 8004814:	2b08      	cmp	r3, #8
 8004816:	f200 80e1 	bhi.w	80049dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x34>
 800481e:	2b04      	cmp	r3, #4
 8004820:	d003      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x3a>
 8004822:	e0db      	b.n	80049dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b73      	ldr	r3, [pc, #460]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004828:	e0db      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482a:	4b73      	ldr	r3, [pc, #460]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800482c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800482e:	e0d8      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b6f      	ldr	r3, [pc, #444]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800483a:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d063      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b6a      	ldr	r3, [pc, #424]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	2200      	movs	r2, #0
 800484e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004850:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
 800485a:	2300      	movs	r3, #0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004862:	4622      	mov	r2, r4
 8004864:	462b      	mov	r3, r5
 8004866:	f04f 0000 	mov.w	r0, #0
 800486a:	f04f 0100 	mov.w	r1, #0
 800486e:	0159      	lsls	r1, r3, #5
 8004870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004874:	0150      	lsls	r0, r2, #5
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4621      	mov	r1, r4
 800487c:	1a51      	subs	r1, r2, r1
 800487e:	6139      	str	r1, [r7, #16]
 8004880:	4629      	mov	r1, r5
 8004882:	eb63 0301 	sbc.w	r3, r3, r1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004894:	4659      	mov	r1, fp
 8004896:	018b      	lsls	r3, r1, #6
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800489e:	4651      	mov	r1, sl
 80048a0:	018a      	lsls	r2, r1, #6
 80048a2:	4651      	mov	r1, sl
 80048a4:	ebb2 0801 	subs.w	r8, r2, r1
 80048a8:	4659      	mov	r1, fp
 80048aa:	eb63 0901 	sbc.w	r9, r3, r1
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048c2:	4690      	mov	r8, r2
 80048c4:	4699      	mov	r9, r3
 80048c6:	4623      	mov	r3, r4
 80048c8:	eb18 0303 	adds.w	r3, r8, r3
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	462b      	mov	r3, r5
 80048d0:	eb49 0303 	adc.w	r3, r9, r3
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048e2:	4629      	mov	r1, r5
 80048e4:	024b      	lsls	r3, r1, #9
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ec:	4621      	mov	r1, r4
 80048ee:	024a      	lsls	r2, r1, #9
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004900:	f7fc f9ec 	bl	8000cdc <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	e058      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	4618      	mov	r0, r3
 8004918:	4611      	mov	r1, r2
 800491a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800491e:	623b      	str	r3, [r7, #32]
 8004920:	2300      	movs	r3, #0
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
 8004924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	f04f 0000 	mov.w	r0, #0
 8004930:	f04f 0100 	mov.w	r1, #0
 8004934:	0159      	lsls	r1, r3, #5
 8004936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800493a:	0150      	lsls	r0, r2, #5
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4641      	mov	r1, r8
 8004942:	ebb2 0a01 	subs.w	sl, r2, r1
 8004946:	4649      	mov	r1, r9
 8004948:	eb63 0b01 	sbc.w	fp, r3, r1
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800495c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004960:	ebb2 040a 	subs.w	r4, r2, sl
 8004964:	eb63 050b 	sbc.w	r5, r3, fp
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	00eb      	lsls	r3, r5, #3
 8004972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004976:	00e2      	lsls	r2, r4, #3
 8004978:	4614      	mov	r4, r2
 800497a:	461d      	mov	r5, r3
 800497c:	4643      	mov	r3, r8
 800497e:	18e3      	adds	r3, r4, r3
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	464b      	mov	r3, r9
 8004984:	eb45 0303 	adc.w	r3, r5, r3
 8004988:	607b      	str	r3, [r7, #4]
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004996:	4629      	mov	r1, r5
 8004998:	028b      	lsls	r3, r1, #10
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049a0:	4621      	mov	r1, r4
 80049a2:	028a      	lsls	r2, r1, #10
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049aa:	2200      	movs	r2, #0
 80049ac:	61bb      	str	r3, [r7, #24]
 80049ae:	61fa      	str	r2, [r7, #28]
 80049b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049b4:	f7fc f992 	bl	8000cdc <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c1b      	lsrs	r3, r3, #16
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	3301      	adds	r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80049d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049da:	e002      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80049de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3750      	adds	r7, #80	; 0x50
 80049e8:	46bd      	mov	sp, r7
 80049ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00f42400 	.word	0x00f42400
 80049f8:	007a1200 	.word	0x007a1200

080049fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a00:	4b03      	ldr	r3, [pc, #12]	; (8004a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a02:	681b      	ldr	r3, [r3, #0]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	20000038 	.word	0x20000038

08004a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a18:	f7ff fff0 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	0a9b      	lsrs	r3, r3, #10
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	4903      	ldr	r1, [pc, #12]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2a:	5ccb      	ldrb	r3, [r1, r3]
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40023800 	.word	0x40023800
 8004a38:	0800c980 	.word	0x0800c980

08004a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a40:	f7ff ffdc 	bl	80049fc <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0b5b      	lsrs	r3, r3, #13
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	0800c980 	.word	0x0800c980

08004a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d012      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a8c:	4b69      	ldr	r3, [pc, #420]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a68      	ldr	r2, [pc, #416]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a96:	6093      	str	r3, [r2, #8]
 8004a98:	4b66      	ldr	r3, [pc, #408]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	4964      	ldr	r1, [pc, #400]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d017      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004abe:	4b5d      	ldr	r3, [pc, #372]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	4959      	ldr	r1, [pc, #356]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d101      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004afa:	4b4e      	ldr	r3, [pc, #312]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	494a      	ldr	r1, [pc, #296]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b18:	d101      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0320 	and.w	r3, r3, #32
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 808b 	beq.w	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b48:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b52:	6413      	str	r3, [r2, #64]	; 0x40
 8004b54:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b60:	4b35      	ldr	r3, [pc, #212]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a34      	ldr	r2, [pc, #208]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6c:	f7fe f808 	bl	8002b80 <HAL_GetTick>
 8004b70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b74:	f7fe f804 	bl	8002b80 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e357      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b86:	4b2c      	ldr	r3, [pc, #176]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b92:	4b28      	ldr	r3, [pc, #160]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d035      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d02e      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bb0:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bba:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc6:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bd2:	4a18      	ldr	r2, [pc, #96]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bd8:	4b16      	ldr	r3, [pc, #88]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d114      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fd ffcc 	bl	8002b80 <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bea:	e00a      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fd ffc8 	bl	8002b80 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e319      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0ee      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1a:	d111      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c2a:	400b      	ands	r3, r1
 8004c2c:	4901      	ldr	r1, [pc, #4]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
 8004c32:	e00b      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c34:	40023800 	.word	0x40023800
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	0ffffcff 	.word	0x0ffffcff
 8004c40:	4baa      	ldr	r3, [pc, #680]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4aa9      	ldr	r2, [pc, #676]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c4a:	6093      	str	r3, [r2, #8]
 8004c4c:	4ba7      	ldr	r3, [pc, #668]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	49a4      	ldr	r1, [pc, #656]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c6a:	4ba0      	ldr	r3, [pc, #640]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c70:	4a9e      	ldr	r2, [pc, #632]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c7a:	4b9c      	ldr	r3, [pc, #624]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	4999      	ldr	r1, [pc, #612]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c98:	4b94      	ldr	r3, [pc, #592]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca6:	4991      	ldr	r1, [pc, #580]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cba:	4b8c      	ldr	r3, [pc, #560]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc8:	4988      	ldr	r1, [pc, #544]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cdc:	4b83      	ldr	r3, [pc, #524]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cea:	4980      	ldr	r1, [pc, #512]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cfe:	4b7b      	ldr	r3, [pc, #492]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0c:	4977      	ldr	r1, [pc, #476]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d20:	4b72      	ldr	r3, [pc, #456]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	496f      	ldr	r1, [pc, #444]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d42:	4b6a      	ldr	r3, [pc, #424]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f023 020c 	bic.w	r2, r3, #12
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	4966      	ldr	r1, [pc, #408]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d64:	4b61      	ldr	r3, [pc, #388]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d72:	495e      	ldr	r1, [pc, #376]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d86:	4b59      	ldr	r3, [pc, #356]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d94:	4955      	ldr	r1, [pc, #340]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004da8:	4b50      	ldr	r3, [pc, #320]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	494d      	ldr	r1, [pc, #308]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dca:	4b48      	ldr	r3, [pc, #288]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	4944      	ldr	r1, [pc, #272]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dec:	4b3f      	ldr	r3, [pc, #252]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfa:	493c      	ldr	r1, [pc, #240]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e0e:	4b37      	ldr	r3, [pc, #220]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1c:	4933      	ldr	r1, [pc, #204]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e30:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e3e:	492b      	ldr	r1, [pc, #172]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e52:	4b26      	ldr	r3, [pc, #152]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e60:	4922      	ldr	r1, [pc, #136]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e70:	d101      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e92:	4b16      	ldr	r3, [pc, #88]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea0:	4912      	ldr	r1, [pc, #72]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00b      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eb4:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec4:	4909      	ldr	r1, [pc, #36]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d006      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80d9 	beq.w	8005092 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ee0:	4b02      	ldr	r3, [pc, #8]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a01      	ldr	r2, [pc, #4]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004eea:	e001      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fd fe45 	bl	8002b80 <HAL_GetTick>
 8004ef6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004efa:	f7fd fe41 	bl	8002b80 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b64      	cmp	r3, #100	; 0x64
 8004f06:	d901      	bls.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e194      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f0c:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1f0      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d021      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d11d      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f2c:	4b64      	ldr	r3, [pc, #400]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f32:	0c1b      	lsrs	r3, r3, #16
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f3a:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	019a      	lsls	r2, r3, #6
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	061b      	lsls	r3, r3, #24
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	071b      	lsls	r3, r3, #28
 8004f60:	4957      	ldr	r1, [pc, #348]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d004      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02e      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f92:	d129      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f94:	4b4a      	ldr	r3, [pc, #296]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	f003 0303 	and.w	r3, r3, #3
 8004fa0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	0f1b      	lsrs	r3, r3, #28
 8004faa:	f003 0307 	and.w	r3, r3, #7
 8004fae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	019a      	lsls	r2, r3, #6
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	061b      	lsls	r3, r3, #24
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	071b      	lsls	r3, r3, #28
 8004fc8:	493d      	ldr	r1, [pc, #244]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fd0:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd6:	f023 021f 	bic.w	r2, r3, #31
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	4937      	ldr	r1, [pc, #220]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01d      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ff4:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffa:	0e1b      	lsrs	r3, r3, #24
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005002:	4b2f      	ldr	r3, [pc, #188]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	0f1b      	lsrs	r3, r3, #28
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	019a      	lsls	r2, r3, #6
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	041b      	lsls	r3, r3, #16
 800501c:	431a      	orrs	r2, r3
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	431a      	orrs	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	071b      	lsls	r3, r3, #28
 8005028:	4925      	ldr	r1, [pc, #148]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	019a      	lsls	r2, r3, #6
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	061b      	lsls	r3, r3, #24
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	071b      	lsls	r3, r3, #28
 8005058:	4919      	ldr	r1, [pc, #100]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a16      	ldr	r2, [pc, #88]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800506a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506c:	f7fd fd88 	bl	8002b80 <HAL_GetTick>
 8005070:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005074:	f7fd fd84 	bl	8002b80 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0d7      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005086:	4b0e      	ldr	r3, [pc, #56]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0f0      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b01      	cmp	r3, #1
 8005096:	f040 80cd 	bne.w	8005234 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800509a:	4b09      	ldr	r3, [pc, #36]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a6:	f7fd fd6b 	bl	8002b80 <HAL_GetTick>
 80050aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050ac:	e00a      	b.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050ae:	f7fd fd67 	bl	8002b80 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d903      	bls.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0ba      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80050c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050c4:	4b5e      	ldr	r3, [pc, #376]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d0:	d0ed      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d02e      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d12a      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050fa:	4b51      	ldr	r3, [pc, #324]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005100:	0c1b      	lsrs	r3, r3, #16
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005108:	4b4d      	ldr	r3, [pc, #308]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	0f1b      	lsrs	r3, r3, #28
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	019a      	lsls	r2, r3, #6
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	041b      	lsls	r3, r3, #16
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	061b      	lsls	r3, r3, #24
 8005128:	431a      	orrs	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	071b      	lsls	r3, r3, #28
 800512e:	4944      	ldr	r1, [pc, #272]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005136:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	493d      	ldr	r1, [pc, #244]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d022      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005164:	d11d      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005166:	4b36      	ldr	r3, [pc, #216]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516c:	0e1b      	lsrs	r3, r3, #24
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005174:	4b32      	ldr	r3, [pc, #200]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	0f1b      	lsrs	r3, r3, #28
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	019a      	lsls	r2, r3, #6
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	041b      	lsls	r3, r3, #16
 800518e:	431a      	orrs	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	4929      	ldr	r1, [pc, #164]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d028      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051ae:	4b24      	ldr	r3, [pc, #144]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	0c1b      	lsrs	r3, r3, #16
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	019a      	lsls	r2, r3, #6
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	071b      	lsls	r3, r3, #28
 80051e2:	4917      	ldr	r1, [pc, #92]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051ea:	4b15      	ldr	r3, [pc, #84]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	4911      	ldr	r1, [pc, #68]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005200:	4b0f      	ldr	r3, [pc, #60]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a0e      	ldr	r2, [pc, #56]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800520c:	f7fd fcb8 	bl	8002b80 <HAL_GetTick>
 8005210:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005214:	f7fd fcb4 	bl	8002b80 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e007      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005232:	d1ef      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3720      	adds	r7, #32
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40023800 	.word	0x40023800

08005244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e09d      	b.n	8005392 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d108      	bne.n	8005270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005266:	d009      	beq.n	800527c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	61da      	str	r2, [r3, #28]
 800526e:	e005      	b.n	800527c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc ff84 	bl	80021a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052bc:	d902      	bls.n	80052c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	e002      	b.n	80052ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052d2:	d007      	beq.n	80052e4 <HAL_SPI_Init+0xa0>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052dc:	d002      	beq.n	80052e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005326:	ea42 0103 	orr.w	r1, r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	f003 0204 	and.w	r2, r3, #4
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005360:	ea42 0103 	orr.w	r1, r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005380:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b088      	sub	sp, #32
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_SPI_Transmit+0x22>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e158      	b.n	800566e <HAL_SPI_Transmit+0x2d4>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c4:	f7fd fbdc 	bl	8002b80 <HAL_GetTick>
 80053c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d002      	beq.n	80053e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053da:	2302      	movs	r3, #2
 80053dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053de:	e13d      	b.n	800565c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_SPI_Transmit+0x52>
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f0:	e134      	b.n	800565c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2203      	movs	r2, #3
 80053f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	88fa      	ldrh	r2, [r7, #6]
 800540a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d10f      	bne.n	800545e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b40      	cmp	r3, #64	; 0x40
 800546a:	d007      	beq.n	800547c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800547a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005484:	d94b      	bls.n	800551e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_SPI_Transmit+0xfa>
 800548e:	8afb      	ldrh	r3, [r7, #22]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d13e      	bne.n	8005512 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054b8:	e02b      	b.n	8005512 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 0302 	and.w	r3, r3, #2
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d112      	bne.n	80054ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054cc:	881a      	ldrh	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	1c9a      	adds	r2, r3, #2
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054ec:	e011      	b.n	8005512 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ee:	f7fd fb47 	bl	8002b80 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d803      	bhi.n	8005506 <HAL_SPI_Transmit+0x16c>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005504:	d102      	bne.n	800550c <HAL_SPI_Transmit+0x172>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005510:	e0a4      	b.n	800565c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005516:	b29b      	uxth	r3, r3
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ce      	bne.n	80054ba <HAL_SPI_Transmit+0x120>
 800551c:	e07c      	b.n	8005618 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_SPI_Transmit+0x192>
 8005526:	8afb      	ldrh	r3, [r7, #22]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d170      	bne.n	800560e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d912      	bls.n	800555c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	881a      	ldrh	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	1c9a      	adds	r2, r3, #2
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b02      	subs	r3, #2
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800555a:	e058      	b.n	800560e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005582:	e044      	b.n	800560e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b02      	cmp	r3, #2
 8005590:	d12b      	bne.n	80055ea <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d912      	bls.n	80055c2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	881a      	ldrh	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	1c9a      	adds	r2, r3, #2
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b02      	subs	r3, #2
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055c0:	e025      	b.n	800560e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	330c      	adds	r3, #12
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e8:	e011      	b.n	800560e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055ea:	f7fd fac9 	bl	8002b80 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	683a      	ldr	r2, [r7, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d803      	bhi.n	8005602 <HAL_SPI_Transmit+0x268>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Transmit+0x26e>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d102      	bne.n	800560e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800560c:	e026      	b.n	800565c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1b5      	bne.n	8005584 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb13 	bl	8005c48 <SPI_EndRxTxTransaction>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2220      	movs	r2, #32
 800562c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	77fb      	strb	r3, [r7, #31]
 8005658:	e000      	b.n	800565c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800565a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800566c:	7ffb      	ldrb	r3, [r7, #31]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_SPI_Transmit_DMA+0x20>
 8005694:	2302      	movs	r3, #2
 8005696:	e0d8      	b.n	800584a <HAL_SPI_Transmit_DMA+0x1d2>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d002      	beq.n	80056b2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
 80056ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056b0:	e0c6      	b.n	8005840 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_SPI_Transmit_DMA+0x46>
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d102      	bne.n	80056c4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056c2:	e0bd      	b.n	8005840 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2203      	movs	r2, #3
 80056c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	88fa      	ldrh	r2, [r7, #6]
 80056e2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570e:	d10f      	bne.n	8005730 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800572e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	4a47      	ldr	r2, [pc, #284]	; (8005854 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	4a46      	ldr	r2, [pc, #280]	; (8005858 <HAL_SPI_Transmit_DMA+0x1e0>)
 800573e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	4a45      	ldr	r2, [pc, #276]	; (800585c <HAL_SPI_Transmit_DMA+0x1e4>)
 8005746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574c:	2200      	movs	r2, #0
 800574e:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800575e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005768:	d82d      	bhi.n	80057c6 <HAL_SPI_Transmit_DMA+0x14e>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005774:	d127      	bne.n	80057c6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10f      	bne.n	80057a4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005792:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005798:	b29b      	uxth	r3, r3
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057a2:	e010      	b.n	80057c6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057b2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3301      	adds	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4619      	mov	r1, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80057de:	f7fd fbbf 	bl	8002f60 <HAL_DMA_Start_IT>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00c      	beq.n	8005802 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	f043 0210 	orr.w	r2, r3, #16
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005800:	e01e      	b.n	8005840 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d007      	beq.n	8005820 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800581e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0220 	orr.w	r2, r2, #32
 800582e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0202 	orr.w	r2, r2, #2
 800583e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005848:	7dfb      	ldrb	r3, [r7, #23]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3718      	adds	r7, #24
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	080059af 	.word	0x080059af
 8005858:	08005907 	.word	0x08005907
 800585c:	080059cb 	.word	0x080059cb

08005860 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00f      	beq.n	8005894 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	4618      	mov	r0, r3
 800587a:	f7fd fbd1 	bl	8003020 <HAL_DMA_Abort>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005888:	f043 0210 	orr.w	r2, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00f      	beq.n	80058bc <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fd fbbd 	bl	8003020 <HAL_DMA_Abort>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b0:	f043 0210 	orr.w	r2, r3, #16
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0203 	bic.w	r2, r2, #3
 80058ca:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005914:	f7fd f934 	bl	8002b80 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005928:	d03b      	beq.n	80059a2 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 0220 	bic.w	r2, r2, #32
 8005938:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0202 	bic.w	r2, r2, #2
 8005948:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	2164      	movs	r1, #100	; 0x64
 800594e:	6978      	ldr	r0, [r7, #20]
 8005950:	f000 f97a 	bl	8005c48 <SPI_EndRxTxTransaction>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800595e:	f043 0220 	orr.w	r2, r3, #32
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800599a:	6978      	ldr	r0, [r7, #20]
 800599c:	f7ff ffa9 	bl	80058f2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059a0:	e002      	b.n	80059a8 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80059a2:	6978      	ldr	r0, [r7, #20]
 80059a4:	f7fc fbb4 	bl	8002110 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff ff8e 	bl	80058de <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059c2:	bf00      	nop
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0203 	bic.w	r2, r2, #3
 80059e6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ec:	f043 0210 	orr.w	r2, r3, #16
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff ff78 	bl	80058f2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a1c:	f7fd f8b0 	bl	8002b80 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	4413      	add	r3, r2
 8005a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a2c:	f7fd f8a8 	bl	8002b80 <HAL_GetTick>
 8005a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a32:	4b39      	ldr	r3, [pc, #228]	; (8005b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	015b      	lsls	r3, r3, #5
 8005a38:	0d1b      	lsrs	r3, r3, #20
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	fb02 f303 	mul.w	r3, r2, r3
 8005a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a42:	e054      	b.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a4a:	d050      	beq.n	8005aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a4c:	f7fd f898 	bl	8002b80 <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d902      	bls.n	8005a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d13d      	bne.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7a:	d111      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a84:	d004      	beq.n	8005a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8e:	d107      	bne.n	8005aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aa8:	d10f      	bne.n	8005aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e017      	b.n	8005b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4013      	ands	r3, r2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	461a      	mov	r2, r3
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d19b      	bne.n	8005a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000038 	.word	0x20000038

08005b1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b2e:	f7fd f827 	bl	8002b80 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005b3e:	f7fd f81f 	bl	8002b80 <HAL_GetTick>
 8005b42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b4c:	4b3d      	ldr	r3, [pc, #244]	; (8005c44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	00da      	lsls	r2, r3, #3
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	0d1b      	lsrs	r3, r3, #20
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	fb02 f303 	mul.w	r3, r2, r3
 8005b62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005b64:	e060      	b.n	8005c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005b6c:	d107      	bne.n	8005b7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b84:	d050      	beq.n	8005c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b86:	f7fc fffb 	bl	8002b80 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d902      	bls.n	8005b9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d13d      	bne.n	8005c18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bb4:	d111      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bbe:	d004      	beq.n	8005bca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d107      	bne.n	8005bda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005be2:	d10f      	bne.n	8005c04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e010      	b.n	8005c3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4013      	ands	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d196      	bne.n	8005b66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3728      	adds	r7, #40	; 0x28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000038 	.word	0x20000038

08005c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff ff5b 	bl	8005b1c <SPI_WaitFifoStateUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c70:	f043 0220 	orr.w	r2, r3, #32
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e046      	b.n	8005d0a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c7c:	4b25      	ldr	r3, [pc, #148]	; (8005d14 <SPI_EndRxTxTransaction+0xcc>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <SPI_EndRxTxTransaction+0xd0>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0d5b      	lsrs	r3, r3, #21
 8005c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9a:	d112      	bne.n	8005cc2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff feb0 	bl	8005a0c <SPI_WaitFlagStateUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e023      	b.n	8005d0a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d0f2      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x7a>
 8005cdc:	e000      	b.n	8005ce0 <SPI_EndRxTxTransaction+0x98>
        break;
 8005cde:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ff15 	bl	8005b1c <SPI_WaitFifoStateUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfc:	f043 0220 	orr.w	r2, r3, #32
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e000      	b.n	8005d0a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	20000038 	.word	0x20000038
 8005d18:	165e9f81 	.word	0x165e9f81

08005d1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d101      	bne.n	8005d2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e040      	b.n	8005db0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d106      	bne.n	8005d44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f7fc face 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2224      	movs	r2, #36	; 0x24
 8005d48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f82c 	bl	8005db8 <UART_SetConfig>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e022      	b.n	8005db0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa84 	bl	8006280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fb0b 	bl	80063c4 <UART_CheckIdleState>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b088      	sub	sp, #32
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	4ba6      	ldr	r3, [pc, #664]	; (800607c <UART_SetConfig+0x2c4>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	6979      	ldr	r1, [r7, #20]
 8005dec:	430b      	orrs	r3, r1
 8005dee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a94      	ldr	r2, [pc, #592]	; (8006080 <UART_SetConfig+0x2c8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d120      	bne.n	8005e76 <UART_SetConfig+0xbe>
 8005e34:	4b93      	ldr	r3, [pc, #588]	; (8006084 <UART_SetConfig+0x2cc>)
 8005e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d816      	bhi.n	8005e70 <UART_SetConfig+0xb8>
 8005e42:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <UART_SetConfig+0x90>)
 8005e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e5f 	.word	0x08005e5f
 8005e54:	08005e6b 	.word	0x08005e6b
 8005e58:	2301      	movs	r3, #1
 8005e5a:	77fb      	strb	r3, [r7, #31]
 8005e5c:	e150      	b.n	8006100 <UART_SetConfig+0x348>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e14d      	b.n	8006100 <UART_SetConfig+0x348>
 8005e64:	2304      	movs	r3, #4
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e14a      	b.n	8006100 <UART_SetConfig+0x348>
 8005e6a:	2308      	movs	r3, #8
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e147      	b.n	8006100 <UART_SetConfig+0x348>
 8005e70:	2310      	movs	r3, #16
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e144      	b.n	8006100 <UART_SetConfig+0x348>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a83      	ldr	r2, [pc, #524]	; (8006088 <UART_SetConfig+0x2d0>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d132      	bne.n	8005ee6 <UART_SetConfig+0x12e>
 8005e80:	4b80      	ldr	r3, [pc, #512]	; (8006084 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e86:	f003 030c 	and.w	r3, r3, #12
 8005e8a:	2b0c      	cmp	r3, #12
 8005e8c:	d828      	bhi.n	8005ee0 <UART_SetConfig+0x128>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <UART_SetConfig+0xdc>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005ec9 	.word	0x08005ec9
 8005e98:	08005ee1 	.word	0x08005ee1
 8005e9c:	08005ee1 	.word	0x08005ee1
 8005ea0:	08005ee1 	.word	0x08005ee1
 8005ea4:	08005ed5 	.word	0x08005ed5
 8005ea8:	08005ee1 	.word	0x08005ee1
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005ee1 	.word	0x08005ee1
 8005eb4:	08005ecf 	.word	0x08005ecf
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005edb 	.word	0x08005edb
 8005ec8:	2300      	movs	r3, #0
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e118      	b.n	8006100 <UART_SetConfig+0x348>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e115      	b.n	8006100 <UART_SetConfig+0x348>
 8005ed4:	2304      	movs	r3, #4
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e112      	b.n	8006100 <UART_SetConfig+0x348>
 8005eda:	2308      	movs	r3, #8
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e10f      	b.n	8006100 <UART_SetConfig+0x348>
 8005ee0:	2310      	movs	r3, #16
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e10c      	b.n	8006100 <UART_SetConfig+0x348>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a68      	ldr	r2, [pc, #416]	; (800608c <UART_SetConfig+0x2d4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d120      	bne.n	8005f32 <UART_SetConfig+0x17a>
 8005ef0:	4b64      	ldr	r3, [pc, #400]	; (8006084 <UART_SetConfig+0x2cc>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005efa:	2b30      	cmp	r3, #48	; 0x30
 8005efc:	d013      	beq.n	8005f26 <UART_SetConfig+0x16e>
 8005efe:	2b30      	cmp	r3, #48	; 0x30
 8005f00:	d814      	bhi.n	8005f2c <UART_SetConfig+0x174>
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d009      	beq.n	8005f1a <UART_SetConfig+0x162>
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d810      	bhi.n	8005f2c <UART_SetConfig+0x174>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <UART_SetConfig+0x15c>
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d006      	beq.n	8005f20 <UART_SetConfig+0x168>
 8005f12:	e00b      	b.n	8005f2c <UART_SetConfig+0x174>
 8005f14:	2300      	movs	r3, #0
 8005f16:	77fb      	strb	r3, [r7, #31]
 8005f18:	e0f2      	b.n	8006100 <UART_SetConfig+0x348>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	77fb      	strb	r3, [r7, #31]
 8005f1e:	e0ef      	b.n	8006100 <UART_SetConfig+0x348>
 8005f20:	2304      	movs	r3, #4
 8005f22:	77fb      	strb	r3, [r7, #31]
 8005f24:	e0ec      	b.n	8006100 <UART_SetConfig+0x348>
 8005f26:	2308      	movs	r3, #8
 8005f28:	77fb      	strb	r3, [r7, #31]
 8005f2a:	e0e9      	b.n	8006100 <UART_SetConfig+0x348>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	77fb      	strb	r3, [r7, #31]
 8005f30:	e0e6      	b.n	8006100 <UART_SetConfig+0x348>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a56      	ldr	r2, [pc, #344]	; (8006090 <UART_SetConfig+0x2d8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d120      	bne.n	8005f7e <UART_SetConfig+0x1c6>
 8005f3c:	4b51      	ldr	r3, [pc, #324]	; (8006084 <UART_SetConfig+0x2cc>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f46:	2bc0      	cmp	r3, #192	; 0xc0
 8005f48:	d013      	beq.n	8005f72 <UART_SetConfig+0x1ba>
 8005f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f4c:	d814      	bhi.n	8005f78 <UART_SetConfig+0x1c0>
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	d009      	beq.n	8005f66 <UART_SetConfig+0x1ae>
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d810      	bhi.n	8005f78 <UART_SetConfig+0x1c0>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <UART_SetConfig+0x1a8>
 8005f5a:	2b40      	cmp	r3, #64	; 0x40
 8005f5c:	d006      	beq.n	8005f6c <UART_SetConfig+0x1b4>
 8005f5e:	e00b      	b.n	8005f78 <UART_SetConfig+0x1c0>
 8005f60:	2300      	movs	r3, #0
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e0cc      	b.n	8006100 <UART_SetConfig+0x348>
 8005f66:	2302      	movs	r3, #2
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e0c9      	b.n	8006100 <UART_SetConfig+0x348>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e0c6      	b.n	8006100 <UART_SetConfig+0x348>
 8005f72:	2308      	movs	r3, #8
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e0c3      	b.n	8006100 <UART_SetConfig+0x348>
 8005f78:	2310      	movs	r3, #16
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e0c0      	b.n	8006100 <UART_SetConfig+0x348>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a44      	ldr	r2, [pc, #272]	; (8006094 <UART_SetConfig+0x2dc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d125      	bne.n	8005fd4 <UART_SetConfig+0x21c>
 8005f88:	4b3e      	ldr	r3, [pc, #248]	; (8006084 <UART_SetConfig+0x2cc>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f96:	d017      	beq.n	8005fc8 <UART_SetConfig+0x210>
 8005f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9c:	d817      	bhi.n	8005fce <UART_SetConfig+0x216>
 8005f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa2:	d00b      	beq.n	8005fbc <UART_SetConfig+0x204>
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d811      	bhi.n	8005fce <UART_SetConfig+0x216>
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <UART_SetConfig+0x1fe>
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d006      	beq.n	8005fc2 <UART_SetConfig+0x20a>
 8005fb4:	e00b      	b.n	8005fce <UART_SetConfig+0x216>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e0a1      	b.n	8006100 <UART_SetConfig+0x348>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e09e      	b.n	8006100 <UART_SetConfig+0x348>
 8005fc2:	2304      	movs	r3, #4
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e09b      	b.n	8006100 <UART_SetConfig+0x348>
 8005fc8:	2308      	movs	r3, #8
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e098      	b.n	8006100 <UART_SetConfig+0x348>
 8005fce:	2310      	movs	r3, #16
 8005fd0:	77fb      	strb	r3, [r7, #31]
 8005fd2:	e095      	b.n	8006100 <UART_SetConfig+0x348>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <UART_SetConfig+0x2e0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d125      	bne.n	800602a <UART_SetConfig+0x272>
 8005fde:	4b29      	ldr	r3, [pc, #164]	; (8006084 <UART_SetConfig+0x2cc>)
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fec:	d017      	beq.n	800601e <UART_SetConfig+0x266>
 8005fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ff2:	d817      	bhi.n	8006024 <UART_SetConfig+0x26c>
 8005ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff8:	d00b      	beq.n	8006012 <UART_SetConfig+0x25a>
 8005ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ffe:	d811      	bhi.n	8006024 <UART_SetConfig+0x26c>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <UART_SetConfig+0x254>
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d006      	beq.n	8006018 <UART_SetConfig+0x260>
 800600a:	e00b      	b.n	8006024 <UART_SetConfig+0x26c>
 800600c:	2301      	movs	r3, #1
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e076      	b.n	8006100 <UART_SetConfig+0x348>
 8006012:	2302      	movs	r3, #2
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e073      	b.n	8006100 <UART_SetConfig+0x348>
 8006018:	2304      	movs	r3, #4
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e070      	b.n	8006100 <UART_SetConfig+0x348>
 800601e:	2308      	movs	r3, #8
 8006020:	77fb      	strb	r3, [r7, #31]
 8006022:	e06d      	b.n	8006100 <UART_SetConfig+0x348>
 8006024:	2310      	movs	r3, #16
 8006026:	77fb      	strb	r3, [r7, #31]
 8006028:	e06a      	b.n	8006100 <UART_SetConfig+0x348>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1b      	ldr	r2, [pc, #108]	; (800609c <UART_SetConfig+0x2e4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d138      	bne.n	80060a6 <UART_SetConfig+0x2ee>
 8006034:	4b13      	ldr	r3, [pc, #76]	; (8006084 <UART_SetConfig+0x2cc>)
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800603a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800603e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006042:	d017      	beq.n	8006074 <UART_SetConfig+0x2bc>
 8006044:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006048:	d82a      	bhi.n	80060a0 <UART_SetConfig+0x2e8>
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d00b      	beq.n	8006068 <UART_SetConfig+0x2b0>
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d824      	bhi.n	80060a0 <UART_SetConfig+0x2e8>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <UART_SetConfig+0x2aa>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	d006      	beq.n	800606e <UART_SetConfig+0x2b6>
 8006060:	e01e      	b.n	80060a0 <UART_SetConfig+0x2e8>
 8006062:	2300      	movs	r3, #0
 8006064:	77fb      	strb	r3, [r7, #31]
 8006066:	e04b      	b.n	8006100 <UART_SetConfig+0x348>
 8006068:	2302      	movs	r3, #2
 800606a:	77fb      	strb	r3, [r7, #31]
 800606c:	e048      	b.n	8006100 <UART_SetConfig+0x348>
 800606e:	2304      	movs	r3, #4
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e045      	b.n	8006100 <UART_SetConfig+0x348>
 8006074:	2308      	movs	r3, #8
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e042      	b.n	8006100 <UART_SetConfig+0x348>
 800607a:	bf00      	nop
 800607c:	efff69f3 	.word	0xefff69f3
 8006080:	40011000 	.word	0x40011000
 8006084:	40023800 	.word	0x40023800
 8006088:	40004400 	.word	0x40004400
 800608c:	40004800 	.word	0x40004800
 8006090:	40004c00 	.word	0x40004c00
 8006094:	40005000 	.word	0x40005000
 8006098:	40011400 	.word	0x40011400
 800609c:	40007800 	.word	0x40007800
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e02c      	b.n	8006100 <UART_SetConfig+0x348>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a72      	ldr	r2, [pc, #456]	; (8006274 <UART_SetConfig+0x4bc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d125      	bne.n	80060fc <UART_SetConfig+0x344>
 80060b0:	4b71      	ldr	r3, [pc, #452]	; (8006278 <UART_SetConfig+0x4c0>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060be:	d017      	beq.n	80060f0 <UART_SetConfig+0x338>
 80060c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060c4:	d817      	bhi.n	80060f6 <UART_SetConfig+0x33e>
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d00b      	beq.n	80060e4 <UART_SetConfig+0x32c>
 80060cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060d0:	d811      	bhi.n	80060f6 <UART_SetConfig+0x33e>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <UART_SetConfig+0x326>
 80060d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060da:	d006      	beq.n	80060ea <UART_SetConfig+0x332>
 80060dc:	e00b      	b.n	80060f6 <UART_SetConfig+0x33e>
 80060de:	2300      	movs	r3, #0
 80060e0:	77fb      	strb	r3, [r7, #31]
 80060e2:	e00d      	b.n	8006100 <UART_SetConfig+0x348>
 80060e4:	2302      	movs	r3, #2
 80060e6:	77fb      	strb	r3, [r7, #31]
 80060e8:	e00a      	b.n	8006100 <UART_SetConfig+0x348>
 80060ea:	2304      	movs	r3, #4
 80060ec:	77fb      	strb	r3, [r7, #31]
 80060ee:	e007      	b.n	8006100 <UART_SetConfig+0x348>
 80060f0:	2308      	movs	r3, #8
 80060f2:	77fb      	strb	r3, [r7, #31]
 80060f4:	e004      	b.n	8006100 <UART_SetConfig+0x348>
 80060f6:	2310      	movs	r3, #16
 80060f8:	77fb      	strb	r3, [r7, #31]
 80060fa:	e001      	b.n	8006100 <UART_SetConfig+0x348>
 80060fc:	2310      	movs	r3, #16
 80060fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006108:	d15b      	bne.n	80061c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800610a:	7ffb      	ldrb	r3, [r7, #31]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d828      	bhi.n	8006162 <UART_SetConfig+0x3aa>
 8006110:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x360>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	0800613d 	.word	0x0800613d
 800611c:	08006145 	.word	0x08006145
 8006120:	0800614d 	.word	0x0800614d
 8006124:	08006163 	.word	0x08006163
 8006128:	08006153 	.word	0x08006153
 800612c:	08006163 	.word	0x08006163
 8006130:	08006163 	.word	0x08006163
 8006134:	08006163 	.word	0x08006163
 8006138:	0800615b 	.word	0x0800615b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800613c:	f7fe fc6a 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 8006140:	61b8      	str	r0, [r7, #24]
        break;
 8006142:	e013      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006144:	f7fe fc7a 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8006148:	61b8      	str	r0, [r7, #24]
        break;
 800614a:	e00f      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800614c:	4b4b      	ldr	r3, [pc, #300]	; (800627c <UART_SetConfig+0x4c4>)
 800614e:	61bb      	str	r3, [r7, #24]
        break;
 8006150:	e00c      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006152:	f7fe fb4d 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 8006156:	61b8      	str	r0, [r7, #24]
        break;
 8006158:	e008      	b.n	800616c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800615a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800615e:	61bb      	str	r3, [r7, #24]
        break;
 8006160:	e004      	b.n	800616c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	77bb      	strb	r3, [r7, #30]
        break;
 800616a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d074      	beq.n	800625c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	005a      	lsls	r2, r3, #1
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	085b      	lsrs	r3, r3, #1
 800617c:	441a      	add	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b0f      	cmp	r3, #15
 800618c:	d916      	bls.n	80061bc <UART_SetConfig+0x404>
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006194:	d212      	bcs.n	80061bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	b29b      	uxth	r3, r3
 800619a:	f023 030f 	bic.w	r3, r3, #15
 800619e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	085b      	lsrs	r3, r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	89fa      	ldrh	r2, [r7, #14]
 80061b8:	60da      	str	r2, [r3, #12]
 80061ba:	e04f      	b.n	800625c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	77bb      	strb	r3, [r7, #30]
 80061c0:	e04c      	b.n	800625c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061c2:	7ffb      	ldrb	r3, [r7, #31]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d828      	bhi.n	800621a <UART_SetConfig+0x462>
 80061c8:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <UART_SetConfig+0x418>)
 80061ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ce:	bf00      	nop
 80061d0:	080061f5 	.word	0x080061f5
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	08006205 	.word	0x08006205
 80061dc:	0800621b 	.word	0x0800621b
 80061e0:	0800620b 	.word	0x0800620b
 80061e4:	0800621b 	.word	0x0800621b
 80061e8:	0800621b 	.word	0x0800621b
 80061ec:	0800621b 	.word	0x0800621b
 80061f0:	08006213 	.word	0x08006213
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061f4:	f7fe fc0e 	bl	8004a14 <HAL_RCC_GetPCLK1Freq>
 80061f8:	61b8      	str	r0, [r7, #24]
        break;
 80061fa:	e013      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061fc:	f7fe fc1e 	bl	8004a3c <HAL_RCC_GetPCLK2Freq>
 8006200:	61b8      	str	r0, [r7, #24]
        break;
 8006202:	e00f      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006204:	4b1d      	ldr	r3, [pc, #116]	; (800627c <UART_SetConfig+0x4c4>)
 8006206:	61bb      	str	r3, [r7, #24]
        break;
 8006208:	e00c      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800620a:	f7fe faf1 	bl	80047f0 <HAL_RCC_GetSysClockFreq>
 800620e:	61b8      	str	r0, [r7, #24]
        break;
 8006210:	e008      	b.n	8006224 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006216:	61bb      	str	r3, [r7, #24]
        break;
 8006218:	e004      	b.n	8006224 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	77bb      	strb	r3, [r7, #30]
        break;
 8006222:	bf00      	nop
    }

    if (pclk != 0U)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	085a      	lsrs	r2, r3, #1
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	441a      	add	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	2b0f      	cmp	r3, #15
 8006242:	d909      	bls.n	8006258 <UART_SetConfig+0x4a0>
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624a:	d205      	bcs.n	8006258 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	e001      	b.n	800625c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006268:	7fbb      	ldrb	r3, [r7, #30]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3720      	adds	r7, #32
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40007c00 	.word	0x40007c00
 8006278:	40023800 	.word	0x40023800
 800627c:	00f42400 	.word	0x00f42400

08006280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637e:	d10a      	bne.n	8006396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d4:	f7fc fbd4 	bl	8002b80 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10e      	bne.n	8006406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f81b 	bl	8006432 <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e011      	b.n	800642a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4613      	mov	r3, r2
 8006440:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006442:	e0a7      	b.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800644a:	f000 80a3 	beq.w	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800644e:	f7fc fb97 	bl	8002b80 <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800645a:	429a      	cmp	r2, r3
 800645c:	d302      	bcc.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
 800645e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006460:	2b00      	cmp	r3, #0
 8006462:	d13f      	bne.n	80064e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006474:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006478:	667b      	str	r3, [r7, #100]	; 0x64
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006482:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006484:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3308      	adds	r3, #8
 800649c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800649e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a0:	e853 3f00 	ldrex	r3, [r3]
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a8:	f023 0301 	bic.w	r3, r3, #1
 80064ac:	663b      	str	r3, [r7, #96]	; 0x60
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80064b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064be:	e841 2300 	strex	r3, r2, [r1]
 80064c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1e5      	bne.n	8006496 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e068      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d050      	beq.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d148      	bne.n	8006594 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800650a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
 800652c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006530:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e6      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	613b      	str	r3, [r7, #16]
   return(result);
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f023 0301 	bic.w	r3, r3, #1
 8006554:	66bb      	str	r3, [r7, #104]	; 0x68
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800655e:	623a      	str	r2, [r7, #32]
 8006560:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	69f9      	ldr	r1, [r7, #28]
 8006564:	6a3a      	ldr	r2, [r7, #32]
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	61bb      	str	r3, [r7, #24]
   return(result);
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e5      	bne.n	800653e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2220      	movs	r2, #32
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e010      	b.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69da      	ldr	r2, [r3, #28]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4013      	ands	r3, r2
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	461a      	mov	r2, r3
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	f43f af48 	beq.w	8006444 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3770      	adds	r7, #112	; 0x70
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c0:	b084      	sub	sp, #16
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	f107 001c 	add.w	r0, r7, #28
 80065ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d120      	bne.n	800661a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	4b20      	ldr	r3, [pc, #128]	; (800666c <USB_CoreInit+0xac>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d105      	bne.n	800660e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa96 	bl	8006b40 <USB_CoreReset>
 8006614:	4603      	mov	r3, r0
 8006616:	73fb      	strb	r3, [r7, #15]
 8006618:	e010      	b.n	800663c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa8a 	bl	8006b40 <USB_CoreReset>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006634:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10b      	bne.n	800665a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f043 0206 	orr.w	r2, r3, #6
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800665a:	7bfb      	ldrb	r3, [r7, #15]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006666:	b004      	add	sp, #16
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	ffbdffbf 	.word	0xffbdffbf

08006670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f023 0201 	bic.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
 800669a:	460b      	mov	r3, r1
 800669c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d115      	bne.n	80066e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066c0:	2001      	movs	r0, #1
 80066c2:	f7fc fa69 	bl	8002b98 <HAL_Delay>
      ms++;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fa29 	bl	8006b24 <USB_GetMode>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d01e      	beq.n	8006716 <USB_SetCurrentMode+0x84>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b31      	cmp	r3, #49	; 0x31
 80066dc:	d9f0      	bls.n	80066c0 <USB_SetCurrentMode+0x2e>
 80066de:	e01a      	b.n	8006716 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d115      	bne.n	8006712 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066f2:	2001      	movs	r0, #1
 80066f4:	f7fc fa50 	bl	8002b98 <HAL_Delay>
      ms++;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	3301      	adds	r3, #1
 80066fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa10 	bl	8006b24 <USB_GetMode>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d005      	beq.n	8006716 <USB_SetCurrentMode+0x84>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b31      	cmp	r3, #49	; 0x31
 800670e:	d9f0      	bls.n	80066f2 <USB_SetCurrentMode+0x60>
 8006710:	e001      	b.n	8006716 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e005      	b.n	8006722 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b32      	cmp	r3, #50	; 0x32
 800671a:	d101      	bne.n	8006720 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800672c:	b084      	sub	sp, #16
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800673a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	e009      	b.n	8006760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3340      	adds	r3, #64	; 0x40
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	2200      	movs	r2, #0
 8006758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b0e      	cmp	r3, #14
 8006764:	d9f2      	bls.n	800674c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d11c      	bne.n	80067a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800677a:	f043 0302 	orr.w	r3, r3, #2
 800677e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	e005      	b.n	80067b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067b8:	461a      	mov	r2, r3
 80067ba:	2300      	movs	r3, #0
 80067bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067c4:	4619      	mov	r1, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067cc:	461a      	mov	r2, r3
 80067ce:	680b      	ldr	r3, [r1, #0]
 80067d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10c      	bne.n	80067f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d104      	bne.n	80067e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067de:	2100      	movs	r1, #0
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f965 	bl	8006ab0 <USB_SetDevSpeed>
 80067e6:	e008      	b.n	80067fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067e8:	2101      	movs	r1, #1
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f960 	bl	8006ab0 <USB_SetDevSpeed>
 80067f0:	e003      	b.n	80067fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067f2:	2103      	movs	r1, #3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f95b 	bl	8006ab0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067fa:	2110      	movs	r1, #16
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f8f3 	bl	80069e8 <USB_FlushTxFifo>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f91f 	bl	8006a50 <USB_FlushRxFifo>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006822:	461a      	mov	r2, r3
 8006824:	2300      	movs	r3, #0
 8006826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	461a      	mov	r2, r3
 8006830:	2300      	movs	r3, #0
 8006832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	461a      	mov	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006840:	2300      	movs	r3, #0
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	e043      	b.n	80068ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685c:	d118      	bne.n	8006890 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10a      	bne.n	800687a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006870:	461a      	mov	r2, r3
 8006872:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e013      	b.n	80068a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	461a      	mov	r2, r3
 8006888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	e008      	b.n	80068a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	461a      	mov	r2, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ae:	461a      	mov	r2, r3
 80068b0:	2300      	movs	r3, #0
 80068b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c0:	461a      	mov	r2, r3
 80068c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	3301      	adds	r3, #1
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d3b7      	bcc.n	8006846 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	e043      	b.n	8006964 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068f2:	d118      	bne.n	8006926 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4413      	add	r3, r2
 8006902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006906:	461a      	mov	r2, r3
 8006908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e013      	b.n	8006938 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	461a      	mov	r2, r3
 800691e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e008      	b.n	8006938 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	461a      	mov	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006944:	461a      	mov	r2, r3
 8006946:	2300      	movs	r3, #0
 8006948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006956:	461a      	mov	r2, r3
 8006958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800695c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3301      	adds	r3, #1
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	429a      	cmp	r2, r3
 800696a:	d3b7      	bcc.n	80068dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800697a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800697e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800698c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b00      	cmp	r3, #0
 8006992:	d105      	bne.n	80069a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f043 0210 	orr.w	r2, r3, #16
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	4b0e      	ldr	r3, [pc, #56]	; (80069e0 <USB_DevInit+0x2b4>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f043 0208 	orr.w	r2, r3, #8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d105      	bne.n	80069d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699a      	ldr	r2, [r3, #24]
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <USB_DevInit+0x2b8>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069dc:	b004      	add	sp, #16
 80069de:	4770      	bx	lr
 80069e0:	803c3800 	.word	0x803c3800
 80069e4:	40000004 	.word	0x40000004

080069e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <USB_FlushTxFifo+0x64>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d901      	bls.n	8006a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e01b      	b.n	8006a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	daf2      	bge.n	80069f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	019b      	lsls	r3, r3, #6
 8006a18:	f043 0220 	orr.w	r2, r3, #32
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <USB_FlushTxFifo+0x64>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d901      	bls.n	8006a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e006      	b.n	8006a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0320 	and.w	r3, r3, #32
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d0f0      	beq.n	8006a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	00030d40 	.word	0x00030d40

08006a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <USB_FlushRxFifo+0x5c>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d901      	bls.n	8006a6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e018      	b.n	8006aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	daf2      	bge.n	8006a5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2210      	movs	r2, #16
 8006a7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4a08      	ldr	r2, [pc, #32]	; (8006aac <USB_FlushRxFifo+0x5c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d901      	bls.n	8006a92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e006      	b.n	8006aa0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	f003 0310 	and.w	r3, r3, #16
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d0f0      	beq.n	8006a80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	00030d40 	.word	0x00030d40

08006ab0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	78fb      	ldrb	r3, [r7, #3]
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b10:	f043 0302 	orr.w	r3, r3, #2
 8006b14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	f003 0301 	and.w	r3, r3, #1
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a13      	ldr	r2, [pc, #76]	; (8006ba4 <USB_CoreReset+0x64>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d901      	bls.n	8006b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e01b      	b.n	8006b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	daf2      	bge.n	8006b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	f043 0201 	orr.w	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4a09      	ldr	r2, [pc, #36]	; (8006ba4 <USB_CoreReset+0x64>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d901      	bls.n	8006b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e006      	b.n	8006b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d0f0      	beq.n	8006b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	00030d40 	.word	0x00030d40

08006ba8 <__cvt>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	ec55 4b10 	vmov	r4, r5, d0
 8006bb0:	2d00      	cmp	r5, #0
 8006bb2:	460e      	mov	r6, r1
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	462b      	mov	r3, r5
 8006bb8:	bfbb      	ittet	lt
 8006bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bbe:	461d      	movlt	r5, r3
 8006bc0:	2300      	movge	r3, #0
 8006bc2:	232d      	movlt	r3, #45	; 0x2d
 8006bc4:	700b      	strb	r3, [r1, #0]
 8006bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bcc:	4691      	mov	r9, r2
 8006bce:	f023 0820 	bic.w	r8, r3, #32
 8006bd2:	bfbc      	itt	lt
 8006bd4:	4622      	movlt	r2, r4
 8006bd6:	4614      	movlt	r4, r2
 8006bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bdc:	d005      	beq.n	8006bea <__cvt+0x42>
 8006bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006be2:	d100      	bne.n	8006be6 <__cvt+0x3e>
 8006be4:	3601      	adds	r6, #1
 8006be6:	2102      	movs	r1, #2
 8006be8:	e000      	b.n	8006bec <__cvt+0x44>
 8006bea:	2103      	movs	r1, #3
 8006bec:	ab03      	add	r3, sp, #12
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	ab02      	add	r3, sp, #8
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	ec45 4b10 	vmov	d0, r4, r5
 8006bf8:	4653      	mov	r3, sl
 8006bfa:	4632      	mov	r2, r6
 8006bfc:	f001 fef0 	bl	80089e0 <_dtoa_r>
 8006c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c04:	4607      	mov	r7, r0
 8006c06:	d102      	bne.n	8006c0e <__cvt+0x66>
 8006c08:	f019 0f01 	tst.w	r9, #1
 8006c0c:	d022      	beq.n	8006c54 <__cvt+0xac>
 8006c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c12:	eb07 0906 	add.w	r9, r7, r6
 8006c16:	d110      	bne.n	8006c3a <__cvt+0x92>
 8006c18:	783b      	ldrb	r3, [r7, #0]
 8006c1a:	2b30      	cmp	r3, #48	; 0x30
 8006c1c:	d10a      	bne.n	8006c34 <__cvt+0x8c>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 ff79 	bl	8000b1c <__aeabi_dcmpeq>
 8006c2a:	b918      	cbnz	r0, 8006c34 <__cvt+0x8c>
 8006c2c:	f1c6 0601 	rsb	r6, r6, #1
 8006c30:	f8ca 6000 	str.w	r6, [sl]
 8006c34:	f8da 3000 	ldr.w	r3, [sl]
 8006c38:	4499      	add	r9, r3
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 ff6b 	bl	8000b1c <__aeabi_dcmpeq>
 8006c46:	b108      	cbz	r0, 8006c4c <__cvt+0xa4>
 8006c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c4c:	2230      	movs	r2, #48	; 0x30
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	454b      	cmp	r3, r9
 8006c52:	d307      	bcc.n	8006c64 <__cvt+0xbc>
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c58:	1bdb      	subs	r3, r3, r7
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	b004      	add	sp, #16
 8006c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c64:	1c59      	adds	r1, r3, #1
 8006c66:	9103      	str	r1, [sp, #12]
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e7f0      	b.n	8006c4e <__cvt+0xa6>

08006c6c <__exponent>:
 8006c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2900      	cmp	r1, #0
 8006c72:	bfb8      	it	lt
 8006c74:	4249      	neglt	r1, r1
 8006c76:	f803 2b02 	strb.w	r2, [r3], #2
 8006c7a:	bfb4      	ite	lt
 8006c7c:	222d      	movlt	r2, #45	; 0x2d
 8006c7e:	222b      	movge	r2, #43	; 0x2b
 8006c80:	2909      	cmp	r1, #9
 8006c82:	7042      	strb	r2, [r0, #1]
 8006c84:	dd2a      	ble.n	8006cdc <__exponent+0x70>
 8006c86:	f10d 0207 	add.w	r2, sp, #7
 8006c8a:	4617      	mov	r7, r2
 8006c8c:	260a      	movs	r6, #10
 8006c8e:	4694      	mov	ip, r2
 8006c90:	fb91 f5f6 	sdiv	r5, r1, r6
 8006c94:	fb06 1415 	mls	r4, r6, r5, r1
 8006c98:	3430      	adds	r4, #48	; 0x30
 8006c9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006c9e:	460c      	mov	r4, r1
 8006ca0:	2c63      	cmp	r4, #99	; 0x63
 8006ca2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	dcf1      	bgt.n	8006c8e <__exponent+0x22>
 8006caa:	3130      	adds	r1, #48	; 0x30
 8006cac:	f1ac 0402 	sub.w	r4, ip, #2
 8006cb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006cb4:	1c41      	adds	r1, r0, #1
 8006cb6:	4622      	mov	r2, r4
 8006cb8:	42ba      	cmp	r2, r7
 8006cba:	d30a      	bcc.n	8006cd2 <__exponent+0x66>
 8006cbc:	f10d 0209 	add.w	r2, sp, #9
 8006cc0:	eba2 020c 	sub.w	r2, r2, ip
 8006cc4:	42bc      	cmp	r4, r7
 8006cc6:	bf88      	it	hi
 8006cc8:	2200      	movhi	r2, #0
 8006cca:	4413      	add	r3, r2
 8006ccc:	1a18      	subs	r0, r3, r0
 8006cce:	b003      	add	sp, #12
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006cd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006cda:	e7ed      	b.n	8006cb8 <__exponent+0x4c>
 8006cdc:	2330      	movs	r3, #48	; 0x30
 8006cde:	3130      	adds	r1, #48	; 0x30
 8006ce0:	7083      	strb	r3, [r0, #2]
 8006ce2:	70c1      	strb	r1, [r0, #3]
 8006ce4:	1d03      	adds	r3, r0, #4
 8006ce6:	e7f1      	b.n	8006ccc <__exponent+0x60>

08006ce8 <_printf_float>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b02 	vpush	{d8}
 8006cf0:	b08d      	sub	sp, #52	; 0x34
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cf8:	4616      	mov	r6, r2
 8006cfa:	461f      	mov	r7, r3
 8006cfc:	4605      	mov	r5, r0
 8006cfe:	f001 fd97 	bl	8008830 <_localeconv_r>
 8006d02:	f8d0 a000 	ldr.w	sl, [r0]
 8006d06:	4650      	mov	r0, sl
 8006d08:	f7f9 fad2 	bl	80002b0 <strlen>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	9305      	str	r3, [sp, #20]
 8006d14:	f8d8 3000 	ldr.w	r3, [r8]
 8006d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	f103 0208 	add.w	r2, r3, #8
 8006d26:	f8c8 2000 	str.w	r2, [r8]
 8006d2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d32:	9307      	str	r3, [sp, #28]
 8006d34:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d38:	ee08 0a10 	vmov	s16, r0
 8006d3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006d40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d44:	4b9e      	ldr	r3, [pc, #632]	; (8006fc0 <_printf_float+0x2d8>)
 8006d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d4a:	f7f9 ff19 	bl	8000b80 <__aeabi_dcmpun>
 8006d4e:	bb88      	cbnz	r0, 8006db4 <_printf_float+0xcc>
 8006d50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d54:	4b9a      	ldr	r3, [pc, #616]	; (8006fc0 <_printf_float+0x2d8>)
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d5a:	f7f9 fef3 	bl	8000b44 <__aeabi_dcmple>
 8006d5e:	bb48      	cbnz	r0, 8006db4 <_printf_float+0xcc>
 8006d60:	2200      	movs	r2, #0
 8006d62:	2300      	movs	r3, #0
 8006d64:	4640      	mov	r0, r8
 8006d66:	4649      	mov	r1, r9
 8006d68:	f7f9 fee2 	bl	8000b30 <__aeabi_dcmplt>
 8006d6c:	b110      	cbz	r0, 8006d74 <_printf_float+0x8c>
 8006d6e:	232d      	movs	r3, #45	; 0x2d
 8006d70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d74:	4a93      	ldr	r2, [pc, #588]	; (8006fc4 <_printf_float+0x2dc>)
 8006d76:	4b94      	ldr	r3, [pc, #592]	; (8006fc8 <_printf_float+0x2e0>)
 8006d78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d7c:	bf94      	ite	ls
 8006d7e:	4690      	movls	r8, r2
 8006d80:	4698      	movhi	r8, r3
 8006d82:	2303      	movs	r3, #3
 8006d84:	6123      	str	r3, [r4, #16]
 8006d86:	9b05      	ldr	r3, [sp, #20]
 8006d88:	f023 0304 	bic.w	r3, r3, #4
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	9700      	str	r7, [sp, #0]
 8006d94:	4633      	mov	r3, r6
 8006d96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d98:	4621      	mov	r1, r4
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f000 f9da 	bl	8007154 <_printf_common>
 8006da0:	3001      	adds	r0, #1
 8006da2:	f040 8090 	bne.w	8006ec6 <_printf_float+0x1de>
 8006da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006daa:	b00d      	add	sp, #52	; 0x34
 8006dac:	ecbd 8b02 	vpop	{d8}
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	4642      	mov	r2, r8
 8006db6:	464b      	mov	r3, r9
 8006db8:	4640      	mov	r0, r8
 8006dba:	4649      	mov	r1, r9
 8006dbc:	f7f9 fee0 	bl	8000b80 <__aeabi_dcmpun>
 8006dc0:	b140      	cbz	r0, 8006dd4 <_printf_float+0xec>
 8006dc2:	464b      	mov	r3, r9
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bfbc      	itt	lt
 8006dc8:	232d      	movlt	r3, #45	; 0x2d
 8006dca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dce:	4a7f      	ldr	r2, [pc, #508]	; (8006fcc <_printf_float+0x2e4>)
 8006dd0:	4b7f      	ldr	r3, [pc, #508]	; (8006fd0 <_printf_float+0x2e8>)
 8006dd2:	e7d1      	b.n	8006d78 <_printf_float+0x90>
 8006dd4:	6863      	ldr	r3, [r4, #4]
 8006dd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dda:	9206      	str	r2, [sp, #24]
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	d13f      	bne.n	8006e60 <_printf_float+0x178>
 8006de0:	2306      	movs	r3, #6
 8006de2:	6063      	str	r3, [r4, #4]
 8006de4:	9b05      	ldr	r3, [sp, #20]
 8006de6:	6861      	ldr	r1, [r4, #4]
 8006de8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006dec:	2300      	movs	r3, #0
 8006dee:	9303      	str	r3, [sp, #12]
 8006df0:	ab0a      	add	r3, sp, #40	; 0x28
 8006df2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006df6:	ab09      	add	r3, sp, #36	; 0x24
 8006df8:	ec49 8b10 	vmov	d0, r8, r9
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	6022      	str	r2, [r4, #0]
 8006e00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e04:	4628      	mov	r0, r5
 8006e06:	f7ff fecf 	bl	8006ba8 <__cvt>
 8006e0a:	9b06      	ldr	r3, [sp, #24]
 8006e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e0e:	2b47      	cmp	r3, #71	; 0x47
 8006e10:	4680      	mov	r8, r0
 8006e12:	d108      	bne.n	8006e26 <_printf_float+0x13e>
 8006e14:	1cc8      	adds	r0, r1, #3
 8006e16:	db02      	blt.n	8006e1e <_printf_float+0x136>
 8006e18:	6863      	ldr	r3, [r4, #4]
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	dd41      	ble.n	8006ea2 <_printf_float+0x1ba>
 8006e1e:	f1ab 0302 	sub.w	r3, fp, #2
 8006e22:	fa5f fb83 	uxtb.w	fp, r3
 8006e26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e2a:	d820      	bhi.n	8006e6e <_printf_float+0x186>
 8006e2c:	3901      	subs	r1, #1
 8006e2e:	465a      	mov	r2, fp
 8006e30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e34:	9109      	str	r1, [sp, #36]	; 0x24
 8006e36:	f7ff ff19 	bl	8006c6c <__exponent>
 8006e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e3c:	1813      	adds	r3, r2, r0
 8006e3e:	2a01      	cmp	r2, #1
 8006e40:	4681      	mov	r9, r0
 8006e42:	6123      	str	r3, [r4, #16]
 8006e44:	dc02      	bgt.n	8006e4c <_printf_float+0x164>
 8006e46:	6822      	ldr	r2, [r4, #0]
 8006e48:	07d2      	lsls	r2, r2, #31
 8006e4a:	d501      	bpl.n	8006e50 <_printf_float+0x168>
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	6123      	str	r3, [r4, #16]
 8006e50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d09c      	beq.n	8006d92 <_printf_float+0xaa>
 8006e58:	232d      	movs	r3, #45	; 0x2d
 8006e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e5e:	e798      	b.n	8006d92 <_printf_float+0xaa>
 8006e60:	9a06      	ldr	r2, [sp, #24]
 8006e62:	2a47      	cmp	r2, #71	; 0x47
 8006e64:	d1be      	bne.n	8006de4 <_printf_float+0xfc>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1bc      	bne.n	8006de4 <_printf_float+0xfc>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e7b9      	b.n	8006de2 <_printf_float+0xfa>
 8006e6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e72:	d118      	bne.n	8006ea6 <_printf_float+0x1be>
 8006e74:	2900      	cmp	r1, #0
 8006e76:	6863      	ldr	r3, [r4, #4]
 8006e78:	dd0b      	ble.n	8006e92 <_printf_float+0x1aa>
 8006e7a:	6121      	str	r1, [r4, #16]
 8006e7c:	b913      	cbnz	r3, 8006e84 <_printf_float+0x19c>
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	07d0      	lsls	r0, r2, #31
 8006e82:	d502      	bpl.n	8006e8a <_printf_float+0x1a2>
 8006e84:	3301      	adds	r3, #1
 8006e86:	440b      	add	r3, r1
 8006e88:	6123      	str	r3, [r4, #16]
 8006e8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e8c:	f04f 0900 	mov.w	r9, #0
 8006e90:	e7de      	b.n	8006e50 <_printf_float+0x168>
 8006e92:	b913      	cbnz	r3, 8006e9a <_printf_float+0x1b2>
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	07d2      	lsls	r2, r2, #31
 8006e98:	d501      	bpl.n	8006e9e <_printf_float+0x1b6>
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	e7f4      	b.n	8006e88 <_printf_float+0x1a0>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e7f2      	b.n	8006e88 <_printf_float+0x1a0>
 8006ea2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	db05      	blt.n	8006eb8 <_printf_float+0x1d0>
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	6121      	str	r1, [r4, #16]
 8006eb0:	07d8      	lsls	r0, r3, #31
 8006eb2:	d5ea      	bpl.n	8006e8a <_printf_float+0x1a2>
 8006eb4:	1c4b      	adds	r3, r1, #1
 8006eb6:	e7e7      	b.n	8006e88 <_printf_float+0x1a0>
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	bfd4      	ite	le
 8006ebc:	f1c1 0202 	rsble	r2, r1, #2
 8006ec0:	2201      	movgt	r2, #1
 8006ec2:	4413      	add	r3, r2
 8006ec4:	e7e0      	b.n	8006e88 <_printf_float+0x1a0>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	055a      	lsls	r2, r3, #21
 8006eca:	d407      	bmi.n	8006edc <_printf_float+0x1f4>
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	4642      	mov	r2, r8
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	47b8      	blx	r7
 8006ed6:	3001      	adds	r0, #1
 8006ed8:	d12c      	bne.n	8006f34 <_printf_float+0x24c>
 8006eda:	e764      	b.n	8006da6 <_printf_float+0xbe>
 8006edc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ee0:	f240 80e0 	bls.w	80070a4 <_printf_float+0x3bc>
 8006ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	f7f9 fe16 	bl	8000b1c <__aeabi_dcmpeq>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	d034      	beq.n	8006f5e <_printf_float+0x276>
 8006ef4:	4a37      	ldr	r2, [pc, #220]	; (8006fd4 <_printf_float+0x2ec>)
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f af51 	beq.w	8006da6 <_printf_float+0xbe>
 8006f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	db02      	blt.n	8006f12 <_printf_float+0x22a>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	07d8      	lsls	r0, r3, #31
 8006f10:	d510      	bpl.n	8006f34 <_printf_float+0x24c>
 8006f12:	ee18 3a10 	vmov	r3, s16
 8006f16:	4652      	mov	r2, sl
 8006f18:	4631      	mov	r1, r6
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	47b8      	blx	r7
 8006f1e:	3001      	adds	r0, #1
 8006f20:	f43f af41 	beq.w	8006da6 <_printf_float+0xbe>
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	f104 091a 	add.w	r9, r4, #26
 8006f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	4543      	cmp	r3, r8
 8006f32:	dc09      	bgt.n	8006f48 <_printf_float+0x260>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	079b      	lsls	r3, r3, #30
 8006f38:	f100 8107 	bmi.w	800714a <_printf_float+0x462>
 8006f3c:	68e0      	ldr	r0, [r4, #12]
 8006f3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f40:	4298      	cmp	r0, r3
 8006f42:	bfb8      	it	lt
 8006f44:	4618      	movlt	r0, r3
 8006f46:	e730      	b.n	8006daa <_printf_float+0xc2>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	464a      	mov	r2, r9
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	f43f af27 	beq.w	8006da6 <_printf_float+0xbe>
 8006f58:	f108 0801 	add.w	r8, r8, #1
 8006f5c:	e7e6      	b.n	8006f2c <_printf_float+0x244>
 8006f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	dc39      	bgt.n	8006fd8 <_printf_float+0x2f0>
 8006f64:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <_printf_float+0x2ec>)
 8006f66:	2301      	movs	r3, #1
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	47b8      	blx	r7
 8006f6e:	3001      	adds	r0, #1
 8006f70:	f43f af19 	beq.w	8006da6 <_printf_float+0xbe>
 8006f74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	d102      	bne.n	8006f82 <_printf_float+0x29a>
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	07d9      	lsls	r1, r3, #31
 8006f80:	d5d8      	bpl.n	8006f34 <_printf_float+0x24c>
 8006f82:	ee18 3a10 	vmov	r3, s16
 8006f86:	4652      	mov	r2, sl
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	47b8      	blx	r7
 8006f8e:	3001      	adds	r0, #1
 8006f90:	f43f af09 	beq.w	8006da6 <_printf_float+0xbe>
 8006f94:	f04f 0900 	mov.w	r9, #0
 8006f98:	f104 0a1a 	add.w	sl, r4, #26
 8006f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9e:	425b      	negs	r3, r3
 8006fa0:	454b      	cmp	r3, r9
 8006fa2:	dc01      	bgt.n	8006fa8 <_printf_float+0x2c0>
 8006fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa6:	e792      	b.n	8006ece <_printf_float+0x1e6>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4652      	mov	r2, sl
 8006fac:	4631      	mov	r1, r6
 8006fae:	4628      	mov	r0, r5
 8006fb0:	47b8      	blx	r7
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f43f aef7 	beq.w	8006da6 <_printf_float+0xbe>
 8006fb8:	f109 0901 	add.w	r9, r9, #1
 8006fbc:	e7ee      	b.n	8006f9c <_printf_float+0x2b4>
 8006fbe:	bf00      	nop
 8006fc0:	7fefffff 	.word	0x7fefffff
 8006fc4:	0800c990 	.word	0x0800c990
 8006fc8:	0800c994 	.word	0x0800c994
 8006fcc:	0800c998 	.word	0x0800c998
 8006fd0:	0800c99c 	.word	0x0800c99c
 8006fd4:	0800c9a0 	.word	0x0800c9a0
 8006fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	bfa8      	it	ge
 8006fe0:	461a      	movge	r2, r3
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	4691      	mov	r9, r2
 8006fe6:	dc37      	bgt.n	8007058 <_printf_float+0x370>
 8006fe8:	f04f 0b00 	mov.w	fp, #0
 8006fec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ff0:	f104 021a 	add.w	r2, r4, #26
 8006ff4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	eba3 0309 	sub.w	r3, r3, r9
 8006ffc:	455b      	cmp	r3, fp
 8006ffe:	dc33      	bgt.n	8007068 <_printf_float+0x380>
 8007000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007004:	429a      	cmp	r2, r3
 8007006:	db3b      	blt.n	8007080 <_printf_float+0x398>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	07da      	lsls	r2, r3, #31
 800700c:	d438      	bmi.n	8007080 <_printf_float+0x398>
 800700e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007012:	eba2 0903 	sub.w	r9, r2, r3
 8007016:	9b05      	ldr	r3, [sp, #20]
 8007018:	1ad2      	subs	r2, r2, r3
 800701a:	4591      	cmp	r9, r2
 800701c:	bfa8      	it	ge
 800701e:	4691      	movge	r9, r2
 8007020:	f1b9 0f00 	cmp.w	r9, #0
 8007024:	dc35      	bgt.n	8007092 <_printf_float+0x3aa>
 8007026:	f04f 0800 	mov.w	r8, #0
 800702a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800702e:	f104 0a1a 	add.w	sl, r4, #26
 8007032:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	eba3 0309 	sub.w	r3, r3, r9
 800703c:	4543      	cmp	r3, r8
 800703e:	f77f af79 	ble.w	8006f34 <_printf_float+0x24c>
 8007042:	2301      	movs	r3, #1
 8007044:	4652      	mov	r2, sl
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	f43f aeaa 	beq.w	8006da6 <_printf_float+0xbe>
 8007052:	f108 0801 	add.w	r8, r8, #1
 8007056:	e7ec      	b.n	8007032 <_printf_float+0x34a>
 8007058:	4613      	mov	r3, r2
 800705a:	4631      	mov	r1, r6
 800705c:	4642      	mov	r2, r8
 800705e:	4628      	mov	r0, r5
 8007060:	47b8      	blx	r7
 8007062:	3001      	adds	r0, #1
 8007064:	d1c0      	bne.n	8006fe8 <_printf_float+0x300>
 8007066:	e69e      	b.n	8006da6 <_printf_float+0xbe>
 8007068:	2301      	movs	r3, #1
 800706a:	4631      	mov	r1, r6
 800706c:	4628      	mov	r0, r5
 800706e:	9205      	str	r2, [sp, #20]
 8007070:	47b8      	blx	r7
 8007072:	3001      	adds	r0, #1
 8007074:	f43f ae97 	beq.w	8006da6 <_printf_float+0xbe>
 8007078:	9a05      	ldr	r2, [sp, #20]
 800707a:	f10b 0b01 	add.w	fp, fp, #1
 800707e:	e7b9      	b.n	8006ff4 <_printf_float+0x30c>
 8007080:	ee18 3a10 	vmov	r3, s16
 8007084:	4652      	mov	r2, sl
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	d1be      	bne.n	800700e <_printf_float+0x326>
 8007090:	e689      	b.n	8006da6 <_printf_float+0xbe>
 8007092:	9a05      	ldr	r2, [sp, #20]
 8007094:	464b      	mov	r3, r9
 8007096:	4442      	add	r2, r8
 8007098:	4631      	mov	r1, r6
 800709a:	4628      	mov	r0, r5
 800709c:	47b8      	blx	r7
 800709e:	3001      	adds	r0, #1
 80070a0:	d1c1      	bne.n	8007026 <_printf_float+0x33e>
 80070a2:	e680      	b.n	8006da6 <_printf_float+0xbe>
 80070a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070a6:	2a01      	cmp	r2, #1
 80070a8:	dc01      	bgt.n	80070ae <_printf_float+0x3c6>
 80070aa:	07db      	lsls	r3, r3, #31
 80070ac:	d53a      	bpl.n	8007124 <_printf_float+0x43c>
 80070ae:	2301      	movs	r3, #1
 80070b0:	4642      	mov	r2, r8
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f ae74 	beq.w	8006da6 <_printf_float+0xbe>
 80070be:	ee18 3a10 	vmov	r3, s16
 80070c2:	4652      	mov	r2, sl
 80070c4:	4631      	mov	r1, r6
 80070c6:	4628      	mov	r0, r5
 80070c8:	47b8      	blx	r7
 80070ca:	3001      	adds	r0, #1
 80070cc:	f43f ae6b 	beq.w	8006da6 <_printf_float+0xbe>
 80070d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070d4:	2200      	movs	r2, #0
 80070d6:	2300      	movs	r3, #0
 80070d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80070dc:	f7f9 fd1e 	bl	8000b1c <__aeabi_dcmpeq>
 80070e0:	b9d8      	cbnz	r0, 800711a <_printf_float+0x432>
 80070e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80070e6:	f108 0201 	add.w	r2, r8, #1
 80070ea:	4631      	mov	r1, r6
 80070ec:	4628      	mov	r0, r5
 80070ee:	47b8      	blx	r7
 80070f0:	3001      	adds	r0, #1
 80070f2:	d10e      	bne.n	8007112 <_printf_float+0x42a>
 80070f4:	e657      	b.n	8006da6 <_printf_float+0xbe>
 80070f6:	2301      	movs	r3, #1
 80070f8:	4652      	mov	r2, sl
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	f43f ae50 	beq.w	8006da6 <_printf_float+0xbe>
 8007106:	f108 0801 	add.w	r8, r8, #1
 800710a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710c:	3b01      	subs	r3, #1
 800710e:	4543      	cmp	r3, r8
 8007110:	dcf1      	bgt.n	80070f6 <_printf_float+0x40e>
 8007112:	464b      	mov	r3, r9
 8007114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007118:	e6da      	b.n	8006ed0 <_printf_float+0x1e8>
 800711a:	f04f 0800 	mov.w	r8, #0
 800711e:	f104 0a1a 	add.w	sl, r4, #26
 8007122:	e7f2      	b.n	800710a <_printf_float+0x422>
 8007124:	2301      	movs	r3, #1
 8007126:	4642      	mov	r2, r8
 8007128:	e7df      	b.n	80070ea <_printf_float+0x402>
 800712a:	2301      	movs	r3, #1
 800712c:	464a      	mov	r2, r9
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae36 	beq.w	8006da6 <_printf_float+0xbe>
 800713a:	f108 0801 	add.w	r8, r8, #1
 800713e:	68e3      	ldr	r3, [r4, #12]
 8007140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007142:	1a5b      	subs	r3, r3, r1
 8007144:	4543      	cmp	r3, r8
 8007146:	dcf0      	bgt.n	800712a <_printf_float+0x442>
 8007148:	e6f8      	b.n	8006f3c <_printf_float+0x254>
 800714a:	f04f 0800 	mov.w	r8, #0
 800714e:	f104 0919 	add.w	r9, r4, #25
 8007152:	e7f4      	b.n	800713e <_printf_float+0x456>

08007154 <_printf_common>:
 8007154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	4616      	mov	r6, r2
 800715a:	4699      	mov	r9, r3
 800715c:	688a      	ldr	r2, [r1, #8]
 800715e:	690b      	ldr	r3, [r1, #16]
 8007160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007164:	4293      	cmp	r3, r2
 8007166:	bfb8      	it	lt
 8007168:	4613      	movlt	r3, r2
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007170:	4607      	mov	r7, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b10a      	cbz	r2, 800717a <_printf_common+0x26>
 8007176:	3301      	adds	r3, #1
 8007178:	6033      	str	r3, [r6, #0]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	0699      	lsls	r1, r3, #26
 800717e:	bf42      	ittt	mi
 8007180:	6833      	ldrmi	r3, [r6, #0]
 8007182:	3302      	addmi	r3, #2
 8007184:	6033      	strmi	r3, [r6, #0]
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	f015 0506 	ands.w	r5, r5, #6
 800718c:	d106      	bne.n	800719c <_printf_common+0x48>
 800718e:	f104 0a19 	add.w	sl, r4, #25
 8007192:	68e3      	ldr	r3, [r4, #12]
 8007194:	6832      	ldr	r2, [r6, #0]
 8007196:	1a9b      	subs	r3, r3, r2
 8007198:	42ab      	cmp	r3, r5
 800719a:	dc26      	bgt.n	80071ea <_printf_common+0x96>
 800719c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80071a0:	1e13      	subs	r3, r2, #0
 80071a2:	6822      	ldr	r2, [r4, #0]
 80071a4:	bf18      	it	ne
 80071a6:	2301      	movne	r3, #1
 80071a8:	0692      	lsls	r2, r2, #26
 80071aa:	d42b      	bmi.n	8007204 <_printf_common+0xb0>
 80071ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071b0:	4649      	mov	r1, r9
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	3001      	adds	r0, #1
 80071b8:	d01e      	beq.n	80071f8 <_printf_common+0xa4>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	6922      	ldr	r2, [r4, #16]
 80071be:	f003 0306 	and.w	r3, r3, #6
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	bf02      	ittt	eq
 80071c6:	68e5      	ldreq	r5, [r4, #12]
 80071c8:	6833      	ldreq	r3, [r6, #0]
 80071ca:	1aed      	subeq	r5, r5, r3
 80071cc:	68a3      	ldr	r3, [r4, #8]
 80071ce:	bf0c      	ite	eq
 80071d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071d4:	2500      	movne	r5, #0
 80071d6:	4293      	cmp	r3, r2
 80071d8:	bfc4      	itt	gt
 80071da:	1a9b      	subgt	r3, r3, r2
 80071dc:	18ed      	addgt	r5, r5, r3
 80071de:	2600      	movs	r6, #0
 80071e0:	341a      	adds	r4, #26
 80071e2:	42b5      	cmp	r5, r6
 80071e4:	d11a      	bne.n	800721c <_printf_common+0xc8>
 80071e6:	2000      	movs	r0, #0
 80071e8:	e008      	b.n	80071fc <_printf_common+0xa8>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4649      	mov	r1, r9
 80071f0:	4638      	mov	r0, r7
 80071f2:	47c0      	blx	r8
 80071f4:	3001      	adds	r0, #1
 80071f6:	d103      	bne.n	8007200 <_printf_common+0xac>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007200:	3501      	adds	r5, #1
 8007202:	e7c6      	b.n	8007192 <_printf_common+0x3e>
 8007204:	18e1      	adds	r1, r4, r3
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	2030      	movs	r0, #48	; 0x30
 800720a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800720e:	4422      	add	r2, r4
 8007210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007218:	3302      	adds	r3, #2
 800721a:	e7c7      	b.n	80071ac <_printf_common+0x58>
 800721c:	2301      	movs	r3, #1
 800721e:	4622      	mov	r2, r4
 8007220:	4649      	mov	r1, r9
 8007222:	4638      	mov	r0, r7
 8007224:	47c0      	blx	r8
 8007226:	3001      	adds	r0, #1
 8007228:	d0e6      	beq.n	80071f8 <_printf_common+0xa4>
 800722a:	3601      	adds	r6, #1
 800722c:	e7d9      	b.n	80071e2 <_printf_common+0x8e>
	...

08007230 <_printf_i>:
 8007230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	7e0f      	ldrb	r7, [r1, #24]
 8007236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007238:	2f78      	cmp	r7, #120	; 0x78
 800723a:	4691      	mov	r9, r2
 800723c:	4680      	mov	r8, r0
 800723e:	460c      	mov	r4, r1
 8007240:	469a      	mov	sl, r3
 8007242:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007246:	d807      	bhi.n	8007258 <_printf_i+0x28>
 8007248:	2f62      	cmp	r7, #98	; 0x62
 800724a:	d80a      	bhi.n	8007262 <_printf_i+0x32>
 800724c:	2f00      	cmp	r7, #0
 800724e:	f000 80d4 	beq.w	80073fa <_printf_i+0x1ca>
 8007252:	2f58      	cmp	r7, #88	; 0x58
 8007254:	f000 80c0 	beq.w	80073d8 <_printf_i+0x1a8>
 8007258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800725c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007260:	e03a      	b.n	80072d8 <_printf_i+0xa8>
 8007262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007266:	2b15      	cmp	r3, #21
 8007268:	d8f6      	bhi.n	8007258 <_printf_i+0x28>
 800726a:	a101      	add	r1, pc, #4	; (adr r1, 8007270 <_printf_i+0x40>)
 800726c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007270:	080072c9 	.word	0x080072c9
 8007274:	080072dd 	.word	0x080072dd
 8007278:	08007259 	.word	0x08007259
 800727c:	08007259 	.word	0x08007259
 8007280:	08007259 	.word	0x08007259
 8007284:	08007259 	.word	0x08007259
 8007288:	080072dd 	.word	0x080072dd
 800728c:	08007259 	.word	0x08007259
 8007290:	08007259 	.word	0x08007259
 8007294:	08007259 	.word	0x08007259
 8007298:	08007259 	.word	0x08007259
 800729c:	080073e1 	.word	0x080073e1
 80072a0:	08007309 	.word	0x08007309
 80072a4:	0800739b 	.word	0x0800739b
 80072a8:	08007259 	.word	0x08007259
 80072ac:	08007259 	.word	0x08007259
 80072b0:	08007403 	.word	0x08007403
 80072b4:	08007259 	.word	0x08007259
 80072b8:	08007309 	.word	0x08007309
 80072bc:	08007259 	.word	0x08007259
 80072c0:	08007259 	.word	0x08007259
 80072c4:	080073a3 	.word	0x080073a3
 80072c8:	682b      	ldr	r3, [r5, #0]
 80072ca:	1d1a      	adds	r2, r3, #4
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	602a      	str	r2, [r5, #0]
 80072d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072d8:	2301      	movs	r3, #1
 80072da:	e09f      	b.n	800741c <_printf_i+0x1ec>
 80072dc:	6820      	ldr	r0, [r4, #0]
 80072de:	682b      	ldr	r3, [r5, #0]
 80072e0:	0607      	lsls	r7, r0, #24
 80072e2:	f103 0104 	add.w	r1, r3, #4
 80072e6:	6029      	str	r1, [r5, #0]
 80072e8:	d501      	bpl.n	80072ee <_printf_i+0xbe>
 80072ea:	681e      	ldr	r6, [r3, #0]
 80072ec:	e003      	b.n	80072f6 <_printf_i+0xc6>
 80072ee:	0646      	lsls	r6, r0, #25
 80072f0:	d5fb      	bpl.n	80072ea <_printf_i+0xba>
 80072f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80072f6:	2e00      	cmp	r6, #0
 80072f8:	da03      	bge.n	8007302 <_printf_i+0xd2>
 80072fa:	232d      	movs	r3, #45	; 0x2d
 80072fc:	4276      	negs	r6, r6
 80072fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007302:	485a      	ldr	r0, [pc, #360]	; (800746c <_printf_i+0x23c>)
 8007304:	230a      	movs	r3, #10
 8007306:	e012      	b.n	800732e <_printf_i+0xfe>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	6820      	ldr	r0, [r4, #0]
 800730c:	1d19      	adds	r1, r3, #4
 800730e:	6029      	str	r1, [r5, #0]
 8007310:	0605      	lsls	r5, r0, #24
 8007312:	d501      	bpl.n	8007318 <_printf_i+0xe8>
 8007314:	681e      	ldr	r6, [r3, #0]
 8007316:	e002      	b.n	800731e <_printf_i+0xee>
 8007318:	0641      	lsls	r1, r0, #25
 800731a:	d5fb      	bpl.n	8007314 <_printf_i+0xe4>
 800731c:	881e      	ldrh	r6, [r3, #0]
 800731e:	4853      	ldr	r0, [pc, #332]	; (800746c <_printf_i+0x23c>)
 8007320:	2f6f      	cmp	r7, #111	; 0x6f
 8007322:	bf0c      	ite	eq
 8007324:	2308      	moveq	r3, #8
 8007326:	230a      	movne	r3, #10
 8007328:	2100      	movs	r1, #0
 800732a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800732e:	6865      	ldr	r5, [r4, #4]
 8007330:	60a5      	str	r5, [r4, #8]
 8007332:	2d00      	cmp	r5, #0
 8007334:	bfa2      	ittt	ge
 8007336:	6821      	ldrge	r1, [r4, #0]
 8007338:	f021 0104 	bicge.w	r1, r1, #4
 800733c:	6021      	strge	r1, [r4, #0]
 800733e:	b90e      	cbnz	r6, 8007344 <_printf_i+0x114>
 8007340:	2d00      	cmp	r5, #0
 8007342:	d04b      	beq.n	80073dc <_printf_i+0x1ac>
 8007344:	4615      	mov	r5, r2
 8007346:	fbb6 f1f3 	udiv	r1, r6, r3
 800734a:	fb03 6711 	mls	r7, r3, r1, r6
 800734e:	5dc7      	ldrb	r7, [r0, r7]
 8007350:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007354:	4637      	mov	r7, r6
 8007356:	42bb      	cmp	r3, r7
 8007358:	460e      	mov	r6, r1
 800735a:	d9f4      	bls.n	8007346 <_printf_i+0x116>
 800735c:	2b08      	cmp	r3, #8
 800735e:	d10b      	bne.n	8007378 <_printf_i+0x148>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	07de      	lsls	r6, r3, #31
 8007364:	d508      	bpl.n	8007378 <_printf_i+0x148>
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	6861      	ldr	r1, [r4, #4]
 800736a:	4299      	cmp	r1, r3
 800736c:	bfde      	ittt	le
 800736e:	2330      	movle	r3, #48	; 0x30
 8007370:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007374:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007378:	1b52      	subs	r2, r2, r5
 800737a:	6122      	str	r2, [r4, #16]
 800737c:	f8cd a000 	str.w	sl, [sp]
 8007380:	464b      	mov	r3, r9
 8007382:	aa03      	add	r2, sp, #12
 8007384:	4621      	mov	r1, r4
 8007386:	4640      	mov	r0, r8
 8007388:	f7ff fee4 	bl	8007154 <_printf_common>
 800738c:	3001      	adds	r0, #1
 800738e:	d14a      	bne.n	8007426 <_printf_i+0x1f6>
 8007390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007394:	b004      	add	sp, #16
 8007396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f043 0320 	orr.w	r3, r3, #32
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	4833      	ldr	r0, [pc, #204]	; (8007470 <_printf_i+0x240>)
 80073a4:	2778      	movs	r7, #120	; 0x78
 80073a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80073aa:	6823      	ldr	r3, [r4, #0]
 80073ac:	6829      	ldr	r1, [r5, #0]
 80073ae:	061f      	lsls	r7, r3, #24
 80073b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80073b4:	d402      	bmi.n	80073bc <_printf_i+0x18c>
 80073b6:	065f      	lsls	r7, r3, #25
 80073b8:	bf48      	it	mi
 80073ba:	b2b6      	uxthmi	r6, r6
 80073bc:	07df      	lsls	r7, r3, #31
 80073be:	bf48      	it	mi
 80073c0:	f043 0320 	orrmi.w	r3, r3, #32
 80073c4:	6029      	str	r1, [r5, #0]
 80073c6:	bf48      	it	mi
 80073c8:	6023      	strmi	r3, [r4, #0]
 80073ca:	b91e      	cbnz	r6, 80073d4 <_printf_i+0x1a4>
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	f023 0320 	bic.w	r3, r3, #32
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	2310      	movs	r3, #16
 80073d6:	e7a7      	b.n	8007328 <_printf_i+0xf8>
 80073d8:	4824      	ldr	r0, [pc, #144]	; (800746c <_printf_i+0x23c>)
 80073da:	e7e4      	b.n	80073a6 <_printf_i+0x176>
 80073dc:	4615      	mov	r5, r2
 80073de:	e7bd      	b.n	800735c <_printf_i+0x12c>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	6826      	ldr	r6, [r4, #0]
 80073e4:	6961      	ldr	r1, [r4, #20]
 80073e6:	1d18      	adds	r0, r3, #4
 80073e8:	6028      	str	r0, [r5, #0]
 80073ea:	0635      	lsls	r5, r6, #24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0x1c4>
 80073f0:	6019      	str	r1, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0x1ca>
 80073f4:	0670      	lsls	r0, r6, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0x1c0>
 80073f8:	8019      	strh	r1, [r3, #0]
 80073fa:	2300      	movs	r3, #0
 80073fc:	6123      	str	r3, [r4, #16]
 80073fe:	4615      	mov	r5, r2
 8007400:	e7bc      	b.n	800737c <_printf_i+0x14c>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	1d1a      	adds	r2, r3, #4
 8007406:	602a      	str	r2, [r5, #0]
 8007408:	681d      	ldr	r5, [r3, #0]
 800740a:	6862      	ldr	r2, [r4, #4]
 800740c:	2100      	movs	r1, #0
 800740e:	4628      	mov	r0, r5
 8007410:	f7f8 fefe 	bl	8000210 <memchr>
 8007414:	b108      	cbz	r0, 800741a <_printf_i+0x1ea>
 8007416:	1b40      	subs	r0, r0, r5
 8007418:	6060      	str	r0, [r4, #4]
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	6123      	str	r3, [r4, #16]
 800741e:	2300      	movs	r3, #0
 8007420:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007424:	e7aa      	b.n	800737c <_printf_i+0x14c>
 8007426:	6923      	ldr	r3, [r4, #16]
 8007428:	462a      	mov	r2, r5
 800742a:	4649      	mov	r1, r9
 800742c:	4640      	mov	r0, r8
 800742e:	47d0      	blx	sl
 8007430:	3001      	adds	r0, #1
 8007432:	d0ad      	beq.n	8007390 <_printf_i+0x160>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	079b      	lsls	r3, r3, #30
 8007438:	d413      	bmi.n	8007462 <_printf_i+0x232>
 800743a:	68e0      	ldr	r0, [r4, #12]
 800743c:	9b03      	ldr	r3, [sp, #12]
 800743e:	4298      	cmp	r0, r3
 8007440:	bfb8      	it	lt
 8007442:	4618      	movlt	r0, r3
 8007444:	e7a6      	b.n	8007394 <_printf_i+0x164>
 8007446:	2301      	movs	r3, #1
 8007448:	4632      	mov	r2, r6
 800744a:	4649      	mov	r1, r9
 800744c:	4640      	mov	r0, r8
 800744e:	47d0      	blx	sl
 8007450:	3001      	adds	r0, #1
 8007452:	d09d      	beq.n	8007390 <_printf_i+0x160>
 8007454:	3501      	adds	r5, #1
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	9903      	ldr	r1, [sp, #12]
 800745a:	1a5b      	subs	r3, r3, r1
 800745c:	42ab      	cmp	r3, r5
 800745e:	dcf2      	bgt.n	8007446 <_printf_i+0x216>
 8007460:	e7eb      	b.n	800743a <_printf_i+0x20a>
 8007462:	2500      	movs	r5, #0
 8007464:	f104 0619 	add.w	r6, r4, #25
 8007468:	e7f5      	b.n	8007456 <_printf_i+0x226>
 800746a:	bf00      	nop
 800746c:	0800c9a2 	.word	0x0800c9a2
 8007470:	0800c9b3 	.word	0x0800c9b3

08007474 <_scanf_float>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	b087      	sub	sp, #28
 800747a:	4617      	mov	r7, r2
 800747c:	9303      	str	r3, [sp, #12]
 800747e:	688b      	ldr	r3, [r1, #8]
 8007480:	1e5a      	subs	r2, r3, #1
 8007482:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007486:	bf83      	ittte	hi
 8007488:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800748c:	195b      	addhi	r3, r3, r5
 800748e:	9302      	strhi	r3, [sp, #8]
 8007490:	2300      	movls	r3, #0
 8007492:	bf86      	itte	hi
 8007494:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007498:	608b      	strhi	r3, [r1, #8]
 800749a:	9302      	strls	r3, [sp, #8]
 800749c:	680b      	ldr	r3, [r1, #0]
 800749e:	468b      	mov	fp, r1
 80074a0:	2500      	movs	r5, #0
 80074a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80074a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80074aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074ae:	4680      	mov	r8, r0
 80074b0:	460c      	mov	r4, r1
 80074b2:	465e      	mov	r6, fp
 80074b4:	46aa      	mov	sl, r5
 80074b6:	46a9      	mov	r9, r5
 80074b8:	9501      	str	r5, [sp, #4]
 80074ba:	68a2      	ldr	r2, [r4, #8]
 80074bc:	b152      	cbz	r2, 80074d4 <_scanf_float+0x60>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b4e      	cmp	r3, #78	; 0x4e
 80074c4:	d864      	bhi.n	8007590 <_scanf_float+0x11c>
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	d83c      	bhi.n	8007544 <_scanf_float+0xd0>
 80074ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80074ce:	b2c8      	uxtb	r0, r1
 80074d0:	280e      	cmp	r0, #14
 80074d2:	d93a      	bls.n	800754a <_scanf_float+0xd6>
 80074d4:	f1b9 0f00 	cmp.w	r9, #0
 80074d8:	d003      	beq.n	80074e2 <_scanf_float+0x6e>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80074e6:	f1ba 0f01 	cmp.w	sl, #1
 80074ea:	f200 8113 	bhi.w	8007714 <_scanf_float+0x2a0>
 80074ee:	455e      	cmp	r6, fp
 80074f0:	f200 8105 	bhi.w	80076fe <_scanf_float+0x28a>
 80074f4:	2501      	movs	r5, #1
 80074f6:	4628      	mov	r0, r5
 80074f8:	b007      	add	sp, #28
 80074fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007502:	2a0d      	cmp	r2, #13
 8007504:	d8e6      	bhi.n	80074d4 <_scanf_float+0x60>
 8007506:	a101      	add	r1, pc, #4	; (adr r1, 800750c <_scanf_float+0x98>)
 8007508:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800750c:	0800764b 	.word	0x0800764b
 8007510:	080074d5 	.word	0x080074d5
 8007514:	080074d5 	.word	0x080074d5
 8007518:	080074d5 	.word	0x080074d5
 800751c:	080076ab 	.word	0x080076ab
 8007520:	08007683 	.word	0x08007683
 8007524:	080074d5 	.word	0x080074d5
 8007528:	080074d5 	.word	0x080074d5
 800752c:	08007659 	.word	0x08007659
 8007530:	080074d5 	.word	0x080074d5
 8007534:	080074d5 	.word	0x080074d5
 8007538:	080074d5 	.word	0x080074d5
 800753c:	080074d5 	.word	0x080074d5
 8007540:	08007611 	.word	0x08007611
 8007544:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007548:	e7db      	b.n	8007502 <_scanf_float+0x8e>
 800754a:	290e      	cmp	r1, #14
 800754c:	d8c2      	bhi.n	80074d4 <_scanf_float+0x60>
 800754e:	a001      	add	r0, pc, #4	; (adr r0, 8007554 <_scanf_float+0xe0>)
 8007550:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007554:	08007603 	.word	0x08007603
 8007558:	080074d5 	.word	0x080074d5
 800755c:	08007603 	.word	0x08007603
 8007560:	08007697 	.word	0x08007697
 8007564:	080074d5 	.word	0x080074d5
 8007568:	080075b1 	.word	0x080075b1
 800756c:	080075ed 	.word	0x080075ed
 8007570:	080075ed 	.word	0x080075ed
 8007574:	080075ed 	.word	0x080075ed
 8007578:	080075ed 	.word	0x080075ed
 800757c:	080075ed 	.word	0x080075ed
 8007580:	080075ed 	.word	0x080075ed
 8007584:	080075ed 	.word	0x080075ed
 8007588:	080075ed 	.word	0x080075ed
 800758c:	080075ed 	.word	0x080075ed
 8007590:	2b6e      	cmp	r3, #110	; 0x6e
 8007592:	d809      	bhi.n	80075a8 <_scanf_float+0x134>
 8007594:	2b60      	cmp	r3, #96	; 0x60
 8007596:	d8b2      	bhi.n	80074fe <_scanf_float+0x8a>
 8007598:	2b54      	cmp	r3, #84	; 0x54
 800759a:	d077      	beq.n	800768c <_scanf_float+0x218>
 800759c:	2b59      	cmp	r3, #89	; 0x59
 800759e:	d199      	bne.n	80074d4 <_scanf_float+0x60>
 80075a0:	2d07      	cmp	r5, #7
 80075a2:	d197      	bne.n	80074d4 <_scanf_float+0x60>
 80075a4:	2508      	movs	r5, #8
 80075a6:	e029      	b.n	80075fc <_scanf_float+0x188>
 80075a8:	2b74      	cmp	r3, #116	; 0x74
 80075aa:	d06f      	beq.n	800768c <_scanf_float+0x218>
 80075ac:	2b79      	cmp	r3, #121	; 0x79
 80075ae:	e7f6      	b.n	800759e <_scanf_float+0x12a>
 80075b0:	6821      	ldr	r1, [r4, #0]
 80075b2:	05c8      	lsls	r0, r1, #23
 80075b4:	d51a      	bpl.n	80075ec <_scanf_float+0x178>
 80075b6:	9b02      	ldr	r3, [sp, #8]
 80075b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80075bc:	6021      	str	r1, [r4, #0]
 80075be:	f109 0901 	add.w	r9, r9, #1
 80075c2:	b11b      	cbz	r3, 80075cc <_scanf_float+0x158>
 80075c4:	3b01      	subs	r3, #1
 80075c6:	3201      	adds	r2, #1
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	60a2      	str	r2, [r4, #8]
 80075cc:	68a3      	ldr	r3, [r4, #8]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	60a3      	str	r3, [r4, #8]
 80075d2:	6923      	ldr	r3, [r4, #16]
 80075d4:	3301      	adds	r3, #1
 80075d6:	6123      	str	r3, [r4, #16]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3b01      	subs	r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	f340 8084 	ble.w	80076ec <_scanf_float+0x278>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	3301      	adds	r3, #1
 80075e8:	603b      	str	r3, [r7, #0]
 80075ea:	e766      	b.n	80074ba <_scanf_float+0x46>
 80075ec:	eb1a 0f05 	cmn.w	sl, r5
 80075f0:	f47f af70 	bne.w	80074d4 <_scanf_float+0x60>
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007600:	e7e4      	b.n	80075cc <_scanf_float+0x158>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	0610      	lsls	r0, r2, #24
 8007606:	f57f af65 	bpl.w	80074d4 <_scanf_float+0x60>
 800760a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800760e:	e7f4      	b.n	80075fa <_scanf_float+0x186>
 8007610:	f1ba 0f00 	cmp.w	sl, #0
 8007614:	d10e      	bne.n	8007634 <_scanf_float+0x1c0>
 8007616:	f1b9 0f00 	cmp.w	r9, #0
 800761a:	d10e      	bne.n	800763a <_scanf_float+0x1c6>
 800761c:	6822      	ldr	r2, [r4, #0]
 800761e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007622:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007626:	d108      	bne.n	800763a <_scanf_float+0x1c6>
 8007628:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800762c:	6022      	str	r2, [r4, #0]
 800762e:	f04f 0a01 	mov.w	sl, #1
 8007632:	e7e3      	b.n	80075fc <_scanf_float+0x188>
 8007634:	f1ba 0f02 	cmp.w	sl, #2
 8007638:	d055      	beq.n	80076e6 <_scanf_float+0x272>
 800763a:	2d01      	cmp	r5, #1
 800763c:	d002      	beq.n	8007644 <_scanf_float+0x1d0>
 800763e:	2d04      	cmp	r5, #4
 8007640:	f47f af48 	bne.w	80074d4 <_scanf_float+0x60>
 8007644:	3501      	adds	r5, #1
 8007646:	b2ed      	uxtb	r5, r5
 8007648:	e7d8      	b.n	80075fc <_scanf_float+0x188>
 800764a:	f1ba 0f01 	cmp.w	sl, #1
 800764e:	f47f af41 	bne.w	80074d4 <_scanf_float+0x60>
 8007652:	f04f 0a02 	mov.w	sl, #2
 8007656:	e7d1      	b.n	80075fc <_scanf_float+0x188>
 8007658:	b97d      	cbnz	r5, 800767a <_scanf_float+0x206>
 800765a:	f1b9 0f00 	cmp.w	r9, #0
 800765e:	f47f af3c 	bne.w	80074da <_scanf_float+0x66>
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007668:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800766c:	f47f af39 	bne.w	80074e2 <_scanf_float+0x6e>
 8007670:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007674:	6022      	str	r2, [r4, #0]
 8007676:	2501      	movs	r5, #1
 8007678:	e7c0      	b.n	80075fc <_scanf_float+0x188>
 800767a:	2d03      	cmp	r5, #3
 800767c:	d0e2      	beq.n	8007644 <_scanf_float+0x1d0>
 800767e:	2d05      	cmp	r5, #5
 8007680:	e7de      	b.n	8007640 <_scanf_float+0x1cc>
 8007682:	2d02      	cmp	r5, #2
 8007684:	f47f af26 	bne.w	80074d4 <_scanf_float+0x60>
 8007688:	2503      	movs	r5, #3
 800768a:	e7b7      	b.n	80075fc <_scanf_float+0x188>
 800768c:	2d06      	cmp	r5, #6
 800768e:	f47f af21 	bne.w	80074d4 <_scanf_float+0x60>
 8007692:	2507      	movs	r5, #7
 8007694:	e7b2      	b.n	80075fc <_scanf_float+0x188>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	0591      	lsls	r1, r2, #22
 800769a:	f57f af1b 	bpl.w	80074d4 <_scanf_float+0x60>
 800769e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80076a2:	6022      	str	r2, [r4, #0]
 80076a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80076a8:	e7a8      	b.n	80075fc <_scanf_float+0x188>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80076b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076b4:	d006      	beq.n	80076c4 <_scanf_float+0x250>
 80076b6:	0550      	lsls	r0, r2, #21
 80076b8:	f57f af0c 	bpl.w	80074d4 <_scanf_float+0x60>
 80076bc:	f1b9 0f00 	cmp.w	r9, #0
 80076c0:	f43f af0f 	beq.w	80074e2 <_scanf_float+0x6e>
 80076c4:	0591      	lsls	r1, r2, #22
 80076c6:	bf58      	it	pl
 80076c8:	9901      	ldrpl	r1, [sp, #4]
 80076ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076ce:	bf58      	it	pl
 80076d0:	eba9 0101 	subpl.w	r1, r9, r1
 80076d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80076d8:	bf58      	it	pl
 80076da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	f04f 0900 	mov.w	r9, #0
 80076e4:	e78a      	b.n	80075fc <_scanf_float+0x188>
 80076e6:	f04f 0a03 	mov.w	sl, #3
 80076ea:	e787      	b.n	80075fc <_scanf_float+0x188>
 80076ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076f0:	4639      	mov	r1, r7
 80076f2:	4640      	mov	r0, r8
 80076f4:	4798      	blx	r3
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f43f aedf 	beq.w	80074ba <_scanf_float+0x46>
 80076fc:	e6ea      	b.n	80074d4 <_scanf_float+0x60>
 80076fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007706:	463a      	mov	r2, r7
 8007708:	4640      	mov	r0, r8
 800770a:	4798      	blx	r3
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	3b01      	subs	r3, #1
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	e6ec      	b.n	80074ee <_scanf_float+0x7a>
 8007714:	1e6b      	subs	r3, r5, #1
 8007716:	2b06      	cmp	r3, #6
 8007718:	d825      	bhi.n	8007766 <_scanf_float+0x2f2>
 800771a:	2d02      	cmp	r5, #2
 800771c:	d836      	bhi.n	800778c <_scanf_float+0x318>
 800771e:	455e      	cmp	r6, fp
 8007720:	f67f aee8 	bls.w	80074f4 <_scanf_float+0x80>
 8007724:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007728:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800772c:	463a      	mov	r2, r7
 800772e:	4640      	mov	r0, r8
 8007730:	4798      	blx	r3
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	3b01      	subs	r3, #1
 8007736:	6123      	str	r3, [r4, #16]
 8007738:	e7f1      	b.n	800771e <_scanf_float+0x2aa>
 800773a:	9802      	ldr	r0, [sp, #8]
 800773c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007740:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007744:	9002      	str	r0, [sp, #8]
 8007746:	463a      	mov	r2, r7
 8007748:	4640      	mov	r0, r8
 800774a:	4798      	blx	r3
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	3b01      	subs	r3, #1
 8007750:	6123      	str	r3, [r4, #16]
 8007752:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007756:	fa5f fa8a 	uxtb.w	sl, sl
 800775a:	f1ba 0f02 	cmp.w	sl, #2
 800775e:	d1ec      	bne.n	800773a <_scanf_float+0x2c6>
 8007760:	3d03      	subs	r5, #3
 8007762:	b2ed      	uxtb	r5, r5
 8007764:	1b76      	subs	r6, r6, r5
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	05da      	lsls	r2, r3, #23
 800776a:	d52f      	bpl.n	80077cc <_scanf_float+0x358>
 800776c:	055b      	lsls	r3, r3, #21
 800776e:	d510      	bpl.n	8007792 <_scanf_float+0x31e>
 8007770:	455e      	cmp	r6, fp
 8007772:	f67f aebf 	bls.w	80074f4 <_scanf_float+0x80>
 8007776:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800777a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800777e:	463a      	mov	r2, r7
 8007780:	4640      	mov	r0, r8
 8007782:	4798      	blx	r3
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	3b01      	subs	r3, #1
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	e7f1      	b.n	8007770 <_scanf_float+0x2fc>
 800778c:	46aa      	mov	sl, r5
 800778e:	9602      	str	r6, [sp, #8]
 8007790:	e7df      	b.n	8007752 <_scanf_float+0x2de>
 8007792:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	2965      	cmp	r1, #101	; 0x65
 800779a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800779e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80077a2:	6123      	str	r3, [r4, #16]
 80077a4:	d00c      	beq.n	80077c0 <_scanf_float+0x34c>
 80077a6:	2945      	cmp	r1, #69	; 0x45
 80077a8:	d00a      	beq.n	80077c0 <_scanf_float+0x34c>
 80077aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077ae:	463a      	mov	r2, r7
 80077b0:	4640      	mov	r0, r8
 80077b2:	4798      	blx	r3
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077ba:	3b01      	subs	r3, #1
 80077bc:	1eb5      	subs	r5, r6, #2
 80077be:	6123      	str	r3, [r4, #16]
 80077c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077c4:	463a      	mov	r2, r7
 80077c6:	4640      	mov	r0, r8
 80077c8:	4798      	blx	r3
 80077ca:	462e      	mov	r6, r5
 80077cc:	6825      	ldr	r5, [r4, #0]
 80077ce:	f015 0510 	ands.w	r5, r5, #16
 80077d2:	d158      	bne.n	8007886 <_scanf_float+0x412>
 80077d4:	7035      	strb	r5, [r6, #0]
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e0:	d11c      	bne.n	800781c <_scanf_float+0x3a8>
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	454b      	cmp	r3, r9
 80077e6:	eba3 0209 	sub.w	r2, r3, r9
 80077ea:	d124      	bne.n	8007836 <_scanf_float+0x3c2>
 80077ec:	2200      	movs	r2, #0
 80077ee:	4659      	mov	r1, fp
 80077f0:	4640      	mov	r0, r8
 80077f2:	f000 ff21 	bl	8008638 <_strtod_r>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	6821      	ldr	r1, [r4, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f011 0f02 	tst.w	r1, #2
 8007800:	ec57 6b10 	vmov	r6, r7, d0
 8007804:	f103 0204 	add.w	r2, r3, #4
 8007808:	d020      	beq.n	800784c <_scanf_float+0x3d8>
 800780a:	9903      	ldr	r1, [sp, #12]
 800780c:	600a      	str	r2, [r1, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	e9c3 6700 	strd	r6, r7, [r3]
 8007814:	68e3      	ldr	r3, [r4, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60e3      	str	r3, [r4, #12]
 800781a:	e66c      	b.n	80074f6 <_scanf_float+0x82>
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d0e4      	beq.n	80077ec <_scanf_float+0x378>
 8007822:	9905      	ldr	r1, [sp, #20]
 8007824:	230a      	movs	r3, #10
 8007826:	462a      	mov	r2, r5
 8007828:	3101      	adds	r1, #1
 800782a:	4640      	mov	r0, r8
 800782c:	f000 ff8c 	bl	8008748 <_strtol_r>
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	9e05      	ldr	r6, [sp, #20]
 8007834:	1ac2      	subs	r2, r0, r3
 8007836:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800783a:	429e      	cmp	r6, r3
 800783c:	bf28      	it	cs
 800783e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007842:	4912      	ldr	r1, [pc, #72]	; (800788c <_scanf_float+0x418>)
 8007844:	4630      	mov	r0, r6
 8007846:	f000 f825 	bl	8007894 <siprintf>
 800784a:	e7cf      	b.n	80077ec <_scanf_float+0x378>
 800784c:	f011 0f04 	tst.w	r1, #4
 8007850:	9903      	ldr	r1, [sp, #12]
 8007852:	600a      	str	r2, [r1, #0]
 8007854:	d1db      	bne.n	800780e <_scanf_float+0x39a>
 8007856:	f8d3 8000 	ldr.w	r8, [r3]
 800785a:	ee10 2a10 	vmov	r2, s0
 800785e:	ee10 0a10 	vmov	r0, s0
 8007862:	463b      	mov	r3, r7
 8007864:	4639      	mov	r1, r7
 8007866:	f7f9 f98b 	bl	8000b80 <__aeabi_dcmpun>
 800786a:	b128      	cbz	r0, 8007878 <_scanf_float+0x404>
 800786c:	4808      	ldr	r0, [pc, #32]	; (8007890 <_scanf_float+0x41c>)
 800786e:	f001 f827 	bl	80088c0 <nanf>
 8007872:	ed88 0a00 	vstr	s0, [r8]
 8007876:	e7cd      	b.n	8007814 <_scanf_float+0x3a0>
 8007878:	4630      	mov	r0, r6
 800787a:	4639      	mov	r1, r7
 800787c:	f7f9 f9de 	bl	8000c3c <__aeabi_d2f>
 8007880:	f8c8 0000 	str.w	r0, [r8]
 8007884:	e7c6      	b.n	8007814 <_scanf_float+0x3a0>
 8007886:	2500      	movs	r5, #0
 8007888:	e635      	b.n	80074f6 <_scanf_float+0x82>
 800788a:	bf00      	nop
 800788c:	0800c9c4 	.word	0x0800c9c4
 8007890:	0800cdb7 	.word	0x0800cdb7

08007894 <siprintf>:
 8007894:	b40e      	push	{r1, r2, r3}
 8007896:	b500      	push	{lr}
 8007898:	b09c      	sub	sp, #112	; 0x70
 800789a:	ab1d      	add	r3, sp, #116	; 0x74
 800789c:	9002      	str	r0, [sp, #8]
 800789e:	9006      	str	r0, [sp, #24]
 80078a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80078a4:	4809      	ldr	r0, [pc, #36]	; (80078cc <siprintf+0x38>)
 80078a6:	9107      	str	r1, [sp, #28]
 80078a8:	9104      	str	r1, [sp, #16]
 80078aa:	4909      	ldr	r1, [pc, #36]	; (80078d0 <siprintf+0x3c>)
 80078ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80078b0:	9105      	str	r1, [sp, #20]
 80078b2:	6800      	ldr	r0, [r0, #0]
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	a902      	add	r1, sp, #8
 80078b8:	f002 fa36 	bl	8009d28 <_svfiprintf_r>
 80078bc:	9b02      	ldr	r3, [sp, #8]
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
 80078c2:	b01c      	add	sp, #112	; 0x70
 80078c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078c8:	b003      	add	sp, #12
 80078ca:	4770      	bx	lr
 80078cc:	20000208 	.word	0x20000208
 80078d0:	ffff0208 	.word	0xffff0208

080078d4 <std>:
 80078d4:	2300      	movs	r3, #0
 80078d6:	b510      	push	{r4, lr}
 80078d8:	4604      	mov	r4, r0
 80078da:	e9c0 3300 	strd	r3, r3, [r0]
 80078de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078e2:	6083      	str	r3, [r0, #8]
 80078e4:	8181      	strh	r1, [r0, #12]
 80078e6:	6643      	str	r3, [r0, #100]	; 0x64
 80078e8:	81c2      	strh	r2, [r0, #14]
 80078ea:	6183      	str	r3, [r0, #24]
 80078ec:	4619      	mov	r1, r3
 80078ee:	2208      	movs	r2, #8
 80078f0:	305c      	adds	r0, #92	; 0x5c
 80078f2:	f000 ff95 	bl	8008820 <memset>
 80078f6:	4b0d      	ldr	r3, [pc, #52]	; (800792c <std+0x58>)
 80078f8:	6263      	str	r3, [r4, #36]	; 0x24
 80078fa:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <std+0x5c>)
 80078fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <std+0x60>)
 8007900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007902:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <std+0x64>)
 8007904:	6323      	str	r3, [r4, #48]	; 0x30
 8007906:	4b0d      	ldr	r3, [pc, #52]	; (800793c <std+0x68>)
 8007908:	6224      	str	r4, [r4, #32]
 800790a:	429c      	cmp	r4, r3
 800790c:	d006      	beq.n	800791c <std+0x48>
 800790e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007912:	4294      	cmp	r4, r2
 8007914:	d002      	beq.n	800791c <std+0x48>
 8007916:	33d0      	adds	r3, #208	; 0xd0
 8007918:	429c      	cmp	r4, r3
 800791a:	d105      	bne.n	8007928 <std+0x54>
 800791c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007924:	f000 bfb2 	b.w	800888c <__retarget_lock_init_recursive>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	bf00      	nop
 800792c:	0800ab67 	.word	0x0800ab67
 8007930:	0800ab89 	.word	0x0800ab89
 8007934:	0800abc1 	.word	0x0800abc1
 8007938:	0800abe5 	.word	0x0800abe5
 800793c:	2000a8d4 	.word	0x2000a8d4

08007940 <stdio_exit_handler>:
 8007940:	4a02      	ldr	r2, [pc, #8]	; (800794c <stdio_exit_handler+0xc>)
 8007942:	4903      	ldr	r1, [pc, #12]	; (8007950 <stdio_exit_handler+0x10>)
 8007944:	4803      	ldr	r0, [pc, #12]	; (8007954 <stdio_exit_handler+0x14>)
 8007946:	f000 bf01 	b.w	800874c <_fwalk_sglue>
 800794a:	bf00      	nop
 800794c:	20000044 	.word	0x20000044
 8007950:	0800a1a5 	.word	0x0800a1a5
 8007954:	200001bc 	.word	0x200001bc

08007958 <cleanup_stdio>:
 8007958:	6841      	ldr	r1, [r0, #4]
 800795a:	4b0c      	ldr	r3, [pc, #48]	; (800798c <cleanup_stdio+0x34>)
 800795c:	4299      	cmp	r1, r3
 800795e:	b510      	push	{r4, lr}
 8007960:	4604      	mov	r4, r0
 8007962:	d001      	beq.n	8007968 <cleanup_stdio+0x10>
 8007964:	f002 fc1e 	bl	800a1a4 <_fflush_r>
 8007968:	68a1      	ldr	r1, [r4, #8]
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <cleanup_stdio+0x38>)
 800796c:	4299      	cmp	r1, r3
 800796e:	d002      	beq.n	8007976 <cleanup_stdio+0x1e>
 8007970:	4620      	mov	r0, r4
 8007972:	f002 fc17 	bl	800a1a4 <_fflush_r>
 8007976:	68e1      	ldr	r1, [r4, #12]
 8007978:	4b06      	ldr	r3, [pc, #24]	; (8007994 <cleanup_stdio+0x3c>)
 800797a:	4299      	cmp	r1, r3
 800797c:	d004      	beq.n	8007988 <cleanup_stdio+0x30>
 800797e:	4620      	mov	r0, r4
 8007980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007984:	f002 bc0e 	b.w	800a1a4 <_fflush_r>
 8007988:	bd10      	pop	{r4, pc}
 800798a:	bf00      	nop
 800798c:	2000a8d4 	.word	0x2000a8d4
 8007990:	2000a93c 	.word	0x2000a93c
 8007994:	2000a9a4 	.word	0x2000a9a4

08007998 <global_stdio_init.part.0>:
 8007998:	b510      	push	{r4, lr}
 800799a:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <global_stdio_init.part.0+0x30>)
 800799c:	4c0b      	ldr	r4, [pc, #44]	; (80079cc <global_stdio_init.part.0+0x34>)
 800799e:	4a0c      	ldr	r2, [pc, #48]	; (80079d0 <global_stdio_init.part.0+0x38>)
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	4620      	mov	r0, r4
 80079a4:	2200      	movs	r2, #0
 80079a6:	2104      	movs	r1, #4
 80079a8:	f7ff ff94 	bl	80078d4 <std>
 80079ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80079b0:	2201      	movs	r2, #1
 80079b2:	2109      	movs	r1, #9
 80079b4:	f7ff ff8e 	bl	80078d4 <std>
 80079b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80079bc:	2202      	movs	r2, #2
 80079be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c2:	2112      	movs	r1, #18
 80079c4:	f7ff bf86 	b.w	80078d4 <std>
 80079c8:	2000aa0c 	.word	0x2000aa0c
 80079cc:	2000a8d4 	.word	0x2000a8d4
 80079d0:	08007941 	.word	0x08007941

080079d4 <__sfp_lock_acquire>:
 80079d4:	4801      	ldr	r0, [pc, #4]	; (80079dc <__sfp_lock_acquire+0x8>)
 80079d6:	f000 bf5a 	b.w	800888e <__retarget_lock_acquire_recursive>
 80079da:	bf00      	nop
 80079dc:	2000aa11 	.word	0x2000aa11

080079e0 <__sfp_lock_release>:
 80079e0:	4801      	ldr	r0, [pc, #4]	; (80079e8 <__sfp_lock_release+0x8>)
 80079e2:	f000 bf55 	b.w	8008890 <__retarget_lock_release_recursive>
 80079e6:	bf00      	nop
 80079e8:	2000aa11 	.word	0x2000aa11

080079ec <__sinit>:
 80079ec:	b510      	push	{r4, lr}
 80079ee:	4604      	mov	r4, r0
 80079f0:	f7ff fff0 	bl	80079d4 <__sfp_lock_acquire>
 80079f4:	6a23      	ldr	r3, [r4, #32]
 80079f6:	b11b      	cbz	r3, 8007a00 <__sinit+0x14>
 80079f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079fc:	f7ff bff0 	b.w	80079e0 <__sfp_lock_release>
 8007a00:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <__sinit+0x28>)
 8007a02:	6223      	str	r3, [r4, #32]
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <__sinit+0x2c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f5      	bne.n	80079f8 <__sinit+0xc>
 8007a0c:	f7ff ffc4 	bl	8007998 <global_stdio_init.part.0>
 8007a10:	e7f2      	b.n	80079f8 <__sinit+0xc>
 8007a12:	bf00      	nop
 8007a14:	08007959 	.word	0x08007959
 8007a18:	2000aa0c 	.word	0x2000aa0c

08007a1c <sulp>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	4604      	mov	r4, r0
 8007a20:	460d      	mov	r5, r1
 8007a22:	ec45 4b10 	vmov	d0, r4, r5
 8007a26:	4616      	mov	r6, r2
 8007a28:	f002 ff5c 	bl	800a8e4 <__ulp>
 8007a2c:	ec51 0b10 	vmov	r0, r1, d0
 8007a30:	b17e      	cbz	r6, 8007a52 <sulp+0x36>
 8007a32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dd09      	ble.n	8007a52 <sulp+0x36>
 8007a3e:	051b      	lsls	r3, r3, #20
 8007a40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a44:	2400      	movs	r4, #0
 8007a46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	f7f8 fdfd 	bl	800064c <__aeabi_dmul>
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	0000      	movs	r0, r0
	...

08007a58 <_strtod_l>:
 8007a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a5c:	ed2d 8b02 	vpush	{d8}
 8007a60:	b09b      	sub	sp, #108	; 0x6c
 8007a62:	4604      	mov	r4, r0
 8007a64:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a66:	2200      	movs	r2, #0
 8007a68:	9216      	str	r2, [sp, #88]	; 0x58
 8007a6a:	460d      	mov	r5, r1
 8007a6c:	f04f 0800 	mov.w	r8, #0
 8007a70:	f04f 0900 	mov.w	r9, #0
 8007a74:	460a      	mov	r2, r1
 8007a76:	9215      	str	r2, [sp, #84]	; 0x54
 8007a78:	7811      	ldrb	r1, [r2, #0]
 8007a7a:	292b      	cmp	r1, #43	; 0x2b
 8007a7c:	d04c      	beq.n	8007b18 <_strtod_l+0xc0>
 8007a7e:	d83a      	bhi.n	8007af6 <_strtod_l+0x9e>
 8007a80:	290d      	cmp	r1, #13
 8007a82:	d834      	bhi.n	8007aee <_strtod_l+0x96>
 8007a84:	2908      	cmp	r1, #8
 8007a86:	d834      	bhi.n	8007af2 <_strtod_l+0x9a>
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d03d      	beq.n	8007b08 <_strtod_l+0xb0>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	920a      	str	r2, [sp, #40]	; 0x28
 8007a90:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007a92:	7832      	ldrb	r2, [r6, #0]
 8007a94:	2a30      	cmp	r2, #48	; 0x30
 8007a96:	f040 80b4 	bne.w	8007c02 <_strtod_l+0x1aa>
 8007a9a:	7872      	ldrb	r2, [r6, #1]
 8007a9c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007aa0:	2a58      	cmp	r2, #88	; 0x58
 8007aa2:	d170      	bne.n	8007b86 <_strtod_l+0x12e>
 8007aa4:	9302      	str	r3, [sp, #8]
 8007aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	ab16      	add	r3, sp, #88	; 0x58
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4a8e      	ldr	r2, [pc, #568]	; (8007ce8 <_strtod_l+0x290>)
 8007ab0:	ab17      	add	r3, sp, #92	; 0x5c
 8007ab2:	a915      	add	r1, sp, #84	; 0x54
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f001 fded 	bl	8009694 <__gethex>
 8007aba:	f010 070f 	ands.w	r7, r0, #15
 8007abe:	4605      	mov	r5, r0
 8007ac0:	d005      	beq.n	8007ace <_strtod_l+0x76>
 8007ac2:	2f06      	cmp	r7, #6
 8007ac4:	d12a      	bne.n	8007b1c <_strtod_l+0xc4>
 8007ac6:	3601      	adds	r6, #1
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9615      	str	r6, [sp, #84]	; 0x54
 8007acc:	930a      	str	r3, [sp, #40]	; 0x28
 8007ace:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 857f 	bne.w	80085d4 <_strtod_l+0xb7c>
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	b1db      	cbz	r3, 8007b12 <_strtod_l+0xba>
 8007ada:	4642      	mov	r2, r8
 8007adc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ae0:	ec43 2b10 	vmov	d0, r2, r3
 8007ae4:	b01b      	add	sp, #108	; 0x6c
 8007ae6:	ecbd 8b02 	vpop	{d8}
 8007aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aee:	2920      	cmp	r1, #32
 8007af0:	d1cc      	bne.n	8007a8c <_strtod_l+0x34>
 8007af2:	3201      	adds	r2, #1
 8007af4:	e7bf      	b.n	8007a76 <_strtod_l+0x1e>
 8007af6:	292d      	cmp	r1, #45	; 0x2d
 8007af8:	d1c8      	bne.n	8007a8c <_strtod_l+0x34>
 8007afa:	2101      	movs	r1, #1
 8007afc:	910a      	str	r1, [sp, #40]	; 0x28
 8007afe:	1c51      	adds	r1, r2, #1
 8007b00:	9115      	str	r1, [sp, #84]	; 0x54
 8007b02:	7852      	ldrb	r2, [r2, #1]
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	d1c3      	bne.n	8007a90 <_strtod_l+0x38>
 8007b08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b0a:	9515      	str	r5, [sp, #84]	; 0x54
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 855f 	bne.w	80085d0 <_strtod_l+0xb78>
 8007b12:	4642      	mov	r2, r8
 8007b14:	464b      	mov	r3, r9
 8007b16:	e7e3      	b.n	8007ae0 <_strtod_l+0x88>
 8007b18:	2100      	movs	r1, #0
 8007b1a:	e7ef      	b.n	8007afc <_strtod_l+0xa4>
 8007b1c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007b1e:	b13a      	cbz	r2, 8007b30 <_strtod_l+0xd8>
 8007b20:	2135      	movs	r1, #53	; 0x35
 8007b22:	a818      	add	r0, sp, #96	; 0x60
 8007b24:	f002 ffdb 	bl	800aade <__copybits>
 8007b28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f002 fbae 	bl	800a28c <_Bfree>
 8007b30:	3f01      	subs	r7, #1
 8007b32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b34:	2f04      	cmp	r7, #4
 8007b36:	d806      	bhi.n	8007b46 <_strtod_l+0xee>
 8007b38:	e8df f007 	tbb	[pc, r7]
 8007b3c:	201d0314 	.word	0x201d0314
 8007b40:	14          	.byte	0x14
 8007b41:	00          	.byte	0x00
 8007b42:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007b46:	05e9      	lsls	r1, r5, #23
 8007b48:	bf48      	it	mi
 8007b4a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007b4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b52:	0d1b      	lsrs	r3, r3, #20
 8007b54:	051b      	lsls	r3, r3, #20
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1b9      	bne.n	8007ace <_strtod_l+0x76>
 8007b5a:	f000 fe6d 	bl	8008838 <__errno>
 8007b5e:	2322      	movs	r3, #34	; 0x22
 8007b60:	6003      	str	r3, [r0, #0]
 8007b62:	e7b4      	b.n	8007ace <_strtod_l+0x76>
 8007b64:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007b68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b70:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b74:	e7e7      	b.n	8007b46 <_strtod_l+0xee>
 8007b76:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007cf0 <_strtod_l+0x298>
 8007b7a:	e7e4      	b.n	8007b46 <_strtod_l+0xee>
 8007b7c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007b84:	e7df      	b.n	8007b46 <_strtod_l+0xee>
 8007b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	9215      	str	r2, [sp, #84]	; 0x54
 8007b8c:	785b      	ldrb	r3, [r3, #1]
 8007b8e:	2b30      	cmp	r3, #48	; 0x30
 8007b90:	d0f9      	beq.n	8007b86 <_strtod_l+0x12e>
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d09b      	beq.n	8007ace <_strtod_l+0x76>
 8007b96:	2301      	movs	r3, #1
 8007b98:	f04f 0a00 	mov.w	sl, #0
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ba0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007ba6:	46d3      	mov	fp, sl
 8007ba8:	220a      	movs	r2, #10
 8007baa:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007bac:	7806      	ldrb	r6, [r0, #0]
 8007bae:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007bb2:	b2d9      	uxtb	r1, r3
 8007bb4:	2909      	cmp	r1, #9
 8007bb6:	d926      	bls.n	8007c06 <_strtod_l+0x1ae>
 8007bb8:	494c      	ldr	r1, [pc, #304]	; (8007cec <_strtod_l+0x294>)
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f000 fe1e 	bl	80087fc <strncmp>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	d030      	beq.n	8007c26 <_strtod_l+0x1ce>
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	4632      	mov	r2, r6
 8007bc8:	9005      	str	r0, [sp, #20]
 8007bca:	465e      	mov	r6, fp
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2a65      	cmp	r2, #101	; 0x65
 8007bd0:	d001      	beq.n	8007bd6 <_strtod_l+0x17e>
 8007bd2:	2a45      	cmp	r2, #69	; 0x45
 8007bd4:	d113      	bne.n	8007bfe <_strtod_l+0x1a6>
 8007bd6:	b91e      	cbnz	r6, 8007be0 <_strtod_l+0x188>
 8007bd8:	9a04      	ldr	r2, [sp, #16]
 8007bda:	4302      	orrs	r2, r0
 8007bdc:	d094      	beq.n	8007b08 <_strtod_l+0xb0>
 8007bde:	2600      	movs	r6, #0
 8007be0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007be2:	1c6a      	adds	r2, r5, #1
 8007be4:	9215      	str	r2, [sp, #84]	; 0x54
 8007be6:	786a      	ldrb	r2, [r5, #1]
 8007be8:	2a2b      	cmp	r2, #43	; 0x2b
 8007bea:	d074      	beq.n	8007cd6 <_strtod_l+0x27e>
 8007bec:	2a2d      	cmp	r2, #45	; 0x2d
 8007bee:	d078      	beq.n	8007ce2 <_strtod_l+0x28a>
 8007bf0:	f04f 0c00 	mov.w	ip, #0
 8007bf4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bf8:	2909      	cmp	r1, #9
 8007bfa:	d97f      	bls.n	8007cfc <_strtod_l+0x2a4>
 8007bfc:	9515      	str	r5, [sp, #84]	; 0x54
 8007bfe:	2700      	movs	r7, #0
 8007c00:	e09e      	b.n	8007d40 <_strtod_l+0x2e8>
 8007c02:	2300      	movs	r3, #0
 8007c04:	e7c8      	b.n	8007b98 <_strtod_l+0x140>
 8007c06:	f1bb 0f08 	cmp.w	fp, #8
 8007c0a:	bfd8      	it	le
 8007c0c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007c0e:	f100 0001 	add.w	r0, r0, #1
 8007c12:	bfda      	itte	le
 8007c14:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c18:	9309      	strle	r3, [sp, #36]	; 0x24
 8007c1a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007c1e:	f10b 0b01 	add.w	fp, fp, #1
 8007c22:	9015      	str	r0, [sp, #84]	; 0x54
 8007c24:	e7c1      	b.n	8007baa <_strtod_l+0x152>
 8007c26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c28:	1c5a      	adds	r2, r3, #1
 8007c2a:	9215      	str	r2, [sp, #84]	; 0x54
 8007c2c:	785a      	ldrb	r2, [r3, #1]
 8007c2e:	f1bb 0f00 	cmp.w	fp, #0
 8007c32:	d037      	beq.n	8007ca4 <_strtod_l+0x24c>
 8007c34:	9005      	str	r0, [sp, #20]
 8007c36:	465e      	mov	r6, fp
 8007c38:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c3c:	2b09      	cmp	r3, #9
 8007c3e:	d912      	bls.n	8007c66 <_strtod_l+0x20e>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e7c4      	b.n	8007bce <_strtod_l+0x176>
 8007c44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c46:	1c5a      	adds	r2, r3, #1
 8007c48:	9215      	str	r2, [sp, #84]	; 0x54
 8007c4a:	785a      	ldrb	r2, [r3, #1]
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	2a30      	cmp	r2, #48	; 0x30
 8007c50:	d0f8      	beq.n	8007c44 <_strtod_l+0x1ec>
 8007c52:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	f200 84c1 	bhi.w	80085de <_strtod_l+0xb86>
 8007c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c5e:	9005      	str	r0, [sp, #20]
 8007c60:	2000      	movs	r0, #0
 8007c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c64:	4606      	mov	r6, r0
 8007c66:	3a30      	subs	r2, #48	; 0x30
 8007c68:	f100 0301 	add.w	r3, r0, #1
 8007c6c:	d014      	beq.n	8007c98 <_strtod_l+0x240>
 8007c6e:	9905      	ldr	r1, [sp, #20]
 8007c70:	4419      	add	r1, r3
 8007c72:	9105      	str	r1, [sp, #20]
 8007c74:	4633      	mov	r3, r6
 8007c76:	eb00 0c06 	add.w	ip, r0, r6
 8007c7a:	210a      	movs	r1, #10
 8007c7c:	4563      	cmp	r3, ip
 8007c7e:	d113      	bne.n	8007ca8 <_strtod_l+0x250>
 8007c80:	1833      	adds	r3, r6, r0
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	f106 0601 	add.w	r6, r6, #1
 8007c88:	4406      	add	r6, r0
 8007c8a:	dc1a      	bgt.n	8007cc2 <_strtod_l+0x26a>
 8007c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c8e:	230a      	movs	r3, #10
 8007c90:	fb03 2301 	mla	r3, r3, r1, r2
 8007c94:	9309      	str	r3, [sp, #36]	; 0x24
 8007c96:	2300      	movs	r3, #0
 8007c98:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c9a:	1c51      	adds	r1, r2, #1
 8007c9c:	9115      	str	r1, [sp, #84]	; 0x54
 8007c9e:	7852      	ldrb	r2, [r2, #1]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	e7c9      	b.n	8007c38 <_strtod_l+0x1e0>
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	e7d2      	b.n	8007c4e <_strtod_l+0x1f6>
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	f103 0301 	add.w	r3, r3, #1
 8007cae:	dc03      	bgt.n	8007cb8 <_strtod_l+0x260>
 8007cb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cb2:	434f      	muls	r7, r1
 8007cb4:	9709      	str	r7, [sp, #36]	; 0x24
 8007cb6:	e7e1      	b.n	8007c7c <_strtod_l+0x224>
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	bfd8      	it	le
 8007cbc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007cc0:	e7dc      	b.n	8007c7c <_strtod_l+0x224>
 8007cc2:	2e10      	cmp	r6, #16
 8007cc4:	bfdc      	itt	le
 8007cc6:	230a      	movle	r3, #10
 8007cc8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007ccc:	e7e3      	b.n	8007c96 <_strtod_l+0x23e>
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9305      	str	r3, [sp, #20]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e780      	b.n	8007bd8 <_strtod_l+0x180>
 8007cd6:	f04f 0c00 	mov.w	ip, #0
 8007cda:	1caa      	adds	r2, r5, #2
 8007cdc:	9215      	str	r2, [sp, #84]	; 0x54
 8007cde:	78aa      	ldrb	r2, [r5, #2]
 8007ce0:	e788      	b.n	8007bf4 <_strtod_l+0x19c>
 8007ce2:	f04f 0c01 	mov.w	ip, #1
 8007ce6:	e7f8      	b.n	8007cda <_strtod_l+0x282>
 8007ce8:	0800c9cc 	.word	0x0800c9cc
 8007cec:	0800c9c9 	.word	0x0800c9c9
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007cf6:	1c51      	adds	r1, r2, #1
 8007cf8:	9115      	str	r1, [sp, #84]	; 0x54
 8007cfa:	7852      	ldrb	r2, [r2, #1]
 8007cfc:	2a30      	cmp	r2, #48	; 0x30
 8007cfe:	d0f9      	beq.n	8007cf4 <_strtod_l+0x29c>
 8007d00:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d04:	2908      	cmp	r1, #8
 8007d06:	f63f af7a 	bhi.w	8007bfe <_strtod_l+0x1a6>
 8007d0a:	3a30      	subs	r2, #48	; 0x30
 8007d0c:	9208      	str	r2, [sp, #32]
 8007d0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d10:	920c      	str	r2, [sp, #48]	; 0x30
 8007d12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d14:	1c57      	adds	r7, r2, #1
 8007d16:	9715      	str	r7, [sp, #84]	; 0x54
 8007d18:	7852      	ldrb	r2, [r2, #1]
 8007d1a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d1e:	f1be 0f09 	cmp.w	lr, #9
 8007d22:	d938      	bls.n	8007d96 <_strtod_l+0x33e>
 8007d24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d26:	1a7f      	subs	r7, r7, r1
 8007d28:	2f08      	cmp	r7, #8
 8007d2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d2e:	dc03      	bgt.n	8007d38 <_strtod_l+0x2e0>
 8007d30:	9908      	ldr	r1, [sp, #32]
 8007d32:	428f      	cmp	r7, r1
 8007d34:	bfa8      	it	ge
 8007d36:	460f      	movge	r7, r1
 8007d38:	f1bc 0f00 	cmp.w	ip, #0
 8007d3c:	d000      	beq.n	8007d40 <_strtod_l+0x2e8>
 8007d3e:	427f      	negs	r7, r7
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	d14f      	bne.n	8007de4 <_strtod_l+0x38c>
 8007d44:	9904      	ldr	r1, [sp, #16]
 8007d46:	4301      	orrs	r1, r0
 8007d48:	f47f aec1 	bne.w	8007ace <_strtod_l+0x76>
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f47f aedb 	bne.w	8007b08 <_strtod_l+0xb0>
 8007d52:	2a69      	cmp	r2, #105	; 0x69
 8007d54:	d029      	beq.n	8007daa <_strtod_l+0x352>
 8007d56:	dc26      	bgt.n	8007da6 <_strtod_l+0x34e>
 8007d58:	2a49      	cmp	r2, #73	; 0x49
 8007d5a:	d026      	beq.n	8007daa <_strtod_l+0x352>
 8007d5c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d5e:	f47f aed3 	bne.w	8007b08 <_strtod_l+0xb0>
 8007d62:	499b      	ldr	r1, [pc, #620]	; (8007fd0 <_strtod_l+0x578>)
 8007d64:	a815      	add	r0, sp, #84	; 0x54
 8007d66:	f001 fed5 	bl	8009b14 <__match>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f43f aecc 	beq.w	8007b08 <_strtod_l+0xb0>
 8007d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b28      	cmp	r3, #40	; 0x28
 8007d76:	d12f      	bne.n	8007dd8 <_strtod_l+0x380>
 8007d78:	4996      	ldr	r1, [pc, #600]	; (8007fd4 <_strtod_l+0x57c>)
 8007d7a:	aa18      	add	r2, sp, #96	; 0x60
 8007d7c:	a815      	add	r0, sp, #84	; 0x54
 8007d7e:	f001 fedd 	bl	8009b3c <__hexnan>
 8007d82:	2805      	cmp	r0, #5
 8007d84:	d128      	bne.n	8007dd8 <_strtod_l+0x380>
 8007d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d8c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d90:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d94:	e69b      	b.n	8007ace <_strtod_l+0x76>
 8007d96:	9f08      	ldr	r7, [sp, #32]
 8007d98:	210a      	movs	r1, #10
 8007d9a:	fb01 2107 	mla	r1, r1, r7, r2
 8007d9e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007da2:	9208      	str	r2, [sp, #32]
 8007da4:	e7b5      	b.n	8007d12 <_strtod_l+0x2ba>
 8007da6:	2a6e      	cmp	r2, #110	; 0x6e
 8007da8:	e7d9      	b.n	8007d5e <_strtod_l+0x306>
 8007daa:	498b      	ldr	r1, [pc, #556]	; (8007fd8 <_strtod_l+0x580>)
 8007dac:	a815      	add	r0, sp, #84	; 0x54
 8007dae:	f001 feb1 	bl	8009b14 <__match>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	f43f aea8 	beq.w	8007b08 <_strtod_l+0xb0>
 8007db8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dba:	4988      	ldr	r1, [pc, #544]	; (8007fdc <_strtod_l+0x584>)
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	a815      	add	r0, sp, #84	; 0x54
 8007dc0:	9315      	str	r3, [sp, #84]	; 0x54
 8007dc2:	f001 fea7 	bl	8009b14 <__match>
 8007dc6:	b910      	cbnz	r0, 8007dce <_strtod_l+0x376>
 8007dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dca:	3301      	adds	r3, #1
 8007dcc:	9315      	str	r3, [sp, #84]	; 0x54
 8007dce:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007fec <_strtod_l+0x594>
 8007dd2:	f04f 0800 	mov.w	r8, #0
 8007dd6:	e67a      	b.n	8007ace <_strtod_l+0x76>
 8007dd8:	4881      	ldr	r0, [pc, #516]	; (8007fe0 <_strtod_l+0x588>)
 8007dda:	f000 fd69 	bl	80088b0 <nan>
 8007dde:	ec59 8b10 	vmov	r8, r9, d0
 8007de2:	e674      	b.n	8007ace <_strtod_l+0x76>
 8007de4:	9b05      	ldr	r3, [sp, #20]
 8007de6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007de8:	1afb      	subs	r3, r7, r3
 8007dea:	f1bb 0f00 	cmp.w	fp, #0
 8007dee:	bf08      	it	eq
 8007df0:	46b3      	moveq	fp, r6
 8007df2:	2e10      	cmp	r6, #16
 8007df4:	9308      	str	r3, [sp, #32]
 8007df6:	4635      	mov	r5, r6
 8007df8:	bfa8      	it	ge
 8007dfa:	2510      	movge	r5, #16
 8007dfc:	f7f8 fbac 	bl	8000558 <__aeabi_ui2d>
 8007e00:	2e09      	cmp	r6, #9
 8007e02:	4680      	mov	r8, r0
 8007e04:	4689      	mov	r9, r1
 8007e06:	dd13      	ble.n	8007e30 <_strtod_l+0x3d8>
 8007e08:	4b76      	ldr	r3, [pc, #472]	; (8007fe4 <_strtod_l+0x58c>)
 8007e0a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e12:	f7f8 fc1b 	bl	800064c <__aeabi_dmul>
 8007e16:	4680      	mov	r8, r0
 8007e18:	4650      	mov	r0, sl
 8007e1a:	4689      	mov	r9, r1
 8007e1c:	f7f8 fb9c 	bl	8000558 <__aeabi_ui2d>
 8007e20:	4602      	mov	r2, r0
 8007e22:	460b      	mov	r3, r1
 8007e24:	4640      	mov	r0, r8
 8007e26:	4649      	mov	r1, r9
 8007e28:	f7f8 fa5a 	bl	80002e0 <__adddf3>
 8007e2c:	4680      	mov	r8, r0
 8007e2e:	4689      	mov	r9, r1
 8007e30:	2e0f      	cmp	r6, #15
 8007e32:	dc38      	bgt.n	8007ea6 <_strtod_l+0x44e>
 8007e34:	9b08      	ldr	r3, [sp, #32]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f43f ae49 	beq.w	8007ace <_strtod_l+0x76>
 8007e3c:	dd24      	ble.n	8007e88 <_strtod_l+0x430>
 8007e3e:	2b16      	cmp	r3, #22
 8007e40:	dc0b      	bgt.n	8007e5a <_strtod_l+0x402>
 8007e42:	4968      	ldr	r1, [pc, #416]	; (8007fe4 <_strtod_l+0x58c>)
 8007e44:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	f7f8 fbfc 	bl	800064c <__aeabi_dmul>
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	e639      	b.n	8007ace <_strtod_l+0x76>
 8007e5a:	9a08      	ldr	r2, [sp, #32]
 8007e5c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e60:	4293      	cmp	r3, r2
 8007e62:	db20      	blt.n	8007ea6 <_strtod_l+0x44e>
 8007e64:	4c5f      	ldr	r4, [pc, #380]	; (8007fe4 <_strtod_l+0x58c>)
 8007e66:	f1c6 060f 	rsb	r6, r6, #15
 8007e6a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007e6e:	4642      	mov	r2, r8
 8007e70:	464b      	mov	r3, r9
 8007e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e76:	f7f8 fbe9 	bl	800064c <__aeabi_dmul>
 8007e7a:	9b08      	ldr	r3, [sp, #32]
 8007e7c:	1b9e      	subs	r6, r3, r6
 8007e7e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007e82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e86:	e7e3      	b.n	8007e50 <_strtod_l+0x3f8>
 8007e88:	9b08      	ldr	r3, [sp, #32]
 8007e8a:	3316      	adds	r3, #22
 8007e8c:	db0b      	blt.n	8007ea6 <_strtod_l+0x44e>
 8007e8e:	9b05      	ldr	r3, [sp, #20]
 8007e90:	1bdf      	subs	r7, r3, r7
 8007e92:	4b54      	ldr	r3, [pc, #336]	; (8007fe4 <_strtod_l+0x58c>)
 8007e94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fcfe 	bl	80008a0 <__aeabi_ddiv>
 8007ea4:	e7d6      	b.n	8007e54 <_strtod_l+0x3fc>
 8007ea6:	9b08      	ldr	r3, [sp, #32]
 8007ea8:	1b75      	subs	r5, r6, r5
 8007eaa:	441d      	add	r5, r3
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	dd70      	ble.n	8007f92 <_strtod_l+0x53a>
 8007eb0:	f015 030f 	ands.w	r3, r5, #15
 8007eb4:	d00a      	beq.n	8007ecc <_strtod_l+0x474>
 8007eb6:	494b      	ldr	r1, [pc, #300]	; (8007fe4 <_strtod_l+0x58c>)
 8007eb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ebc:	4642      	mov	r2, r8
 8007ebe:	464b      	mov	r3, r9
 8007ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec4:	f7f8 fbc2 	bl	800064c <__aeabi_dmul>
 8007ec8:	4680      	mov	r8, r0
 8007eca:	4689      	mov	r9, r1
 8007ecc:	f035 050f 	bics.w	r5, r5, #15
 8007ed0:	d04d      	beq.n	8007f6e <_strtod_l+0x516>
 8007ed2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007ed6:	dd22      	ble.n	8007f1e <_strtod_l+0x4c6>
 8007ed8:	2500      	movs	r5, #0
 8007eda:	46ab      	mov	fp, r5
 8007edc:	9509      	str	r5, [sp, #36]	; 0x24
 8007ede:	9505      	str	r5, [sp, #20]
 8007ee0:	2322      	movs	r3, #34	; 0x22
 8007ee2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007fec <_strtod_l+0x594>
 8007ee6:	6023      	str	r3, [r4, #0]
 8007ee8:	f04f 0800 	mov.w	r8, #0
 8007eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f43f aded 	beq.w	8007ace <_strtod_l+0x76>
 8007ef4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f002 f9c8 	bl	800a28c <_Bfree>
 8007efc:	9905      	ldr	r1, [sp, #20]
 8007efe:	4620      	mov	r0, r4
 8007f00:	f002 f9c4 	bl	800a28c <_Bfree>
 8007f04:	4659      	mov	r1, fp
 8007f06:	4620      	mov	r0, r4
 8007f08:	f002 f9c0 	bl	800a28c <_Bfree>
 8007f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f002 f9bc 	bl	800a28c <_Bfree>
 8007f14:	4629      	mov	r1, r5
 8007f16:	4620      	mov	r0, r4
 8007f18:	f002 f9b8 	bl	800a28c <_Bfree>
 8007f1c:	e5d7      	b.n	8007ace <_strtod_l+0x76>
 8007f1e:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <_strtod_l+0x590>)
 8007f20:	9304      	str	r3, [sp, #16]
 8007f22:	2300      	movs	r3, #0
 8007f24:	112d      	asrs	r5, r5, #4
 8007f26:	4640      	mov	r0, r8
 8007f28:	4649      	mov	r1, r9
 8007f2a:	469a      	mov	sl, r3
 8007f2c:	2d01      	cmp	r5, #1
 8007f2e:	dc21      	bgt.n	8007f74 <_strtod_l+0x51c>
 8007f30:	b10b      	cbz	r3, 8007f36 <_strtod_l+0x4de>
 8007f32:	4680      	mov	r8, r0
 8007f34:	4689      	mov	r9, r1
 8007f36:	492c      	ldr	r1, [pc, #176]	; (8007fe8 <_strtod_l+0x590>)
 8007f38:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f3c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f48:	f7f8 fb80 	bl	800064c <__aeabi_dmul>
 8007f4c:	4b27      	ldr	r3, [pc, #156]	; (8007fec <_strtod_l+0x594>)
 8007f4e:	460a      	mov	r2, r1
 8007f50:	400b      	ands	r3, r1
 8007f52:	4927      	ldr	r1, [pc, #156]	; (8007ff0 <_strtod_l+0x598>)
 8007f54:	428b      	cmp	r3, r1
 8007f56:	4680      	mov	r8, r0
 8007f58:	d8be      	bhi.n	8007ed8 <_strtod_l+0x480>
 8007f5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f5e:	428b      	cmp	r3, r1
 8007f60:	bf86      	itte	hi
 8007f62:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007ff4 <_strtod_l+0x59c>
 8007f66:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8007f6a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f6e:	2300      	movs	r3, #0
 8007f70:	9304      	str	r3, [sp, #16]
 8007f72:	e07b      	b.n	800806c <_strtod_l+0x614>
 8007f74:	07ea      	lsls	r2, r5, #31
 8007f76:	d505      	bpl.n	8007f84 <_strtod_l+0x52c>
 8007f78:	9b04      	ldr	r3, [sp, #16]
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 fb65 	bl	800064c <__aeabi_dmul>
 8007f82:	2301      	movs	r3, #1
 8007f84:	9a04      	ldr	r2, [sp, #16]
 8007f86:	3208      	adds	r2, #8
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	106d      	asrs	r5, r5, #1
 8007f8e:	9204      	str	r2, [sp, #16]
 8007f90:	e7cc      	b.n	8007f2c <_strtod_l+0x4d4>
 8007f92:	d0ec      	beq.n	8007f6e <_strtod_l+0x516>
 8007f94:	426d      	negs	r5, r5
 8007f96:	f015 020f 	ands.w	r2, r5, #15
 8007f9a:	d00a      	beq.n	8007fb2 <_strtod_l+0x55a>
 8007f9c:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <_strtod_l+0x58c>)
 8007f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4649      	mov	r1, r9
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 fc79 	bl	80008a0 <__aeabi_ddiv>
 8007fae:	4680      	mov	r8, r0
 8007fb0:	4689      	mov	r9, r1
 8007fb2:	112d      	asrs	r5, r5, #4
 8007fb4:	d0db      	beq.n	8007f6e <_strtod_l+0x516>
 8007fb6:	2d1f      	cmp	r5, #31
 8007fb8:	dd1e      	ble.n	8007ff8 <_strtod_l+0x5a0>
 8007fba:	2500      	movs	r5, #0
 8007fbc:	46ab      	mov	fp, r5
 8007fbe:	9509      	str	r5, [sp, #36]	; 0x24
 8007fc0:	9505      	str	r5, [sp, #20]
 8007fc2:	2322      	movs	r3, #34	; 0x22
 8007fc4:	f04f 0800 	mov.w	r8, #0
 8007fc8:	f04f 0900 	mov.w	r9, #0
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	e78d      	b.n	8007eec <_strtod_l+0x494>
 8007fd0:	0800c99d 	.word	0x0800c99d
 8007fd4:	0800c9e0 	.word	0x0800c9e0
 8007fd8:	0800c995 	.word	0x0800c995
 8007fdc:	0800cb2c 	.word	0x0800cb2c
 8007fe0:	0800cdb7 	.word	0x0800cdb7
 8007fe4:	0800cca8 	.word	0x0800cca8
 8007fe8:	0800cc80 	.word	0x0800cc80
 8007fec:	7ff00000 	.word	0x7ff00000
 8007ff0:	7ca00000 	.word	0x7ca00000
 8007ff4:	7fefffff 	.word	0x7fefffff
 8007ff8:	f015 0310 	ands.w	r3, r5, #16
 8007ffc:	bf18      	it	ne
 8007ffe:	236a      	movne	r3, #106	; 0x6a
 8008000:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80083a4 <_strtod_l+0x94c>
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	4640      	mov	r0, r8
 8008008:	4649      	mov	r1, r9
 800800a:	2300      	movs	r3, #0
 800800c:	07ea      	lsls	r2, r5, #31
 800800e:	d504      	bpl.n	800801a <_strtod_l+0x5c2>
 8008010:	e9da 2300 	ldrd	r2, r3, [sl]
 8008014:	f7f8 fb1a 	bl	800064c <__aeabi_dmul>
 8008018:	2301      	movs	r3, #1
 800801a:	106d      	asrs	r5, r5, #1
 800801c:	f10a 0a08 	add.w	sl, sl, #8
 8008020:	d1f4      	bne.n	800800c <_strtod_l+0x5b4>
 8008022:	b10b      	cbz	r3, 8008028 <_strtod_l+0x5d0>
 8008024:	4680      	mov	r8, r0
 8008026:	4689      	mov	r9, r1
 8008028:	9b04      	ldr	r3, [sp, #16]
 800802a:	b1bb      	cbz	r3, 800805c <_strtod_l+0x604>
 800802c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008030:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008034:	2b00      	cmp	r3, #0
 8008036:	4649      	mov	r1, r9
 8008038:	dd10      	ble.n	800805c <_strtod_l+0x604>
 800803a:	2b1f      	cmp	r3, #31
 800803c:	f340 811e 	ble.w	800827c <_strtod_l+0x824>
 8008040:	2b34      	cmp	r3, #52	; 0x34
 8008042:	bfde      	ittt	le
 8008044:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008048:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800804c:	4093      	lslle	r3, r2
 800804e:	f04f 0800 	mov.w	r8, #0
 8008052:	bfcc      	ite	gt
 8008054:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008058:	ea03 0901 	andle.w	r9, r3, r1
 800805c:	2200      	movs	r2, #0
 800805e:	2300      	movs	r3, #0
 8008060:	4640      	mov	r0, r8
 8008062:	4649      	mov	r1, r9
 8008064:	f7f8 fd5a 	bl	8000b1c <__aeabi_dcmpeq>
 8008068:	2800      	cmp	r0, #0
 800806a:	d1a6      	bne.n	8007fba <_strtod_l+0x562>
 800806c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008072:	4633      	mov	r3, r6
 8008074:	465a      	mov	r2, fp
 8008076:	4620      	mov	r0, r4
 8008078:	f002 f970 	bl	800a35c <__s2b>
 800807c:	9009      	str	r0, [sp, #36]	; 0x24
 800807e:	2800      	cmp	r0, #0
 8008080:	f43f af2a 	beq.w	8007ed8 <_strtod_l+0x480>
 8008084:	9a08      	ldr	r2, [sp, #32]
 8008086:	9b05      	ldr	r3, [sp, #20]
 8008088:	2a00      	cmp	r2, #0
 800808a:	eba3 0307 	sub.w	r3, r3, r7
 800808e:	bfa8      	it	ge
 8008090:	2300      	movge	r3, #0
 8008092:	930c      	str	r3, [sp, #48]	; 0x30
 8008094:	2500      	movs	r5, #0
 8008096:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800809a:	9312      	str	r3, [sp, #72]	; 0x48
 800809c:	46ab      	mov	fp, r5
 800809e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a0:	4620      	mov	r0, r4
 80080a2:	6859      	ldr	r1, [r3, #4]
 80080a4:	f002 f8b2 	bl	800a20c <_Balloc>
 80080a8:	9005      	str	r0, [sp, #20]
 80080aa:	2800      	cmp	r0, #0
 80080ac:	f43f af18 	beq.w	8007ee0 <_strtod_l+0x488>
 80080b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b2:	691a      	ldr	r2, [r3, #16]
 80080b4:	3202      	adds	r2, #2
 80080b6:	f103 010c 	add.w	r1, r3, #12
 80080ba:	0092      	lsls	r2, r2, #2
 80080bc:	300c      	adds	r0, #12
 80080be:	f000 fbe8 	bl	8008892 <memcpy>
 80080c2:	ec49 8b10 	vmov	d0, r8, r9
 80080c6:	aa18      	add	r2, sp, #96	; 0x60
 80080c8:	a917      	add	r1, sp, #92	; 0x5c
 80080ca:	4620      	mov	r0, r4
 80080cc:	f002 fc7a 	bl	800a9c4 <__d2b>
 80080d0:	ec49 8b18 	vmov	d8, r8, r9
 80080d4:	9016      	str	r0, [sp, #88]	; 0x58
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f43f af02 	beq.w	8007ee0 <_strtod_l+0x488>
 80080dc:	2101      	movs	r1, #1
 80080de:	4620      	mov	r0, r4
 80080e0:	f002 f9d4 	bl	800a48c <__i2b>
 80080e4:	4683      	mov	fp, r0
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f aefa 	beq.w	8007ee0 <_strtod_l+0x488>
 80080ec:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80080ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	bfab      	itete	ge
 80080f4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80080f6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80080f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080fa:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80080fe:	bfac      	ite	ge
 8008100:	eb06 0a03 	addge.w	sl, r6, r3
 8008104:	1b9f      	sublt	r7, r3, r6
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	1af6      	subs	r6, r6, r3
 800810a:	4416      	add	r6, r2
 800810c:	4ba0      	ldr	r3, [pc, #640]	; (8008390 <_strtod_l+0x938>)
 800810e:	3e01      	subs	r6, #1
 8008110:	429e      	cmp	r6, r3
 8008112:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008116:	f280 80c4 	bge.w	80082a2 <_strtod_l+0x84a>
 800811a:	1b9b      	subs	r3, r3, r6
 800811c:	2b1f      	cmp	r3, #31
 800811e:	eba2 0203 	sub.w	r2, r2, r3
 8008122:	f04f 0101 	mov.w	r1, #1
 8008126:	f300 80b0 	bgt.w	800828a <_strtod_l+0x832>
 800812a:	fa01 f303 	lsl.w	r3, r1, r3
 800812e:	930e      	str	r3, [sp, #56]	; 0x38
 8008130:	2300      	movs	r3, #0
 8008132:	930d      	str	r3, [sp, #52]	; 0x34
 8008134:	eb0a 0602 	add.w	r6, sl, r2
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	45b2      	cmp	sl, r6
 800813c:	4417      	add	r7, r2
 800813e:	441f      	add	r7, r3
 8008140:	4653      	mov	r3, sl
 8008142:	bfa8      	it	ge
 8008144:	4633      	movge	r3, r6
 8008146:	42bb      	cmp	r3, r7
 8008148:	bfa8      	it	ge
 800814a:	463b      	movge	r3, r7
 800814c:	2b00      	cmp	r3, #0
 800814e:	bfc2      	ittt	gt
 8008150:	1af6      	subgt	r6, r6, r3
 8008152:	1aff      	subgt	r7, r7, r3
 8008154:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800815a:	2b00      	cmp	r3, #0
 800815c:	dd17      	ble.n	800818e <_strtod_l+0x736>
 800815e:	4659      	mov	r1, fp
 8008160:	461a      	mov	r2, r3
 8008162:	4620      	mov	r0, r4
 8008164:	f002 fa52 	bl	800a60c <__pow5mult>
 8008168:	4683      	mov	fp, r0
 800816a:	2800      	cmp	r0, #0
 800816c:	f43f aeb8 	beq.w	8007ee0 <_strtod_l+0x488>
 8008170:	4601      	mov	r1, r0
 8008172:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008174:	4620      	mov	r0, r4
 8008176:	f002 f99f 	bl	800a4b8 <__multiply>
 800817a:	900b      	str	r0, [sp, #44]	; 0x2c
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f aeaf 	beq.w	8007ee0 <_strtod_l+0x488>
 8008182:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008184:	4620      	mov	r0, r4
 8008186:	f002 f881 	bl	800a28c <_Bfree>
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	9316      	str	r3, [sp, #88]	; 0x58
 800818e:	2e00      	cmp	r6, #0
 8008190:	f300 808c 	bgt.w	80082ac <_strtod_l+0x854>
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	2b00      	cmp	r3, #0
 8008198:	dd08      	ble.n	80081ac <_strtod_l+0x754>
 800819a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800819c:	9905      	ldr	r1, [sp, #20]
 800819e:	4620      	mov	r0, r4
 80081a0:	f002 fa34 	bl	800a60c <__pow5mult>
 80081a4:	9005      	str	r0, [sp, #20]
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f43f ae9a 	beq.w	8007ee0 <_strtod_l+0x488>
 80081ac:	2f00      	cmp	r7, #0
 80081ae:	dd08      	ble.n	80081c2 <_strtod_l+0x76a>
 80081b0:	9905      	ldr	r1, [sp, #20]
 80081b2:	463a      	mov	r2, r7
 80081b4:	4620      	mov	r0, r4
 80081b6:	f002 fa83 	bl	800a6c0 <__lshift>
 80081ba:	9005      	str	r0, [sp, #20]
 80081bc:	2800      	cmp	r0, #0
 80081be:	f43f ae8f 	beq.w	8007ee0 <_strtod_l+0x488>
 80081c2:	f1ba 0f00 	cmp.w	sl, #0
 80081c6:	dd08      	ble.n	80081da <_strtod_l+0x782>
 80081c8:	4659      	mov	r1, fp
 80081ca:	4652      	mov	r2, sl
 80081cc:	4620      	mov	r0, r4
 80081ce:	f002 fa77 	bl	800a6c0 <__lshift>
 80081d2:	4683      	mov	fp, r0
 80081d4:	2800      	cmp	r0, #0
 80081d6:	f43f ae83 	beq.w	8007ee0 <_strtod_l+0x488>
 80081da:	9a05      	ldr	r2, [sp, #20]
 80081dc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80081de:	4620      	mov	r0, r4
 80081e0:	f002 faf6 	bl	800a7d0 <__mdiff>
 80081e4:	4605      	mov	r5, r0
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f43f ae7a 	beq.w	8007ee0 <_strtod_l+0x488>
 80081ec:	68c3      	ldr	r3, [r0, #12]
 80081ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f0:	2300      	movs	r3, #0
 80081f2:	60c3      	str	r3, [r0, #12]
 80081f4:	4659      	mov	r1, fp
 80081f6:	f002 facf 	bl	800a798 <__mcmp>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	da60      	bge.n	80082c0 <_strtod_l+0x868>
 80081fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008200:	ea53 0308 	orrs.w	r3, r3, r8
 8008204:	f040 8084 	bne.w	8008310 <_strtod_l+0x8b8>
 8008208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800820c:	2b00      	cmp	r3, #0
 800820e:	d17f      	bne.n	8008310 <_strtod_l+0x8b8>
 8008210:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008214:	0d1b      	lsrs	r3, r3, #20
 8008216:	051b      	lsls	r3, r3, #20
 8008218:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800821c:	d978      	bls.n	8008310 <_strtod_l+0x8b8>
 800821e:	696b      	ldr	r3, [r5, #20]
 8008220:	b913      	cbnz	r3, 8008228 <_strtod_l+0x7d0>
 8008222:	692b      	ldr	r3, [r5, #16]
 8008224:	2b01      	cmp	r3, #1
 8008226:	dd73      	ble.n	8008310 <_strtod_l+0x8b8>
 8008228:	4629      	mov	r1, r5
 800822a:	2201      	movs	r2, #1
 800822c:	4620      	mov	r0, r4
 800822e:	f002 fa47 	bl	800a6c0 <__lshift>
 8008232:	4659      	mov	r1, fp
 8008234:	4605      	mov	r5, r0
 8008236:	f002 faaf 	bl	800a798 <__mcmp>
 800823a:	2800      	cmp	r0, #0
 800823c:	dd68      	ble.n	8008310 <_strtod_l+0x8b8>
 800823e:	9904      	ldr	r1, [sp, #16]
 8008240:	4a54      	ldr	r2, [pc, #336]	; (8008394 <_strtod_l+0x93c>)
 8008242:	464b      	mov	r3, r9
 8008244:	2900      	cmp	r1, #0
 8008246:	f000 8084 	beq.w	8008352 <_strtod_l+0x8fa>
 800824a:	ea02 0109 	and.w	r1, r2, r9
 800824e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008252:	dc7e      	bgt.n	8008352 <_strtod_l+0x8fa>
 8008254:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008258:	f77f aeb3 	ble.w	8007fc2 <_strtod_l+0x56a>
 800825c:	4b4e      	ldr	r3, [pc, #312]	; (8008398 <_strtod_l+0x940>)
 800825e:	4640      	mov	r0, r8
 8008260:	4649      	mov	r1, r9
 8008262:	2200      	movs	r2, #0
 8008264:	f7f8 f9f2 	bl	800064c <__aeabi_dmul>
 8008268:	4b4a      	ldr	r3, [pc, #296]	; (8008394 <_strtod_l+0x93c>)
 800826a:	400b      	ands	r3, r1
 800826c:	4680      	mov	r8, r0
 800826e:	4689      	mov	r9, r1
 8008270:	2b00      	cmp	r3, #0
 8008272:	f47f ae3f 	bne.w	8007ef4 <_strtod_l+0x49c>
 8008276:	2322      	movs	r3, #34	; 0x22
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	e63b      	b.n	8007ef4 <_strtod_l+0x49c>
 800827c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	ea03 0808 	and.w	r8, r3, r8
 8008288:	e6e8      	b.n	800805c <_strtod_l+0x604>
 800828a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800828e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008292:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008296:	36e2      	adds	r6, #226	; 0xe2
 8008298:	fa01 f306 	lsl.w	r3, r1, r6
 800829c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80082a0:	e748      	b.n	8008134 <_strtod_l+0x6dc>
 80082a2:	2100      	movs	r1, #0
 80082a4:	2301      	movs	r3, #1
 80082a6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80082aa:	e743      	b.n	8008134 <_strtod_l+0x6dc>
 80082ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082ae:	4632      	mov	r2, r6
 80082b0:	4620      	mov	r0, r4
 80082b2:	f002 fa05 	bl	800a6c0 <__lshift>
 80082b6:	9016      	str	r0, [sp, #88]	; 0x58
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f47f af6b 	bne.w	8008194 <_strtod_l+0x73c>
 80082be:	e60f      	b.n	8007ee0 <_strtod_l+0x488>
 80082c0:	46ca      	mov	sl, r9
 80082c2:	d171      	bne.n	80083a8 <_strtod_l+0x950>
 80082c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082ca:	b352      	cbz	r2, 8008322 <_strtod_l+0x8ca>
 80082cc:	4a33      	ldr	r2, [pc, #204]	; (800839c <_strtod_l+0x944>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d12a      	bne.n	8008328 <_strtod_l+0x8d0>
 80082d2:	9b04      	ldr	r3, [sp, #16]
 80082d4:	4641      	mov	r1, r8
 80082d6:	b1fb      	cbz	r3, 8008318 <_strtod_l+0x8c0>
 80082d8:	4b2e      	ldr	r3, [pc, #184]	; (8008394 <_strtod_l+0x93c>)
 80082da:	ea09 0303 	and.w	r3, r9, r3
 80082de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082e6:	d81a      	bhi.n	800831e <_strtod_l+0x8c6>
 80082e8:	0d1b      	lsrs	r3, r3, #20
 80082ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082ee:	fa02 f303 	lsl.w	r3, r2, r3
 80082f2:	4299      	cmp	r1, r3
 80082f4:	d118      	bne.n	8008328 <_strtod_l+0x8d0>
 80082f6:	4b2a      	ldr	r3, [pc, #168]	; (80083a0 <_strtod_l+0x948>)
 80082f8:	459a      	cmp	sl, r3
 80082fa:	d102      	bne.n	8008302 <_strtod_l+0x8aa>
 80082fc:	3101      	adds	r1, #1
 80082fe:	f43f adef 	beq.w	8007ee0 <_strtod_l+0x488>
 8008302:	4b24      	ldr	r3, [pc, #144]	; (8008394 <_strtod_l+0x93c>)
 8008304:	ea0a 0303 	and.w	r3, sl, r3
 8008308:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800830c:	f04f 0800 	mov.w	r8, #0
 8008310:	9b04      	ldr	r3, [sp, #16]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1a2      	bne.n	800825c <_strtod_l+0x804>
 8008316:	e5ed      	b.n	8007ef4 <_strtod_l+0x49c>
 8008318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800831c:	e7e9      	b.n	80082f2 <_strtod_l+0x89a>
 800831e:	4613      	mov	r3, r2
 8008320:	e7e7      	b.n	80082f2 <_strtod_l+0x89a>
 8008322:	ea53 0308 	orrs.w	r3, r3, r8
 8008326:	d08a      	beq.n	800823e <_strtod_l+0x7e6>
 8008328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832a:	b1e3      	cbz	r3, 8008366 <_strtod_l+0x90e>
 800832c:	ea13 0f0a 	tst.w	r3, sl
 8008330:	d0ee      	beq.n	8008310 <_strtod_l+0x8b8>
 8008332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008334:	9a04      	ldr	r2, [sp, #16]
 8008336:	4640      	mov	r0, r8
 8008338:	4649      	mov	r1, r9
 800833a:	b1c3      	cbz	r3, 800836e <_strtod_l+0x916>
 800833c:	f7ff fb6e 	bl	8007a1c <sulp>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	ec51 0b18 	vmov	r0, r1, d8
 8008348:	f7f7 ffca 	bl	80002e0 <__adddf3>
 800834c:	4680      	mov	r8, r0
 800834e:	4689      	mov	r9, r1
 8008350:	e7de      	b.n	8008310 <_strtod_l+0x8b8>
 8008352:	4013      	ands	r3, r2
 8008354:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008358:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800835c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008360:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008364:	e7d4      	b.n	8008310 <_strtod_l+0x8b8>
 8008366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008368:	ea13 0f08 	tst.w	r3, r8
 800836c:	e7e0      	b.n	8008330 <_strtod_l+0x8d8>
 800836e:	f7ff fb55 	bl	8007a1c <sulp>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	ec51 0b18 	vmov	r0, r1, d8
 800837a:	f7f7 ffaf 	bl	80002dc <__aeabi_dsub>
 800837e:	2200      	movs	r2, #0
 8008380:	2300      	movs	r3, #0
 8008382:	4680      	mov	r8, r0
 8008384:	4689      	mov	r9, r1
 8008386:	f7f8 fbc9 	bl	8000b1c <__aeabi_dcmpeq>
 800838a:	2800      	cmp	r0, #0
 800838c:	d0c0      	beq.n	8008310 <_strtod_l+0x8b8>
 800838e:	e618      	b.n	8007fc2 <_strtod_l+0x56a>
 8008390:	fffffc02 	.word	0xfffffc02
 8008394:	7ff00000 	.word	0x7ff00000
 8008398:	39500000 	.word	0x39500000
 800839c:	000fffff 	.word	0x000fffff
 80083a0:	7fefffff 	.word	0x7fefffff
 80083a4:	0800c9f8 	.word	0x0800c9f8
 80083a8:	4659      	mov	r1, fp
 80083aa:	4628      	mov	r0, r5
 80083ac:	f002 fb64 	bl	800aa78 <__ratio>
 80083b0:	ec57 6b10 	vmov	r6, r7, d0
 80083b4:	ee10 0a10 	vmov	r0, s0
 80083b8:	2200      	movs	r2, #0
 80083ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083be:	4639      	mov	r1, r7
 80083c0:	f7f8 fbc0 	bl	8000b44 <__aeabi_dcmple>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d071      	beq.n	80084ac <_strtod_l+0xa54>
 80083c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d17c      	bne.n	80084c8 <_strtod_l+0xa70>
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	d15a      	bne.n	800848a <_strtod_l+0xa32>
 80083d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d15d      	bne.n	8008498 <_strtod_l+0xa40>
 80083dc:	4b90      	ldr	r3, [pc, #576]	; (8008620 <_strtod_l+0xbc8>)
 80083de:	2200      	movs	r2, #0
 80083e0:	4630      	mov	r0, r6
 80083e2:	4639      	mov	r1, r7
 80083e4:	f7f8 fba4 	bl	8000b30 <__aeabi_dcmplt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d15c      	bne.n	80084a6 <_strtod_l+0xa4e>
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	4b8c      	ldr	r3, [pc, #560]	; (8008624 <_strtod_l+0xbcc>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	f7f8 f92a 	bl	800064c <__aeabi_dmul>
 80083f8:	4606      	mov	r6, r0
 80083fa:	460f      	mov	r7, r1
 80083fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008400:	9606      	str	r6, [sp, #24]
 8008402:	9307      	str	r3, [sp, #28]
 8008404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008408:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800840c:	4b86      	ldr	r3, [pc, #536]	; (8008628 <_strtod_l+0xbd0>)
 800840e:	ea0a 0303 	and.w	r3, sl, r3
 8008412:	930d      	str	r3, [sp, #52]	; 0x34
 8008414:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008416:	4b85      	ldr	r3, [pc, #532]	; (800862c <_strtod_l+0xbd4>)
 8008418:	429a      	cmp	r2, r3
 800841a:	f040 8090 	bne.w	800853e <_strtod_l+0xae6>
 800841e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008422:	ec49 8b10 	vmov	d0, r8, r9
 8008426:	f002 fa5d 	bl	800a8e4 <__ulp>
 800842a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800842e:	ec51 0b10 	vmov	r0, r1, d0
 8008432:	f7f8 f90b 	bl	800064c <__aeabi_dmul>
 8008436:	4642      	mov	r2, r8
 8008438:	464b      	mov	r3, r9
 800843a:	f7f7 ff51 	bl	80002e0 <__adddf3>
 800843e:	460b      	mov	r3, r1
 8008440:	4979      	ldr	r1, [pc, #484]	; (8008628 <_strtod_l+0xbd0>)
 8008442:	4a7b      	ldr	r2, [pc, #492]	; (8008630 <_strtod_l+0xbd8>)
 8008444:	4019      	ands	r1, r3
 8008446:	4291      	cmp	r1, r2
 8008448:	4680      	mov	r8, r0
 800844a:	d944      	bls.n	80084d6 <_strtod_l+0xa7e>
 800844c:	ee18 2a90 	vmov	r2, s17
 8008450:	4b78      	ldr	r3, [pc, #480]	; (8008634 <_strtod_l+0xbdc>)
 8008452:	429a      	cmp	r2, r3
 8008454:	d104      	bne.n	8008460 <_strtod_l+0xa08>
 8008456:	ee18 3a10 	vmov	r3, s16
 800845a:	3301      	adds	r3, #1
 800845c:	f43f ad40 	beq.w	8007ee0 <_strtod_l+0x488>
 8008460:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008634 <_strtod_l+0xbdc>
 8008464:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008468:	9916      	ldr	r1, [sp, #88]	; 0x58
 800846a:	4620      	mov	r0, r4
 800846c:	f001 ff0e 	bl	800a28c <_Bfree>
 8008470:	9905      	ldr	r1, [sp, #20]
 8008472:	4620      	mov	r0, r4
 8008474:	f001 ff0a 	bl	800a28c <_Bfree>
 8008478:	4659      	mov	r1, fp
 800847a:	4620      	mov	r0, r4
 800847c:	f001 ff06 	bl	800a28c <_Bfree>
 8008480:	4629      	mov	r1, r5
 8008482:	4620      	mov	r0, r4
 8008484:	f001 ff02 	bl	800a28c <_Bfree>
 8008488:	e609      	b.n	800809e <_strtod_l+0x646>
 800848a:	f1b8 0f01 	cmp.w	r8, #1
 800848e:	d103      	bne.n	8008498 <_strtod_l+0xa40>
 8008490:	f1b9 0f00 	cmp.w	r9, #0
 8008494:	f43f ad95 	beq.w	8007fc2 <_strtod_l+0x56a>
 8008498:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80085f0 <_strtod_l+0xb98>
 800849c:	4f60      	ldr	r7, [pc, #384]	; (8008620 <_strtod_l+0xbc8>)
 800849e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084a2:	2600      	movs	r6, #0
 80084a4:	e7ae      	b.n	8008404 <_strtod_l+0x9ac>
 80084a6:	4f5f      	ldr	r7, [pc, #380]	; (8008624 <_strtod_l+0xbcc>)
 80084a8:	2600      	movs	r6, #0
 80084aa:	e7a7      	b.n	80083fc <_strtod_l+0x9a4>
 80084ac:	4b5d      	ldr	r3, [pc, #372]	; (8008624 <_strtod_l+0xbcc>)
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	2200      	movs	r2, #0
 80084b4:	f7f8 f8ca 	bl	800064c <__aeabi_dmul>
 80084b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d09c      	beq.n	80083fc <_strtod_l+0x9a4>
 80084c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084c6:	e79d      	b.n	8008404 <_strtod_l+0x9ac>
 80084c8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80085f8 <_strtod_l+0xba0>
 80084cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084d0:	ec57 6b17 	vmov	r6, r7, d7
 80084d4:	e796      	b.n	8008404 <_strtod_l+0x9ac>
 80084d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	46ca      	mov	sl, r9
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1c2      	bne.n	8008468 <_strtod_l+0xa10>
 80084e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084e8:	0d1b      	lsrs	r3, r3, #20
 80084ea:	051b      	lsls	r3, r3, #20
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d1bb      	bne.n	8008468 <_strtod_l+0xa10>
 80084f0:	4630      	mov	r0, r6
 80084f2:	4639      	mov	r1, r7
 80084f4:	f7f8 fc0a 	bl	8000d0c <__aeabi_d2lz>
 80084f8:	f7f8 f87a 	bl	80005f0 <__aeabi_l2d>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4630      	mov	r0, r6
 8008502:	4639      	mov	r1, r7
 8008504:	f7f7 feea 	bl	80002dc <__aeabi_dsub>
 8008508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800850e:	ea43 0308 	orr.w	r3, r3, r8
 8008512:	4313      	orrs	r3, r2
 8008514:	4606      	mov	r6, r0
 8008516:	460f      	mov	r7, r1
 8008518:	d054      	beq.n	80085c4 <_strtod_l+0xb6c>
 800851a:	a339      	add	r3, pc, #228	; (adr r3, 8008600 <_strtod_l+0xba8>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f7f8 fb06 	bl	8000b30 <__aeabi_dcmplt>
 8008524:	2800      	cmp	r0, #0
 8008526:	f47f ace5 	bne.w	8007ef4 <_strtod_l+0x49c>
 800852a:	a337      	add	r3, pc, #220	; (adr r3, 8008608 <_strtod_l+0xbb0>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	4630      	mov	r0, r6
 8008532:	4639      	mov	r1, r7
 8008534:	f7f8 fb1a 	bl	8000b6c <__aeabi_dcmpgt>
 8008538:	2800      	cmp	r0, #0
 800853a:	d095      	beq.n	8008468 <_strtod_l+0xa10>
 800853c:	e4da      	b.n	8007ef4 <_strtod_l+0x49c>
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	b333      	cbz	r3, 8008590 <_strtod_l+0xb38>
 8008542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008544:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008548:	d822      	bhi.n	8008590 <_strtod_l+0xb38>
 800854a:	a331      	add	r3, pc, #196	; (adr r3, 8008610 <_strtod_l+0xbb8>)
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	4630      	mov	r0, r6
 8008552:	4639      	mov	r1, r7
 8008554:	f7f8 faf6 	bl	8000b44 <__aeabi_dcmple>
 8008558:	b1a0      	cbz	r0, 8008584 <_strtod_l+0xb2c>
 800855a:	4639      	mov	r1, r7
 800855c:	4630      	mov	r0, r6
 800855e:	f7f8 fb4d 	bl	8000bfc <__aeabi_d2uiz>
 8008562:	2801      	cmp	r0, #1
 8008564:	bf38      	it	cc
 8008566:	2001      	movcc	r0, #1
 8008568:	f7f7 fff6 	bl	8000558 <__aeabi_ui2d>
 800856c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856e:	4606      	mov	r6, r0
 8008570:	460f      	mov	r7, r1
 8008572:	bb23      	cbnz	r3, 80085be <_strtod_l+0xb66>
 8008574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008578:	9010      	str	r0, [sp, #64]	; 0x40
 800857a:	9311      	str	r3, [sp, #68]	; 0x44
 800857c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008580:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008586:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008588:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008590:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008594:	eeb0 0a48 	vmov.f32	s0, s16
 8008598:	eef0 0a68 	vmov.f32	s1, s17
 800859c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80085a0:	f002 f9a0 	bl	800a8e4 <__ulp>
 80085a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80085a8:	ec53 2b10 	vmov	r2, r3, d0
 80085ac:	f7f8 f84e 	bl	800064c <__aeabi_dmul>
 80085b0:	ec53 2b18 	vmov	r2, r3, d8
 80085b4:	f7f7 fe94 	bl	80002e0 <__adddf3>
 80085b8:	4680      	mov	r8, r0
 80085ba:	4689      	mov	r9, r1
 80085bc:	e78d      	b.n	80084da <_strtod_l+0xa82>
 80085be:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80085c2:	e7db      	b.n	800857c <_strtod_l+0xb24>
 80085c4:	a314      	add	r3, pc, #80	; (adr r3, 8008618 <_strtod_l+0xbc0>)
 80085c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ca:	f7f8 fab1 	bl	8000b30 <__aeabi_dcmplt>
 80085ce:	e7b3      	b.n	8008538 <_strtod_l+0xae0>
 80085d0:	2300      	movs	r3, #0
 80085d2:	930a      	str	r3, [sp, #40]	; 0x28
 80085d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	f7ff ba7c 	b.w	8007ad6 <_strtod_l+0x7e>
 80085de:	2a65      	cmp	r2, #101	; 0x65
 80085e0:	f43f ab75 	beq.w	8007cce <_strtod_l+0x276>
 80085e4:	2a45      	cmp	r2, #69	; 0x45
 80085e6:	f43f ab72 	beq.w	8007cce <_strtod_l+0x276>
 80085ea:	2301      	movs	r3, #1
 80085ec:	f7ff bbaa 	b.w	8007d44 <_strtod_l+0x2ec>
 80085f0:	00000000 	.word	0x00000000
 80085f4:	bff00000 	.word	0xbff00000
 80085f8:	00000000 	.word	0x00000000
 80085fc:	3ff00000 	.word	0x3ff00000
 8008600:	94a03595 	.word	0x94a03595
 8008604:	3fdfffff 	.word	0x3fdfffff
 8008608:	35afe535 	.word	0x35afe535
 800860c:	3fe00000 	.word	0x3fe00000
 8008610:	ffc00000 	.word	0xffc00000
 8008614:	41dfffff 	.word	0x41dfffff
 8008618:	94a03595 	.word	0x94a03595
 800861c:	3fcfffff 	.word	0x3fcfffff
 8008620:	3ff00000 	.word	0x3ff00000
 8008624:	3fe00000 	.word	0x3fe00000
 8008628:	7ff00000 	.word	0x7ff00000
 800862c:	7fe00000 	.word	0x7fe00000
 8008630:	7c9fffff 	.word	0x7c9fffff
 8008634:	7fefffff 	.word	0x7fefffff

08008638 <_strtod_r>:
 8008638:	4b01      	ldr	r3, [pc, #4]	; (8008640 <_strtod_r+0x8>)
 800863a:	f7ff ba0d 	b.w	8007a58 <_strtod_l>
 800863e:	bf00      	nop
 8008640:	20000050 	.word	0x20000050

08008644 <_strtol_l.constprop.0>:
 8008644:	2b01      	cmp	r3, #1
 8008646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864a:	d001      	beq.n	8008650 <_strtol_l.constprop.0+0xc>
 800864c:	2b24      	cmp	r3, #36	; 0x24
 800864e:	d906      	bls.n	800865e <_strtol_l.constprop.0+0x1a>
 8008650:	f000 f8f2 	bl	8008838 <__errno>
 8008654:	2316      	movs	r3, #22
 8008656:	6003      	str	r3, [r0, #0]
 8008658:	2000      	movs	r0, #0
 800865a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008744 <_strtol_l.constprop.0+0x100>
 8008662:	460d      	mov	r5, r1
 8008664:	462e      	mov	r6, r5
 8008666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800866a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800866e:	f017 0708 	ands.w	r7, r7, #8
 8008672:	d1f7      	bne.n	8008664 <_strtol_l.constprop.0+0x20>
 8008674:	2c2d      	cmp	r4, #45	; 0x2d
 8008676:	d132      	bne.n	80086de <_strtol_l.constprop.0+0x9a>
 8008678:	782c      	ldrb	r4, [r5, #0]
 800867a:	2701      	movs	r7, #1
 800867c:	1cb5      	adds	r5, r6, #2
 800867e:	2b00      	cmp	r3, #0
 8008680:	d05b      	beq.n	800873a <_strtol_l.constprop.0+0xf6>
 8008682:	2b10      	cmp	r3, #16
 8008684:	d109      	bne.n	800869a <_strtol_l.constprop.0+0x56>
 8008686:	2c30      	cmp	r4, #48	; 0x30
 8008688:	d107      	bne.n	800869a <_strtol_l.constprop.0+0x56>
 800868a:	782c      	ldrb	r4, [r5, #0]
 800868c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008690:	2c58      	cmp	r4, #88	; 0x58
 8008692:	d14d      	bne.n	8008730 <_strtol_l.constprop.0+0xec>
 8008694:	786c      	ldrb	r4, [r5, #1]
 8008696:	2310      	movs	r3, #16
 8008698:	3502      	adds	r5, #2
 800869a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800869e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80086a2:	f04f 0e00 	mov.w	lr, #0
 80086a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80086aa:	4676      	mov	r6, lr
 80086ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80086b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80086b4:	f1bc 0f09 	cmp.w	ip, #9
 80086b8:	d816      	bhi.n	80086e8 <_strtol_l.constprop.0+0xa4>
 80086ba:	4664      	mov	r4, ip
 80086bc:	42a3      	cmp	r3, r4
 80086be:	dd24      	ble.n	800870a <_strtol_l.constprop.0+0xc6>
 80086c0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80086c4:	d008      	beq.n	80086d8 <_strtol_l.constprop.0+0x94>
 80086c6:	45b1      	cmp	r9, r6
 80086c8:	d31c      	bcc.n	8008704 <_strtol_l.constprop.0+0xc0>
 80086ca:	d101      	bne.n	80086d0 <_strtol_l.constprop.0+0x8c>
 80086cc:	45a2      	cmp	sl, r4
 80086ce:	db19      	blt.n	8008704 <_strtol_l.constprop.0+0xc0>
 80086d0:	fb06 4603 	mla	r6, r6, r3, r4
 80086d4:	f04f 0e01 	mov.w	lr, #1
 80086d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086dc:	e7e8      	b.n	80086b0 <_strtol_l.constprop.0+0x6c>
 80086de:	2c2b      	cmp	r4, #43	; 0x2b
 80086e0:	bf04      	itt	eq
 80086e2:	782c      	ldrbeq	r4, [r5, #0]
 80086e4:	1cb5      	addeq	r5, r6, #2
 80086e6:	e7ca      	b.n	800867e <_strtol_l.constprop.0+0x3a>
 80086e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80086ec:	f1bc 0f19 	cmp.w	ip, #25
 80086f0:	d801      	bhi.n	80086f6 <_strtol_l.constprop.0+0xb2>
 80086f2:	3c37      	subs	r4, #55	; 0x37
 80086f4:	e7e2      	b.n	80086bc <_strtol_l.constprop.0+0x78>
 80086f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80086fa:	f1bc 0f19 	cmp.w	ip, #25
 80086fe:	d804      	bhi.n	800870a <_strtol_l.constprop.0+0xc6>
 8008700:	3c57      	subs	r4, #87	; 0x57
 8008702:	e7db      	b.n	80086bc <_strtol_l.constprop.0+0x78>
 8008704:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008708:	e7e6      	b.n	80086d8 <_strtol_l.constprop.0+0x94>
 800870a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800870e:	d105      	bne.n	800871c <_strtol_l.constprop.0+0xd8>
 8008710:	2322      	movs	r3, #34	; 0x22
 8008712:	6003      	str	r3, [r0, #0]
 8008714:	4646      	mov	r6, r8
 8008716:	b942      	cbnz	r2, 800872a <_strtol_l.constprop.0+0xe6>
 8008718:	4630      	mov	r0, r6
 800871a:	e79e      	b.n	800865a <_strtol_l.constprop.0+0x16>
 800871c:	b107      	cbz	r7, 8008720 <_strtol_l.constprop.0+0xdc>
 800871e:	4276      	negs	r6, r6
 8008720:	2a00      	cmp	r2, #0
 8008722:	d0f9      	beq.n	8008718 <_strtol_l.constprop.0+0xd4>
 8008724:	f1be 0f00 	cmp.w	lr, #0
 8008728:	d000      	beq.n	800872c <_strtol_l.constprop.0+0xe8>
 800872a:	1e69      	subs	r1, r5, #1
 800872c:	6011      	str	r1, [r2, #0]
 800872e:	e7f3      	b.n	8008718 <_strtol_l.constprop.0+0xd4>
 8008730:	2430      	movs	r4, #48	; 0x30
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1b1      	bne.n	800869a <_strtol_l.constprop.0+0x56>
 8008736:	2308      	movs	r3, #8
 8008738:	e7af      	b.n	800869a <_strtol_l.constprop.0+0x56>
 800873a:	2c30      	cmp	r4, #48	; 0x30
 800873c:	d0a5      	beq.n	800868a <_strtol_l.constprop.0+0x46>
 800873e:	230a      	movs	r3, #10
 8008740:	e7ab      	b.n	800869a <_strtol_l.constprop.0+0x56>
 8008742:	bf00      	nop
 8008744:	0800ca29 	.word	0x0800ca29

08008748 <_strtol_r>:
 8008748:	f7ff bf7c 	b.w	8008644 <_strtol_l.constprop.0>

0800874c <_fwalk_sglue>:
 800874c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008750:	4607      	mov	r7, r0
 8008752:	4688      	mov	r8, r1
 8008754:	4614      	mov	r4, r2
 8008756:	2600      	movs	r6, #0
 8008758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800875c:	f1b9 0901 	subs.w	r9, r9, #1
 8008760:	d505      	bpl.n	800876e <_fwalk_sglue+0x22>
 8008762:	6824      	ldr	r4, [r4, #0]
 8008764:	2c00      	cmp	r4, #0
 8008766:	d1f7      	bne.n	8008758 <_fwalk_sglue+0xc>
 8008768:	4630      	mov	r0, r6
 800876a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876e:	89ab      	ldrh	r3, [r5, #12]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d907      	bls.n	8008784 <_fwalk_sglue+0x38>
 8008774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008778:	3301      	adds	r3, #1
 800877a:	d003      	beq.n	8008784 <_fwalk_sglue+0x38>
 800877c:	4629      	mov	r1, r5
 800877e:	4638      	mov	r0, r7
 8008780:	47c0      	blx	r8
 8008782:	4306      	orrs	r6, r0
 8008784:	3568      	adds	r5, #104	; 0x68
 8008786:	e7e9      	b.n	800875c <_fwalk_sglue+0x10>

08008788 <_vsniprintf_r>:
 8008788:	b530      	push	{r4, r5, lr}
 800878a:	4614      	mov	r4, r2
 800878c:	2c00      	cmp	r4, #0
 800878e:	b09b      	sub	sp, #108	; 0x6c
 8008790:	4605      	mov	r5, r0
 8008792:	461a      	mov	r2, r3
 8008794:	da05      	bge.n	80087a2 <_vsniprintf_r+0x1a>
 8008796:	238b      	movs	r3, #139	; 0x8b
 8008798:	6003      	str	r3, [r0, #0]
 800879a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800879e:	b01b      	add	sp, #108	; 0x6c
 80087a0:	bd30      	pop	{r4, r5, pc}
 80087a2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087a6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80087aa:	bf14      	ite	ne
 80087ac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80087b0:	4623      	moveq	r3, r4
 80087b2:	9302      	str	r3, [sp, #8]
 80087b4:	9305      	str	r3, [sp, #20]
 80087b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087ba:	9100      	str	r1, [sp, #0]
 80087bc:	9104      	str	r1, [sp, #16]
 80087be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80087c2:	4669      	mov	r1, sp
 80087c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087c6:	f001 faaf 	bl	8009d28 <_svfiprintf_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	bfbc      	itt	lt
 80087ce:	238b      	movlt	r3, #139	; 0x8b
 80087d0:	602b      	strlt	r3, [r5, #0]
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d0e3      	beq.n	800879e <_vsniprintf_r+0x16>
 80087d6:	9b00      	ldr	r3, [sp, #0]
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e7df      	b.n	800879e <_vsniprintf_r+0x16>
	...

080087e0 <vsniprintf>:
 80087e0:	b507      	push	{r0, r1, r2, lr}
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4613      	mov	r3, r2
 80087e6:	460a      	mov	r2, r1
 80087e8:	4601      	mov	r1, r0
 80087ea:	4803      	ldr	r0, [pc, #12]	; (80087f8 <vsniprintf+0x18>)
 80087ec:	6800      	ldr	r0, [r0, #0]
 80087ee:	f7ff ffcb 	bl	8008788 <_vsniprintf_r>
 80087f2:	b003      	add	sp, #12
 80087f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80087f8:	20000208 	.word	0x20000208

080087fc <strncmp>:
 80087fc:	b510      	push	{r4, lr}
 80087fe:	b16a      	cbz	r2, 800881c <strncmp+0x20>
 8008800:	3901      	subs	r1, #1
 8008802:	1884      	adds	r4, r0, r2
 8008804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008808:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800880c:	429a      	cmp	r2, r3
 800880e:	d103      	bne.n	8008818 <strncmp+0x1c>
 8008810:	42a0      	cmp	r0, r4
 8008812:	d001      	beq.n	8008818 <strncmp+0x1c>
 8008814:	2a00      	cmp	r2, #0
 8008816:	d1f5      	bne.n	8008804 <strncmp+0x8>
 8008818:	1ad0      	subs	r0, r2, r3
 800881a:	bd10      	pop	{r4, pc}
 800881c:	4610      	mov	r0, r2
 800881e:	e7fc      	b.n	800881a <strncmp+0x1e>

08008820 <memset>:
 8008820:	4402      	add	r2, r0
 8008822:	4603      	mov	r3, r0
 8008824:	4293      	cmp	r3, r2
 8008826:	d100      	bne.n	800882a <memset+0xa>
 8008828:	4770      	bx	lr
 800882a:	f803 1b01 	strb.w	r1, [r3], #1
 800882e:	e7f9      	b.n	8008824 <memset+0x4>

08008830 <_localeconv_r>:
 8008830:	4800      	ldr	r0, [pc, #0]	; (8008834 <_localeconv_r+0x4>)
 8008832:	4770      	bx	lr
 8008834:	20000140 	.word	0x20000140

08008838 <__errno>:
 8008838:	4b01      	ldr	r3, [pc, #4]	; (8008840 <__errno+0x8>)
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20000208 	.word	0x20000208

08008844 <__libc_init_array>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	4d0d      	ldr	r5, [pc, #52]	; (800887c <__libc_init_array+0x38>)
 8008848:	4c0d      	ldr	r4, [pc, #52]	; (8008880 <__libc_init_array+0x3c>)
 800884a:	1b64      	subs	r4, r4, r5
 800884c:	10a4      	asrs	r4, r4, #2
 800884e:	2600      	movs	r6, #0
 8008850:	42a6      	cmp	r6, r4
 8008852:	d109      	bne.n	8008868 <__libc_init_array+0x24>
 8008854:	4d0b      	ldr	r5, [pc, #44]	; (8008884 <__libc_init_array+0x40>)
 8008856:	4c0c      	ldr	r4, [pc, #48]	; (8008888 <__libc_init_array+0x44>)
 8008858:	f002 fdb6 	bl	800b3c8 <_init>
 800885c:	1b64      	subs	r4, r4, r5
 800885e:	10a4      	asrs	r4, r4, #2
 8008860:	2600      	movs	r6, #0
 8008862:	42a6      	cmp	r6, r4
 8008864:	d105      	bne.n	8008872 <__libc_init_array+0x2e>
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	f855 3b04 	ldr.w	r3, [r5], #4
 800886c:	4798      	blx	r3
 800886e:	3601      	adds	r6, #1
 8008870:	e7ee      	b.n	8008850 <__libc_init_array+0xc>
 8008872:	f855 3b04 	ldr.w	r3, [r5], #4
 8008876:	4798      	blx	r3
 8008878:	3601      	adds	r6, #1
 800887a:	e7f2      	b.n	8008862 <__libc_init_array+0x1e>
 800887c:	0800cdc0 	.word	0x0800cdc0
 8008880:	0800cdc0 	.word	0x0800cdc0
 8008884:	0800cdc0 	.word	0x0800cdc0
 8008888:	0800cdc4 	.word	0x0800cdc4

0800888c <__retarget_lock_init_recursive>:
 800888c:	4770      	bx	lr

0800888e <__retarget_lock_acquire_recursive>:
 800888e:	4770      	bx	lr

08008890 <__retarget_lock_release_recursive>:
 8008890:	4770      	bx	lr

08008892 <memcpy>:
 8008892:	440a      	add	r2, r1
 8008894:	4291      	cmp	r1, r2
 8008896:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800889a:	d100      	bne.n	800889e <memcpy+0xc>
 800889c:	4770      	bx	lr
 800889e:	b510      	push	{r4, lr}
 80088a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a8:	4291      	cmp	r1, r2
 80088aa:	d1f9      	bne.n	80088a0 <memcpy+0xe>
 80088ac:	bd10      	pop	{r4, pc}
	...

080088b0 <nan>:
 80088b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088b8 <nan+0x8>
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	00000000 	.word	0x00000000
 80088bc:	7ff80000 	.word	0x7ff80000

080088c0 <nanf>:
 80088c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088c8 <nanf+0x8>
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	7fc00000 	.word	0x7fc00000

080088cc <quorem>:
 80088cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	6903      	ldr	r3, [r0, #16]
 80088d2:	690c      	ldr	r4, [r1, #16]
 80088d4:	42a3      	cmp	r3, r4
 80088d6:	4607      	mov	r7, r0
 80088d8:	db7e      	blt.n	80089d8 <quorem+0x10c>
 80088da:	3c01      	subs	r4, #1
 80088dc:	f101 0814 	add.w	r8, r1, #20
 80088e0:	f100 0514 	add.w	r5, r0, #20
 80088e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088f2:	3301      	adds	r3, #1
 80088f4:	429a      	cmp	r2, r3
 80088f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008902:	d331      	bcc.n	8008968 <quorem+0x9c>
 8008904:	f04f 0e00 	mov.w	lr, #0
 8008908:	4640      	mov	r0, r8
 800890a:	46ac      	mov	ip, r5
 800890c:	46f2      	mov	sl, lr
 800890e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008912:	b293      	uxth	r3, r2
 8008914:	fb06 e303 	mla	r3, r6, r3, lr
 8008918:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800891c:	0c1a      	lsrs	r2, r3, #16
 800891e:	b29b      	uxth	r3, r3
 8008920:	ebaa 0303 	sub.w	r3, sl, r3
 8008924:	f8dc a000 	ldr.w	sl, [ip]
 8008928:	fa13 f38a 	uxtah	r3, r3, sl
 800892c:	fb06 220e 	mla	r2, r6, lr, r2
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008938:	b292      	uxth	r2, r2
 800893a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800893e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008942:	f8bd 3000 	ldrh.w	r3, [sp]
 8008946:	4581      	cmp	r9, r0
 8008948:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800894c:	f84c 3b04 	str.w	r3, [ip], #4
 8008950:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008954:	d2db      	bcs.n	800890e <quorem+0x42>
 8008956:	f855 300b 	ldr.w	r3, [r5, fp]
 800895a:	b92b      	cbnz	r3, 8008968 <quorem+0x9c>
 800895c:	9b01      	ldr	r3, [sp, #4]
 800895e:	3b04      	subs	r3, #4
 8008960:	429d      	cmp	r5, r3
 8008962:	461a      	mov	r2, r3
 8008964:	d32c      	bcc.n	80089c0 <quorem+0xf4>
 8008966:	613c      	str	r4, [r7, #16]
 8008968:	4638      	mov	r0, r7
 800896a:	f001 ff15 	bl	800a798 <__mcmp>
 800896e:	2800      	cmp	r0, #0
 8008970:	db22      	blt.n	80089b8 <quorem+0xec>
 8008972:	3601      	adds	r6, #1
 8008974:	4629      	mov	r1, r5
 8008976:	2000      	movs	r0, #0
 8008978:	f858 2b04 	ldr.w	r2, [r8], #4
 800897c:	f8d1 c000 	ldr.w	ip, [r1]
 8008980:	b293      	uxth	r3, r2
 8008982:	1ac3      	subs	r3, r0, r3
 8008984:	0c12      	lsrs	r2, r2, #16
 8008986:	fa13 f38c 	uxtah	r3, r3, ip
 800898a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800898e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008992:	b29b      	uxth	r3, r3
 8008994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008998:	45c1      	cmp	r9, r8
 800899a:	f841 3b04 	str.w	r3, [r1], #4
 800899e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80089a2:	d2e9      	bcs.n	8008978 <quorem+0xac>
 80089a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089ac:	b922      	cbnz	r2, 80089b8 <quorem+0xec>
 80089ae:	3b04      	subs	r3, #4
 80089b0:	429d      	cmp	r5, r3
 80089b2:	461a      	mov	r2, r3
 80089b4:	d30a      	bcc.n	80089cc <quorem+0x100>
 80089b6:	613c      	str	r4, [r7, #16]
 80089b8:	4630      	mov	r0, r6
 80089ba:	b003      	add	sp, #12
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	3b04      	subs	r3, #4
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	d1ce      	bne.n	8008966 <quorem+0x9a>
 80089c8:	3c01      	subs	r4, #1
 80089ca:	e7c9      	b.n	8008960 <quorem+0x94>
 80089cc:	6812      	ldr	r2, [r2, #0]
 80089ce:	3b04      	subs	r3, #4
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	d1f0      	bne.n	80089b6 <quorem+0xea>
 80089d4:	3c01      	subs	r4, #1
 80089d6:	e7eb      	b.n	80089b0 <quorem+0xe4>
 80089d8:	2000      	movs	r0, #0
 80089da:	e7ee      	b.n	80089ba <quorem+0xee>
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <_dtoa_r>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	ed2d 8b04 	vpush	{d8-d9}
 80089e8:	69c5      	ldr	r5, [r0, #28]
 80089ea:	b093      	sub	sp, #76	; 0x4c
 80089ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089f0:	ec57 6b10 	vmov	r6, r7, d0
 80089f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089f8:	9107      	str	r1, [sp, #28]
 80089fa:	4604      	mov	r4, r0
 80089fc:	920a      	str	r2, [sp, #40]	; 0x28
 80089fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008a00:	b975      	cbnz	r5, 8008a20 <_dtoa_r+0x40>
 8008a02:	2010      	movs	r0, #16
 8008a04:	f001 fa8e 	bl	8009f24 <malloc>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	61e0      	str	r0, [r4, #28]
 8008a0c:	b920      	cbnz	r0, 8008a18 <_dtoa_r+0x38>
 8008a0e:	4bae      	ldr	r3, [pc, #696]	; (8008cc8 <_dtoa_r+0x2e8>)
 8008a10:	21ef      	movs	r1, #239	; 0xef
 8008a12:	48ae      	ldr	r0, [pc, #696]	; (8008ccc <_dtoa_r+0x2ec>)
 8008a14:	f002 f996 	bl	800ad44 <__assert_func>
 8008a18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a1c:	6005      	str	r5, [r0, #0]
 8008a1e:	60c5      	str	r5, [r0, #12]
 8008a20:	69e3      	ldr	r3, [r4, #28]
 8008a22:	6819      	ldr	r1, [r3, #0]
 8008a24:	b151      	cbz	r1, 8008a3c <_dtoa_r+0x5c>
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	604a      	str	r2, [r1, #4]
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4093      	lsls	r3, r2
 8008a2e:	608b      	str	r3, [r1, #8]
 8008a30:	4620      	mov	r0, r4
 8008a32:	f001 fc2b 	bl	800a28c <_Bfree>
 8008a36:	69e3      	ldr	r3, [r4, #28]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	1e3b      	subs	r3, r7, #0
 8008a3e:	bfbb      	ittet	lt
 8008a40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a44:	9303      	strlt	r3, [sp, #12]
 8008a46:	2300      	movge	r3, #0
 8008a48:	2201      	movlt	r2, #1
 8008a4a:	bfac      	ite	ge
 8008a4c:	f8c8 3000 	strge.w	r3, [r8]
 8008a50:	f8c8 2000 	strlt.w	r2, [r8]
 8008a54:	4b9e      	ldr	r3, [pc, #632]	; (8008cd0 <_dtoa_r+0x2f0>)
 8008a56:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a5a:	ea33 0308 	bics.w	r3, r3, r8
 8008a5e:	d11b      	bne.n	8008a98 <_dtoa_r+0xb8>
 8008a60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a62:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a6c:	4333      	orrs	r3, r6
 8008a6e:	f000 8593 	beq.w	8009598 <_dtoa_r+0xbb8>
 8008a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a74:	b963      	cbnz	r3, 8008a90 <_dtoa_r+0xb0>
 8008a76:	4b97      	ldr	r3, [pc, #604]	; (8008cd4 <_dtoa_r+0x2f4>)
 8008a78:	e027      	b.n	8008aca <_dtoa_r+0xea>
 8008a7a:	4b97      	ldr	r3, [pc, #604]	; (8008cd8 <_dtoa_r+0x2f8>)
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	9800      	ldr	r0, [sp, #0]
 8008a86:	b013      	add	sp, #76	; 0x4c
 8008a88:	ecbd 8b04 	vpop	{d8-d9}
 8008a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a90:	4b90      	ldr	r3, [pc, #576]	; (8008cd4 <_dtoa_r+0x2f4>)
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	3303      	adds	r3, #3
 8008a96:	e7f3      	b.n	8008a80 <_dtoa_r+0xa0>
 8008a98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	ec51 0b17 	vmov	r0, r1, d7
 8008aa2:	eeb0 8a47 	vmov.f32	s16, s14
 8008aa6:	eef0 8a67 	vmov.f32	s17, s15
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f7f8 f836 	bl	8000b1c <__aeabi_dcmpeq>
 8008ab0:	4681      	mov	r9, r0
 8008ab2:	b160      	cbz	r0, 8008ace <_dtoa_r+0xee>
 8008ab4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 8568 	beq.w	8009592 <_dtoa_r+0xbb2>
 8008ac2:	4b86      	ldr	r3, [pc, #536]	; (8008cdc <_dtoa_r+0x2fc>)
 8008ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	e7da      	b.n	8008a84 <_dtoa_r+0xa4>
 8008ace:	aa10      	add	r2, sp, #64	; 0x40
 8008ad0:	a911      	add	r1, sp, #68	; 0x44
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ad8:	eef0 0a68 	vmov.f32	s1, s17
 8008adc:	f001 ff72 	bl	800a9c4 <__d2b>
 8008ae0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	2d00      	cmp	r5, #0
 8008ae8:	d07f      	beq.n	8008bea <_dtoa_r+0x20a>
 8008aea:	ee18 3a90 	vmov	r3, s17
 8008aee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008af2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008af6:	ec51 0b18 	vmov	r0, r1, d8
 8008afa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008afe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b02:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008b06:	4619      	mov	r1, r3
 8008b08:	2200      	movs	r2, #0
 8008b0a:	4b75      	ldr	r3, [pc, #468]	; (8008ce0 <_dtoa_r+0x300>)
 8008b0c:	f7f7 fbe6 	bl	80002dc <__aeabi_dsub>
 8008b10:	a367      	add	r3, pc, #412	; (adr r3, 8008cb0 <_dtoa_r+0x2d0>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 fd99 	bl	800064c <__aeabi_dmul>
 8008b1a:	a367      	add	r3, pc, #412	; (adr r3, 8008cb8 <_dtoa_r+0x2d8>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 fbde 	bl	80002e0 <__adddf3>
 8008b24:	4606      	mov	r6, r0
 8008b26:	4628      	mov	r0, r5
 8008b28:	460f      	mov	r7, r1
 8008b2a:	f7f7 fd25 	bl	8000578 <__aeabi_i2d>
 8008b2e:	a364      	add	r3, pc, #400	; (adr r3, 8008cc0 <_dtoa_r+0x2e0>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fd8a 	bl	800064c <__aeabi_dmul>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4630      	mov	r0, r6
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fbce 	bl	80002e0 <__adddf3>
 8008b44:	4606      	mov	r6, r0
 8008b46:	460f      	mov	r7, r1
 8008b48:	f7f8 f830 	bl	8000bac <__aeabi_d2iz>
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4683      	mov	fp, r0
 8008b50:	2300      	movs	r3, #0
 8008b52:	4630      	mov	r0, r6
 8008b54:	4639      	mov	r1, r7
 8008b56:	f7f7 ffeb 	bl	8000b30 <__aeabi_dcmplt>
 8008b5a:	b148      	cbz	r0, 8008b70 <_dtoa_r+0x190>
 8008b5c:	4658      	mov	r0, fp
 8008b5e:	f7f7 fd0b 	bl	8000578 <__aeabi_i2d>
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	f7f7 ffd9 	bl	8000b1c <__aeabi_dcmpeq>
 8008b6a:	b908      	cbnz	r0, 8008b70 <_dtoa_r+0x190>
 8008b6c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008b70:	f1bb 0f16 	cmp.w	fp, #22
 8008b74:	d857      	bhi.n	8008c26 <_dtoa_r+0x246>
 8008b76:	4b5b      	ldr	r3, [pc, #364]	; (8008ce4 <_dtoa_r+0x304>)
 8008b78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	ec51 0b18 	vmov	r0, r1, d8
 8008b84:	f7f7 ffd4 	bl	8000b30 <__aeabi_dcmplt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d04e      	beq.n	8008c2a <_dtoa_r+0x24a>
 8008b8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008b90:	2300      	movs	r3, #0
 8008b92:	930c      	str	r3, [sp, #48]	; 0x30
 8008b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b96:	1b5b      	subs	r3, r3, r5
 8008b98:	1e5a      	subs	r2, r3, #1
 8008b9a:	bf45      	ittet	mi
 8008b9c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008ba0:	9305      	strmi	r3, [sp, #20]
 8008ba2:	2300      	movpl	r3, #0
 8008ba4:	2300      	movmi	r3, #0
 8008ba6:	9206      	str	r2, [sp, #24]
 8008ba8:	bf54      	ite	pl
 8008baa:	9305      	strpl	r3, [sp, #20]
 8008bac:	9306      	strmi	r3, [sp, #24]
 8008bae:	f1bb 0f00 	cmp.w	fp, #0
 8008bb2:	db3c      	blt.n	8008c2e <_dtoa_r+0x24e>
 8008bb4:	9b06      	ldr	r3, [sp, #24]
 8008bb6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008bba:	445b      	add	r3, fp
 8008bbc:	9306      	str	r3, [sp, #24]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9308      	str	r3, [sp, #32]
 8008bc2:	9b07      	ldr	r3, [sp, #28]
 8008bc4:	2b09      	cmp	r3, #9
 8008bc6:	d868      	bhi.n	8008c9a <_dtoa_r+0x2ba>
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	bfc4      	itt	gt
 8008bcc:	3b04      	subgt	r3, #4
 8008bce:	9307      	strgt	r3, [sp, #28]
 8008bd0:	9b07      	ldr	r3, [sp, #28]
 8008bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8008bd6:	bfcc      	ite	gt
 8008bd8:	2500      	movgt	r5, #0
 8008bda:	2501      	movle	r5, #1
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	f200 8085 	bhi.w	8008cec <_dtoa_r+0x30c>
 8008be2:	e8df f003 	tbb	[pc, r3]
 8008be6:	3b2e      	.short	0x3b2e
 8008be8:	5839      	.short	0x5839
 8008bea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bee:	441d      	add	r5, r3
 8008bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	bfc1      	itttt	gt
 8008bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bfc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008c00:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008c04:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008c08:	bfd6      	itet	le
 8008c0a:	f1c3 0320 	rsble	r3, r3, #32
 8008c0e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008c12:	fa06 f003 	lslle.w	r0, r6, r3
 8008c16:	f7f7 fc9f 	bl	8000558 <__aeabi_ui2d>
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008c20:	3d01      	subs	r5, #1
 8008c22:	920e      	str	r2, [sp, #56]	; 0x38
 8008c24:	e76f      	b.n	8008b06 <_dtoa_r+0x126>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e7b3      	b.n	8008b92 <_dtoa_r+0x1b2>
 8008c2a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c2c:	e7b2      	b.n	8008b94 <_dtoa_r+0x1b4>
 8008c2e:	9b05      	ldr	r3, [sp, #20]
 8008c30:	eba3 030b 	sub.w	r3, r3, fp
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	f1cb 0300 	rsb	r3, fp, #0
 8008c3a:	9308      	str	r3, [sp, #32]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c40:	e7bf      	b.n	8008bc2 <_dtoa_r+0x1e2>
 8008c42:	2300      	movs	r3, #0
 8008c44:	9309      	str	r3, [sp, #36]	; 0x24
 8008c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc52      	bgt.n	8008cf2 <_dtoa_r+0x312>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	9304      	str	r3, [sp, #16]
 8008c52:	461a      	mov	r2, r3
 8008c54:	920a      	str	r2, [sp, #40]	; 0x28
 8008c56:	e00b      	b.n	8008c70 <_dtoa_r+0x290>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e7f3      	b.n	8008c44 <_dtoa_r+0x264>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c62:	445b      	add	r3, fp
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	3301      	adds	r3, #1
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	bfb8      	it	lt
 8008c6e:	2301      	movlt	r3, #1
 8008c70:	69e0      	ldr	r0, [r4, #28]
 8008c72:	2100      	movs	r1, #0
 8008c74:	2204      	movs	r2, #4
 8008c76:	f102 0614 	add.w	r6, r2, #20
 8008c7a:	429e      	cmp	r6, r3
 8008c7c:	d93d      	bls.n	8008cfa <_dtoa_r+0x31a>
 8008c7e:	6041      	str	r1, [r0, #4]
 8008c80:	4620      	mov	r0, r4
 8008c82:	f001 fac3 	bl	800a20c <_Balloc>
 8008c86:	9000      	str	r0, [sp, #0]
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d139      	bne.n	8008d00 <_dtoa_r+0x320>
 8008c8c:	4b16      	ldr	r3, [pc, #88]	; (8008ce8 <_dtoa_r+0x308>)
 8008c8e:	4602      	mov	r2, r0
 8008c90:	f240 11af 	movw	r1, #431	; 0x1af
 8008c94:	e6bd      	b.n	8008a12 <_dtoa_r+0x32>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e7e1      	b.n	8008c5e <_dtoa_r+0x27e>
 8008c9a:	2501      	movs	r5, #1
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9307      	str	r3, [sp, #28]
 8008ca0:	9509      	str	r5, [sp, #36]	; 0x24
 8008ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ca6:	9301      	str	r3, [sp, #4]
 8008ca8:	9304      	str	r3, [sp, #16]
 8008caa:	2200      	movs	r2, #0
 8008cac:	2312      	movs	r3, #18
 8008cae:	e7d1      	b.n	8008c54 <_dtoa_r+0x274>
 8008cb0:	636f4361 	.word	0x636f4361
 8008cb4:	3fd287a7 	.word	0x3fd287a7
 8008cb8:	8b60c8b3 	.word	0x8b60c8b3
 8008cbc:	3fc68a28 	.word	0x3fc68a28
 8008cc0:	509f79fb 	.word	0x509f79fb
 8008cc4:	3fd34413 	.word	0x3fd34413
 8008cc8:	0800cb36 	.word	0x0800cb36
 8008ccc:	0800cb4d 	.word	0x0800cb4d
 8008cd0:	7ff00000 	.word	0x7ff00000
 8008cd4:	0800cb32 	.word	0x0800cb32
 8008cd8:	0800cb29 	.word	0x0800cb29
 8008cdc:	0800c9a1 	.word	0x0800c9a1
 8008ce0:	3ff80000 	.word	0x3ff80000
 8008ce4:	0800cca8 	.word	0x0800cca8
 8008ce8:	0800cba5 	.word	0x0800cba5
 8008cec:	2301      	movs	r3, #1
 8008cee:	9309      	str	r3, [sp, #36]	; 0x24
 8008cf0:	e7d7      	b.n	8008ca2 <_dtoa_r+0x2c2>
 8008cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	9304      	str	r3, [sp, #16]
 8008cf8:	e7ba      	b.n	8008c70 <_dtoa_r+0x290>
 8008cfa:	3101      	adds	r1, #1
 8008cfc:	0052      	lsls	r2, r2, #1
 8008cfe:	e7ba      	b.n	8008c76 <_dtoa_r+0x296>
 8008d00:	69e3      	ldr	r3, [r4, #28]
 8008d02:	9a00      	ldr	r2, [sp, #0]
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	9b04      	ldr	r3, [sp, #16]
 8008d08:	2b0e      	cmp	r3, #14
 8008d0a:	f200 80a8 	bhi.w	8008e5e <_dtoa_r+0x47e>
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	f000 80a5 	beq.w	8008e5e <_dtoa_r+0x47e>
 8008d14:	f1bb 0f00 	cmp.w	fp, #0
 8008d18:	dd38      	ble.n	8008d8c <_dtoa_r+0x3ac>
 8008d1a:	4bc0      	ldr	r3, [pc, #768]	; (800901c <_dtoa_r+0x63c>)
 8008d1c:	f00b 020f 	and.w	r2, fp, #15
 8008d20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d24:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008d28:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008d2c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008d30:	d019      	beq.n	8008d66 <_dtoa_r+0x386>
 8008d32:	4bbb      	ldr	r3, [pc, #748]	; (8009020 <_dtoa_r+0x640>)
 8008d34:	ec51 0b18 	vmov	r0, r1, d8
 8008d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d3c:	f7f7 fdb0 	bl	80008a0 <__aeabi_ddiv>
 8008d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d44:	f008 080f 	and.w	r8, r8, #15
 8008d48:	2503      	movs	r5, #3
 8008d4a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009020 <_dtoa_r+0x640>
 8008d4e:	f1b8 0f00 	cmp.w	r8, #0
 8008d52:	d10a      	bne.n	8008d6a <_dtoa_r+0x38a>
 8008d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d58:	4632      	mov	r2, r6
 8008d5a:	463b      	mov	r3, r7
 8008d5c:	f7f7 fda0 	bl	80008a0 <__aeabi_ddiv>
 8008d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d64:	e02b      	b.n	8008dbe <_dtoa_r+0x3de>
 8008d66:	2502      	movs	r5, #2
 8008d68:	e7ef      	b.n	8008d4a <_dtoa_r+0x36a>
 8008d6a:	f018 0f01 	tst.w	r8, #1
 8008d6e:	d008      	beq.n	8008d82 <_dtoa_r+0x3a2>
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d78:	f7f7 fc68 	bl	800064c <__aeabi_dmul>
 8008d7c:	3501      	adds	r5, #1
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460f      	mov	r7, r1
 8008d82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d86:	f109 0908 	add.w	r9, r9, #8
 8008d8a:	e7e0      	b.n	8008d4e <_dtoa_r+0x36e>
 8008d8c:	f000 809f 	beq.w	8008ece <_dtoa_r+0x4ee>
 8008d90:	f1cb 0600 	rsb	r6, fp, #0
 8008d94:	4ba1      	ldr	r3, [pc, #644]	; (800901c <_dtoa_r+0x63c>)
 8008d96:	4fa2      	ldr	r7, [pc, #648]	; (8009020 <_dtoa_r+0x640>)
 8008d98:	f006 020f 	and.w	r2, r6, #15
 8008d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	ec51 0b18 	vmov	r0, r1, d8
 8008da8:	f7f7 fc50 	bl	800064c <__aeabi_dmul>
 8008dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db0:	1136      	asrs	r6, r6, #4
 8008db2:	2300      	movs	r3, #0
 8008db4:	2502      	movs	r5, #2
 8008db6:	2e00      	cmp	r6, #0
 8008db8:	d17e      	bne.n	8008eb8 <_dtoa_r+0x4d8>
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1d0      	bne.n	8008d60 <_dtoa_r+0x380>
 8008dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8084 	beq.w	8008ed2 <_dtoa_r+0x4f2>
 8008dca:	4b96      	ldr	r3, [pc, #600]	; (8009024 <_dtoa_r+0x644>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4640      	mov	r0, r8
 8008dd0:	4649      	mov	r1, r9
 8008dd2:	f7f7 fead 	bl	8000b30 <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	d07b      	beq.n	8008ed2 <_dtoa_r+0x4f2>
 8008dda:	9b04      	ldr	r3, [sp, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d078      	beq.n	8008ed2 <_dtoa_r+0x4f2>
 8008de0:	9b01      	ldr	r3, [sp, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	dd39      	ble.n	8008e5a <_dtoa_r+0x47a>
 8008de6:	4b90      	ldr	r3, [pc, #576]	; (8009028 <_dtoa_r+0x648>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	4640      	mov	r0, r8
 8008dec:	4649      	mov	r1, r9
 8008dee:	f7f7 fc2d 	bl	800064c <__aeabi_dmul>
 8008df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008df6:	9e01      	ldr	r6, [sp, #4]
 8008df8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8008dfc:	3501      	adds	r5, #1
 8008dfe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7f7 fbb8 	bl	8000578 <__aeabi_i2d>
 8008e08:	4642      	mov	r2, r8
 8008e0a:	464b      	mov	r3, r9
 8008e0c:	f7f7 fc1e 	bl	800064c <__aeabi_dmul>
 8008e10:	4b86      	ldr	r3, [pc, #536]	; (800902c <_dtoa_r+0x64c>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	f7f7 fa64 	bl	80002e0 <__adddf3>
 8008e18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e20:	9303      	str	r3, [sp, #12]
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d158      	bne.n	8008ed8 <_dtoa_r+0x4f8>
 8008e26:	4b82      	ldr	r3, [pc, #520]	; (8009030 <_dtoa_r+0x650>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4640      	mov	r0, r8
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	f7f7 fa55 	bl	80002dc <__aeabi_dsub>
 8008e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e36:	4680      	mov	r8, r0
 8008e38:	4689      	mov	r9, r1
 8008e3a:	f7f7 fe97 	bl	8000b6c <__aeabi_dcmpgt>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f040 8296 	bne.w	8009370 <_dtoa_r+0x990>
 8008e44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e48:	4640      	mov	r0, r8
 8008e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e4e:	4649      	mov	r1, r9
 8008e50:	f7f7 fe6e 	bl	8000b30 <__aeabi_dcmplt>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	f040 8289 	bne.w	800936c <_dtoa_r+0x98c>
 8008e5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f2c0 814e 	blt.w	8009102 <_dtoa_r+0x722>
 8008e66:	f1bb 0f0e 	cmp.w	fp, #14
 8008e6a:	f300 814a 	bgt.w	8009102 <_dtoa_r+0x722>
 8008e6e:	4b6b      	ldr	r3, [pc, #428]	; (800901c <_dtoa_r+0x63c>)
 8008e70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f280 80dc 	bge.w	8009038 <_dtoa_r+0x658>
 8008e80:	9b04      	ldr	r3, [sp, #16]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f300 80d8 	bgt.w	8009038 <_dtoa_r+0x658>
 8008e88:	f040 826f 	bne.w	800936a <_dtoa_r+0x98a>
 8008e8c:	4b68      	ldr	r3, [pc, #416]	; (8009030 <_dtoa_r+0x650>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fbda 	bl	800064c <__aeabi_dmul>
 8008e98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e9c:	f7f7 fe5c 	bl	8000b58 <__aeabi_dcmpge>
 8008ea0:	9e04      	ldr	r6, [sp, #16]
 8008ea2:	4637      	mov	r7, r6
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f040 8245 	bne.w	8009334 <_dtoa_r+0x954>
 8008eaa:	9d00      	ldr	r5, [sp, #0]
 8008eac:	2331      	movs	r3, #49	; 0x31
 8008eae:	f805 3b01 	strb.w	r3, [r5], #1
 8008eb2:	f10b 0b01 	add.w	fp, fp, #1
 8008eb6:	e241      	b.n	800933c <_dtoa_r+0x95c>
 8008eb8:	07f2      	lsls	r2, r6, #31
 8008eba:	d505      	bpl.n	8008ec8 <_dtoa_r+0x4e8>
 8008ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec0:	f7f7 fbc4 	bl	800064c <__aeabi_dmul>
 8008ec4:	3501      	adds	r5, #1
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	1076      	asrs	r6, r6, #1
 8008eca:	3708      	adds	r7, #8
 8008ecc:	e773      	b.n	8008db6 <_dtoa_r+0x3d6>
 8008ece:	2502      	movs	r5, #2
 8008ed0:	e775      	b.n	8008dbe <_dtoa_r+0x3de>
 8008ed2:	9e04      	ldr	r6, [sp, #16]
 8008ed4:	465f      	mov	r7, fp
 8008ed6:	e792      	b.n	8008dfe <_dtoa_r+0x41e>
 8008ed8:	9900      	ldr	r1, [sp, #0]
 8008eda:	4b50      	ldr	r3, [pc, #320]	; (800901c <_dtoa_r+0x63c>)
 8008edc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ee0:	4431      	add	r1, r6
 8008ee2:	9102      	str	r1, [sp, #8]
 8008ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ee6:	eeb0 9a47 	vmov.f32	s18, s14
 8008eea:	eef0 9a67 	vmov.f32	s19, s15
 8008eee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ef2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ef6:	2900      	cmp	r1, #0
 8008ef8:	d044      	beq.n	8008f84 <_dtoa_r+0x5a4>
 8008efa:	494e      	ldr	r1, [pc, #312]	; (8009034 <_dtoa_r+0x654>)
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7f7 fccf 	bl	80008a0 <__aeabi_ddiv>
 8008f02:	ec53 2b19 	vmov	r2, r3, d9
 8008f06:	f7f7 f9e9 	bl	80002dc <__aeabi_dsub>
 8008f0a:	9d00      	ldr	r5, [sp, #0]
 8008f0c:	ec41 0b19 	vmov	d9, r0, r1
 8008f10:	4649      	mov	r1, r9
 8008f12:	4640      	mov	r0, r8
 8008f14:	f7f7 fe4a 	bl	8000bac <__aeabi_d2iz>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	f7f7 fb2d 	bl	8000578 <__aeabi_i2d>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f7f7 f9d9 	bl	80002dc <__aeabi_dsub>
 8008f2a:	3630      	adds	r6, #48	; 0x30
 8008f2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008f30:	ec53 2b19 	vmov	r2, r3, d9
 8008f34:	4680      	mov	r8, r0
 8008f36:	4689      	mov	r9, r1
 8008f38:	f7f7 fdfa 	bl	8000b30 <__aeabi_dcmplt>
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	d164      	bne.n	800900a <_dtoa_r+0x62a>
 8008f40:	4642      	mov	r2, r8
 8008f42:	464b      	mov	r3, r9
 8008f44:	4937      	ldr	r1, [pc, #220]	; (8009024 <_dtoa_r+0x644>)
 8008f46:	2000      	movs	r0, #0
 8008f48:	f7f7 f9c8 	bl	80002dc <__aeabi_dsub>
 8008f4c:	ec53 2b19 	vmov	r2, r3, d9
 8008f50:	f7f7 fdee 	bl	8000b30 <__aeabi_dcmplt>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f040 80b6 	bne.w	80090c6 <_dtoa_r+0x6e6>
 8008f5a:	9b02      	ldr	r3, [sp, #8]
 8008f5c:	429d      	cmp	r5, r3
 8008f5e:	f43f af7c 	beq.w	8008e5a <_dtoa_r+0x47a>
 8008f62:	4b31      	ldr	r3, [pc, #196]	; (8009028 <_dtoa_r+0x648>)
 8008f64:	ec51 0b19 	vmov	r0, r1, d9
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f7f7 fb6f 	bl	800064c <__aeabi_dmul>
 8008f6e:	4b2e      	ldr	r3, [pc, #184]	; (8009028 <_dtoa_r+0x648>)
 8008f70:	ec41 0b19 	vmov	d9, r0, r1
 8008f74:	2200      	movs	r2, #0
 8008f76:	4640      	mov	r0, r8
 8008f78:	4649      	mov	r1, r9
 8008f7a:	f7f7 fb67 	bl	800064c <__aeabi_dmul>
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4689      	mov	r9, r1
 8008f82:	e7c5      	b.n	8008f10 <_dtoa_r+0x530>
 8008f84:	ec51 0b17 	vmov	r0, r1, d7
 8008f88:	f7f7 fb60 	bl	800064c <__aeabi_dmul>
 8008f8c:	9b02      	ldr	r3, [sp, #8]
 8008f8e:	9d00      	ldr	r5, [sp, #0]
 8008f90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f92:	ec41 0b19 	vmov	d9, r0, r1
 8008f96:	4649      	mov	r1, r9
 8008f98:	4640      	mov	r0, r8
 8008f9a:	f7f7 fe07 	bl	8000bac <__aeabi_d2iz>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	f7f7 faea 	bl	8000578 <__aeabi_i2d>
 8008fa4:	3630      	adds	r6, #48	; 0x30
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4640      	mov	r0, r8
 8008fac:	4649      	mov	r1, r9
 8008fae:	f7f7 f995 	bl	80002dc <__aeabi_dsub>
 8008fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8008fb6:	9b02      	ldr	r3, [sp, #8]
 8008fb8:	429d      	cmp	r5, r3
 8008fba:	4680      	mov	r8, r0
 8008fbc:	4689      	mov	r9, r1
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	d124      	bne.n	800900e <_dtoa_r+0x62e>
 8008fc4:	4b1b      	ldr	r3, [pc, #108]	; (8009034 <_dtoa_r+0x654>)
 8008fc6:	ec51 0b19 	vmov	r0, r1, d9
 8008fca:	f7f7 f989 	bl	80002e0 <__adddf3>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fdc9 	bl	8000b6c <__aeabi_dcmpgt>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	d173      	bne.n	80090c6 <_dtoa_r+0x6e6>
 8008fde:	ec53 2b19 	vmov	r2, r3, d9
 8008fe2:	4914      	ldr	r1, [pc, #80]	; (8009034 <_dtoa_r+0x654>)
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	f7f7 f979 	bl	80002dc <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	f7f7 fd9d 	bl	8000b30 <__aeabi_dcmplt>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f43f af2f 	beq.w	8008e5a <_dtoa_r+0x47a>
 8008ffc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ffe:	1e6b      	subs	r3, r5, #1
 8009000:	930f      	str	r3, [sp, #60]	; 0x3c
 8009002:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009006:	2b30      	cmp	r3, #48	; 0x30
 8009008:	d0f8      	beq.n	8008ffc <_dtoa_r+0x61c>
 800900a:	46bb      	mov	fp, r7
 800900c:	e04a      	b.n	80090a4 <_dtoa_r+0x6c4>
 800900e:	4b06      	ldr	r3, [pc, #24]	; (8009028 <_dtoa_r+0x648>)
 8009010:	f7f7 fb1c 	bl	800064c <__aeabi_dmul>
 8009014:	4680      	mov	r8, r0
 8009016:	4689      	mov	r9, r1
 8009018:	e7bd      	b.n	8008f96 <_dtoa_r+0x5b6>
 800901a:	bf00      	nop
 800901c:	0800cca8 	.word	0x0800cca8
 8009020:	0800cc80 	.word	0x0800cc80
 8009024:	3ff00000 	.word	0x3ff00000
 8009028:	40240000 	.word	0x40240000
 800902c:	401c0000 	.word	0x401c0000
 8009030:	40140000 	.word	0x40140000
 8009034:	3fe00000 	.word	0x3fe00000
 8009038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800903c:	9d00      	ldr	r5, [sp, #0]
 800903e:	4642      	mov	r2, r8
 8009040:	464b      	mov	r3, r9
 8009042:	4630      	mov	r0, r6
 8009044:	4639      	mov	r1, r7
 8009046:	f7f7 fc2b 	bl	80008a0 <__aeabi_ddiv>
 800904a:	f7f7 fdaf 	bl	8000bac <__aeabi_d2iz>
 800904e:	9001      	str	r0, [sp, #4]
 8009050:	f7f7 fa92 	bl	8000578 <__aeabi_i2d>
 8009054:	4642      	mov	r2, r8
 8009056:	464b      	mov	r3, r9
 8009058:	f7f7 faf8 	bl	800064c <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4630      	mov	r0, r6
 8009062:	4639      	mov	r1, r7
 8009064:	f7f7 f93a 	bl	80002dc <__aeabi_dsub>
 8009068:	9e01      	ldr	r6, [sp, #4]
 800906a:	9f04      	ldr	r7, [sp, #16]
 800906c:	3630      	adds	r6, #48	; 0x30
 800906e:	f805 6b01 	strb.w	r6, [r5], #1
 8009072:	9e00      	ldr	r6, [sp, #0]
 8009074:	1bae      	subs	r6, r5, r6
 8009076:	42b7      	cmp	r7, r6
 8009078:	4602      	mov	r2, r0
 800907a:	460b      	mov	r3, r1
 800907c:	d134      	bne.n	80090e8 <_dtoa_r+0x708>
 800907e:	f7f7 f92f 	bl	80002e0 <__adddf3>
 8009082:	4642      	mov	r2, r8
 8009084:	464b      	mov	r3, r9
 8009086:	4606      	mov	r6, r0
 8009088:	460f      	mov	r7, r1
 800908a:	f7f7 fd6f 	bl	8000b6c <__aeabi_dcmpgt>
 800908e:	b9c8      	cbnz	r0, 80090c4 <_dtoa_r+0x6e4>
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	4630      	mov	r0, r6
 8009096:	4639      	mov	r1, r7
 8009098:	f7f7 fd40 	bl	8000b1c <__aeabi_dcmpeq>
 800909c:	b110      	cbz	r0, 80090a4 <_dtoa_r+0x6c4>
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	07db      	lsls	r3, r3, #31
 80090a2:	d40f      	bmi.n	80090c4 <_dtoa_r+0x6e4>
 80090a4:	4651      	mov	r1, sl
 80090a6:	4620      	mov	r0, r4
 80090a8:	f001 f8f0 	bl	800a28c <_Bfree>
 80090ac:	2300      	movs	r3, #0
 80090ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090b0:	702b      	strb	r3, [r5, #0]
 80090b2:	f10b 0301 	add.w	r3, fp, #1
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f43f ace2 	beq.w	8008a84 <_dtoa_r+0xa4>
 80090c0:	601d      	str	r5, [r3, #0]
 80090c2:	e4df      	b.n	8008a84 <_dtoa_r+0xa4>
 80090c4:	465f      	mov	r7, fp
 80090c6:	462b      	mov	r3, r5
 80090c8:	461d      	mov	r5, r3
 80090ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090ce:	2a39      	cmp	r2, #57	; 0x39
 80090d0:	d106      	bne.n	80090e0 <_dtoa_r+0x700>
 80090d2:	9a00      	ldr	r2, [sp, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d1f7      	bne.n	80090c8 <_dtoa_r+0x6e8>
 80090d8:	9900      	ldr	r1, [sp, #0]
 80090da:	2230      	movs	r2, #48	; 0x30
 80090dc:	3701      	adds	r7, #1
 80090de:	700a      	strb	r2, [r1, #0]
 80090e0:	781a      	ldrb	r2, [r3, #0]
 80090e2:	3201      	adds	r2, #1
 80090e4:	701a      	strb	r2, [r3, #0]
 80090e6:	e790      	b.n	800900a <_dtoa_r+0x62a>
 80090e8:	4ba3      	ldr	r3, [pc, #652]	; (8009378 <_dtoa_r+0x998>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	f7f7 faae 	bl	800064c <__aeabi_dmul>
 80090f0:	2200      	movs	r2, #0
 80090f2:	2300      	movs	r3, #0
 80090f4:	4606      	mov	r6, r0
 80090f6:	460f      	mov	r7, r1
 80090f8:	f7f7 fd10 	bl	8000b1c <__aeabi_dcmpeq>
 80090fc:	2800      	cmp	r0, #0
 80090fe:	d09e      	beq.n	800903e <_dtoa_r+0x65e>
 8009100:	e7d0      	b.n	80090a4 <_dtoa_r+0x6c4>
 8009102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009104:	2a00      	cmp	r2, #0
 8009106:	f000 80ca 	beq.w	800929e <_dtoa_r+0x8be>
 800910a:	9a07      	ldr	r2, [sp, #28]
 800910c:	2a01      	cmp	r2, #1
 800910e:	f300 80ad 	bgt.w	800926c <_dtoa_r+0x88c>
 8009112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009114:	2a00      	cmp	r2, #0
 8009116:	f000 80a5 	beq.w	8009264 <_dtoa_r+0x884>
 800911a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800911e:	9e08      	ldr	r6, [sp, #32]
 8009120:	9d05      	ldr	r5, [sp, #20]
 8009122:	9a05      	ldr	r2, [sp, #20]
 8009124:	441a      	add	r2, r3
 8009126:	9205      	str	r2, [sp, #20]
 8009128:	9a06      	ldr	r2, [sp, #24]
 800912a:	2101      	movs	r1, #1
 800912c:	441a      	add	r2, r3
 800912e:	4620      	mov	r0, r4
 8009130:	9206      	str	r2, [sp, #24]
 8009132:	f001 f9ab 	bl	800a48c <__i2b>
 8009136:	4607      	mov	r7, r0
 8009138:	b165      	cbz	r5, 8009154 <_dtoa_r+0x774>
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2b00      	cmp	r3, #0
 800913e:	dd09      	ble.n	8009154 <_dtoa_r+0x774>
 8009140:	42ab      	cmp	r3, r5
 8009142:	9a05      	ldr	r2, [sp, #20]
 8009144:	bfa8      	it	ge
 8009146:	462b      	movge	r3, r5
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	9205      	str	r2, [sp, #20]
 800914c:	9a06      	ldr	r2, [sp, #24]
 800914e:	1aed      	subs	r5, r5, r3
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	9306      	str	r3, [sp, #24]
 8009154:	9b08      	ldr	r3, [sp, #32]
 8009156:	b1f3      	cbz	r3, 8009196 <_dtoa_r+0x7b6>
 8009158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 80a3 	beq.w	80092a6 <_dtoa_r+0x8c6>
 8009160:	2e00      	cmp	r6, #0
 8009162:	dd10      	ble.n	8009186 <_dtoa_r+0x7a6>
 8009164:	4639      	mov	r1, r7
 8009166:	4632      	mov	r2, r6
 8009168:	4620      	mov	r0, r4
 800916a:	f001 fa4f 	bl	800a60c <__pow5mult>
 800916e:	4652      	mov	r2, sl
 8009170:	4601      	mov	r1, r0
 8009172:	4607      	mov	r7, r0
 8009174:	4620      	mov	r0, r4
 8009176:	f001 f99f 	bl	800a4b8 <__multiply>
 800917a:	4651      	mov	r1, sl
 800917c:	4680      	mov	r8, r0
 800917e:	4620      	mov	r0, r4
 8009180:	f001 f884 	bl	800a28c <_Bfree>
 8009184:	46c2      	mov	sl, r8
 8009186:	9b08      	ldr	r3, [sp, #32]
 8009188:	1b9a      	subs	r2, r3, r6
 800918a:	d004      	beq.n	8009196 <_dtoa_r+0x7b6>
 800918c:	4651      	mov	r1, sl
 800918e:	4620      	mov	r0, r4
 8009190:	f001 fa3c 	bl	800a60c <__pow5mult>
 8009194:	4682      	mov	sl, r0
 8009196:	2101      	movs	r1, #1
 8009198:	4620      	mov	r0, r4
 800919a:	f001 f977 	bl	800a48c <__i2b>
 800919e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	4606      	mov	r6, r0
 80091a4:	f340 8081 	ble.w	80092aa <_dtoa_r+0x8ca>
 80091a8:	461a      	mov	r2, r3
 80091aa:	4601      	mov	r1, r0
 80091ac:	4620      	mov	r0, r4
 80091ae:	f001 fa2d 	bl	800a60c <__pow5mult>
 80091b2:	9b07      	ldr	r3, [sp, #28]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	4606      	mov	r6, r0
 80091b8:	dd7a      	ble.n	80092b0 <_dtoa_r+0x8d0>
 80091ba:	f04f 0800 	mov.w	r8, #0
 80091be:	6933      	ldr	r3, [r6, #16]
 80091c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091c4:	6918      	ldr	r0, [r3, #16]
 80091c6:	f001 f913 	bl	800a3f0 <__hi0bits>
 80091ca:	f1c0 0020 	rsb	r0, r0, #32
 80091ce:	9b06      	ldr	r3, [sp, #24]
 80091d0:	4418      	add	r0, r3
 80091d2:	f010 001f 	ands.w	r0, r0, #31
 80091d6:	f000 8094 	beq.w	8009302 <_dtoa_r+0x922>
 80091da:	f1c0 0320 	rsb	r3, r0, #32
 80091de:	2b04      	cmp	r3, #4
 80091e0:	f340 8085 	ble.w	80092ee <_dtoa_r+0x90e>
 80091e4:	9b05      	ldr	r3, [sp, #20]
 80091e6:	f1c0 001c 	rsb	r0, r0, #28
 80091ea:	4403      	add	r3, r0
 80091ec:	9305      	str	r3, [sp, #20]
 80091ee:	9b06      	ldr	r3, [sp, #24]
 80091f0:	4403      	add	r3, r0
 80091f2:	4405      	add	r5, r0
 80091f4:	9306      	str	r3, [sp, #24]
 80091f6:	9b05      	ldr	r3, [sp, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dd05      	ble.n	8009208 <_dtoa_r+0x828>
 80091fc:	4651      	mov	r1, sl
 80091fe:	461a      	mov	r2, r3
 8009200:	4620      	mov	r0, r4
 8009202:	f001 fa5d 	bl	800a6c0 <__lshift>
 8009206:	4682      	mov	sl, r0
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	2b00      	cmp	r3, #0
 800920c:	dd05      	ble.n	800921a <_dtoa_r+0x83a>
 800920e:	4631      	mov	r1, r6
 8009210:	461a      	mov	r2, r3
 8009212:	4620      	mov	r0, r4
 8009214:	f001 fa54 	bl	800a6c0 <__lshift>
 8009218:	4606      	mov	r6, r0
 800921a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800921c:	2b00      	cmp	r3, #0
 800921e:	d072      	beq.n	8009306 <_dtoa_r+0x926>
 8009220:	4631      	mov	r1, r6
 8009222:	4650      	mov	r0, sl
 8009224:	f001 fab8 	bl	800a798 <__mcmp>
 8009228:	2800      	cmp	r0, #0
 800922a:	da6c      	bge.n	8009306 <_dtoa_r+0x926>
 800922c:	2300      	movs	r3, #0
 800922e:	4651      	mov	r1, sl
 8009230:	220a      	movs	r2, #10
 8009232:	4620      	mov	r0, r4
 8009234:	f001 f84c 	bl	800a2d0 <__multadd>
 8009238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800923e:	4682      	mov	sl, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 81b0 	beq.w	80095a6 <_dtoa_r+0xbc6>
 8009246:	2300      	movs	r3, #0
 8009248:	4639      	mov	r1, r7
 800924a:	220a      	movs	r2, #10
 800924c:	4620      	mov	r0, r4
 800924e:	f001 f83f 	bl	800a2d0 <__multadd>
 8009252:	9b01      	ldr	r3, [sp, #4]
 8009254:	2b00      	cmp	r3, #0
 8009256:	4607      	mov	r7, r0
 8009258:	f300 8096 	bgt.w	8009388 <_dtoa_r+0x9a8>
 800925c:	9b07      	ldr	r3, [sp, #28]
 800925e:	2b02      	cmp	r3, #2
 8009260:	dc59      	bgt.n	8009316 <_dtoa_r+0x936>
 8009262:	e091      	b.n	8009388 <_dtoa_r+0x9a8>
 8009264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800926a:	e758      	b.n	800911e <_dtoa_r+0x73e>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	1e5e      	subs	r6, r3, #1
 8009270:	9b08      	ldr	r3, [sp, #32]
 8009272:	42b3      	cmp	r3, r6
 8009274:	bfbf      	itttt	lt
 8009276:	9b08      	ldrlt	r3, [sp, #32]
 8009278:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800927a:	9608      	strlt	r6, [sp, #32]
 800927c:	1af3      	sublt	r3, r6, r3
 800927e:	bfb4      	ite	lt
 8009280:	18d2      	addlt	r2, r2, r3
 8009282:	1b9e      	subge	r6, r3, r6
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	bfbc      	itt	lt
 8009288:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800928a:	2600      	movlt	r6, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	bfb7      	itett	lt
 8009290:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009294:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009298:	1a9d      	sublt	r5, r3, r2
 800929a:	2300      	movlt	r3, #0
 800929c:	e741      	b.n	8009122 <_dtoa_r+0x742>
 800929e:	9e08      	ldr	r6, [sp, #32]
 80092a0:	9d05      	ldr	r5, [sp, #20]
 80092a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80092a4:	e748      	b.n	8009138 <_dtoa_r+0x758>
 80092a6:	9a08      	ldr	r2, [sp, #32]
 80092a8:	e770      	b.n	800918c <_dtoa_r+0x7ac>
 80092aa:	9b07      	ldr	r3, [sp, #28]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	dc19      	bgt.n	80092e4 <_dtoa_r+0x904>
 80092b0:	9b02      	ldr	r3, [sp, #8]
 80092b2:	b9bb      	cbnz	r3, 80092e4 <_dtoa_r+0x904>
 80092b4:	9b03      	ldr	r3, [sp, #12]
 80092b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092ba:	b99b      	cbnz	r3, 80092e4 <_dtoa_r+0x904>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092c2:	0d1b      	lsrs	r3, r3, #20
 80092c4:	051b      	lsls	r3, r3, #20
 80092c6:	b183      	cbz	r3, 80092ea <_dtoa_r+0x90a>
 80092c8:	9b05      	ldr	r3, [sp, #20]
 80092ca:	3301      	adds	r3, #1
 80092cc:	9305      	str	r3, [sp, #20]
 80092ce:	9b06      	ldr	r3, [sp, #24]
 80092d0:	3301      	adds	r3, #1
 80092d2:	9306      	str	r3, [sp, #24]
 80092d4:	f04f 0801 	mov.w	r8, #1
 80092d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f47f af6f 	bne.w	80091be <_dtoa_r+0x7de>
 80092e0:	2001      	movs	r0, #1
 80092e2:	e774      	b.n	80091ce <_dtoa_r+0x7ee>
 80092e4:	f04f 0800 	mov.w	r8, #0
 80092e8:	e7f6      	b.n	80092d8 <_dtoa_r+0x8f8>
 80092ea:	4698      	mov	r8, r3
 80092ec:	e7f4      	b.n	80092d8 <_dtoa_r+0x8f8>
 80092ee:	d082      	beq.n	80091f6 <_dtoa_r+0x816>
 80092f0:	9a05      	ldr	r2, [sp, #20]
 80092f2:	331c      	adds	r3, #28
 80092f4:	441a      	add	r2, r3
 80092f6:	9205      	str	r2, [sp, #20]
 80092f8:	9a06      	ldr	r2, [sp, #24]
 80092fa:	441a      	add	r2, r3
 80092fc:	441d      	add	r5, r3
 80092fe:	9206      	str	r2, [sp, #24]
 8009300:	e779      	b.n	80091f6 <_dtoa_r+0x816>
 8009302:	4603      	mov	r3, r0
 8009304:	e7f4      	b.n	80092f0 <_dtoa_r+0x910>
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	2b00      	cmp	r3, #0
 800930a:	dc37      	bgt.n	800937c <_dtoa_r+0x99c>
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	2b02      	cmp	r3, #2
 8009310:	dd34      	ble.n	800937c <_dtoa_r+0x99c>
 8009312:	9b04      	ldr	r3, [sp, #16]
 8009314:	9301      	str	r3, [sp, #4]
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	b963      	cbnz	r3, 8009334 <_dtoa_r+0x954>
 800931a:	4631      	mov	r1, r6
 800931c:	2205      	movs	r2, #5
 800931e:	4620      	mov	r0, r4
 8009320:	f000 ffd6 	bl	800a2d0 <__multadd>
 8009324:	4601      	mov	r1, r0
 8009326:	4606      	mov	r6, r0
 8009328:	4650      	mov	r0, sl
 800932a:	f001 fa35 	bl	800a798 <__mcmp>
 800932e:	2800      	cmp	r0, #0
 8009330:	f73f adbb 	bgt.w	8008eaa <_dtoa_r+0x4ca>
 8009334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009336:	9d00      	ldr	r5, [sp, #0]
 8009338:	ea6f 0b03 	mvn.w	fp, r3
 800933c:	f04f 0800 	mov.w	r8, #0
 8009340:	4631      	mov	r1, r6
 8009342:	4620      	mov	r0, r4
 8009344:	f000 ffa2 	bl	800a28c <_Bfree>
 8009348:	2f00      	cmp	r7, #0
 800934a:	f43f aeab 	beq.w	80090a4 <_dtoa_r+0x6c4>
 800934e:	f1b8 0f00 	cmp.w	r8, #0
 8009352:	d005      	beq.n	8009360 <_dtoa_r+0x980>
 8009354:	45b8      	cmp	r8, r7
 8009356:	d003      	beq.n	8009360 <_dtoa_r+0x980>
 8009358:	4641      	mov	r1, r8
 800935a:	4620      	mov	r0, r4
 800935c:	f000 ff96 	bl	800a28c <_Bfree>
 8009360:	4639      	mov	r1, r7
 8009362:	4620      	mov	r0, r4
 8009364:	f000 ff92 	bl	800a28c <_Bfree>
 8009368:	e69c      	b.n	80090a4 <_dtoa_r+0x6c4>
 800936a:	2600      	movs	r6, #0
 800936c:	4637      	mov	r7, r6
 800936e:	e7e1      	b.n	8009334 <_dtoa_r+0x954>
 8009370:	46bb      	mov	fp, r7
 8009372:	4637      	mov	r7, r6
 8009374:	e599      	b.n	8008eaa <_dtoa_r+0x4ca>
 8009376:	bf00      	nop
 8009378:	40240000 	.word	0x40240000
 800937c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80c8 	beq.w	8009514 <_dtoa_r+0xb34>
 8009384:	9b04      	ldr	r3, [sp, #16]
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	2d00      	cmp	r5, #0
 800938a:	dd05      	ble.n	8009398 <_dtoa_r+0x9b8>
 800938c:	4639      	mov	r1, r7
 800938e:	462a      	mov	r2, r5
 8009390:	4620      	mov	r0, r4
 8009392:	f001 f995 	bl	800a6c0 <__lshift>
 8009396:	4607      	mov	r7, r0
 8009398:	f1b8 0f00 	cmp.w	r8, #0
 800939c:	d05b      	beq.n	8009456 <_dtoa_r+0xa76>
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 ff33 	bl	800a20c <_Balloc>
 80093a6:	4605      	mov	r5, r0
 80093a8:	b928      	cbnz	r0, 80093b6 <_dtoa_r+0x9d6>
 80093aa:	4b83      	ldr	r3, [pc, #524]	; (80095b8 <_dtoa_r+0xbd8>)
 80093ac:	4602      	mov	r2, r0
 80093ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 80093b2:	f7ff bb2e 	b.w	8008a12 <_dtoa_r+0x32>
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	3202      	adds	r2, #2
 80093ba:	0092      	lsls	r2, r2, #2
 80093bc:	f107 010c 	add.w	r1, r7, #12
 80093c0:	300c      	adds	r0, #12
 80093c2:	f7ff fa66 	bl	8008892 <memcpy>
 80093c6:	2201      	movs	r2, #1
 80093c8:	4629      	mov	r1, r5
 80093ca:	4620      	mov	r0, r4
 80093cc:	f001 f978 	bl	800a6c0 <__lshift>
 80093d0:	9b00      	ldr	r3, [sp, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	9304      	str	r3, [sp, #16]
 80093d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093da:	4413      	add	r3, r2
 80093dc:	9308      	str	r3, [sp, #32]
 80093de:	9b02      	ldr	r3, [sp, #8]
 80093e0:	f003 0301 	and.w	r3, r3, #1
 80093e4:	46b8      	mov	r8, r7
 80093e6:	9306      	str	r3, [sp, #24]
 80093e8:	4607      	mov	r7, r0
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	4631      	mov	r1, r6
 80093ee:	3b01      	subs	r3, #1
 80093f0:	4650      	mov	r0, sl
 80093f2:	9301      	str	r3, [sp, #4]
 80093f4:	f7ff fa6a 	bl	80088cc <quorem>
 80093f8:	4641      	mov	r1, r8
 80093fa:	9002      	str	r0, [sp, #8]
 80093fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009400:	4650      	mov	r0, sl
 8009402:	f001 f9c9 	bl	800a798 <__mcmp>
 8009406:	463a      	mov	r2, r7
 8009408:	9005      	str	r0, [sp, #20]
 800940a:	4631      	mov	r1, r6
 800940c:	4620      	mov	r0, r4
 800940e:	f001 f9df 	bl	800a7d0 <__mdiff>
 8009412:	68c2      	ldr	r2, [r0, #12]
 8009414:	4605      	mov	r5, r0
 8009416:	bb02      	cbnz	r2, 800945a <_dtoa_r+0xa7a>
 8009418:	4601      	mov	r1, r0
 800941a:	4650      	mov	r0, sl
 800941c:	f001 f9bc 	bl	800a798 <__mcmp>
 8009420:	4602      	mov	r2, r0
 8009422:	4629      	mov	r1, r5
 8009424:	4620      	mov	r0, r4
 8009426:	9209      	str	r2, [sp, #36]	; 0x24
 8009428:	f000 ff30 	bl	800a28c <_Bfree>
 800942c:	9b07      	ldr	r3, [sp, #28]
 800942e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009430:	9d04      	ldr	r5, [sp, #16]
 8009432:	ea43 0102 	orr.w	r1, r3, r2
 8009436:	9b06      	ldr	r3, [sp, #24]
 8009438:	4319      	orrs	r1, r3
 800943a:	d110      	bne.n	800945e <_dtoa_r+0xa7e>
 800943c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009440:	d029      	beq.n	8009496 <_dtoa_r+0xab6>
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	dd02      	ble.n	800944e <_dtoa_r+0xa6e>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800944e:	9b01      	ldr	r3, [sp, #4]
 8009450:	f883 9000 	strb.w	r9, [r3]
 8009454:	e774      	b.n	8009340 <_dtoa_r+0x960>
 8009456:	4638      	mov	r0, r7
 8009458:	e7ba      	b.n	80093d0 <_dtoa_r+0x9f0>
 800945a:	2201      	movs	r2, #1
 800945c:	e7e1      	b.n	8009422 <_dtoa_r+0xa42>
 800945e:	9b05      	ldr	r3, [sp, #20]
 8009460:	2b00      	cmp	r3, #0
 8009462:	db04      	blt.n	800946e <_dtoa_r+0xa8e>
 8009464:	9907      	ldr	r1, [sp, #28]
 8009466:	430b      	orrs	r3, r1
 8009468:	9906      	ldr	r1, [sp, #24]
 800946a:	430b      	orrs	r3, r1
 800946c:	d120      	bne.n	80094b0 <_dtoa_r+0xad0>
 800946e:	2a00      	cmp	r2, #0
 8009470:	dded      	ble.n	800944e <_dtoa_r+0xa6e>
 8009472:	4651      	mov	r1, sl
 8009474:	2201      	movs	r2, #1
 8009476:	4620      	mov	r0, r4
 8009478:	f001 f922 	bl	800a6c0 <__lshift>
 800947c:	4631      	mov	r1, r6
 800947e:	4682      	mov	sl, r0
 8009480:	f001 f98a 	bl	800a798 <__mcmp>
 8009484:	2800      	cmp	r0, #0
 8009486:	dc03      	bgt.n	8009490 <_dtoa_r+0xab0>
 8009488:	d1e1      	bne.n	800944e <_dtoa_r+0xa6e>
 800948a:	f019 0f01 	tst.w	r9, #1
 800948e:	d0de      	beq.n	800944e <_dtoa_r+0xa6e>
 8009490:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009494:	d1d8      	bne.n	8009448 <_dtoa_r+0xa68>
 8009496:	9a01      	ldr	r2, [sp, #4]
 8009498:	2339      	movs	r3, #57	; 0x39
 800949a:	7013      	strb	r3, [r2, #0]
 800949c:	462b      	mov	r3, r5
 800949e:	461d      	mov	r5, r3
 80094a0:	3b01      	subs	r3, #1
 80094a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094a6:	2a39      	cmp	r2, #57	; 0x39
 80094a8:	d06c      	beq.n	8009584 <_dtoa_r+0xba4>
 80094aa:	3201      	adds	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	e747      	b.n	8009340 <_dtoa_r+0x960>
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	dd07      	ble.n	80094c4 <_dtoa_r+0xae4>
 80094b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80094b8:	d0ed      	beq.n	8009496 <_dtoa_r+0xab6>
 80094ba:	9a01      	ldr	r2, [sp, #4]
 80094bc:	f109 0301 	add.w	r3, r9, #1
 80094c0:	7013      	strb	r3, [r2, #0]
 80094c2:	e73d      	b.n	8009340 <_dtoa_r+0x960>
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	9a08      	ldr	r2, [sp, #32]
 80094c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d043      	beq.n	8009558 <_dtoa_r+0xb78>
 80094d0:	4651      	mov	r1, sl
 80094d2:	2300      	movs	r3, #0
 80094d4:	220a      	movs	r2, #10
 80094d6:	4620      	mov	r0, r4
 80094d8:	f000 fefa 	bl	800a2d0 <__multadd>
 80094dc:	45b8      	cmp	r8, r7
 80094de:	4682      	mov	sl, r0
 80094e0:	f04f 0300 	mov.w	r3, #0
 80094e4:	f04f 020a 	mov.w	r2, #10
 80094e8:	4641      	mov	r1, r8
 80094ea:	4620      	mov	r0, r4
 80094ec:	d107      	bne.n	80094fe <_dtoa_r+0xb1e>
 80094ee:	f000 feef 	bl	800a2d0 <__multadd>
 80094f2:	4680      	mov	r8, r0
 80094f4:	4607      	mov	r7, r0
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	3301      	adds	r3, #1
 80094fa:	9304      	str	r3, [sp, #16]
 80094fc:	e775      	b.n	80093ea <_dtoa_r+0xa0a>
 80094fe:	f000 fee7 	bl	800a2d0 <__multadd>
 8009502:	4639      	mov	r1, r7
 8009504:	4680      	mov	r8, r0
 8009506:	2300      	movs	r3, #0
 8009508:	220a      	movs	r2, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f000 fee0 	bl	800a2d0 <__multadd>
 8009510:	4607      	mov	r7, r0
 8009512:	e7f0      	b.n	80094f6 <_dtoa_r+0xb16>
 8009514:	9b04      	ldr	r3, [sp, #16]
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	9d00      	ldr	r5, [sp, #0]
 800951a:	4631      	mov	r1, r6
 800951c:	4650      	mov	r0, sl
 800951e:	f7ff f9d5 	bl	80088cc <quorem>
 8009522:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009526:	9b00      	ldr	r3, [sp, #0]
 8009528:	f805 9b01 	strb.w	r9, [r5], #1
 800952c:	1aea      	subs	r2, r5, r3
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	4293      	cmp	r3, r2
 8009532:	dd07      	ble.n	8009544 <_dtoa_r+0xb64>
 8009534:	4651      	mov	r1, sl
 8009536:	2300      	movs	r3, #0
 8009538:	220a      	movs	r2, #10
 800953a:	4620      	mov	r0, r4
 800953c:	f000 fec8 	bl	800a2d0 <__multadd>
 8009540:	4682      	mov	sl, r0
 8009542:	e7ea      	b.n	800951a <_dtoa_r+0xb3a>
 8009544:	9b01      	ldr	r3, [sp, #4]
 8009546:	2b00      	cmp	r3, #0
 8009548:	bfc8      	it	gt
 800954a:	461d      	movgt	r5, r3
 800954c:	9b00      	ldr	r3, [sp, #0]
 800954e:	bfd8      	it	le
 8009550:	2501      	movle	r5, #1
 8009552:	441d      	add	r5, r3
 8009554:	f04f 0800 	mov.w	r8, #0
 8009558:	4651      	mov	r1, sl
 800955a:	2201      	movs	r2, #1
 800955c:	4620      	mov	r0, r4
 800955e:	f001 f8af 	bl	800a6c0 <__lshift>
 8009562:	4631      	mov	r1, r6
 8009564:	4682      	mov	sl, r0
 8009566:	f001 f917 	bl	800a798 <__mcmp>
 800956a:	2800      	cmp	r0, #0
 800956c:	dc96      	bgt.n	800949c <_dtoa_r+0xabc>
 800956e:	d102      	bne.n	8009576 <_dtoa_r+0xb96>
 8009570:	f019 0f01 	tst.w	r9, #1
 8009574:	d192      	bne.n	800949c <_dtoa_r+0xabc>
 8009576:	462b      	mov	r3, r5
 8009578:	461d      	mov	r5, r3
 800957a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800957e:	2a30      	cmp	r2, #48	; 0x30
 8009580:	d0fa      	beq.n	8009578 <_dtoa_r+0xb98>
 8009582:	e6dd      	b.n	8009340 <_dtoa_r+0x960>
 8009584:	9a00      	ldr	r2, [sp, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d189      	bne.n	800949e <_dtoa_r+0xabe>
 800958a:	f10b 0b01 	add.w	fp, fp, #1
 800958e:	2331      	movs	r3, #49	; 0x31
 8009590:	e796      	b.n	80094c0 <_dtoa_r+0xae0>
 8009592:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <_dtoa_r+0xbdc>)
 8009594:	f7ff ba99 	b.w	8008aca <_dtoa_r+0xea>
 8009598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800959a:	2b00      	cmp	r3, #0
 800959c:	f47f aa6d 	bne.w	8008a7a <_dtoa_r+0x9a>
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <_dtoa_r+0xbe0>)
 80095a2:	f7ff ba92 	b.w	8008aca <_dtoa_r+0xea>
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dcb5      	bgt.n	8009518 <_dtoa_r+0xb38>
 80095ac:	9b07      	ldr	r3, [sp, #28]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	f73f aeb1 	bgt.w	8009316 <_dtoa_r+0x936>
 80095b4:	e7b0      	b.n	8009518 <_dtoa_r+0xb38>
 80095b6:	bf00      	nop
 80095b8:	0800cba5 	.word	0x0800cba5
 80095bc:	0800c9a0 	.word	0x0800c9a0
 80095c0:	0800cb29 	.word	0x0800cb29

080095c4 <rshift>:
 80095c4:	6903      	ldr	r3, [r0, #16]
 80095c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095d2:	f100 0414 	add.w	r4, r0, #20
 80095d6:	dd45      	ble.n	8009664 <rshift+0xa0>
 80095d8:	f011 011f 	ands.w	r1, r1, #31
 80095dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095e4:	d10c      	bne.n	8009600 <rshift+0x3c>
 80095e6:	f100 0710 	add.w	r7, r0, #16
 80095ea:	4629      	mov	r1, r5
 80095ec:	42b1      	cmp	r1, r6
 80095ee:	d334      	bcc.n	800965a <rshift+0x96>
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	1eea      	subs	r2, r5, #3
 80095f6:	4296      	cmp	r6, r2
 80095f8:	bf38      	it	cc
 80095fa:	2300      	movcc	r3, #0
 80095fc:	4423      	add	r3, r4
 80095fe:	e015      	b.n	800962c <rshift+0x68>
 8009600:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009604:	f1c1 0820 	rsb	r8, r1, #32
 8009608:	40cf      	lsrs	r7, r1
 800960a:	f105 0e04 	add.w	lr, r5, #4
 800960e:	46a1      	mov	r9, r4
 8009610:	4576      	cmp	r6, lr
 8009612:	46f4      	mov	ip, lr
 8009614:	d815      	bhi.n	8009642 <rshift+0x7e>
 8009616:	1a9a      	subs	r2, r3, r2
 8009618:	0092      	lsls	r2, r2, #2
 800961a:	3a04      	subs	r2, #4
 800961c:	3501      	adds	r5, #1
 800961e:	42ae      	cmp	r6, r5
 8009620:	bf38      	it	cc
 8009622:	2200      	movcc	r2, #0
 8009624:	18a3      	adds	r3, r4, r2
 8009626:	50a7      	str	r7, [r4, r2]
 8009628:	b107      	cbz	r7, 800962c <rshift+0x68>
 800962a:	3304      	adds	r3, #4
 800962c:	1b1a      	subs	r2, r3, r4
 800962e:	42a3      	cmp	r3, r4
 8009630:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009634:	bf08      	it	eq
 8009636:	2300      	moveq	r3, #0
 8009638:	6102      	str	r2, [r0, #16]
 800963a:	bf08      	it	eq
 800963c:	6143      	streq	r3, [r0, #20]
 800963e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009642:	f8dc c000 	ldr.w	ip, [ip]
 8009646:	fa0c fc08 	lsl.w	ip, ip, r8
 800964a:	ea4c 0707 	orr.w	r7, ip, r7
 800964e:	f849 7b04 	str.w	r7, [r9], #4
 8009652:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009656:	40cf      	lsrs	r7, r1
 8009658:	e7da      	b.n	8009610 <rshift+0x4c>
 800965a:	f851 cb04 	ldr.w	ip, [r1], #4
 800965e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009662:	e7c3      	b.n	80095ec <rshift+0x28>
 8009664:	4623      	mov	r3, r4
 8009666:	e7e1      	b.n	800962c <rshift+0x68>

08009668 <__hexdig_fun>:
 8009668:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800966c:	2b09      	cmp	r3, #9
 800966e:	d802      	bhi.n	8009676 <__hexdig_fun+0xe>
 8009670:	3820      	subs	r0, #32
 8009672:	b2c0      	uxtb	r0, r0
 8009674:	4770      	bx	lr
 8009676:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800967a:	2b05      	cmp	r3, #5
 800967c:	d801      	bhi.n	8009682 <__hexdig_fun+0x1a>
 800967e:	3847      	subs	r0, #71	; 0x47
 8009680:	e7f7      	b.n	8009672 <__hexdig_fun+0xa>
 8009682:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009686:	2b05      	cmp	r3, #5
 8009688:	d801      	bhi.n	800968e <__hexdig_fun+0x26>
 800968a:	3827      	subs	r0, #39	; 0x27
 800968c:	e7f1      	b.n	8009672 <__hexdig_fun+0xa>
 800968e:	2000      	movs	r0, #0
 8009690:	4770      	bx	lr
	...

08009694 <__gethex>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	4617      	mov	r7, r2
 800969a:	680a      	ldr	r2, [r1, #0]
 800969c:	b085      	sub	sp, #20
 800969e:	f102 0b02 	add.w	fp, r2, #2
 80096a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096aa:	4681      	mov	r9, r0
 80096ac:	468a      	mov	sl, r1
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	32fe      	adds	r2, #254	; 0xfe
 80096b2:	eb02 030b 	add.w	r3, r2, fp
 80096b6:	46d8      	mov	r8, fp
 80096b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	2830      	cmp	r0, #48	; 0x30
 80096c0:	d0f7      	beq.n	80096b2 <__gethex+0x1e>
 80096c2:	f7ff ffd1 	bl	8009668 <__hexdig_fun>
 80096c6:	4604      	mov	r4, r0
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d138      	bne.n	800973e <__gethex+0xaa>
 80096cc:	49a7      	ldr	r1, [pc, #668]	; (800996c <__gethex+0x2d8>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	4640      	mov	r0, r8
 80096d2:	f7ff f893 	bl	80087fc <strncmp>
 80096d6:	4606      	mov	r6, r0
 80096d8:	2800      	cmp	r0, #0
 80096da:	d169      	bne.n	80097b0 <__gethex+0x11c>
 80096dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80096e0:	465d      	mov	r5, fp
 80096e2:	f7ff ffc1 	bl	8009668 <__hexdig_fun>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d064      	beq.n	80097b4 <__gethex+0x120>
 80096ea:	465a      	mov	r2, fp
 80096ec:	7810      	ldrb	r0, [r2, #0]
 80096ee:	2830      	cmp	r0, #48	; 0x30
 80096f0:	4690      	mov	r8, r2
 80096f2:	f102 0201 	add.w	r2, r2, #1
 80096f6:	d0f9      	beq.n	80096ec <__gethex+0x58>
 80096f8:	f7ff ffb6 	bl	8009668 <__hexdig_fun>
 80096fc:	2301      	movs	r3, #1
 80096fe:	fab0 f480 	clz	r4, r0
 8009702:	0964      	lsrs	r4, r4, #5
 8009704:	465e      	mov	r6, fp
 8009706:	9301      	str	r3, [sp, #4]
 8009708:	4642      	mov	r2, r8
 800970a:	4615      	mov	r5, r2
 800970c:	3201      	adds	r2, #1
 800970e:	7828      	ldrb	r0, [r5, #0]
 8009710:	f7ff ffaa 	bl	8009668 <__hexdig_fun>
 8009714:	2800      	cmp	r0, #0
 8009716:	d1f8      	bne.n	800970a <__gethex+0x76>
 8009718:	4994      	ldr	r1, [pc, #592]	; (800996c <__gethex+0x2d8>)
 800971a:	2201      	movs	r2, #1
 800971c:	4628      	mov	r0, r5
 800971e:	f7ff f86d 	bl	80087fc <strncmp>
 8009722:	b978      	cbnz	r0, 8009744 <__gethex+0xb0>
 8009724:	b946      	cbnz	r6, 8009738 <__gethex+0xa4>
 8009726:	1c6e      	adds	r6, r5, #1
 8009728:	4632      	mov	r2, r6
 800972a:	4615      	mov	r5, r2
 800972c:	3201      	adds	r2, #1
 800972e:	7828      	ldrb	r0, [r5, #0]
 8009730:	f7ff ff9a 	bl	8009668 <__hexdig_fun>
 8009734:	2800      	cmp	r0, #0
 8009736:	d1f8      	bne.n	800972a <__gethex+0x96>
 8009738:	1b73      	subs	r3, r6, r5
 800973a:	009e      	lsls	r6, r3, #2
 800973c:	e004      	b.n	8009748 <__gethex+0xb4>
 800973e:	2400      	movs	r4, #0
 8009740:	4626      	mov	r6, r4
 8009742:	e7e1      	b.n	8009708 <__gethex+0x74>
 8009744:	2e00      	cmp	r6, #0
 8009746:	d1f7      	bne.n	8009738 <__gethex+0xa4>
 8009748:	782b      	ldrb	r3, [r5, #0]
 800974a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800974e:	2b50      	cmp	r3, #80	; 0x50
 8009750:	d13d      	bne.n	80097ce <__gethex+0x13a>
 8009752:	786b      	ldrb	r3, [r5, #1]
 8009754:	2b2b      	cmp	r3, #43	; 0x2b
 8009756:	d02f      	beq.n	80097b8 <__gethex+0x124>
 8009758:	2b2d      	cmp	r3, #45	; 0x2d
 800975a:	d031      	beq.n	80097c0 <__gethex+0x12c>
 800975c:	1c69      	adds	r1, r5, #1
 800975e:	f04f 0b00 	mov.w	fp, #0
 8009762:	7808      	ldrb	r0, [r1, #0]
 8009764:	f7ff ff80 	bl	8009668 <__hexdig_fun>
 8009768:	1e42      	subs	r2, r0, #1
 800976a:	b2d2      	uxtb	r2, r2
 800976c:	2a18      	cmp	r2, #24
 800976e:	d82e      	bhi.n	80097ce <__gethex+0x13a>
 8009770:	f1a0 0210 	sub.w	r2, r0, #16
 8009774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009778:	f7ff ff76 	bl	8009668 <__hexdig_fun>
 800977c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009780:	fa5f fc8c 	uxtb.w	ip, ip
 8009784:	f1bc 0f18 	cmp.w	ip, #24
 8009788:	d91d      	bls.n	80097c6 <__gethex+0x132>
 800978a:	f1bb 0f00 	cmp.w	fp, #0
 800978e:	d000      	beq.n	8009792 <__gethex+0xfe>
 8009790:	4252      	negs	r2, r2
 8009792:	4416      	add	r6, r2
 8009794:	f8ca 1000 	str.w	r1, [sl]
 8009798:	b1dc      	cbz	r4, 80097d2 <__gethex+0x13e>
 800979a:	9b01      	ldr	r3, [sp, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	bf14      	ite	ne
 80097a0:	f04f 0800 	movne.w	r8, #0
 80097a4:	f04f 0806 	moveq.w	r8, #6
 80097a8:	4640      	mov	r0, r8
 80097aa:	b005      	add	sp, #20
 80097ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b0:	4645      	mov	r5, r8
 80097b2:	4626      	mov	r6, r4
 80097b4:	2401      	movs	r4, #1
 80097b6:	e7c7      	b.n	8009748 <__gethex+0xb4>
 80097b8:	f04f 0b00 	mov.w	fp, #0
 80097bc:	1ca9      	adds	r1, r5, #2
 80097be:	e7d0      	b.n	8009762 <__gethex+0xce>
 80097c0:	f04f 0b01 	mov.w	fp, #1
 80097c4:	e7fa      	b.n	80097bc <__gethex+0x128>
 80097c6:	230a      	movs	r3, #10
 80097c8:	fb03 0002 	mla	r0, r3, r2, r0
 80097cc:	e7d0      	b.n	8009770 <__gethex+0xdc>
 80097ce:	4629      	mov	r1, r5
 80097d0:	e7e0      	b.n	8009794 <__gethex+0x100>
 80097d2:	eba5 0308 	sub.w	r3, r5, r8
 80097d6:	3b01      	subs	r3, #1
 80097d8:	4621      	mov	r1, r4
 80097da:	2b07      	cmp	r3, #7
 80097dc:	dc0a      	bgt.n	80097f4 <__gethex+0x160>
 80097de:	4648      	mov	r0, r9
 80097e0:	f000 fd14 	bl	800a20c <_Balloc>
 80097e4:	4604      	mov	r4, r0
 80097e6:	b940      	cbnz	r0, 80097fa <__gethex+0x166>
 80097e8:	4b61      	ldr	r3, [pc, #388]	; (8009970 <__gethex+0x2dc>)
 80097ea:	4602      	mov	r2, r0
 80097ec:	21e4      	movs	r1, #228	; 0xe4
 80097ee:	4861      	ldr	r0, [pc, #388]	; (8009974 <__gethex+0x2e0>)
 80097f0:	f001 faa8 	bl	800ad44 <__assert_func>
 80097f4:	3101      	adds	r1, #1
 80097f6:	105b      	asrs	r3, r3, #1
 80097f8:	e7ef      	b.n	80097da <__gethex+0x146>
 80097fa:	f100 0a14 	add.w	sl, r0, #20
 80097fe:	2300      	movs	r3, #0
 8009800:	495a      	ldr	r1, [pc, #360]	; (800996c <__gethex+0x2d8>)
 8009802:	f8cd a004 	str.w	sl, [sp, #4]
 8009806:	469b      	mov	fp, r3
 8009808:	45a8      	cmp	r8, r5
 800980a:	d342      	bcc.n	8009892 <__gethex+0x1fe>
 800980c:	9801      	ldr	r0, [sp, #4]
 800980e:	f840 bb04 	str.w	fp, [r0], #4
 8009812:	eba0 000a 	sub.w	r0, r0, sl
 8009816:	1080      	asrs	r0, r0, #2
 8009818:	6120      	str	r0, [r4, #16]
 800981a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800981e:	4658      	mov	r0, fp
 8009820:	f000 fde6 	bl	800a3f0 <__hi0bits>
 8009824:	683d      	ldr	r5, [r7, #0]
 8009826:	eba8 0000 	sub.w	r0, r8, r0
 800982a:	42a8      	cmp	r0, r5
 800982c:	dd59      	ble.n	80098e2 <__gethex+0x24e>
 800982e:	eba0 0805 	sub.w	r8, r0, r5
 8009832:	4641      	mov	r1, r8
 8009834:	4620      	mov	r0, r4
 8009836:	f001 f975 	bl	800ab24 <__any_on>
 800983a:	4683      	mov	fp, r0
 800983c:	b1b8      	cbz	r0, 800986e <__gethex+0x1da>
 800983e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009842:	1159      	asrs	r1, r3, #5
 8009844:	f003 021f 	and.w	r2, r3, #31
 8009848:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800984c:	f04f 0b01 	mov.w	fp, #1
 8009850:	fa0b f202 	lsl.w	r2, fp, r2
 8009854:	420a      	tst	r2, r1
 8009856:	d00a      	beq.n	800986e <__gethex+0x1da>
 8009858:	455b      	cmp	r3, fp
 800985a:	dd06      	ble.n	800986a <__gethex+0x1d6>
 800985c:	f1a8 0102 	sub.w	r1, r8, #2
 8009860:	4620      	mov	r0, r4
 8009862:	f001 f95f 	bl	800ab24 <__any_on>
 8009866:	2800      	cmp	r0, #0
 8009868:	d138      	bne.n	80098dc <__gethex+0x248>
 800986a:	f04f 0b02 	mov.w	fp, #2
 800986e:	4641      	mov	r1, r8
 8009870:	4620      	mov	r0, r4
 8009872:	f7ff fea7 	bl	80095c4 <rshift>
 8009876:	4446      	add	r6, r8
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	42b3      	cmp	r3, r6
 800987c:	da41      	bge.n	8009902 <__gethex+0x26e>
 800987e:	4621      	mov	r1, r4
 8009880:	4648      	mov	r0, r9
 8009882:	f000 fd03 	bl	800a28c <_Bfree>
 8009886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009888:	2300      	movs	r3, #0
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009890:	e78a      	b.n	80097a8 <__gethex+0x114>
 8009892:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009896:	2a2e      	cmp	r2, #46	; 0x2e
 8009898:	d014      	beq.n	80098c4 <__gethex+0x230>
 800989a:	2b20      	cmp	r3, #32
 800989c:	d106      	bne.n	80098ac <__gethex+0x218>
 800989e:	9b01      	ldr	r3, [sp, #4]
 80098a0:	f843 bb04 	str.w	fp, [r3], #4
 80098a4:	f04f 0b00 	mov.w	fp, #0
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	465b      	mov	r3, fp
 80098ac:	7828      	ldrb	r0, [r5, #0]
 80098ae:	9303      	str	r3, [sp, #12]
 80098b0:	f7ff feda 	bl	8009668 <__hexdig_fun>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	f000 000f 	and.w	r0, r0, #15
 80098ba:	4098      	lsls	r0, r3
 80098bc:	ea4b 0b00 	orr.w	fp, fp, r0
 80098c0:	3304      	adds	r3, #4
 80098c2:	e7a1      	b.n	8009808 <__gethex+0x174>
 80098c4:	45a8      	cmp	r8, r5
 80098c6:	d8e8      	bhi.n	800989a <__gethex+0x206>
 80098c8:	2201      	movs	r2, #1
 80098ca:	4628      	mov	r0, r5
 80098cc:	9303      	str	r3, [sp, #12]
 80098ce:	f7fe ff95 	bl	80087fc <strncmp>
 80098d2:	4926      	ldr	r1, [pc, #152]	; (800996c <__gethex+0x2d8>)
 80098d4:	9b03      	ldr	r3, [sp, #12]
 80098d6:	2800      	cmp	r0, #0
 80098d8:	d1df      	bne.n	800989a <__gethex+0x206>
 80098da:	e795      	b.n	8009808 <__gethex+0x174>
 80098dc:	f04f 0b03 	mov.w	fp, #3
 80098e0:	e7c5      	b.n	800986e <__gethex+0x1da>
 80098e2:	da0b      	bge.n	80098fc <__gethex+0x268>
 80098e4:	eba5 0800 	sub.w	r8, r5, r0
 80098e8:	4621      	mov	r1, r4
 80098ea:	4642      	mov	r2, r8
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fee7 	bl	800a6c0 <__lshift>
 80098f2:	eba6 0608 	sub.w	r6, r6, r8
 80098f6:	4604      	mov	r4, r0
 80098f8:	f100 0a14 	add.w	sl, r0, #20
 80098fc:	f04f 0b00 	mov.w	fp, #0
 8009900:	e7ba      	b.n	8009878 <__gethex+0x1e4>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	42b3      	cmp	r3, r6
 8009906:	dd73      	ble.n	80099f0 <__gethex+0x35c>
 8009908:	1b9e      	subs	r6, r3, r6
 800990a:	42b5      	cmp	r5, r6
 800990c:	dc34      	bgt.n	8009978 <__gethex+0x2e4>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2b02      	cmp	r3, #2
 8009912:	d023      	beq.n	800995c <__gethex+0x2c8>
 8009914:	2b03      	cmp	r3, #3
 8009916:	d025      	beq.n	8009964 <__gethex+0x2d0>
 8009918:	2b01      	cmp	r3, #1
 800991a:	d115      	bne.n	8009948 <__gethex+0x2b4>
 800991c:	42b5      	cmp	r5, r6
 800991e:	d113      	bne.n	8009948 <__gethex+0x2b4>
 8009920:	2d01      	cmp	r5, #1
 8009922:	d10b      	bne.n	800993c <__gethex+0x2a8>
 8009924:	9a02      	ldr	r2, [sp, #8]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	2301      	movs	r3, #1
 800992c:	6123      	str	r3, [r4, #16]
 800992e:	f8ca 3000 	str.w	r3, [sl]
 8009932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009934:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009938:	601c      	str	r4, [r3, #0]
 800993a:	e735      	b.n	80097a8 <__gethex+0x114>
 800993c:	1e69      	subs	r1, r5, #1
 800993e:	4620      	mov	r0, r4
 8009940:	f001 f8f0 	bl	800ab24 <__any_on>
 8009944:	2800      	cmp	r0, #0
 8009946:	d1ed      	bne.n	8009924 <__gethex+0x290>
 8009948:	4621      	mov	r1, r4
 800994a:	4648      	mov	r0, r9
 800994c:	f000 fc9e 	bl	800a28c <_Bfree>
 8009950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009952:	2300      	movs	r3, #0
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	f04f 0850 	mov.w	r8, #80	; 0x50
 800995a:	e725      	b.n	80097a8 <__gethex+0x114>
 800995c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f2      	bne.n	8009948 <__gethex+0x2b4>
 8009962:	e7df      	b.n	8009924 <__gethex+0x290>
 8009964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1dc      	bne.n	8009924 <__gethex+0x290>
 800996a:	e7ed      	b.n	8009948 <__gethex+0x2b4>
 800996c:	0800c9c9 	.word	0x0800c9c9
 8009970:	0800cba5 	.word	0x0800cba5
 8009974:	0800cbb6 	.word	0x0800cbb6
 8009978:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800997c:	f1bb 0f00 	cmp.w	fp, #0
 8009980:	d133      	bne.n	80099ea <__gethex+0x356>
 8009982:	f1b8 0f00 	cmp.w	r8, #0
 8009986:	d004      	beq.n	8009992 <__gethex+0x2fe>
 8009988:	4641      	mov	r1, r8
 800998a:	4620      	mov	r0, r4
 800998c:	f001 f8ca 	bl	800ab24 <__any_on>
 8009990:	4683      	mov	fp, r0
 8009992:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009996:	2301      	movs	r3, #1
 8009998:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800999c:	f008 081f 	and.w	r8, r8, #31
 80099a0:	fa03 f308 	lsl.w	r3, r3, r8
 80099a4:	4213      	tst	r3, r2
 80099a6:	4631      	mov	r1, r6
 80099a8:	4620      	mov	r0, r4
 80099aa:	bf18      	it	ne
 80099ac:	f04b 0b02 	orrne.w	fp, fp, #2
 80099b0:	1bad      	subs	r5, r5, r6
 80099b2:	f7ff fe07 	bl	80095c4 <rshift>
 80099b6:	687e      	ldr	r6, [r7, #4]
 80099b8:	f04f 0802 	mov.w	r8, #2
 80099bc:	f1bb 0f00 	cmp.w	fp, #0
 80099c0:	d04a      	beq.n	8009a58 <__gethex+0x3c4>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d016      	beq.n	80099f6 <__gethex+0x362>
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d018      	beq.n	80099fe <__gethex+0x36a>
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d109      	bne.n	80099e4 <__gethex+0x350>
 80099d0:	f01b 0f02 	tst.w	fp, #2
 80099d4:	d006      	beq.n	80099e4 <__gethex+0x350>
 80099d6:	f8da 3000 	ldr.w	r3, [sl]
 80099da:	ea4b 0b03 	orr.w	fp, fp, r3
 80099de:	f01b 0f01 	tst.w	fp, #1
 80099e2:	d10f      	bne.n	8009a04 <__gethex+0x370>
 80099e4:	f048 0810 	orr.w	r8, r8, #16
 80099e8:	e036      	b.n	8009a58 <__gethex+0x3c4>
 80099ea:	f04f 0b01 	mov.w	fp, #1
 80099ee:	e7d0      	b.n	8009992 <__gethex+0x2fe>
 80099f0:	f04f 0801 	mov.w	r8, #1
 80099f4:	e7e2      	b.n	80099bc <__gethex+0x328>
 80099f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099f8:	f1c3 0301 	rsb	r3, r3, #1
 80099fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80099fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d0ef      	beq.n	80099e4 <__gethex+0x350>
 8009a04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a08:	f104 0214 	add.w	r2, r4, #20
 8009a0c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a16:	2300      	movs	r3, #0
 8009a18:	4694      	mov	ip, r2
 8009a1a:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a1e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009a22:	d01e      	beq.n	8009a62 <__gethex+0x3ce>
 8009a24:	3101      	adds	r1, #1
 8009a26:	f8cc 1000 	str.w	r1, [ip]
 8009a2a:	f1b8 0f02 	cmp.w	r8, #2
 8009a2e:	f104 0214 	add.w	r2, r4, #20
 8009a32:	d13d      	bne.n	8009ab0 <__gethex+0x41c>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	d10b      	bne.n	8009a54 <__gethex+0x3c0>
 8009a3c:	1169      	asrs	r1, r5, #5
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f005 051f 	and.w	r5, r5, #31
 8009a44:	fa03 f505 	lsl.w	r5, r3, r5
 8009a48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a4c:	421d      	tst	r5, r3
 8009a4e:	bf18      	it	ne
 8009a50:	f04f 0801 	movne.w	r8, #1
 8009a54:	f048 0820 	orr.w	r8, r8, #32
 8009a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a5a:	601c      	str	r4, [r3, #0]
 8009a5c:	9b02      	ldr	r3, [sp, #8]
 8009a5e:	601e      	str	r6, [r3, #0]
 8009a60:	e6a2      	b.n	80097a8 <__gethex+0x114>
 8009a62:	4290      	cmp	r0, r2
 8009a64:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a68:	d8d6      	bhi.n	8009a18 <__gethex+0x384>
 8009a6a:	68a2      	ldr	r2, [r4, #8]
 8009a6c:	4593      	cmp	fp, r2
 8009a6e:	db17      	blt.n	8009aa0 <__gethex+0x40c>
 8009a70:	6861      	ldr	r1, [r4, #4]
 8009a72:	4648      	mov	r0, r9
 8009a74:	3101      	adds	r1, #1
 8009a76:	f000 fbc9 	bl	800a20c <_Balloc>
 8009a7a:	4682      	mov	sl, r0
 8009a7c:	b918      	cbnz	r0, 8009a86 <__gethex+0x3f2>
 8009a7e:	4b1b      	ldr	r3, [pc, #108]	; (8009aec <__gethex+0x458>)
 8009a80:	4602      	mov	r2, r0
 8009a82:	2184      	movs	r1, #132	; 0x84
 8009a84:	e6b3      	b.n	80097ee <__gethex+0x15a>
 8009a86:	6922      	ldr	r2, [r4, #16]
 8009a88:	3202      	adds	r2, #2
 8009a8a:	f104 010c 	add.w	r1, r4, #12
 8009a8e:	0092      	lsls	r2, r2, #2
 8009a90:	300c      	adds	r0, #12
 8009a92:	f7fe fefe 	bl	8008892 <memcpy>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4648      	mov	r0, r9
 8009a9a:	f000 fbf7 	bl	800a28c <_Bfree>
 8009a9e:	4654      	mov	r4, sl
 8009aa0:	6922      	ldr	r2, [r4, #16]
 8009aa2:	1c51      	adds	r1, r2, #1
 8009aa4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009aa8:	6121      	str	r1, [r4, #16]
 8009aaa:	2101      	movs	r1, #1
 8009aac:	6151      	str	r1, [r2, #20]
 8009aae:	e7bc      	b.n	8009a2a <__gethex+0x396>
 8009ab0:	6921      	ldr	r1, [r4, #16]
 8009ab2:	4559      	cmp	r1, fp
 8009ab4:	dd0b      	ble.n	8009ace <__gethex+0x43a>
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7ff fd83 	bl	80095c4 <rshift>
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	3601      	adds	r6, #1
 8009ac2:	42b3      	cmp	r3, r6
 8009ac4:	f6ff aedb 	blt.w	800987e <__gethex+0x1ea>
 8009ac8:	f04f 0801 	mov.w	r8, #1
 8009acc:	e7c2      	b.n	8009a54 <__gethex+0x3c0>
 8009ace:	f015 051f 	ands.w	r5, r5, #31
 8009ad2:	d0f9      	beq.n	8009ac8 <__gethex+0x434>
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	441a      	add	r2, r3
 8009ad8:	f1c5 0520 	rsb	r5, r5, #32
 8009adc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009ae0:	f000 fc86 	bl	800a3f0 <__hi0bits>
 8009ae4:	42a8      	cmp	r0, r5
 8009ae6:	dbe6      	blt.n	8009ab6 <__gethex+0x422>
 8009ae8:	e7ee      	b.n	8009ac8 <__gethex+0x434>
 8009aea:	bf00      	nop
 8009aec:	0800cba5 	.word	0x0800cba5

08009af0 <L_shift>:
 8009af0:	f1c2 0208 	rsb	r2, r2, #8
 8009af4:	0092      	lsls	r2, r2, #2
 8009af6:	b570      	push	{r4, r5, r6, lr}
 8009af8:	f1c2 0620 	rsb	r6, r2, #32
 8009afc:	6843      	ldr	r3, [r0, #4]
 8009afe:	6804      	ldr	r4, [r0, #0]
 8009b00:	fa03 f506 	lsl.w	r5, r3, r6
 8009b04:	432c      	orrs	r4, r5
 8009b06:	40d3      	lsrs	r3, r2
 8009b08:	6004      	str	r4, [r0, #0]
 8009b0a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b0e:	4288      	cmp	r0, r1
 8009b10:	d3f4      	bcc.n	8009afc <L_shift+0xc>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}

08009b14 <__match>:
 8009b14:	b530      	push	{r4, r5, lr}
 8009b16:	6803      	ldr	r3, [r0, #0]
 8009b18:	3301      	adds	r3, #1
 8009b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b1e:	b914      	cbnz	r4, 8009b26 <__match+0x12>
 8009b20:	6003      	str	r3, [r0, #0]
 8009b22:	2001      	movs	r0, #1
 8009b24:	bd30      	pop	{r4, r5, pc}
 8009b26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b2e:	2d19      	cmp	r5, #25
 8009b30:	bf98      	it	ls
 8009b32:	3220      	addls	r2, #32
 8009b34:	42a2      	cmp	r2, r4
 8009b36:	d0f0      	beq.n	8009b1a <__match+0x6>
 8009b38:	2000      	movs	r0, #0
 8009b3a:	e7f3      	b.n	8009b24 <__match+0x10>

08009b3c <__hexnan>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	680b      	ldr	r3, [r1, #0]
 8009b42:	6801      	ldr	r1, [r0, #0]
 8009b44:	115e      	asrs	r6, r3, #5
 8009b46:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b4a:	f013 031f 	ands.w	r3, r3, #31
 8009b4e:	b087      	sub	sp, #28
 8009b50:	bf18      	it	ne
 8009b52:	3604      	addne	r6, #4
 8009b54:	2500      	movs	r5, #0
 8009b56:	1f37      	subs	r7, r6, #4
 8009b58:	4682      	mov	sl, r0
 8009b5a:	4690      	mov	r8, r2
 8009b5c:	9301      	str	r3, [sp, #4]
 8009b5e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b62:	46b9      	mov	r9, r7
 8009b64:	463c      	mov	r4, r7
 8009b66:	9502      	str	r5, [sp, #8]
 8009b68:	46ab      	mov	fp, r5
 8009b6a:	784a      	ldrb	r2, [r1, #1]
 8009b6c:	1c4b      	adds	r3, r1, #1
 8009b6e:	9303      	str	r3, [sp, #12]
 8009b70:	b342      	cbz	r2, 8009bc4 <__hexnan+0x88>
 8009b72:	4610      	mov	r0, r2
 8009b74:	9105      	str	r1, [sp, #20]
 8009b76:	9204      	str	r2, [sp, #16]
 8009b78:	f7ff fd76 	bl	8009668 <__hexdig_fun>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d14f      	bne.n	8009c20 <__hexnan+0xe4>
 8009b80:	9a04      	ldr	r2, [sp, #16]
 8009b82:	9905      	ldr	r1, [sp, #20]
 8009b84:	2a20      	cmp	r2, #32
 8009b86:	d818      	bhi.n	8009bba <__hexnan+0x7e>
 8009b88:	9b02      	ldr	r3, [sp, #8]
 8009b8a:	459b      	cmp	fp, r3
 8009b8c:	dd13      	ble.n	8009bb6 <__hexnan+0x7a>
 8009b8e:	454c      	cmp	r4, r9
 8009b90:	d206      	bcs.n	8009ba0 <__hexnan+0x64>
 8009b92:	2d07      	cmp	r5, #7
 8009b94:	dc04      	bgt.n	8009ba0 <__hexnan+0x64>
 8009b96:	462a      	mov	r2, r5
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff ffa8 	bl	8009af0 <L_shift>
 8009ba0:	4544      	cmp	r4, r8
 8009ba2:	d950      	bls.n	8009c46 <__hexnan+0x10a>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f1a4 0904 	sub.w	r9, r4, #4
 8009baa:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bae:	f8cd b008 	str.w	fp, [sp, #8]
 8009bb2:	464c      	mov	r4, r9
 8009bb4:	461d      	mov	r5, r3
 8009bb6:	9903      	ldr	r1, [sp, #12]
 8009bb8:	e7d7      	b.n	8009b6a <__hexnan+0x2e>
 8009bba:	2a29      	cmp	r2, #41	; 0x29
 8009bbc:	d155      	bne.n	8009c6a <__hexnan+0x12e>
 8009bbe:	3102      	adds	r1, #2
 8009bc0:	f8ca 1000 	str.w	r1, [sl]
 8009bc4:	f1bb 0f00 	cmp.w	fp, #0
 8009bc8:	d04f      	beq.n	8009c6a <__hexnan+0x12e>
 8009bca:	454c      	cmp	r4, r9
 8009bcc:	d206      	bcs.n	8009bdc <__hexnan+0xa0>
 8009bce:	2d07      	cmp	r5, #7
 8009bd0:	dc04      	bgt.n	8009bdc <__hexnan+0xa0>
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f7ff ff8a 	bl	8009af0 <L_shift>
 8009bdc:	4544      	cmp	r4, r8
 8009bde:	d934      	bls.n	8009c4a <__hexnan+0x10e>
 8009be0:	f1a8 0204 	sub.w	r2, r8, #4
 8009be4:	4623      	mov	r3, r4
 8009be6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bea:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bee:	429f      	cmp	r7, r3
 8009bf0:	d2f9      	bcs.n	8009be6 <__hexnan+0xaa>
 8009bf2:	1b3b      	subs	r3, r7, r4
 8009bf4:	f023 0303 	bic.w	r3, r3, #3
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	3e03      	subs	r6, #3
 8009bfc:	3401      	adds	r4, #1
 8009bfe:	42a6      	cmp	r6, r4
 8009c00:	bf38      	it	cc
 8009c02:	2304      	movcc	r3, #4
 8009c04:	4443      	add	r3, r8
 8009c06:	2200      	movs	r2, #0
 8009c08:	f843 2b04 	str.w	r2, [r3], #4
 8009c0c:	429f      	cmp	r7, r3
 8009c0e:	d2fb      	bcs.n	8009c08 <__hexnan+0xcc>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	b91b      	cbnz	r3, 8009c1c <__hexnan+0xe0>
 8009c14:	4547      	cmp	r7, r8
 8009c16:	d126      	bne.n	8009c66 <__hexnan+0x12a>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	2005      	movs	r0, #5
 8009c1e:	e025      	b.n	8009c6c <__hexnan+0x130>
 8009c20:	3501      	adds	r5, #1
 8009c22:	2d08      	cmp	r5, #8
 8009c24:	f10b 0b01 	add.w	fp, fp, #1
 8009c28:	dd06      	ble.n	8009c38 <__hexnan+0xfc>
 8009c2a:	4544      	cmp	r4, r8
 8009c2c:	d9c3      	bls.n	8009bb6 <__hexnan+0x7a>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c34:	2501      	movs	r5, #1
 8009c36:	3c04      	subs	r4, #4
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	f000 000f 	and.w	r0, r0, #15
 8009c3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c42:	6020      	str	r0, [r4, #0]
 8009c44:	e7b7      	b.n	8009bb6 <__hexnan+0x7a>
 8009c46:	2508      	movs	r5, #8
 8009c48:	e7b5      	b.n	8009bb6 <__hexnan+0x7a>
 8009c4a:	9b01      	ldr	r3, [sp, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d0df      	beq.n	8009c10 <__hexnan+0xd4>
 8009c50:	f1c3 0320 	rsb	r3, r3, #32
 8009c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c58:	40da      	lsrs	r2, r3
 8009c5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c64:	e7d4      	b.n	8009c10 <__hexnan+0xd4>
 8009c66:	3f04      	subs	r7, #4
 8009c68:	e7d2      	b.n	8009c10 <__hexnan+0xd4>
 8009c6a:	2004      	movs	r0, #4
 8009c6c:	b007      	add	sp, #28
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009c72 <__ssputs_r>:
 8009c72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c76:	688e      	ldr	r6, [r1, #8]
 8009c78:	461f      	mov	r7, r3
 8009c7a:	42be      	cmp	r6, r7
 8009c7c:	680b      	ldr	r3, [r1, #0]
 8009c7e:	4682      	mov	sl, r0
 8009c80:	460c      	mov	r4, r1
 8009c82:	4690      	mov	r8, r2
 8009c84:	d82c      	bhi.n	8009ce0 <__ssputs_r+0x6e>
 8009c86:	898a      	ldrh	r2, [r1, #12]
 8009c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c8c:	d026      	beq.n	8009cdc <__ssputs_r+0x6a>
 8009c8e:	6965      	ldr	r5, [r4, #20]
 8009c90:	6909      	ldr	r1, [r1, #16]
 8009c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c96:	eba3 0901 	sub.w	r9, r3, r1
 8009c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c9e:	1c7b      	adds	r3, r7, #1
 8009ca0:	444b      	add	r3, r9
 8009ca2:	106d      	asrs	r5, r5, #1
 8009ca4:	429d      	cmp	r5, r3
 8009ca6:	bf38      	it	cc
 8009ca8:	461d      	movcc	r5, r3
 8009caa:	0553      	lsls	r3, r2, #21
 8009cac:	d527      	bpl.n	8009cfe <__ssputs_r+0x8c>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f000 f960 	bl	8009f74 <_malloc_r>
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	b360      	cbz	r0, 8009d12 <__ssputs_r+0xa0>
 8009cb8:	6921      	ldr	r1, [r4, #16]
 8009cba:	464a      	mov	r2, r9
 8009cbc:	f7fe fde9 	bl	8008892 <memcpy>
 8009cc0:	89a3      	ldrh	r3, [r4, #12]
 8009cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	6126      	str	r6, [r4, #16]
 8009cce:	6165      	str	r5, [r4, #20]
 8009cd0:	444e      	add	r6, r9
 8009cd2:	eba5 0509 	sub.w	r5, r5, r9
 8009cd6:	6026      	str	r6, [r4, #0]
 8009cd8:	60a5      	str	r5, [r4, #8]
 8009cda:	463e      	mov	r6, r7
 8009cdc:	42be      	cmp	r6, r7
 8009cde:	d900      	bls.n	8009ce2 <__ssputs_r+0x70>
 8009ce0:	463e      	mov	r6, r7
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	f000 ffbc 	bl	800ac64 <memmove>
 8009cec:	68a3      	ldr	r3, [r4, #8]
 8009cee:	1b9b      	subs	r3, r3, r6
 8009cf0:	60a3      	str	r3, [r4, #8]
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	4433      	add	r3, r6
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfe:	462a      	mov	r2, r5
 8009d00:	f000 ff74 	bl	800abec <_realloc_r>
 8009d04:	4606      	mov	r6, r0
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d1e0      	bne.n	8009ccc <__ssputs_r+0x5a>
 8009d0a:	6921      	ldr	r1, [r4, #16]
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	f001 f84d 	bl	800adac <_free_r>
 8009d12:	230c      	movs	r3, #12
 8009d14:	f8ca 3000 	str.w	r3, [sl]
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d24:	e7e9      	b.n	8009cfa <__ssputs_r+0x88>
	...

08009d28 <_svfiprintf_r>:
 8009d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2c:	4698      	mov	r8, r3
 8009d2e:	898b      	ldrh	r3, [r1, #12]
 8009d30:	061b      	lsls	r3, r3, #24
 8009d32:	b09d      	sub	sp, #116	; 0x74
 8009d34:	4607      	mov	r7, r0
 8009d36:	460d      	mov	r5, r1
 8009d38:	4614      	mov	r4, r2
 8009d3a:	d50e      	bpl.n	8009d5a <_svfiprintf_r+0x32>
 8009d3c:	690b      	ldr	r3, [r1, #16]
 8009d3e:	b963      	cbnz	r3, 8009d5a <_svfiprintf_r+0x32>
 8009d40:	2140      	movs	r1, #64	; 0x40
 8009d42:	f000 f917 	bl	8009f74 <_malloc_r>
 8009d46:	6028      	str	r0, [r5, #0]
 8009d48:	6128      	str	r0, [r5, #16]
 8009d4a:	b920      	cbnz	r0, 8009d56 <_svfiprintf_r+0x2e>
 8009d4c:	230c      	movs	r3, #12
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d54:	e0d0      	b.n	8009ef8 <_svfiprintf_r+0x1d0>
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	616b      	str	r3, [r5, #20]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d5e:	2320      	movs	r3, #32
 8009d60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d64:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d68:	2330      	movs	r3, #48	; 0x30
 8009d6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009f10 <_svfiprintf_r+0x1e8>
 8009d6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d72:	f04f 0901 	mov.w	r9, #1
 8009d76:	4623      	mov	r3, r4
 8009d78:	469a      	mov	sl, r3
 8009d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7e:	b10a      	cbz	r2, 8009d84 <_svfiprintf_r+0x5c>
 8009d80:	2a25      	cmp	r2, #37	; 0x25
 8009d82:	d1f9      	bne.n	8009d78 <_svfiprintf_r+0x50>
 8009d84:	ebba 0b04 	subs.w	fp, sl, r4
 8009d88:	d00b      	beq.n	8009da2 <_svfiprintf_r+0x7a>
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	4622      	mov	r2, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4638      	mov	r0, r7
 8009d92:	f7ff ff6e 	bl	8009c72 <__ssputs_r>
 8009d96:	3001      	adds	r0, #1
 8009d98:	f000 80a9 	beq.w	8009eee <_svfiprintf_r+0x1c6>
 8009d9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d9e:	445a      	add	r2, fp
 8009da0:	9209      	str	r2, [sp, #36]	; 0x24
 8009da2:	f89a 3000 	ldrb.w	r3, [sl]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 80a1 	beq.w	8009eee <_svfiprintf_r+0x1c6>
 8009dac:	2300      	movs	r3, #0
 8009dae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009db2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009db6:	f10a 0a01 	add.w	sl, sl, #1
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	9307      	str	r3, [sp, #28]
 8009dbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dc2:	931a      	str	r3, [sp, #104]	; 0x68
 8009dc4:	4654      	mov	r4, sl
 8009dc6:	2205      	movs	r2, #5
 8009dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dcc:	4850      	ldr	r0, [pc, #320]	; (8009f10 <_svfiprintf_r+0x1e8>)
 8009dce:	f7f6 fa1f 	bl	8000210 <memchr>
 8009dd2:	9a04      	ldr	r2, [sp, #16]
 8009dd4:	b9d8      	cbnz	r0, 8009e0e <_svfiprintf_r+0xe6>
 8009dd6:	06d0      	lsls	r0, r2, #27
 8009dd8:	bf44      	itt	mi
 8009dda:	2320      	movmi	r3, #32
 8009ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009de0:	0711      	lsls	r1, r2, #28
 8009de2:	bf44      	itt	mi
 8009de4:	232b      	movmi	r3, #43	; 0x2b
 8009de6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dea:	f89a 3000 	ldrb.w	r3, [sl]
 8009dee:	2b2a      	cmp	r3, #42	; 0x2a
 8009df0:	d015      	beq.n	8009e1e <_svfiprintf_r+0xf6>
 8009df2:	9a07      	ldr	r2, [sp, #28]
 8009df4:	4654      	mov	r4, sl
 8009df6:	2000      	movs	r0, #0
 8009df8:	f04f 0c0a 	mov.w	ip, #10
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e02:	3b30      	subs	r3, #48	; 0x30
 8009e04:	2b09      	cmp	r3, #9
 8009e06:	d94d      	bls.n	8009ea4 <_svfiprintf_r+0x17c>
 8009e08:	b1b0      	cbz	r0, 8009e38 <_svfiprintf_r+0x110>
 8009e0a:	9207      	str	r2, [sp, #28]
 8009e0c:	e014      	b.n	8009e38 <_svfiprintf_r+0x110>
 8009e0e:	eba0 0308 	sub.w	r3, r0, r8
 8009e12:	fa09 f303 	lsl.w	r3, r9, r3
 8009e16:	4313      	orrs	r3, r2
 8009e18:	9304      	str	r3, [sp, #16]
 8009e1a:	46a2      	mov	sl, r4
 8009e1c:	e7d2      	b.n	8009dc4 <_svfiprintf_r+0x9c>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	1d19      	adds	r1, r3, #4
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	9103      	str	r1, [sp, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	bfbb      	ittet	lt
 8009e2a:	425b      	neglt	r3, r3
 8009e2c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e30:	9307      	strge	r3, [sp, #28]
 8009e32:	9307      	strlt	r3, [sp, #28]
 8009e34:	bfb8      	it	lt
 8009e36:	9204      	strlt	r2, [sp, #16]
 8009e38:	7823      	ldrb	r3, [r4, #0]
 8009e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e3c:	d10c      	bne.n	8009e58 <_svfiprintf_r+0x130>
 8009e3e:	7863      	ldrb	r3, [r4, #1]
 8009e40:	2b2a      	cmp	r3, #42	; 0x2a
 8009e42:	d134      	bne.n	8009eae <_svfiprintf_r+0x186>
 8009e44:	9b03      	ldr	r3, [sp, #12]
 8009e46:	1d1a      	adds	r2, r3, #4
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	9203      	str	r2, [sp, #12]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	bfb8      	it	lt
 8009e50:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e54:	3402      	adds	r4, #2
 8009e56:	9305      	str	r3, [sp, #20]
 8009e58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009f20 <_svfiprintf_r+0x1f8>
 8009e5c:	7821      	ldrb	r1, [r4, #0]
 8009e5e:	2203      	movs	r2, #3
 8009e60:	4650      	mov	r0, sl
 8009e62:	f7f6 f9d5 	bl	8000210 <memchr>
 8009e66:	b138      	cbz	r0, 8009e78 <_svfiprintf_r+0x150>
 8009e68:	9b04      	ldr	r3, [sp, #16]
 8009e6a:	eba0 000a 	sub.w	r0, r0, sl
 8009e6e:	2240      	movs	r2, #64	; 0x40
 8009e70:	4082      	lsls	r2, r0
 8009e72:	4313      	orrs	r3, r2
 8009e74:	3401      	adds	r4, #1
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7c:	4825      	ldr	r0, [pc, #148]	; (8009f14 <_svfiprintf_r+0x1ec>)
 8009e7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e82:	2206      	movs	r2, #6
 8009e84:	f7f6 f9c4 	bl	8000210 <memchr>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d038      	beq.n	8009efe <_svfiprintf_r+0x1d6>
 8009e8c:	4b22      	ldr	r3, [pc, #136]	; (8009f18 <_svfiprintf_r+0x1f0>)
 8009e8e:	bb1b      	cbnz	r3, 8009ed8 <_svfiprintf_r+0x1b0>
 8009e90:	9b03      	ldr	r3, [sp, #12]
 8009e92:	3307      	adds	r3, #7
 8009e94:	f023 0307 	bic.w	r3, r3, #7
 8009e98:	3308      	adds	r3, #8
 8009e9a:	9303      	str	r3, [sp, #12]
 8009e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9e:	4433      	add	r3, r6
 8009ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ea2:	e768      	b.n	8009d76 <_svfiprintf_r+0x4e>
 8009ea4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	2001      	movs	r0, #1
 8009eac:	e7a6      	b.n	8009dfc <_svfiprintf_r+0xd4>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	3401      	adds	r4, #1
 8009eb2:	9305      	str	r3, [sp, #20]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f04f 0c0a 	mov.w	ip, #10
 8009eba:	4620      	mov	r0, r4
 8009ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec0:	3a30      	subs	r2, #48	; 0x30
 8009ec2:	2a09      	cmp	r2, #9
 8009ec4:	d903      	bls.n	8009ece <_svfiprintf_r+0x1a6>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0c6      	beq.n	8009e58 <_svfiprintf_r+0x130>
 8009eca:	9105      	str	r1, [sp, #20]
 8009ecc:	e7c4      	b.n	8009e58 <_svfiprintf_r+0x130>
 8009ece:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e7f0      	b.n	8009eba <_svfiprintf_r+0x192>
 8009ed8:	ab03      	add	r3, sp, #12
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	462a      	mov	r2, r5
 8009ede:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <_svfiprintf_r+0x1f4>)
 8009ee0:	a904      	add	r1, sp, #16
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f7fc ff00 	bl	8006ce8 <_printf_float>
 8009ee8:	1c42      	adds	r2, r0, #1
 8009eea:	4606      	mov	r6, r0
 8009eec:	d1d6      	bne.n	8009e9c <_svfiprintf_r+0x174>
 8009eee:	89ab      	ldrh	r3, [r5, #12]
 8009ef0:	065b      	lsls	r3, r3, #25
 8009ef2:	f53f af2d 	bmi.w	8009d50 <_svfiprintf_r+0x28>
 8009ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ef8:	b01d      	add	sp, #116	; 0x74
 8009efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efe:	ab03      	add	r3, sp, #12
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	462a      	mov	r2, r5
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <_svfiprintf_r+0x1f4>)
 8009f06:	a904      	add	r1, sp, #16
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7fd f991 	bl	8007230 <_printf_i>
 8009f0e:	e7eb      	b.n	8009ee8 <_svfiprintf_r+0x1c0>
 8009f10:	0800cc16 	.word	0x0800cc16
 8009f14:	0800cc20 	.word	0x0800cc20
 8009f18:	08006ce9 	.word	0x08006ce9
 8009f1c:	08009c73 	.word	0x08009c73
 8009f20:	0800cc1c 	.word	0x0800cc1c

08009f24 <malloc>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <malloc+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f000 b823 	b.w	8009f74 <_malloc_r>
 8009f2e:	bf00      	nop
 8009f30:	20000208 	.word	0x20000208

08009f34 <sbrk_aligned>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4e0e      	ldr	r6, [pc, #56]	; (8009f70 <sbrk_aligned+0x3c>)
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6831      	ldr	r1, [r6, #0]
 8009f3c:	4605      	mov	r5, r0
 8009f3e:	b911      	cbnz	r1, 8009f46 <sbrk_aligned+0x12>
 8009f40:	f000 fede 	bl	800ad00 <_sbrk_r>
 8009f44:	6030      	str	r0, [r6, #0]
 8009f46:	4621      	mov	r1, r4
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f000 fed9 	bl	800ad00 <_sbrk_r>
 8009f4e:	1c43      	adds	r3, r0, #1
 8009f50:	d00a      	beq.n	8009f68 <sbrk_aligned+0x34>
 8009f52:	1cc4      	adds	r4, r0, #3
 8009f54:	f024 0403 	bic.w	r4, r4, #3
 8009f58:	42a0      	cmp	r0, r4
 8009f5a:	d007      	beq.n	8009f6c <sbrk_aligned+0x38>
 8009f5c:	1a21      	subs	r1, r4, r0
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 fece 	bl	800ad00 <_sbrk_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d101      	bne.n	8009f6c <sbrk_aligned+0x38>
 8009f68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}
 8009f70:	2000aa18 	.word	0x2000aa18

08009f74 <_malloc_r>:
 8009f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f78:	1ccd      	adds	r5, r1, #3
 8009f7a:	f025 0503 	bic.w	r5, r5, #3
 8009f7e:	3508      	adds	r5, #8
 8009f80:	2d0c      	cmp	r5, #12
 8009f82:	bf38      	it	cc
 8009f84:	250c      	movcc	r5, #12
 8009f86:	2d00      	cmp	r5, #0
 8009f88:	4607      	mov	r7, r0
 8009f8a:	db01      	blt.n	8009f90 <_malloc_r+0x1c>
 8009f8c:	42a9      	cmp	r1, r5
 8009f8e:	d905      	bls.n	8009f9c <_malloc_r+0x28>
 8009f90:	230c      	movs	r3, #12
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	2600      	movs	r6, #0
 8009f96:	4630      	mov	r0, r6
 8009f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a070 <_malloc_r+0xfc>
 8009fa0:	f000 f928 	bl	800a1f4 <__malloc_lock>
 8009fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8009fa8:	461c      	mov	r4, r3
 8009faa:	bb5c      	cbnz	r4, 800a004 <_malloc_r+0x90>
 8009fac:	4629      	mov	r1, r5
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ffc0 	bl	8009f34 <sbrk_aligned>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	d155      	bne.n	800a066 <_malloc_r+0xf2>
 8009fba:	f8d8 4000 	ldr.w	r4, [r8]
 8009fbe:	4626      	mov	r6, r4
 8009fc0:	2e00      	cmp	r6, #0
 8009fc2:	d145      	bne.n	800a050 <_malloc_r+0xdc>
 8009fc4:	2c00      	cmp	r4, #0
 8009fc6:	d048      	beq.n	800a05a <_malloc_r+0xe6>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4638      	mov	r0, r7
 8009fce:	eb04 0903 	add.w	r9, r4, r3
 8009fd2:	f000 fe95 	bl	800ad00 <_sbrk_r>
 8009fd6:	4581      	cmp	r9, r0
 8009fd8:	d13f      	bne.n	800a05a <_malloc_r+0xe6>
 8009fda:	6821      	ldr	r1, [r4, #0]
 8009fdc:	1a6d      	subs	r5, r5, r1
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ffa7 	bl	8009f34 <sbrk_aligned>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	d037      	beq.n	800a05a <_malloc_r+0xe6>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	442b      	add	r3, r5
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d038      	beq.n	800a06a <_malloc_r+0xf6>
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	42a2      	cmp	r2, r4
 8009ffc:	d12b      	bne.n	800a056 <_malloc_r+0xe2>
 8009ffe:	2200      	movs	r2, #0
 800a000:	605a      	str	r2, [r3, #4]
 800a002:	e00f      	b.n	800a024 <_malloc_r+0xb0>
 800a004:	6822      	ldr	r2, [r4, #0]
 800a006:	1b52      	subs	r2, r2, r5
 800a008:	d41f      	bmi.n	800a04a <_malloc_r+0xd6>
 800a00a:	2a0b      	cmp	r2, #11
 800a00c:	d917      	bls.n	800a03e <_malloc_r+0xca>
 800a00e:	1961      	adds	r1, r4, r5
 800a010:	42a3      	cmp	r3, r4
 800a012:	6025      	str	r5, [r4, #0]
 800a014:	bf18      	it	ne
 800a016:	6059      	strne	r1, [r3, #4]
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	bf08      	it	eq
 800a01c:	f8c8 1000 	streq.w	r1, [r8]
 800a020:	5162      	str	r2, [r4, r5]
 800a022:	604b      	str	r3, [r1, #4]
 800a024:	4638      	mov	r0, r7
 800a026:	f104 060b 	add.w	r6, r4, #11
 800a02a:	f000 f8e9 	bl	800a200 <__malloc_unlock>
 800a02e:	f026 0607 	bic.w	r6, r6, #7
 800a032:	1d23      	adds	r3, r4, #4
 800a034:	1af2      	subs	r2, r6, r3
 800a036:	d0ae      	beq.n	8009f96 <_malloc_r+0x22>
 800a038:	1b9b      	subs	r3, r3, r6
 800a03a:	50a3      	str	r3, [r4, r2]
 800a03c:	e7ab      	b.n	8009f96 <_malloc_r+0x22>
 800a03e:	42a3      	cmp	r3, r4
 800a040:	6862      	ldr	r2, [r4, #4]
 800a042:	d1dd      	bne.n	800a000 <_malloc_r+0x8c>
 800a044:	f8c8 2000 	str.w	r2, [r8]
 800a048:	e7ec      	b.n	800a024 <_malloc_r+0xb0>
 800a04a:	4623      	mov	r3, r4
 800a04c:	6864      	ldr	r4, [r4, #4]
 800a04e:	e7ac      	b.n	8009faa <_malloc_r+0x36>
 800a050:	4634      	mov	r4, r6
 800a052:	6876      	ldr	r6, [r6, #4]
 800a054:	e7b4      	b.n	8009fc0 <_malloc_r+0x4c>
 800a056:	4613      	mov	r3, r2
 800a058:	e7cc      	b.n	8009ff4 <_malloc_r+0x80>
 800a05a:	230c      	movs	r3, #12
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	4638      	mov	r0, r7
 800a060:	f000 f8ce 	bl	800a200 <__malloc_unlock>
 800a064:	e797      	b.n	8009f96 <_malloc_r+0x22>
 800a066:	6025      	str	r5, [r4, #0]
 800a068:	e7dc      	b.n	800a024 <_malloc_r+0xb0>
 800a06a:	605b      	str	r3, [r3, #4]
 800a06c:	deff      	udf	#255	; 0xff
 800a06e:	bf00      	nop
 800a070:	2000aa14 	.word	0x2000aa14

0800a074 <__ascii_mbtowc>:
 800a074:	b082      	sub	sp, #8
 800a076:	b901      	cbnz	r1, 800a07a <__ascii_mbtowc+0x6>
 800a078:	a901      	add	r1, sp, #4
 800a07a:	b142      	cbz	r2, 800a08e <__ascii_mbtowc+0x1a>
 800a07c:	b14b      	cbz	r3, 800a092 <__ascii_mbtowc+0x1e>
 800a07e:	7813      	ldrb	r3, [r2, #0]
 800a080:	600b      	str	r3, [r1, #0]
 800a082:	7812      	ldrb	r2, [r2, #0]
 800a084:	1e10      	subs	r0, r2, #0
 800a086:	bf18      	it	ne
 800a088:	2001      	movne	r0, #1
 800a08a:	b002      	add	sp, #8
 800a08c:	4770      	bx	lr
 800a08e:	4610      	mov	r0, r2
 800a090:	e7fb      	b.n	800a08a <__ascii_mbtowc+0x16>
 800a092:	f06f 0001 	mvn.w	r0, #1
 800a096:	e7f8      	b.n	800a08a <__ascii_mbtowc+0x16>

0800a098 <__sflush_r>:
 800a098:	898a      	ldrh	r2, [r1, #12]
 800a09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a09e:	4605      	mov	r5, r0
 800a0a0:	0710      	lsls	r0, r2, #28
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	d458      	bmi.n	800a158 <__sflush_r+0xc0>
 800a0a6:	684b      	ldr	r3, [r1, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dc05      	bgt.n	800a0b8 <__sflush_r+0x20>
 800a0ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	dc02      	bgt.n	800a0b8 <__sflush_r+0x20>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	d0f9      	beq.n	800a0b2 <__sflush_r+0x1a>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0c4:	682f      	ldr	r7, [r5, #0]
 800a0c6:	6a21      	ldr	r1, [r4, #32]
 800a0c8:	602b      	str	r3, [r5, #0]
 800a0ca:	d032      	beq.n	800a132 <__sflush_r+0x9a>
 800a0cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0ce:	89a3      	ldrh	r3, [r4, #12]
 800a0d0:	075a      	lsls	r2, r3, #29
 800a0d2:	d505      	bpl.n	800a0e0 <__sflush_r+0x48>
 800a0d4:	6863      	ldr	r3, [r4, #4]
 800a0d6:	1ac0      	subs	r0, r0, r3
 800a0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0da:	b10b      	cbz	r3, 800a0e0 <__sflush_r+0x48>
 800a0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0de:	1ac0      	subs	r0, r0, r3
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0e6:	6a21      	ldr	r1, [r4, #32]
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	47b0      	blx	r6
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	d106      	bne.n	800a100 <__sflush_r+0x68>
 800a0f2:	6829      	ldr	r1, [r5, #0]
 800a0f4:	291d      	cmp	r1, #29
 800a0f6:	d82b      	bhi.n	800a150 <__sflush_r+0xb8>
 800a0f8:	4a29      	ldr	r2, [pc, #164]	; (800a1a0 <__sflush_r+0x108>)
 800a0fa:	410a      	asrs	r2, r1
 800a0fc:	07d6      	lsls	r6, r2, #31
 800a0fe:	d427      	bmi.n	800a150 <__sflush_r+0xb8>
 800a100:	2200      	movs	r2, #0
 800a102:	6062      	str	r2, [r4, #4]
 800a104:	04d9      	lsls	r1, r3, #19
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	6022      	str	r2, [r4, #0]
 800a10a:	d504      	bpl.n	800a116 <__sflush_r+0x7e>
 800a10c:	1c42      	adds	r2, r0, #1
 800a10e:	d101      	bne.n	800a114 <__sflush_r+0x7c>
 800a110:	682b      	ldr	r3, [r5, #0]
 800a112:	b903      	cbnz	r3, 800a116 <__sflush_r+0x7e>
 800a114:	6560      	str	r0, [r4, #84]	; 0x54
 800a116:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a118:	602f      	str	r7, [r5, #0]
 800a11a:	2900      	cmp	r1, #0
 800a11c:	d0c9      	beq.n	800a0b2 <__sflush_r+0x1a>
 800a11e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a122:	4299      	cmp	r1, r3
 800a124:	d002      	beq.n	800a12c <__sflush_r+0x94>
 800a126:	4628      	mov	r0, r5
 800a128:	f000 fe40 	bl	800adac <_free_r>
 800a12c:	2000      	movs	r0, #0
 800a12e:	6360      	str	r0, [r4, #52]	; 0x34
 800a130:	e7c0      	b.n	800a0b4 <__sflush_r+0x1c>
 800a132:	2301      	movs	r3, #1
 800a134:	4628      	mov	r0, r5
 800a136:	47b0      	blx	r6
 800a138:	1c41      	adds	r1, r0, #1
 800a13a:	d1c8      	bne.n	800a0ce <__sflush_r+0x36>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0c5      	beq.n	800a0ce <__sflush_r+0x36>
 800a142:	2b1d      	cmp	r3, #29
 800a144:	d001      	beq.n	800a14a <__sflush_r+0xb2>
 800a146:	2b16      	cmp	r3, #22
 800a148:	d101      	bne.n	800a14e <__sflush_r+0xb6>
 800a14a:	602f      	str	r7, [r5, #0]
 800a14c:	e7b1      	b.n	800a0b2 <__sflush_r+0x1a>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a154:	81a3      	strh	r3, [r4, #12]
 800a156:	e7ad      	b.n	800a0b4 <__sflush_r+0x1c>
 800a158:	690f      	ldr	r7, [r1, #16]
 800a15a:	2f00      	cmp	r7, #0
 800a15c:	d0a9      	beq.n	800a0b2 <__sflush_r+0x1a>
 800a15e:	0793      	lsls	r3, r2, #30
 800a160:	680e      	ldr	r6, [r1, #0]
 800a162:	bf08      	it	eq
 800a164:	694b      	ldreq	r3, [r1, #20]
 800a166:	600f      	str	r7, [r1, #0]
 800a168:	bf18      	it	ne
 800a16a:	2300      	movne	r3, #0
 800a16c:	eba6 0807 	sub.w	r8, r6, r7
 800a170:	608b      	str	r3, [r1, #8]
 800a172:	f1b8 0f00 	cmp.w	r8, #0
 800a176:	dd9c      	ble.n	800a0b2 <__sflush_r+0x1a>
 800a178:	6a21      	ldr	r1, [r4, #32]
 800a17a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a17c:	4643      	mov	r3, r8
 800a17e:	463a      	mov	r2, r7
 800a180:	4628      	mov	r0, r5
 800a182:	47b0      	blx	r6
 800a184:	2800      	cmp	r0, #0
 800a186:	dc06      	bgt.n	800a196 <__sflush_r+0xfe>
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a18e:	81a3      	strh	r3, [r4, #12]
 800a190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a194:	e78e      	b.n	800a0b4 <__sflush_r+0x1c>
 800a196:	4407      	add	r7, r0
 800a198:	eba8 0800 	sub.w	r8, r8, r0
 800a19c:	e7e9      	b.n	800a172 <__sflush_r+0xda>
 800a19e:	bf00      	nop
 800a1a0:	dfbffffe 	.word	0xdfbffffe

0800a1a4 <_fflush_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	690b      	ldr	r3, [r1, #16]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	b913      	cbnz	r3, 800a1b4 <_fflush_r+0x10>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	b118      	cbz	r0, 800a1be <_fflush_r+0x1a>
 800a1b6:	6a03      	ldr	r3, [r0, #32]
 800a1b8:	b90b      	cbnz	r3, 800a1be <_fflush_r+0x1a>
 800a1ba:	f7fd fc17 	bl	80079ec <__sinit>
 800a1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f3      	beq.n	800a1ae <_fflush_r+0xa>
 800a1c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1c8:	07d0      	lsls	r0, r2, #31
 800a1ca:	d404      	bmi.n	800a1d6 <_fflush_r+0x32>
 800a1cc:	0599      	lsls	r1, r3, #22
 800a1ce:	d402      	bmi.n	800a1d6 <_fflush_r+0x32>
 800a1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1d2:	f7fe fb5c 	bl	800888e <__retarget_lock_acquire_recursive>
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	4621      	mov	r1, r4
 800a1da:	f7ff ff5d 	bl	800a098 <__sflush_r>
 800a1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1e0:	07da      	lsls	r2, r3, #31
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	d4e4      	bmi.n	800a1b0 <_fflush_r+0xc>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	059b      	lsls	r3, r3, #22
 800a1ea:	d4e1      	bmi.n	800a1b0 <_fflush_r+0xc>
 800a1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ee:	f7fe fb4f 	bl	8008890 <__retarget_lock_release_recursive>
 800a1f2:	e7dd      	b.n	800a1b0 <_fflush_r+0xc>

0800a1f4 <__malloc_lock>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__malloc_lock+0x8>)
 800a1f6:	f7fe bb4a 	b.w	800888e <__retarget_lock_acquire_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	2000aa10 	.word	0x2000aa10

0800a200 <__malloc_unlock>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__malloc_unlock+0x8>)
 800a202:	f7fe bb45 	b.w	8008890 <__retarget_lock_release_recursive>
 800a206:	bf00      	nop
 800a208:	2000aa10 	.word	0x2000aa10

0800a20c <_Balloc>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	69c6      	ldr	r6, [r0, #28]
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	b976      	cbnz	r6, 800a234 <_Balloc+0x28>
 800a216:	2010      	movs	r0, #16
 800a218:	f7ff fe84 	bl	8009f24 <malloc>
 800a21c:	4602      	mov	r2, r0
 800a21e:	61e0      	str	r0, [r4, #28]
 800a220:	b920      	cbnz	r0, 800a22c <_Balloc+0x20>
 800a222:	4b18      	ldr	r3, [pc, #96]	; (800a284 <_Balloc+0x78>)
 800a224:	4818      	ldr	r0, [pc, #96]	; (800a288 <_Balloc+0x7c>)
 800a226:	216b      	movs	r1, #107	; 0x6b
 800a228:	f000 fd8c 	bl	800ad44 <__assert_func>
 800a22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a230:	6006      	str	r6, [r0, #0]
 800a232:	60c6      	str	r6, [r0, #12]
 800a234:	69e6      	ldr	r6, [r4, #28]
 800a236:	68f3      	ldr	r3, [r6, #12]
 800a238:	b183      	cbz	r3, 800a25c <_Balloc+0x50>
 800a23a:	69e3      	ldr	r3, [r4, #28]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a242:	b9b8      	cbnz	r0, 800a274 <_Balloc+0x68>
 800a244:	2101      	movs	r1, #1
 800a246:	fa01 f605 	lsl.w	r6, r1, r5
 800a24a:	1d72      	adds	r2, r6, #5
 800a24c:	0092      	lsls	r2, r2, #2
 800a24e:	4620      	mov	r0, r4
 800a250:	f000 fd96 	bl	800ad80 <_calloc_r>
 800a254:	b160      	cbz	r0, 800a270 <_Balloc+0x64>
 800a256:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a25a:	e00e      	b.n	800a27a <_Balloc+0x6e>
 800a25c:	2221      	movs	r2, #33	; 0x21
 800a25e:	2104      	movs	r1, #4
 800a260:	4620      	mov	r0, r4
 800a262:	f000 fd8d 	bl	800ad80 <_calloc_r>
 800a266:	69e3      	ldr	r3, [r4, #28]
 800a268:	60f0      	str	r0, [r6, #12]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e4      	bne.n	800a23a <_Balloc+0x2e>
 800a270:	2000      	movs	r0, #0
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	6802      	ldr	r2, [r0, #0]
 800a276:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a27a:	2300      	movs	r3, #0
 800a27c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a280:	e7f7      	b.n	800a272 <_Balloc+0x66>
 800a282:	bf00      	nop
 800a284:	0800cb36 	.word	0x0800cb36
 800a288:	0800cc27 	.word	0x0800cc27

0800a28c <_Bfree>:
 800a28c:	b570      	push	{r4, r5, r6, lr}
 800a28e:	69c6      	ldr	r6, [r0, #28]
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	b976      	cbnz	r6, 800a2b4 <_Bfree+0x28>
 800a296:	2010      	movs	r0, #16
 800a298:	f7ff fe44 	bl	8009f24 <malloc>
 800a29c:	4602      	mov	r2, r0
 800a29e:	61e8      	str	r0, [r5, #28]
 800a2a0:	b920      	cbnz	r0, 800a2ac <_Bfree+0x20>
 800a2a2:	4b09      	ldr	r3, [pc, #36]	; (800a2c8 <_Bfree+0x3c>)
 800a2a4:	4809      	ldr	r0, [pc, #36]	; (800a2cc <_Bfree+0x40>)
 800a2a6:	218f      	movs	r1, #143	; 0x8f
 800a2a8:	f000 fd4c 	bl	800ad44 <__assert_func>
 800a2ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2b0:	6006      	str	r6, [r0, #0]
 800a2b2:	60c6      	str	r6, [r0, #12]
 800a2b4:	b13c      	cbz	r4, 800a2c6 <_Bfree+0x3a>
 800a2b6:	69eb      	ldr	r3, [r5, #28]
 800a2b8:	6862      	ldr	r2, [r4, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2c0:	6021      	str	r1, [r4, #0]
 800a2c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2c6:	bd70      	pop	{r4, r5, r6, pc}
 800a2c8:	0800cb36 	.word	0x0800cb36
 800a2cc:	0800cc27 	.word	0x0800cc27

0800a2d0 <__multadd>:
 800a2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d4:	690d      	ldr	r5, [r1, #16]
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	460c      	mov	r4, r1
 800a2da:	461e      	mov	r6, r3
 800a2dc:	f101 0c14 	add.w	ip, r1, #20
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2e6:	b299      	uxth	r1, r3
 800a2e8:	fb02 6101 	mla	r1, r2, r1, r6
 800a2ec:	0c1e      	lsrs	r6, r3, #16
 800a2ee:	0c0b      	lsrs	r3, r1, #16
 800a2f0:	fb02 3306 	mla	r3, r2, r6, r3
 800a2f4:	b289      	uxth	r1, r1
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2fc:	4285      	cmp	r5, r0
 800a2fe:	f84c 1b04 	str.w	r1, [ip], #4
 800a302:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a306:	dcec      	bgt.n	800a2e2 <__multadd+0x12>
 800a308:	b30e      	cbz	r6, 800a34e <__multadd+0x7e>
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	42ab      	cmp	r3, r5
 800a30e:	dc19      	bgt.n	800a344 <__multadd+0x74>
 800a310:	6861      	ldr	r1, [r4, #4]
 800a312:	4638      	mov	r0, r7
 800a314:	3101      	adds	r1, #1
 800a316:	f7ff ff79 	bl	800a20c <_Balloc>
 800a31a:	4680      	mov	r8, r0
 800a31c:	b928      	cbnz	r0, 800a32a <__multadd+0x5a>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b0c      	ldr	r3, [pc, #48]	; (800a354 <__multadd+0x84>)
 800a322:	480d      	ldr	r0, [pc, #52]	; (800a358 <__multadd+0x88>)
 800a324:	21ba      	movs	r1, #186	; 0xba
 800a326:	f000 fd0d 	bl	800ad44 <__assert_func>
 800a32a:	6922      	ldr	r2, [r4, #16]
 800a32c:	3202      	adds	r2, #2
 800a32e:	f104 010c 	add.w	r1, r4, #12
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	300c      	adds	r0, #12
 800a336:	f7fe faac 	bl	8008892 <memcpy>
 800a33a:	4621      	mov	r1, r4
 800a33c:	4638      	mov	r0, r7
 800a33e:	f7ff ffa5 	bl	800a28c <_Bfree>
 800a342:	4644      	mov	r4, r8
 800a344:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a348:	3501      	adds	r5, #1
 800a34a:	615e      	str	r6, [r3, #20]
 800a34c:	6125      	str	r5, [r4, #16]
 800a34e:	4620      	mov	r0, r4
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	0800cba5 	.word	0x0800cba5
 800a358:	0800cc27 	.word	0x0800cc27

0800a35c <__s2b>:
 800a35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a360:	460c      	mov	r4, r1
 800a362:	4615      	mov	r5, r2
 800a364:	461f      	mov	r7, r3
 800a366:	2209      	movs	r2, #9
 800a368:	3308      	adds	r3, #8
 800a36a:	4606      	mov	r6, r0
 800a36c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a370:	2100      	movs	r1, #0
 800a372:	2201      	movs	r2, #1
 800a374:	429a      	cmp	r2, r3
 800a376:	db09      	blt.n	800a38c <__s2b+0x30>
 800a378:	4630      	mov	r0, r6
 800a37a:	f7ff ff47 	bl	800a20c <_Balloc>
 800a37e:	b940      	cbnz	r0, 800a392 <__s2b+0x36>
 800a380:	4602      	mov	r2, r0
 800a382:	4b19      	ldr	r3, [pc, #100]	; (800a3e8 <__s2b+0x8c>)
 800a384:	4819      	ldr	r0, [pc, #100]	; (800a3ec <__s2b+0x90>)
 800a386:	21d3      	movs	r1, #211	; 0xd3
 800a388:	f000 fcdc 	bl	800ad44 <__assert_func>
 800a38c:	0052      	lsls	r2, r2, #1
 800a38e:	3101      	adds	r1, #1
 800a390:	e7f0      	b.n	800a374 <__s2b+0x18>
 800a392:	9b08      	ldr	r3, [sp, #32]
 800a394:	6143      	str	r3, [r0, #20]
 800a396:	2d09      	cmp	r5, #9
 800a398:	f04f 0301 	mov.w	r3, #1
 800a39c:	6103      	str	r3, [r0, #16]
 800a39e:	dd16      	ble.n	800a3ce <__s2b+0x72>
 800a3a0:	f104 0909 	add.w	r9, r4, #9
 800a3a4:	46c8      	mov	r8, r9
 800a3a6:	442c      	add	r4, r5
 800a3a8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	3b30      	subs	r3, #48	; 0x30
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff8c 	bl	800a2d0 <__multadd>
 800a3b8:	45a0      	cmp	r8, r4
 800a3ba:	d1f5      	bne.n	800a3a8 <__s2b+0x4c>
 800a3bc:	f1a5 0408 	sub.w	r4, r5, #8
 800a3c0:	444c      	add	r4, r9
 800a3c2:	1b2d      	subs	r5, r5, r4
 800a3c4:	1963      	adds	r3, r4, r5
 800a3c6:	42bb      	cmp	r3, r7
 800a3c8:	db04      	blt.n	800a3d4 <__s2b+0x78>
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	340a      	adds	r4, #10
 800a3d0:	2509      	movs	r5, #9
 800a3d2:	e7f6      	b.n	800a3c2 <__s2b+0x66>
 800a3d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3d8:	4601      	mov	r1, r0
 800a3da:	3b30      	subs	r3, #48	; 0x30
 800a3dc:	220a      	movs	r2, #10
 800a3de:	4630      	mov	r0, r6
 800a3e0:	f7ff ff76 	bl	800a2d0 <__multadd>
 800a3e4:	e7ee      	b.n	800a3c4 <__s2b+0x68>
 800a3e6:	bf00      	nop
 800a3e8:	0800cba5 	.word	0x0800cba5
 800a3ec:	0800cc27 	.word	0x0800cc27

0800a3f0 <__hi0bits>:
 800a3f0:	0c03      	lsrs	r3, r0, #16
 800a3f2:	041b      	lsls	r3, r3, #16
 800a3f4:	b9d3      	cbnz	r3, 800a42c <__hi0bits+0x3c>
 800a3f6:	0400      	lsls	r0, r0, #16
 800a3f8:	2310      	movs	r3, #16
 800a3fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3fe:	bf04      	itt	eq
 800a400:	0200      	lsleq	r0, r0, #8
 800a402:	3308      	addeq	r3, #8
 800a404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a408:	bf04      	itt	eq
 800a40a:	0100      	lsleq	r0, r0, #4
 800a40c:	3304      	addeq	r3, #4
 800a40e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a412:	bf04      	itt	eq
 800a414:	0080      	lsleq	r0, r0, #2
 800a416:	3302      	addeq	r3, #2
 800a418:	2800      	cmp	r0, #0
 800a41a:	db05      	blt.n	800a428 <__hi0bits+0x38>
 800a41c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a420:	f103 0301 	add.w	r3, r3, #1
 800a424:	bf08      	it	eq
 800a426:	2320      	moveq	r3, #32
 800a428:	4618      	mov	r0, r3
 800a42a:	4770      	bx	lr
 800a42c:	2300      	movs	r3, #0
 800a42e:	e7e4      	b.n	800a3fa <__hi0bits+0xa>

0800a430 <__lo0bits>:
 800a430:	6803      	ldr	r3, [r0, #0]
 800a432:	f013 0207 	ands.w	r2, r3, #7
 800a436:	d00c      	beq.n	800a452 <__lo0bits+0x22>
 800a438:	07d9      	lsls	r1, r3, #31
 800a43a:	d422      	bmi.n	800a482 <__lo0bits+0x52>
 800a43c:	079a      	lsls	r2, r3, #30
 800a43e:	bf49      	itett	mi
 800a440:	085b      	lsrmi	r3, r3, #1
 800a442:	089b      	lsrpl	r3, r3, #2
 800a444:	6003      	strmi	r3, [r0, #0]
 800a446:	2201      	movmi	r2, #1
 800a448:	bf5c      	itt	pl
 800a44a:	6003      	strpl	r3, [r0, #0]
 800a44c:	2202      	movpl	r2, #2
 800a44e:	4610      	mov	r0, r2
 800a450:	4770      	bx	lr
 800a452:	b299      	uxth	r1, r3
 800a454:	b909      	cbnz	r1, 800a45a <__lo0bits+0x2a>
 800a456:	0c1b      	lsrs	r3, r3, #16
 800a458:	2210      	movs	r2, #16
 800a45a:	b2d9      	uxtb	r1, r3
 800a45c:	b909      	cbnz	r1, 800a462 <__lo0bits+0x32>
 800a45e:	3208      	adds	r2, #8
 800a460:	0a1b      	lsrs	r3, r3, #8
 800a462:	0719      	lsls	r1, r3, #28
 800a464:	bf04      	itt	eq
 800a466:	091b      	lsreq	r3, r3, #4
 800a468:	3204      	addeq	r2, #4
 800a46a:	0799      	lsls	r1, r3, #30
 800a46c:	bf04      	itt	eq
 800a46e:	089b      	lsreq	r3, r3, #2
 800a470:	3202      	addeq	r2, #2
 800a472:	07d9      	lsls	r1, r3, #31
 800a474:	d403      	bmi.n	800a47e <__lo0bits+0x4e>
 800a476:	085b      	lsrs	r3, r3, #1
 800a478:	f102 0201 	add.w	r2, r2, #1
 800a47c:	d003      	beq.n	800a486 <__lo0bits+0x56>
 800a47e:	6003      	str	r3, [r0, #0]
 800a480:	e7e5      	b.n	800a44e <__lo0bits+0x1e>
 800a482:	2200      	movs	r2, #0
 800a484:	e7e3      	b.n	800a44e <__lo0bits+0x1e>
 800a486:	2220      	movs	r2, #32
 800a488:	e7e1      	b.n	800a44e <__lo0bits+0x1e>
	...

0800a48c <__i2b>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	460c      	mov	r4, r1
 800a490:	2101      	movs	r1, #1
 800a492:	f7ff febb 	bl	800a20c <_Balloc>
 800a496:	4602      	mov	r2, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <__i2b+0x1a>
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <__i2b+0x24>)
 800a49c:	4805      	ldr	r0, [pc, #20]	; (800a4b4 <__i2b+0x28>)
 800a49e:	f240 1145 	movw	r1, #325	; 0x145
 800a4a2:	f000 fc4f 	bl	800ad44 <__assert_func>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	6144      	str	r4, [r0, #20]
 800a4aa:	6103      	str	r3, [r0, #16]
 800a4ac:	bd10      	pop	{r4, pc}
 800a4ae:	bf00      	nop
 800a4b0:	0800cba5 	.word	0x0800cba5
 800a4b4:	0800cc27 	.word	0x0800cc27

0800a4b8 <__multiply>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4691      	mov	r9, r2
 800a4be:	690a      	ldr	r2, [r1, #16]
 800a4c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	bfb8      	it	lt
 800a4c8:	460b      	movlt	r3, r1
 800a4ca:	460c      	mov	r4, r1
 800a4cc:	bfbc      	itt	lt
 800a4ce:	464c      	movlt	r4, r9
 800a4d0:	4699      	movlt	r9, r3
 800a4d2:	6927      	ldr	r7, [r4, #16]
 800a4d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4d8:	68a3      	ldr	r3, [r4, #8]
 800a4da:	6861      	ldr	r1, [r4, #4]
 800a4dc:	eb07 060a 	add.w	r6, r7, sl
 800a4e0:	42b3      	cmp	r3, r6
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	bfb8      	it	lt
 800a4e6:	3101      	addlt	r1, #1
 800a4e8:	f7ff fe90 	bl	800a20c <_Balloc>
 800a4ec:	b930      	cbnz	r0, 800a4fc <__multiply+0x44>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b44      	ldr	r3, [pc, #272]	; (800a604 <__multiply+0x14c>)
 800a4f2:	4845      	ldr	r0, [pc, #276]	; (800a608 <__multiply+0x150>)
 800a4f4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a4f8:	f000 fc24 	bl	800ad44 <__assert_func>
 800a4fc:	f100 0514 	add.w	r5, r0, #20
 800a500:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a504:	462b      	mov	r3, r5
 800a506:	2200      	movs	r2, #0
 800a508:	4543      	cmp	r3, r8
 800a50a:	d321      	bcc.n	800a550 <__multiply+0x98>
 800a50c:	f104 0314 	add.w	r3, r4, #20
 800a510:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a514:	f109 0314 	add.w	r3, r9, #20
 800a518:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a51c:	9202      	str	r2, [sp, #8]
 800a51e:	1b3a      	subs	r2, r7, r4
 800a520:	3a15      	subs	r2, #21
 800a522:	f022 0203 	bic.w	r2, r2, #3
 800a526:	3204      	adds	r2, #4
 800a528:	f104 0115 	add.w	r1, r4, #21
 800a52c:	428f      	cmp	r7, r1
 800a52e:	bf38      	it	cc
 800a530:	2204      	movcc	r2, #4
 800a532:	9201      	str	r2, [sp, #4]
 800a534:	9a02      	ldr	r2, [sp, #8]
 800a536:	9303      	str	r3, [sp, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d80c      	bhi.n	800a556 <__multiply+0x9e>
 800a53c:	2e00      	cmp	r6, #0
 800a53e:	dd03      	ble.n	800a548 <__multiply+0x90>
 800a540:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a544:	2b00      	cmp	r3, #0
 800a546:	d05b      	beq.n	800a600 <__multiply+0x148>
 800a548:	6106      	str	r6, [r0, #16]
 800a54a:	b005      	add	sp, #20
 800a54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a550:	f843 2b04 	str.w	r2, [r3], #4
 800a554:	e7d8      	b.n	800a508 <__multiply+0x50>
 800a556:	f8b3 a000 	ldrh.w	sl, [r3]
 800a55a:	f1ba 0f00 	cmp.w	sl, #0
 800a55e:	d024      	beq.n	800a5aa <__multiply+0xf2>
 800a560:	f104 0e14 	add.w	lr, r4, #20
 800a564:	46a9      	mov	r9, r5
 800a566:	f04f 0c00 	mov.w	ip, #0
 800a56a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a56e:	f8d9 1000 	ldr.w	r1, [r9]
 800a572:	fa1f fb82 	uxth.w	fp, r2
 800a576:	b289      	uxth	r1, r1
 800a578:	fb0a 110b 	mla	r1, sl, fp, r1
 800a57c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a580:	f8d9 2000 	ldr.w	r2, [r9]
 800a584:	4461      	add	r1, ip
 800a586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a58a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a58e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a592:	b289      	uxth	r1, r1
 800a594:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a598:	4577      	cmp	r7, lr
 800a59a:	f849 1b04 	str.w	r1, [r9], #4
 800a59e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5a2:	d8e2      	bhi.n	800a56a <__multiply+0xb2>
 800a5a4:	9a01      	ldr	r2, [sp, #4]
 800a5a6:	f845 c002 	str.w	ip, [r5, r2]
 800a5aa:	9a03      	ldr	r2, [sp, #12]
 800a5ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	f1b9 0f00 	cmp.w	r9, #0
 800a5b6:	d021      	beq.n	800a5fc <__multiply+0x144>
 800a5b8:	6829      	ldr	r1, [r5, #0]
 800a5ba:	f104 0c14 	add.w	ip, r4, #20
 800a5be:	46ae      	mov	lr, r5
 800a5c0:	f04f 0a00 	mov.w	sl, #0
 800a5c4:	f8bc b000 	ldrh.w	fp, [ip]
 800a5c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5cc:	fb09 220b 	mla	r2, r9, fp, r2
 800a5d0:	4452      	add	r2, sl
 800a5d2:	b289      	uxth	r1, r1
 800a5d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5d8:	f84e 1b04 	str.w	r1, [lr], #4
 800a5dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5e4:	f8be 1000 	ldrh.w	r1, [lr]
 800a5e8:	fb09 110a 	mla	r1, r9, sl, r1
 800a5ec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a5f0:	4567      	cmp	r7, ip
 800a5f2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5f6:	d8e5      	bhi.n	800a5c4 <__multiply+0x10c>
 800a5f8:	9a01      	ldr	r2, [sp, #4]
 800a5fa:	50a9      	str	r1, [r5, r2]
 800a5fc:	3504      	adds	r5, #4
 800a5fe:	e799      	b.n	800a534 <__multiply+0x7c>
 800a600:	3e01      	subs	r6, #1
 800a602:	e79b      	b.n	800a53c <__multiply+0x84>
 800a604:	0800cba5 	.word	0x0800cba5
 800a608:	0800cc27 	.word	0x0800cc27

0800a60c <__pow5mult>:
 800a60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a610:	4615      	mov	r5, r2
 800a612:	f012 0203 	ands.w	r2, r2, #3
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	d007      	beq.n	800a62c <__pow5mult+0x20>
 800a61c:	4c25      	ldr	r4, [pc, #148]	; (800a6b4 <__pow5mult+0xa8>)
 800a61e:	3a01      	subs	r2, #1
 800a620:	2300      	movs	r3, #0
 800a622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a626:	f7ff fe53 	bl	800a2d0 <__multadd>
 800a62a:	4607      	mov	r7, r0
 800a62c:	10ad      	asrs	r5, r5, #2
 800a62e:	d03d      	beq.n	800a6ac <__pow5mult+0xa0>
 800a630:	69f4      	ldr	r4, [r6, #28]
 800a632:	b97c      	cbnz	r4, 800a654 <__pow5mult+0x48>
 800a634:	2010      	movs	r0, #16
 800a636:	f7ff fc75 	bl	8009f24 <malloc>
 800a63a:	4602      	mov	r2, r0
 800a63c:	61f0      	str	r0, [r6, #28]
 800a63e:	b928      	cbnz	r0, 800a64c <__pow5mult+0x40>
 800a640:	4b1d      	ldr	r3, [pc, #116]	; (800a6b8 <__pow5mult+0xac>)
 800a642:	481e      	ldr	r0, [pc, #120]	; (800a6bc <__pow5mult+0xb0>)
 800a644:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a648:	f000 fb7c 	bl	800ad44 <__assert_func>
 800a64c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a650:	6004      	str	r4, [r0, #0]
 800a652:	60c4      	str	r4, [r0, #12]
 800a654:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a65c:	b94c      	cbnz	r4, 800a672 <__pow5mult+0x66>
 800a65e:	f240 2171 	movw	r1, #625	; 0x271
 800a662:	4630      	mov	r0, r6
 800a664:	f7ff ff12 	bl	800a48c <__i2b>
 800a668:	2300      	movs	r3, #0
 800a66a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a66e:	4604      	mov	r4, r0
 800a670:	6003      	str	r3, [r0, #0]
 800a672:	f04f 0900 	mov.w	r9, #0
 800a676:	07eb      	lsls	r3, r5, #31
 800a678:	d50a      	bpl.n	800a690 <__pow5mult+0x84>
 800a67a:	4639      	mov	r1, r7
 800a67c:	4622      	mov	r2, r4
 800a67e:	4630      	mov	r0, r6
 800a680:	f7ff ff1a 	bl	800a4b8 <__multiply>
 800a684:	4639      	mov	r1, r7
 800a686:	4680      	mov	r8, r0
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fdff 	bl	800a28c <_Bfree>
 800a68e:	4647      	mov	r7, r8
 800a690:	106d      	asrs	r5, r5, #1
 800a692:	d00b      	beq.n	800a6ac <__pow5mult+0xa0>
 800a694:	6820      	ldr	r0, [r4, #0]
 800a696:	b938      	cbnz	r0, 800a6a8 <__pow5mult+0x9c>
 800a698:	4622      	mov	r2, r4
 800a69a:	4621      	mov	r1, r4
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7ff ff0b 	bl	800a4b8 <__multiply>
 800a6a2:	6020      	str	r0, [r4, #0]
 800a6a4:	f8c0 9000 	str.w	r9, [r0]
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	e7e4      	b.n	800a676 <__pow5mult+0x6a>
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6b2:	bf00      	nop
 800a6b4:	0800cd70 	.word	0x0800cd70
 800a6b8:	0800cb36 	.word	0x0800cb36
 800a6bc:	0800cc27 	.word	0x0800cc27

0800a6c0 <__lshift>:
 800a6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c4:	460c      	mov	r4, r1
 800a6c6:	6849      	ldr	r1, [r1, #4]
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6ce:	68a3      	ldr	r3, [r4, #8]
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	4691      	mov	r9, r2
 800a6d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6d8:	f108 0601 	add.w	r6, r8, #1
 800a6dc:	42b3      	cmp	r3, r6
 800a6de:	db0b      	blt.n	800a6f8 <__lshift+0x38>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	f7ff fd93 	bl	800a20c <_Balloc>
 800a6e6:	4605      	mov	r5, r0
 800a6e8:	b948      	cbnz	r0, 800a6fe <__lshift+0x3e>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	4b28      	ldr	r3, [pc, #160]	; (800a790 <__lshift+0xd0>)
 800a6ee:	4829      	ldr	r0, [pc, #164]	; (800a794 <__lshift+0xd4>)
 800a6f0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a6f4:	f000 fb26 	bl	800ad44 <__assert_func>
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	005b      	lsls	r3, r3, #1
 800a6fc:	e7ee      	b.n	800a6dc <__lshift+0x1c>
 800a6fe:	2300      	movs	r3, #0
 800a700:	f100 0114 	add.w	r1, r0, #20
 800a704:	f100 0210 	add.w	r2, r0, #16
 800a708:	4618      	mov	r0, r3
 800a70a:	4553      	cmp	r3, sl
 800a70c:	db33      	blt.n	800a776 <__lshift+0xb6>
 800a70e:	6920      	ldr	r0, [r4, #16]
 800a710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a714:	f104 0314 	add.w	r3, r4, #20
 800a718:	f019 091f 	ands.w	r9, r9, #31
 800a71c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a720:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a724:	d02b      	beq.n	800a77e <__lshift+0xbe>
 800a726:	f1c9 0e20 	rsb	lr, r9, #32
 800a72a:	468a      	mov	sl, r1
 800a72c:	2200      	movs	r2, #0
 800a72e:	6818      	ldr	r0, [r3, #0]
 800a730:	fa00 f009 	lsl.w	r0, r0, r9
 800a734:	4310      	orrs	r0, r2
 800a736:	f84a 0b04 	str.w	r0, [sl], #4
 800a73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a73e:	459c      	cmp	ip, r3
 800a740:	fa22 f20e 	lsr.w	r2, r2, lr
 800a744:	d8f3      	bhi.n	800a72e <__lshift+0x6e>
 800a746:	ebac 0304 	sub.w	r3, ip, r4
 800a74a:	3b15      	subs	r3, #21
 800a74c:	f023 0303 	bic.w	r3, r3, #3
 800a750:	3304      	adds	r3, #4
 800a752:	f104 0015 	add.w	r0, r4, #21
 800a756:	4584      	cmp	ip, r0
 800a758:	bf38      	it	cc
 800a75a:	2304      	movcc	r3, #4
 800a75c:	50ca      	str	r2, [r1, r3]
 800a75e:	b10a      	cbz	r2, 800a764 <__lshift+0xa4>
 800a760:	f108 0602 	add.w	r6, r8, #2
 800a764:	3e01      	subs	r6, #1
 800a766:	4638      	mov	r0, r7
 800a768:	612e      	str	r6, [r5, #16]
 800a76a:	4621      	mov	r1, r4
 800a76c:	f7ff fd8e 	bl	800a28c <_Bfree>
 800a770:	4628      	mov	r0, r5
 800a772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a776:	f842 0f04 	str.w	r0, [r2, #4]!
 800a77a:	3301      	adds	r3, #1
 800a77c:	e7c5      	b.n	800a70a <__lshift+0x4a>
 800a77e:	3904      	subs	r1, #4
 800a780:	f853 2b04 	ldr.w	r2, [r3], #4
 800a784:	f841 2f04 	str.w	r2, [r1, #4]!
 800a788:	459c      	cmp	ip, r3
 800a78a:	d8f9      	bhi.n	800a780 <__lshift+0xc0>
 800a78c:	e7ea      	b.n	800a764 <__lshift+0xa4>
 800a78e:	bf00      	nop
 800a790:	0800cba5 	.word	0x0800cba5
 800a794:	0800cc27 	.word	0x0800cc27

0800a798 <__mcmp>:
 800a798:	b530      	push	{r4, r5, lr}
 800a79a:	6902      	ldr	r2, [r0, #16]
 800a79c:	690c      	ldr	r4, [r1, #16]
 800a79e:	1b12      	subs	r2, r2, r4
 800a7a0:	d10e      	bne.n	800a7c0 <__mcmp+0x28>
 800a7a2:	f100 0314 	add.w	r3, r0, #20
 800a7a6:	3114      	adds	r1, #20
 800a7a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7b8:	42a5      	cmp	r5, r4
 800a7ba:	d003      	beq.n	800a7c4 <__mcmp+0x2c>
 800a7bc:	d305      	bcc.n	800a7ca <__mcmp+0x32>
 800a7be:	2201      	movs	r2, #1
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	bd30      	pop	{r4, r5, pc}
 800a7c4:	4283      	cmp	r3, r0
 800a7c6:	d3f3      	bcc.n	800a7b0 <__mcmp+0x18>
 800a7c8:	e7fa      	b.n	800a7c0 <__mcmp+0x28>
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7ce:	e7f7      	b.n	800a7c0 <__mcmp+0x28>

0800a7d0 <__mdiff>:
 800a7d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	4606      	mov	r6, r0
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4620      	mov	r0, r4
 800a7dc:	4690      	mov	r8, r2
 800a7de:	f7ff ffdb 	bl	800a798 <__mcmp>
 800a7e2:	1e05      	subs	r5, r0, #0
 800a7e4:	d110      	bne.n	800a808 <__mdiff+0x38>
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	f7ff fd0f 	bl	800a20c <_Balloc>
 800a7ee:	b930      	cbnz	r0, 800a7fe <__mdiff+0x2e>
 800a7f0:	4b3a      	ldr	r3, [pc, #232]	; (800a8dc <__mdiff+0x10c>)
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	f240 2137 	movw	r1, #567	; 0x237
 800a7f8:	4839      	ldr	r0, [pc, #228]	; (800a8e0 <__mdiff+0x110>)
 800a7fa:	f000 faa3 	bl	800ad44 <__assert_func>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a808:	bfa4      	itt	ge
 800a80a:	4643      	movge	r3, r8
 800a80c:	46a0      	movge	r8, r4
 800a80e:	4630      	mov	r0, r6
 800a810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a814:	bfa6      	itte	ge
 800a816:	461c      	movge	r4, r3
 800a818:	2500      	movge	r5, #0
 800a81a:	2501      	movlt	r5, #1
 800a81c:	f7ff fcf6 	bl	800a20c <_Balloc>
 800a820:	b920      	cbnz	r0, 800a82c <__mdiff+0x5c>
 800a822:	4b2e      	ldr	r3, [pc, #184]	; (800a8dc <__mdiff+0x10c>)
 800a824:	4602      	mov	r2, r0
 800a826:	f240 2145 	movw	r1, #581	; 0x245
 800a82a:	e7e5      	b.n	800a7f8 <__mdiff+0x28>
 800a82c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a830:	6926      	ldr	r6, [r4, #16]
 800a832:	60c5      	str	r5, [r0, #12]
 800a834:	f104 0914 	add.w	r9, r4, #20
 800a838:	f108 0514 	add.w	r5, r8, #20
 800a83c:	f100 0e14 	add.w	lr, r0, #20
 800a840:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a848:	f108 0210 	add.w	r2, r8, #16
 800a84c:	46f2      	mov	sl, lr
 800a84e:	2100      	movs	r1, #0
 800a850:	f859 3b04 	ldr.w	r3, [r9], #4
 800a854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a858:	fa11 f88b 	uxtah	r8, r1, fp
 800a85c:	b299      	uxth	r1, r3
 800a85e:	0c1b      	lsrs	r3, r3, #16
 800a860:	eba8 0801 	sub.w	r8, r8, r1
 800a864:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a868:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a86c:	fa1f f888 	uxth.w	r8, r8
 800a870:	1419      	asrs	r1, r3, #16
 800a872:	454e      	cmp	r6, r9
 800a874:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a878:	f84a 3b04 	str.w	r3, [sl], #4
 800a87c:	d8e8      	bhi.n	800a850 <__mdiff+0x80>
 800a87e:	1b33      	subs	r3, r6, r4
 800a880:	3b15      	subs	r3, #21
 800a882:	f023 0303 	bic.w	r3, r3, #3
 800a886:	3304      	adds	r3, #4
 800a888:	3415      	adds	r4, #21
 800a88a:	42a6      	cmp	r6, r4
 800a88c:	bf38      	it	cc
 800a88e:	2304      	movcc	r3, #4
 800a890:	441d      	add	r5, r3
 800a892:	4473      	add	r3, lr
 800a894:	469e      	mov	lr, r3
 800a896:	462e      	mov	r6, r5
 800a898:	4566      	cmp	r6, ip
 800a89a:	d30e      	bcc.n	800a8ba <__mdiff+0xea>
 800a89c:	f10c 0203 	add.w	r2, ip, #3
 800a8a0:	1b52      	subs	r2, r2, r5
 800a8a2:	f022 0203 	bic.w	r2, r2, #3
 800a8a6:	3d03      	subs	r5, #3
 800a8a8:	45ac      	cmp	ip, r5
 800a8aa:	bf38      	it	cc
 800a8ac:	2200      	movcc	r2, #0
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8b4:	b17a      	cbz	r2, 800a8d6 <__mdiff+0x106>
 800a8b6:	6107      	str	r7, [r0, #16]
 800a8b8:	e7a4      	b.n	800a804 <__mdiff+0x34>
 800a8ba:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8be:	fa11 f288 	uxtah	r2, r1, r8
 800a8c2:	1414      	asrs	r4, r2, #16
 800a8c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8c8:	b292      	uxth	r2, r2
 800a8ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8ce:	f84e 2b04 	str.w	r2, [lr], #4
 800a8d2:	1421      	asrs	r1, r4, #16
 800a8d4:	e7e0      	b.n	800a898 <__mdiff+0xc8>
 800a8d6:	3f01      	subs	r7, #1
 800a8d8:	e7ea      	b.n	800a8b0 <__mdiff+0xe0>
 800a8da:	bf00      	nop
 800a8dc:	0800cba5 	.word	0x0800cba5
 800a8e0:	0800cc27 	.word	0x0800cc27

0800a8e4 <__ulp>:
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	ed8d 0b00 	vstr	d0, [sp]
 800a8ea:	9a01      	ldr	r2, [sp, #4]
 800a8ec:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <__ulp+0x48>)
 800a8ee:	4013      	ands	r3, r2
 800a8f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	dc08      	bgt.n	800a90a <__ulp+0x26>
 800a8f8:	425b      	negs	r3, r3
 800a8fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a8fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a902:	da04      	bge.n	800a90e <__ulp+0x2a>
 800a904:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a908:	4113      	asrs	r3, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	e008      	b.n	800a920 <__ulp+0x3c>
 800a90e:	f1a2 0314 	sub.w	r3, r2, #20
 800a912:	2b1e      	cmp	r3, #30
 800a914:	bfda      	itte	le
 800a916:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a91a:	40da      	lsrle	r2, r3
 800a91c:	2201      	movgt	r2, #1
 800a91e:	2300      	movs	r3, #0
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	ec41 0b10 	vmov	d0, r0, r1
 800a928:	b002      	add	sp, #8
 800a92a:	4770      	bx	lr
 800a92c:	7ff00000 	.word	0x7ff00000

0800a930 <__b2d>:
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	6906      	ldr	r6, [r0, #16]
 800a936:	f100 0814 	add.w	r8, r0, #20
 800a93a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a93e:	1f37      	subs	r7, r6, #4
 800a940:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a944:	4610      	mov	r0, r2
 800a946:	f7ff fd53 	bl	800a3f0 <__hi0bits>
 800a94a:	f1c0 0320 	rsb	r3, r0, #32
 800a94e:	280a      	cmp	r0, #10
 800a950:	600b      	str	r3, [r1, #0]
 800a952:	491b      	ldr	r1, [pc, #108]	; (800a9c0 <__b2d+0x90>)
 800a954:	dc15      	bgt.n	800a982 <__b2d+0x52>
 800a956:	f1c0 0c0b 	rsb	ip, r0, #11
 800a95a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a95e:	45b8      	cmp	r8, r7
 800a960:	ea43 0501 	orr.w	r5, r3, r1
 800a964:	bf34      	ite	cc
 800a966:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a96a:	2300      	movcs	r3, #0
 800a96c:	3015      	adds	r0, #21
 800a96e:	fa02 f000 	lsl.w	r0, r2, r0
 800a972:	fa23 f30c 	lsr.w	r3, r3, ip
 800a976:	4303      	orrs	r3, r0
 800a978:	461c      	mov	r4, r3
 800a97a:	ec45 4b10 	vmov	d0, r4, r5
 800a97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a982:	45b8      	cmp	r8, r7
 800a984:	bf3a      	itte	cc
 800a986:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a98a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a98e:	2300      	movcs	r3, #0
 800a990:	380b      	subs	r0, #11
 800a992:	d012      	beq.n	800a9ba <__b2d+0x8a>
 800a994:	f1c0 0120 	rsb	r1, r0, #32
 800a998:	fa23 f401 	lsr.w	r4, r3, r1
 800a99c:	4082      	lsls	r2, r0
 800a99e:	4322      	orrs	r2, r4
 800a9a0:	4547      	cmp	r7, r8
 800a9a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a9a6:	bf8c      	ite	hi
 800a9a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a9ac:	2200      	movls	r2, #0
 800a9ae:	4083      	lsls	r3, r0
 800a9b0:	40ca      	lsrs	r2, r1
 800a9b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	e7de      	b.n	800a978 <__b2d+0x48>
 800a9ba:	ea42 0501 	orr.w	r5, r2, r1
 800a9be:	e7db      	b.n	800a978 <__b2d+0x48>
 800a9c0:	3ff00000 	.word	0x3ff00000

0800a9c4 <__d2b>:
 800a9c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	ec59 8b10 	vmov	r8, r9, d0
 800a9d0:	4616      	mov	r6, r2
 800a9d2:	f7ff fc1b 	bl	800a20c <_Balloc>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	b930      	cbnz	r0, 800a9e8 <__d2b+0x24>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	4b24      	ldr	r3, [pc, #144]	; (800aa70 <__d2b+0xac>)
 800a9de:	4825      	ldr	r0, [pc, #148]	; (800aa74 <__d2b+0xb0>)
 800a9e0:	f240 310f 	movw	r1, #783	; 0x30f
 800a9e4:	f000 f9ae 	bl	800ad44 <__assert_func>
 800a9e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9f0:	bb2d      	cbnz	r5, 800aa3e <__d2b+0x7a>
 800a9f2:	9301      	str	r3, [sp, #4]
 800a9f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a9f8:	d026      	beq.n	800aa48 <__d2b+0x84>
 800a9fa:	4668      	mov	r0, sp
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	f7ff fd17 	bl	800a430 <__lo0bits>
 800aa02:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa06:	b1e8      	cbz	r0, 800aa44 <__d2b+0x80>
 800aa08:	f1c0 0320 	rsb	r3, r0, #32
 800aa0c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa10:	430b      	orrs	r3, r1
 800aa12:	40c2      	lsrs	r2, r0
 800aa14:	6163      	str	r3, [r4, #20]
 800aa16:	9201      	str	r2, [sp, #4]
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	61a3      	str	r3, [r4, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bf14      	ite	ne
 800aa20:	2202      	movne	r2, #2
 800aa22:	2201      	moveq	r2, #1
 800aa24:	6122      	str	r2, [r4, #16]
 800aa26:	b1bd      	cbz	r5, 800aa58 <__d2b+0x94>
 800aa28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa2c:	4405      	add	r5, r0
 800aa2e:	603d      	str	r5, [r7, #0]
 800aa30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa34:	6030      	str	r0, [r6, #0]
 800aa36:	4620      	mov	r0, r4
 800aa38:	b003      	add	sp, #12
 800aa3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa42:	e7d6      	b.n	800a9f2 <__d2b+0x2e>
 800aa44:	6161      	str	r1, [r4, #20]
 800aa46:	e7e7      	b.n	800aa18 <__d2b+0x54>
 800aa48:	a801      	add	r0, sp, #4
 800aa4a:	f7ff fcf1 	bl	800a430 <__lo0bits>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	6163      	str	r3, [r4, #20]
 800aa52:	3020      	adds	r0, #32
 800aa54:	2201      	movs	r2, #1
 800aa56:	e7e5      	b.n	800aa24 <__d2b+0x60>
 800aa58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa60:	6038      	str	r0, [r7, #0]
 800aa62:	6918      	ldr	r0, [r3, #16]
 800aa64:	f7ff fcc4 	bl	800a3f0 <__hi0bits>
 800aa68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa6c:	e7e2      	b.n	800aa34 <__d2b+0x70>
 800aa6e:	bf00      	nop
 800aa70:	0800cba5 	.word	0x0800cba5
 800aa74:	0800cc27 	.word	0x0800cc27

0800aa78 <__ratio>:
 800aa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4688      	mov	r8, r1
 800aa7e:	4669      	mov	r1, sp
 800aa80:	4681      	mov	r9, r0
 800aa82:	f7ff ff55 	bl	800a930 <__b2d>
 800aa86:	a901      	add	r1, sp, #4
 800aa88:	4640      	mov	r0, r8
 800aa8a:	ec55 4b10 	vmov	r4, r5, d0
 800aa8e:	f7ff ff4f 	bl	800a930 <__b2d>
 800aa92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa9a:	eba3 0c02 	sub.w	ip, r3, r2
 800aa9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aaa2:	1a9b      	subs	r3, r3, r2
 800aaa4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aaa8:	ec51 0b10 	vmov	r0, r1, d0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	bfd6      	itet	le
 800aab0:	460a      	movle	r2, r1
 800aab2:	462a      	movgt	r2, r5
 800aab4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aab8:	468b      	mov	fp, r1
 800aaba:	462f      	mov	r7, r5
 800aabc:	bfd4      	ite	le
 800aabe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aac2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aac6:	4620      	mov	r0, r4
 800aac8:	ee10 2a10 	vmov	r2, s0
 800aacc:	465b      	mov	r3, fp
 800aace:	4639      	mov	r1, r7
 800aad0:	f7f5 fee6 	bl	80008a0 <__aeabi_ddiv>
 800aad4:	ec41 0b10 	vmov	d0, r0, r1
 800aad8:	b003      	add	sp, #12
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aade <__copybits>:
 800aade:	3901      	subs	r1, #1
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	1149      	asrs	r1, r1, #5
 800aae4:	6914      	ldr	r4, [r2, #16]
 800aae6:	3101      	adds	r1, #1
 800aae8:	f102 0314 	add.w	r3, r2, #20
 800aaec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aaf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaf4:	1f05      	subs	r5, r0, #4
 800aaf6:	42a3      	cmp	r3, r4
 800aaf8:	d30c      	bcc.n	800ab14 <__copybits+0x36>
 800aafa:	1aa3      	subs	r3, r4, r2
 800aafc:	3b11      	subs	r3, #17
 800aafe:	f023 0303 	bic.w	r3, r3, #3
 800ab02:	3211      	adds	r2, #17
 800ab04:	42a2      	cmp	r2, r4
 800ab06:	bf88      	it	hi
 800ab08:	2300      	movhi	r3, #0
 800ab0a:	4418      	add	r0, r3
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4288      	cmp	r0, r1
 800ab10:	d305      	bcc.n	800ab1e <__copybits+0x40>
 800ab12:	bd70      	pop	{r4, r5, r6, pc}
 800ab14:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab18:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab1c:	e7eb      	b.n	800aaf6 <__copybits+0x18>
 800ab1e:	f840 3b04 	str.w	r3, [r0], #4
 800ab22:	e7f4      	b.n	800ab0e <__copybits+0x30>

0800ab24 <__any_on>:
 800ab24:	f100 0214 	add.w	r2, r0, #20
 800ab28:	6900      	ldr	r0, [r0, #16]
 800ab2a:	114b      	asrs	r3, r1, #5
 800ab2c:	4298      	cmp	r0, r3
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	db11      	blt.n	800ab56 <__any_on+0x32>
 800ab32:	dd0a      	ble.n	800ab4a <__any_on+0x26>
 800ab34:	f011 011f 	ands.w	r1, r1, #31
 800ab38:	d007      	beq.n	800ab4a <__any_on+0x26>
 800ab3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab3e:	fa24 f001 	lsr.w	r0, r4, r1
 800ab42:	fa00 f101 	lsl.w	r1, r0, r1
 800ab46:	428c      	cmp	r4, r1
 800ab48:	d10b      	bne.n	800ab62 <__any_on+0x3e>
 800ab4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d803      	bhi.n	800ab5a <__any_on+0x36>
 800ab52:	2000      	movs	r0, #0
 800ab54:	bd10      	pop	{r4, pc}
 800ab56:	4603      	mov	r3, r0
 800ab58:	e7f7      	b.n	800ab4a <__any_on+0x26>
 800ab5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab5e:	2900      	cmp	r1, #0
 800ab60:	d0f5      	beq.n	800ab4e <__any_on+0x2a>
 800ab62:	2001      	movs	r0, #1
 800ab64:	e7f6      	b.n	800ab54 <__any_on+0x30>

0800ab66 <__sread>:
 800ab66:	b510      	push	{r4, lr}
 800ab68:	460c      	mov	r4, r1
 800ab6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab6e:	f000 f8b5 	bl	800acdc <_read_r>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	bfab      	itete	ge
 800ab76:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab78:	89a3      	ldrhlt	r3, [r4, #12]
 800ab7a:	181b      	addge	r3, r3, r0
 800ab7c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab80:	bfac      	ite	ge
 800ab82:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab84:	81a3      	strhlt	r3, [r4, #12]
 800ab86:	bd10      	pop	{r4, pc}

0800ab88 <__swrite>:
 800ab88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab8c:	461f      	mov	r7, r3
 800ab8e:	898b      	ldrh	r3, [r1, #12]
 800ab90:	05db      	lsls	r3, r3, #23
 800ab92:	4605      	mov	r5, r0
 800ab94:	460c      	mov	r4, r1
 800ab96:	4616      	mov	r6, r2
 800ab98:	d505      	bpl.n	800aba6 <__swrite+0x1e>
 800ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9e:	2302      	movs	r3, #2
 800aba0:	2200      	movs	r2, #0
 800aba2:	f000 f889 	bl	800acb8 <_lseek_r>
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	4632      	mov	r2, r6
 800abb4:	463b      	mov	r3, r7
 800abb6:	4628      	mov	r0, r5
 800abb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	f000 b8b0 	b.w	800ad20 <_write_r>

0800abc0 <__sseek>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	460c      	mov	r4, r1
 800abc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abc8:	f000 f876 	bl	800acb8 <_lseek_r>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	bf15      	itete	ne
 800abd2:	6560      	strne	r0, [r4, #84]	; 0x54
 800abd4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abd8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abdc:	81a3      	strheq	r3, [r4, #12]
 800abde:	bf18      	it	ne
 800abe0:	81a3      	strhne	r3, [r4, #12]
 800abe2:	bd10      	pop	{r4, pc}

0800abe4 <__sclose>:
 800abe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abe8:	f000 b856 	b.w	800ac98 <_close_r>

0800abec <_realloc_r>:
 800abec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf0:	4680      	mov	r8, r0
 800abf2:	4614      	mov	r4, r2
 800abf4:	460e      	mov	r6, r1
 800abf6:	b921      	cbnz	r1, 800ac02 <_realloc_r+0x16>
 800abf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abfc:	4611      	mov	r1, r2
 800abfe:	f7ff b9b9 	b.w	8009f74 <_malloc_r>
 800ac02:	b92a      	cbnz	r2, 800ac10 <_realloc_r+0x24>
 800ac04:	f000 f8d2 	bl	800adac <_free_r>
 800ac08:	4625      	mov	r5, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac10:	f000 f918 	bl	800ae44 <_malloc_usable_size_r>
 800ac14:	4284      	cmp	r4, r0
 800ac16:	4607      	mov	r7, r0
 800ac18:	d802      	bhi.n	800ac20 <_realloc_r+0x34>
 800ac1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac1e:	d812      	bhi.n	800ac46 <_realloc_r+0x5a>
 800ac20:	4621      	mov	r1, r4
 800ac22:	4640      	mov	r0, r8
 800ac24:	f7ff f9a6 	bl	8009f74 <_malloc_r>
 800ac28:	4605      	mov	r5, r0
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0ed      	beq.n	800ac0a <_realloc_r+0x1e>
 800ac2e:	42bc      	cmp	r4, r7
 800ac30:	4622      	mov	r2, r4
 800ac32:	4631      	mov	r1, r6
 800ac34:	bf28      	it	cs
 800ac36:	463a      	movcs	r2, r7
 800ac38:	f7fd fe2b 	bl	8008892 <memcpy>
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4640      	mov	r0, r8
 800ac40:	f000 f8b4 	bl	800adac <_free_r>
 800ac44:	e7e1      	b.n	800ac0a <_realloc_r+0x1e>
 800ac46:	4635      	mov	r5, r6
 800ac48:	e7df      	b.n	800ac0a <_realloc_r+0x1e>

0800ac4a <__ascii_wctomb>:
 800ac4a:	b149      	cbz	r1, 800ac60 <__ascii_wctomb+0x16>
 800ac4c:	2aff      	cmp	r2, #255	; 0xff
 800ac4e:	bf85      	ittet	hi
 800ac50:	238a      	movhi	r3, #138	; 0x8a
 800ac52:	6003      	strhi	r3, [r0, #0]
 800ac54:	700a      	strbls	r2, [r1, #0]
 800ac56:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ac5a:	bf98      	it	ls
 800ac5c:	2001      	movls	r0, #1
 800ac5e:	4770      	bx	lr
 800ac60:	4608      	mov	r0, r1
 800ac62:	4770      	bx	lr

0800ac64 <memmove>:
 800ac64:	4288      	cmp	r0, r1
 800ac66:	b510      	push	{r4, lr}
 800ac68:	eb01 0402 	add.w	r4, r1, r2
 800ac6c:	d902      	bls.n	800ac74 <memmove+0x10>
 800ac6e:	4284      	cmp	r4, r0
 800ac70:	4623      	mov	r3, r4
 800ac72:	d807      	bhi.n	800ac84 <memmove+0x20>
 800ac74:	1e43      	subs	r3, r0, #1
 800ac76:	42a1      	cmp	r1, r4
 800ac78:	d008      	beq.n	800ac8c <memmove+0x28>
 800ac7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac82:	e7f8      	b.n	800ac76 <memmove+0x12>
 800ac84:	4402      	add	r2, r0
 800ac86:	4601      	mov	r1, r0
 800ac88:	428a      	cmp	r2, r1
 800ac8a:	d100      	bne.n	800ac8e <memmove+0x2a>
 800ac8c:	bd10      	pop	{r4, pc}
 800ac8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac96:	e7f7      	b.n	800ac88 <memmove+0x24>

0800ac98 <_close_r>:
 800ac98:	b538      	push	{r3, r4, r5, lr}
 800ac9a:	4d06      	ldr	r5, [pc, #24]	; (800acb4 <_close_r+0x1c>)
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4604      	mov	r4, r0
 800aca0:	4608      	mov	r0, r1
 800aca2:	602b      	str	r3, [r5, #0]
 800aca4:	f7f7 fe75 	bl	8002992 <_close>
 800aca8:	1c43      	adds	r3, r0, #1
 800acaa:	d102      	bne.n	800acb2 <_close_r+0x1a>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	b103      	cbz	r3, 800acb2 <_close_r+0x1a>
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	bd38      	pop	{r3, r4, r5, pc}
 800acb4:	2000aa1c 	.word	0x2000aa1c

0800acb8 <_lseek_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	4d07      	ldr	r5, [pc, #28]	; (800acd8 <_lseek_r+0x20>)
 800acbc:	4604      	mov	r4, r0
 800acbe:	4608      	mov	r0, r1
 800acc0:	4611      	mov	r1, r2
 800acc2:	2200      	movs	r2, #0
 800acc4:	602a      	str	r2, [r5, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	f7f7 fe8a 	bl	80029e0 <_lseek>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_lseek_r+0x1e>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_lseek_r+0x1e>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	2000aa1c 	.word	0x2000aa1c

0800acdc <_read_r>:
 800acdc:	b538      	push	{r3, r4, r5, lr}
 800acde:	4d07      	ldr	r5, [pc, #28]	; (800acfc <_read_r+0x20>)
 800ace0:	4604      	mov	r4, r0
 800ace2:	4608      	mov	r0, r1
 800ace4:	4611      	mov	r1, r2
 800ace6:	2200      	movs	r2, #0
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	f7f7 fe18 	bl	8002920 <_read>
 800acf0:	1c43      	adds	r3, r0, #1
 800acf2:	d102      	bne.n	800acfa <_read_r+0x1e>
 800acf4:	682b      	ldr	r3, [r5, #0]
 800acf6:	b103      	cbz	r3, 800acfa <_read_r+0x1e>
 800acf8:	6023      	str	r3, [r4, #0]
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	2000aa1c 	.word	0x2000aa1c

0800ad00 <_sbrk_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d06      	ldr	r5, [pc, #24]	; (800ad1c <_sbrk_r+0x1c>)
 800ad04:	2300      	movs	r3, #0
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7f7 fe76 	bl	80029fc <_sbrk>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_sbrk_r+0x1a>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_sbrk_r+0x1a>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	2000aa1c 	.word	0x2000aa1c

0800ad20 <_write_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_write_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f7 fe13 	bl	800295a <_write>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_write_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_write_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	2000aa1c 	.word	0x2000aa1c

0800ad44 <__assert_func>:
 800ad44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad46:	4614      	mov	r4, r2
 800ad48:	461a      	mov	r2, r3
 800ad4a:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <__assert_func+0x2c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4605      	mov	r5, r0
 800ad50:	68d8      	ldr	r0, [r3, #12]
 800ad52:	b14c      	cbz	r4, 800ad68 <__assert_func+0x24>
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <__assert_func+0x30>)
 800ad56:	9100      	str	r1, [sp, #0]
 800ad58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad5c:	4906      	ldr	r1, [pc, #24]	; (800ad78 <__assert_func+0x34>)
 800ad5e:	462b      	mov	r3, r5
 800ad60:	f000 f878 	bl	800ae54 <fiprintf>
 800ad64:	f000 f888 	bl	800ae78 <abort>
 800ad68:	4b04      	ldr	r3, [pc, #16]	; (800ad7c <__assert_func+0x38>)
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	e7f3      	b.n	800ad56 <__assert_func+0x12>
 800ad6e:	bf00      	nop
 800ad70:	20000208 	.word	0x20000208
 800ad74:	0800cd7c 	.word	0x0800cd7c
 800ad78:	0800cd89 	.word	0x0800cd89
 800ad7c:	0800cdb7 	.word	0x0800cdb7

0800ad80 <_calloc_r>:
 800ad80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad82:	fba1 2402 	umull	r2, r4, r1, r2
 800ad86:	b94c      	cbnz	r4, 800ad9c <_calloc_r+0x1c>
 800ad88:	4611      	mov	r1, r2
 800ad8a:	9201      	str	r2, [sp, #4]
 800ad8c:	f7ff f8f2 	bl	8009f74 <_malloc_r>
 800ad90:	9a01      	ldr	r2, [sp, #4]
 800ad92:	4605      	mov	r5, r0
 800ad94:	b930      	cbnz	r0, 800ada4 <_calloc_r+0x24>
 800ad96:	4628      	mov	r0, r5
 800ad98:	b003      	add	sp, #12
 800ad9a:	bd30      	pop	{r4, r5, pc}
 800ad9c:	220c      	movs	r2, #12
 800ad9e:	6002      	str	r2, [r0, #0]
 800ada0:	2500      	movs	r5, #0
 800ada2:	e7f8      	b.n	800ad96 <_calloc_r+0x16>
 800ada4:	4621      	mov	r1, r4
 800ada6:	f7fd fd3b 	bl	8008820 <memset>
 800adaa:	e7f4      	b.n	800ad96 <_calloc_r+0x16>

0800adac <_free_r>:
 800adac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adae:	2900      	cmp	r1, #0
 800adb0:	d044      	beq.n	800ae3c <_free_r+0x90>
 800adb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb6:	9001      	str	r0, [sp, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f1a1 0404 	sub.w	r4, r1, #4
 800adbe:	bfb8      	it	lt
 800adc0:	18e4      	addlt	r4, r4, r3
 800adc2:	f7ff fa17 	bl	800a1f4 <__malloc_lock>
 800adc6:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <_free_r+0x94>)
 800adc8:	9801      	ldr	r0, [sp, #4]
 800adca:	6813      	ldr	r3, [r2, #0]
 800adcc:	b933      	cbnz	r3, 800addc <_free_r+0x30>
 800adce:	6063      	str	r3, [r4, #4]
 800add0:	6014      	str	r4, [r2, #0]
 800add2:	b003      	add	sp, #12
 800add4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800add8:	f7ff ba12 	b.w	800a200 <__malloc_unlock>
 800addc:	42a3      	cmp	r3, r4
 800adde:	d908      	bls.n	800adf2 <_free_r+0x46>
 800ade0:	6825      	ldr	r5, [r4, #0]
 800ade2:	1961      	adds	r1, r4, r5
 800ade4:	428b      	cmp	r3, r1
 800ade6:	bf01      	itttt	eq
 800ade8:	6819      	ldreq	r1, [r3, #0]
 800adea:	685b      	ldreq	r3, [r3, #4]
 800adec:	1949      	addeq	r1, r1, r5
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	e7ed      	b.n	800adce <_free_r+0x22>
 800adf2:	461a      	mov	r2, r3
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b10b      	cbz	r3, 800adfc <_free_r+0x50>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d9fa      	bls.n	800adf2 <_free_r+0x46>
 800adfc:	6811      	ldr	r1, [r2, #0]
 800adfe:	1855      	adds	r5, r2, r1
 800ae00:	42a5      	cmp	r5, r4
 800ae02:	d10b      	bne.n	800ae1c <_free_r+0x70>
 800ae04:	6824      	ldr	r4, [r4, #0]
 800ae06:	4421      	add	r1, r4
 800ae08:	1854      	adds	r4, r2, r1
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	d1e0      	bne.n	800add2 <_free_r+0x26>
 800ae10:	681c      	ldr	r4, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	6053      	str	r3, [r2, #4]
 800ae16:	440c      	add	r4, r1
 800ae18:	6014      	str	r4, [r2, #0]
 800ae1a:	e7da      	b.n	800add2 <_free_r+0x26>
 800ae1c:	d902      	bls.n	800ae24 <_free_r+0x78>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	e7d6      	b.n	800add2 <_free_r+0x26>
 800ae24:	6825      	ldr	r5, [r4, #0]
 800ae26:	1961      	adds	r1, r4, r5
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf04      	itt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	bf04      	itt	eq
 800ae34:	1949      	addeq	r1, r1, r5
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	6054      	str	r4, [r2, #4]
 800ae3a:	e7ca      	b.n	800add2 <_free_r+0x26>
 800ae3c:	b003      	add	sp, #12
 800ae3e:	bd30      	pop	{r4, r5, pc}
 800ae40:	2000aa14 	.word	0x2000aa14

0800ae44 <_malloc_usable_size_r>:
 800ae44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae48:	1f18      	subs	r0, r3, #4
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	bfbc      	itt	lt
 800ae4e:	580b      	ldrlt	r3, [r1, r0]
 800ae50:	18c0      	addlt	r0, r0, r3
 800ae52:	4770      	bx	lr

0800ae54 <fiprintf>:
 800ae54:	b40e      	push	{r1, r2, r3}
 800ae56:	b503      	push	{r0, r1, lr}
 800ae58:	4601      	mov	r1, r0
 800ae5a:	ab03      	add	r3, sp, #12
 800ae5c:	4805      	ldr	r0, [pc, #20]	; (800ae74 <fiprintf+0x20>)
 800ae5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae62:	6800      	ldr	r0, [r0, #0]
 800ae64:	9301      	str	r3, [sp, #4]
 800ae66:	f000 f837 	bl	800aed8 <_vfiprintf_r>
 800ae6a:	b002      	add	sp, #8
 800ae6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae70:	b003      	add	sp, #12
 800ae72:	4770      	bx	lr
 800ae74:	20000208 	.word	0x20000208

0800ae78 <abort>:
 800ae78:	b508      	push	{r3, lr}
 800ae7a:	2006      	movs	r0, #6
 800ae7c:	f000 fa88 	bl	800b390 <raise>
 800ae80:	2001      	movs	r0, #1
 800ae82:	f7f7 fd43 	bl	800290c <_exit>

0800ae86 <__sfputc_r>:
 800ae86:	6893      	ldr	r3, [r2, #8]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	b410      	push	{r4}
 800ae8e:	6093      	str	r3, [r2, #8]
 800ae90:	da08      	bge.n	800aea4 <__sfputc_r+0x1e>
 800ae92:	6994      	ldr	r4, [r2, #24]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	db01      	blt.n	800ae9c <__sfputc_r+0x16>
 800ae98:	290a      	cmp	r1, #10
 800ae9a:	d103      	bne.n	800aea4 <__sfputc_r+0x1e>
 800ae9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea0:	f000 b934 	b.w	800b10c <__swbuf_r>
 800aea4:	6813      	ldr	r3, [r2, #0]
 800aea6:	1c58      	adds	r0, r3, #1
 800aea8:	6010      	str	r0, [r2, #0]
 800aeaa:	7019      	strb	r1, [r3, #0]
 800aeac:	4608      	mov	r0, r1
 800aeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <__sfputs_r>:
 800aeb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	460f      	mov	r7, r1
 800aeba:	4614      	mov	r4, r2
 800aebc:	18d5      	adds	r5, r2, r3
 800aebe:	42ac      	cmp	r4, r5
 800aec0:	d101      	bne.n	800aec6 <__sfputs_r+0x12>
 800aec2:	2000      	movs	r0, #0
 800aec4:	e007      	b.n	800aed6 <__sfputs_r+0x22>
 800aec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeca:	463a      	mov	r2, r7
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff ffda 	bl	800ae86 <__sfputc_r>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d1f3      	bne.n	800aebe <__sfputs_r+0xa>
 800aed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aed8 <_vfiprintf_r>:
 800aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aedc:	460d      	mov	r5, r1
 800aede:	b09d      	sub	sp, #116	; 0x74
 800aee0:	4614      	mov	r4, r2
 800aee2:	4698      	mov	r8, r3
 800aee4:	4606      	mov	r6, r0
 800aee6:	b118      	cbz	r0, 800aef0 <_vfiprintf_r+0x18>
 800aee8:	6a03      	ldr	r3, [r0, #32]
 800aeea:	b90b      	cbnz	r3, 800aef0 <_vfiprintf_r+0x18>
 800aeec:	f7fc fd7e 	bl	80079ec <__sinit>
 800aef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aef2:	07d9      	lsls	r1, r3, #31
 800aef4:	d405      	bmi.n	800af02 <_vfiprintf_r+0x2a>
 800aef6:	89ab      	ldrh	r3, [r5, #12]
 800aef8:	059a      	lsls	r2, r3, #22
 800aefa:	d402      	bmi.n	800af02 <_vfiprintf_r+0x2a>
 800aefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefe:	f7fd fcc6 	bl	800888e <__retarget_lock_acquire_recursive>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	071b      	lsls	r3, r3, #28
 800af06:	d501      	bpl.n	800af0c <_vfiprintf_r+0x34>
 800af08:	692b      	ldr	r3, [r5, #16]
 800af0a:	b99b      	cbnz	r3, 800af34 <_vfiprintf_r+0x5c>
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 f93a 	bl	800b188 <__swsetup_r>
 800af14:	b170      	cbz	r0, 800af34 <_vfiprintf_r+0x5c>
 800af16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af18:	07dc      	lsls	r4, r3, #31
 800af1a:	d504      	bpl.n	800af26 <_vfiprintf_r+0x4e>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af20:	b01d      	add	sp, #116	; 0x74
 800af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af26:	89ab      	ldrh	r3, [r5, #12]
 800af28:	0598      	lsls	r0, r3, #22
 800af2a:	d4f7      	bmi.n	800af1c <_vfiprintf_r+0x44>
 800af2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af2e:	f7fd fcaf 	bl	8008890 <__retarget_lock_release_recursive>
 800af32:	e7f3      	b.n	800af1c <_vfiprintf_r+0x44>
 800af34:	2300      	movs	r3, #0
 800af36:	9309      	str	r3, [sp, #36]	; 0x24
 800af38:	2320      	movs	r3, #32
 800af3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800af42:	2330      	movs	r3, #48	; 0x30
 800af44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b0f8 <_vfiprintf_r+0x220>
 800af48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af4c:	f04f 0901 	mov.w	r9, #1
 800af50:	4623      	mov	r3, r4
 800af52:	469a      	mov	sl, r3
 800af54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af58:	b10a      	cbz	r2, 800af5e <_vfiprintf_r+0x86>
 800af5a:	2a25      	cmp	r2, #37	; 0x25
 800af5c:	d1f9      	bne.n	800af52 <_vfiprintf_r+0x7a>
 800af5e:	ebba 0b04 	subs.w	fp, sl, r4
 800af62:	d00b      	beq.n	800af7c <_vfiprintf_r+0xa4>
 800af64:	465b      	mov	r3, fp
 800af66:	4622      	mov	r2, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ffa2 	bl	800aeb4 <__sfputs_r>
 800af70:	3001      	adds	r0, #1
 800af72:	f000 80a9 	beq.w	800b0c8 <_vfiprintf_r+0x1f0>
 800af76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af78:	445a      	add	r2, fp
 800af7a:	9209      	str	r2, [sp, #36]	; 0x24
 800af7c:	f89a 3000 	ldrb.w	r3, [sl]
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 80a1 	beq.w	800b0c8 <_vfiprintf_r+0x1f0>
 800af86:	2300      	movs	r3, #0
 800af88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af90:	f10a 0a01 	add.w	sl, sl, #1
 800af94:	9304      	str	r3, [sp, #16]
 800af96:	9307      	str	r3, [sp, #28]
 800af98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af9c:	931a      	str	r3, [sp, #104]	; 0x68
 800af9e:	4654      	mov	r4, sl
 800afa0:	2205      	movs	r2, #5
 800afa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa6:	4854      	ldr	r0, [pc, #336]	; (800b0f8 <_vfiprintf_r+0x220>)
 800afa8:	f7f5 f932 	bl	8000210 <memchr>
 800afac:	9a04      	ldr	r2, [sp, #16]
 800afae:	b9d8      	cbnz	r0, 800afe8 <_vfiprintf_r+0x110>
 800afb0:	06d1      	lsls	r1, r2, #27
 800afb2:	bf44      	itt	mi
 800afb4:	2320      	movmi	r3, #32
 800afb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afba:	0713      	lsls	r3, r2, #28
 800afbc:	bf44      	itt	mi
 800afbe:	232b      	movmi	r3, #43	; 0x2b
 800afc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc4:	f89a 3000 	ldrb.w	r3, [sl]
 800afc8:	2b2a      	cmp	r3, #42	; 0x2a
 800afca:	d015      	beq.n	800aff8 <_vfiprintf_r+0x120>
 800afcc:	9a07      	ldr	r2, [sp, #28]
 800afce:	4654      	mov	r4, sl
 800afd0:	2000      	movs	r0, #0
 800afd2:	f04f 0c0a 	mov.w	ip, #10
 800afd6:	4621      	mov	r1, r4
 800afd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afdc:	3b30      	subs	r3, #48	; 0x30
 800afde:	2b09      	cmp	r3, #9
 800afe0:	d94d      	bls.n	800b07e <_vfiprintf_r+0x1a6>
 800afe2:	b1b0      	cbz	r0, 800b012 <_vfiprintf_r+0x13a>
 800afe4:	9207      	str	r2, [sp, #28]
 800afe6:	e014      	b.n	800b012 <_vfiprintf_r+0x13a>
 800afe8:	eba0 0308 	sub.w	r3, r0, r8
 800afec:	fa09 f303 	lsl.w	r3, r9, r3
 800aff0:	4313      	orrs	r3, r2
 800aff2:	9304      	str	r3, [sp, #16]
 800aff4:	46a2      	mov	sl, r4
 800aff6:	e7d2      	b.n	800af9e <_vfiprintf_r+0xc6>
 800aff8:	9b03      	ldr	r3, [sp, #12]
 800affa:	1d19      	adds	r1, r3, #4
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	9103      	str	r1, [sp, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	bfbb      	ittet	lt
 800b004:	425b      	neglt	r3, r3
 800b006:	f042 0202 	orrlt.w	r2, r2, #2
 800b00a:	9307      	strge	r3, [sp, #28]
 800b00c:	9307      	strlt	r3, [sp, #28]
 800b00e:	bfb8      	it	lt
 800b010:	9204      	strlt	r2, [sp, #16]
 800b012:	7823      	ldrb	r3, [r4, #0]
 800b014:	2b2e      	cmp	r3, #46	; 0x2e
 800b016:	d10c      	bne.n	800b032 <_vfiprintf_r+0x15a>
 800b018:	7863      	ldrb	r3, [r4, #1]
 800b01a:	2b2a      	cmp	r3, #42	; 0x2a
 800b01c:	d134      	bne.n	800b088 <_vfiprintf_r+0x1b0>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	1d1a      	adds	r2, r3, #4
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	9203      	str	r2, [sp, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfb8      	it	lt
 800b02a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b02e:	3402      	adds	r4, #2
 800b030:	9305      	str	r3, [sp, #20]
 800b032:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b108 <_vfiprintf_r+0x230>
 800b036:	7821      	ldrb	r1, [r4, #0]
 800b038:	2203      	movs	r2, #3
 800b03a:	4650      	mov	r0, sl
 800b03c:	f7f5 f8e8 	bl	8000210 <memchr>
 800b040:	b138      	cbz	r0, 800b052 <_vfiprintf_r+0x17a>
 800b042:	9b04      	ldr	r3, [sp, #16]
 800b044:	eba0 000a 	sub.w	r0, r0, sl
 800b048:	2240      	movs	r2, #64	; 0x40
 800b04a:	4082      	lsls	r2, r0
 800b04c:	4313      	orrs	r3, r2
 800b04e:	3401      	adds	r4, #1
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	4829      	ldr	r0, [pc, #164]	; (800b0fc <_vfiprintf_r+0x224>)
 800b058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b05c:	2206      	movs	r2, #6
 800b05e:	f7f5 f8d7 	bl	8000210 <memchr>
 800b062:	2800      	cmp	r0, #0
 800b064:	d03f      	beq.n	800b0e6 <_vfiprintf_r+0x20e>
 800b066:	4b26      	ldr	r3, [pc, #152]	; (800b100 <_vfiprintf_r+0x228>)
 800b068:	bb1b      	cbnz	r3, 800b0b2 <_vfiprintf_r+0x1da>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	3307      	adds	r3, #7
 800b06e:	f023 0307 	bic.w	r3, r3, #7
 800b072:	3308      	adds	r3, #8
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	443b      	add	r3, r7
 800b07a:	9309      	str	r3, [sp, #36]	; 0x24
 800b07c:	e768      	b.n	800af50 <_vfiprintf_r+0x78>
 800b07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b082:	460c      	mov	r4, r1
 800b084:	2001      	movs	r0, #1
 800b086:	e7a6      	b.n	800afd6 <_vfiprintf_r+0xfe>
 800b088:	2300      	movs	r3, #0
 800b08a:	3401      	adds	r4, #1
 800b08c:	9305      	str	r3, [sp, #20]
 800b08e:	4619      	mov	r1, r3
 800b090:	f04f 0c0a 	mov.w	ip, #10
 800b094:	4620      	mov	r0, r4
 800b096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b09a:	3a30      	subs	r2, #48	; 0x30
 800b09c:	2a09      	cmp	r2, #9
 800b09e:	d903      	bls.n	800b0a8 <_vfiprintf_r+0x1d0>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0c6      	beq.n	800b032 <_vfiprintf_r+0x15a>
 800b0a4:	9105      	str	r1, [sp, #20]
 800b0a6:	e7c4      	b.n	800b032 <_vfiprintf_r+0x15a>
 800b0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7f0      	b.n	800b094 <_vfiprintf_r+0x1bc>
 800b0b2:	ab03      	add	r3, sp, #12
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	4b12      	ldr	r3, [pc, #72]	; (800b104 <_vfiprintf_r+0x22c>)
 800b0ba:	a904      	add	r1, sp, #16
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7fb fe13 	bl	8006ce8 <_printf_float>
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	1c78      	adds	r0, r7, #1
 800b0c6:	d1d6      	bne.n	800b076 <_vfiprintf_r+0x19e>
 800b0c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0ca:	07d9      	lsls	r1, r3, #31
 800b0cc:	d405      	bmi.n	800b0da <_vfiprintf_r+0x202>
 800b0ce:	89ab      	ldrh	r3, [r5, #12]
 800b0d0:	059a      	lsls	r2, r3, #22
 800b0d2:	d402      	bmi.n	800b0da <_vfiprintf_r+0x202>
 800b0d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0d6:	f7fd fbdb 	bl	8008890 <__retarget_lock_release_recursive>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	065b      	lsls	r3, r3, #25
 800b0de:	f53f af1d 	bmi.w	800af1c <_vfiprintf_r+0x44>
 800b0e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0e4:	e71c      	b.n	800af20 <_vfiprintf_r+0x48>
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	4b05      	ldr	r3, [pc, #20]	; (800b104 <_vfiprintf_r+0x22c>)
 800b0ee:	a904      	add	r1, sp, #16
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f7fc f89d 	bl	8007230 <_printf_i>
 800b0f6:	e7e4      	b.n	800b0c2 <_vfiprintf_r+0x1ea>
 800b0f8:	0800cc16 	.word	0x0800cc16
 800b0fc:	0800cc20 	.word	0x0800cc20
 800b100:	08006ce9 	.word	0x08006ce9
 800b104:	0800aeb5 	.word	0x0800aeb5
 800b108:	0800cc1c 	.word	0x0800cc1c

0800b10c <__swbuf_r>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	460e      	mov	r6, r1
 800b110:	4614      	mov	r4, r2
 800b112:	4605      	mov	r5, r0
 800b114:	b118      	cbz	r0, 800b11e <__swbuf_r+0x12>
 800b116:	6a03      	ldr	r3, [r0, #32]
 800b118:	b90b      	cbnz	r3, 800b11e <__swbuf_r+0x12>
 800b11a:	f7fc fc67 	bl	80079ec <__sinit>
 800b11e:	69a3      	ldr	r3, [r4, #24]
 800b120:	60a3      	str	r3, [r4, #8]
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	071a      	lsls	r2, r3, #28
 800b126:	d525      	bpl.n	800b174 <__swbuf_r+0x68>
 800b128:	6923      	ldr	r3, [r4, #16]
 800b12a:	b31b      	cbz	r3, 800b174 <__swbuf_r+0x68>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	6922      	ldr	r2, [r4, #16]
 800b130:	1a98      	subs	r0, r3, r2
 800b132:	6963      	ldr	r3, [r4, #20]
 800b134:	b2f6      	uxtb	r6, r6
 800b136:	4283      	cmp	r3, r0
 800b138:	4637      	mov	r7, r6
 800b13a:	dc04      	bgt.n	800b146 <__swbuf_r+0x3a>
 800b13c:	4621      	mov	r1, r4
 800b13e:	4628      	mov	r0, r5
 800b140:	f7ff f830 	bl	800a1a4 <_fflush_r>
 800b144:	b9e0      	cbnz	r0, 800b180 <__swbuf_r+0x74>
 800b146:	68a3      	ldr	r3, [r4, #8]
 800b148:	3b01      	subs	r3, #1
 800b14a:	60a3      	str	r3, [r4, #8]
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	6022      	str	r2, [r4, #0]
 800b152:	701e      	strb	r6, [r3, #0]
 800b154:	6962      	ldr	r2, [r4, #20]
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	429a      	cmp	r2, r3
 800b15a:	d004      	beq.n	800b166 <__swbuf_r+0x5a>
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	07db      	lsls	r3, r3, #31
 800b160:	d506      	bpl.n	800b170 <__swbuf_r+0x64>
 800b162:	2e0a      	cmp	r6, #10
 800b164:	d104      	bne.n	800b170 <__swbuf_r+0x64>
 800b166:	4621      	mov	r1, r4
 800b168:	4628      	mov	r0, r5
 800b16a:	f7ff f81b 	bl	800a1a4 <_fflush_r>
 800b16e:	b938      	cbnz	r0, 800b180 <__swbuf_r+0x74>
 800b170:	4638      	mov	r0, r7
 800b172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b174:	4621      	mov	r1, r4
 800b176:	4628      	mov	r0, r5
 800b178:	f000 f806 	bl	800b188 <__swsetup_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d0d5      	beq.n	800b12c <__swbuf_r+0x20>
 800b180:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b184:	e7f4      	b.n	800b170 <__swbuf_r+0x64>
	...

0800b188 <__swsetup_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	4b2a      	ldr	r3, [pc, #168]	; (800b234 <__swsetup_r+0xac>)
 800b18c:	4605      	mov	r5, r0
 800b18e:	6818      	ldr	r0, [r3, #0]
 800b190:	460c      	mov	r4, r1
 800b192:	b118      	cbz	r0, 800b19c <__swsetup_r+0x14>
 800b194:	6a03      	ldr	r3, [r0, #32]
 800b196:	b90b      	cbnz	r3, 800b19c <__swsetup_r+0x14>
 800b198:	f7fc fc28 	bl	80079ec <__sinit>
 800b19c:	89a3      	ldrh	r3, [r4, #12]
 800b19e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b1a2:	0718      	lsls	r0, r3, #28
 800b1a4:	d422      	bmi.n	800b1ec <__swsetup_r+0x64>
 800b1a6:	06d9      	lsls	r1, r3, #27
 800b1a8:	d407      	bmi.n	800b1ba <__swsetup_r+0x32>
 800b1aa:	2309      	movs	r3, #9
 800b1ac:	602b      	str	r3, [r5, #0]
 800b1ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1b8:	e034      	b.n	800b224 <__swsetup_r+0x9c>
 800b1ba:	0758      	lsls	r0, r3, #29
 800b1bc:	d512      	bpl.n	800b1e4 <__swsetup_r+0x5c>
 800b1be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1c0:	b141      	cbz	r1, 800b1d4 <__swsetup_r+0x4c>
 800b1c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1c6:	4299      	cmp	r1, r3
 800b1c8:	d002      	beq.n	800b1d0 <__swsetup_r+0x48>
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f7ff fdee 	bl	800adac <_free_r>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	6363      	str	r3, [r4, #52]	; 0x34
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1da:	81a3      	strh	r3, [r4, #12]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	6063      	str	r3, [r4, #4]
 800b1e0:	6923      	ldr	r3, [r4, #16]
 800b1e2:	6023      	str	r3, [r4, #0]
 800b1e4:	89a3      	ldrh	r3, [r4, #12]
 800b1e6:	f043 0308 	orr.w	r3, r3, #8
 800b1ea:	81a3      	strh	r3, [r4, #12]
 800b1ec:	6923      	ldr	r3, [r4, #16]
 800b1ee:	b94b      	cbnz	r3, 800b204 <__swsetup_r+0x7c>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1fa:	d003      	beq.n	800b204 <__swsetup_r+0x7c>
 800b1fc:	4621      	mov	r1, r4
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 f840 	bl	800b284 <__smakebuf_r>
 800b204:	89a0      	ldrh	r0, [r4, #12]
 800b206:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b20a:	f010 0301 	ands.w	r3, r0, #1
 800b20e:	d00a      	beq.n	800b226 <__swsetup_r+0x9e>
 800b210:	2300      	movs	r3, #0
 800b212:	60a3      	str	r3, [r4, #8]
 800b214:	6963      	ldr	r3, [r4, #20]
 800b216:	425b      	negs	r3, r3
 800b218:	61a3      	str	r3, [r4, #24]
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	b943      	cbnz	r3, 800b230 <__swsetup_r+0xa8>
 800b21e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b222:	d1c4      	bne.n	800b1ae <__swsetup_r+0x26>
 800b224:	bd38      	pop	{r3, r4, r5, pc}
 800b226:	0781      	lsls	r1, r0, #30
 800b228:	bf58      	it	pl
 800b22a:	6963      	ldrpl	r3, [r4, #20]
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	e7f4      	b.n	800b21a <__swsetup_r+0x92>
 800b230:	2000      	movs	r0, #0
 800b232:	e7f7      	b.n	800b224 <__swsetup_r+0x9c>
 800b234:	20000208 	.word	0x20000208

0800b238 <__swhatbuf_r>:
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	460c      	mov	r4, r1
 800b23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b240:	2900      	cmp	r1, #0
 800b242:	b096      	sub	sp, #88	; 0x58
 800b244:	4615      	mov	r5, r2
 800b246:	461e      	mov	r6, r3
 800b248:	da0d      	bge.n	800b266 <__swhatbuf_r+0x2e>
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b250:	f04f 0100 	mov.w	r1, #0
 800b254:	bf0c      	ite	eq
 800b256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b25a:	2340      	movne	r3, #64	; 0x40
 800b25c:	2000      	movs	r0, #0
 800b25e:	6031      	str	r1, [r6, #0]
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	b016      	add	sp, #88	; 0x58
 800b264:	bd70      	pop	{r4, r5, r6, pc}
 800b266:	466a      	mov	r2, sp
 800b268:	f000 f848 	bl	800b2fc <_fstat_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	dbec      	blt.n	800b24a <__swhatbuf_r+0x12>
 800b270:	9901      	ldr	r1, [sp, #4]
 800b272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b27a:	4259      	negs	r1, r3
 800b27c:	4159      	adcs	r1, r3
 800b27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b282:	e7eb      	b.n	800b25c <__swhatbuf_r+0x24>

0800b284 <__smakebuf_r>:
 800b284:	898b      	ldrh	r3, [r1, #12]
 800b286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b288:	079d      	lsls	r5, r3, #30
 800b28a:	4606      	mov	r6, r0
 800b28c:	460c      	mov	r4, r1
 800b28e:	d507      	bpl.n	800b2a0 <__smakebuf_r+0x1c>
 800b290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	2301      	movs	r3, #1
 800b29a:	6163      	str	r3, [r4, #20]
 800b29c:	b002      	add	sp, #8
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
 800b2a0:	ab01      	add	r3, sp, #4
 800b2a2:	466a      	mov	r2, sp
 800b2a4:	f7ff ffc8 	bl	800b238 <__swhatbuf_r>
 800b2a8:	9900      	ldr	r1, [sp, #0]
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7fe fe61 	bl	8009f74 <_malloc_r>
 800b2b2:	b948      	cbnz	r0, 800b2c8 <__smakebuf_r+0x44>
 800b2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b8:	059a      	lsls	r2, r3, #22
 800b2ba:	d4ef      	bmi.n	800b29c <__smakebuf_r+0x18>
 800b2bc:	f023 0303 	bic.w	r3, r3, #3
 800b2c0:	f043 0302 	orr.w	r3, r3, #2
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	e7e3      	b.n	800b290 <__smakebuf_r+0xc>
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	6020      	str	r0, [r4, #0]
 800b2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2d0:	81a3      	strh	r3, [r4, #12]
 800b2d2:	9b00      	ldr	r3, [sp, #0]
 800b2d4:	6163      	str	r3, [r4, #20]
 800b2d6:	9b01      	ldr	r3, [sp, #4]
 800b2d8:	6120      	str	r0, [r4, #16]
 800b2da:	b15b      	cbz	r3, 800b2f4 <__smakebuf_r+0x70>
 800b2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f000 f81d 	bl	800b320 <_isatty_r>
 800b2e6:	b128      	cbz	r0, 800b2f4 <__smakebuf_r+0x70>
 800b2e8:	89a3      	ldrh	r3, [r4, #12]
 800b2ea:	f023 0303 	bic.w	r3, r3, #3
 800b2ee:	f043 0301 	orr.w	r3, r3, #1
 800b2f2:	81a3      	strh	r3, [r4, #12]
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	431d      	orrs	r5, r3
 800b2f8:	81a5      	strh	r5, [r4, #12]
 800b2fa:	e7cf      	b.n	800b29c <__smakebuf_r+0x18>

0800b2fc <_fstat_r>:
 800b2fc:	b538      	push	{r3, r4, r5, lr}
 800b2fe:	4d07      	ldr	r5, [pc, #28]	; (800b31c <_fstat_r+0x20>)
 800b300:	2300      	movs	r3, #0
 800b302:	4604      	mov	r4, r0
 800b304:	4608      	mov	r0, r1
 800b306:	4611      	mov	r1, r2
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	f7f7 fb4e 	bl	80029aa <_fstat>
 800b30e:	1c43      	adds	r3, r0, #1
 800b310:	d102      	bne.n	800b318 <_fstat_r+0x1c>
 800b312:	682b      	ldr	r3, [r5, #0]
 800b314:	b103      	cbz	r3, 800b318 <_fstat_r+0x1c>
 800b316:	6023      	str	r3, [r4, #0]
 800b318:	bd38      	pop	{r3, r4, r5, pc}
 800b31a:	bf00      	nop
 800b31c:	2000aa1c 	.word	0x2000aa1c

0800b320 <_isatty_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d06      	ldr	r5, [pc, #24]	; (800b33c <_isatty_r+0x1c>)
 800b324:	2300      	movs	r3, #0
 800b326:	4604      	mov	r4, r0
 800b328:	4608      	mov	r0, r1
 800b32a:	602b      	str	r3, [r5, #0]
 800b32c:	f7f7 fb4d 	bl	80029ca <_isatty>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	d102      	bne.n	800b33a <_isatty_r+0x1a>
 800b334:	682b      	ldr	r3, [r5, #0]
 800b336:	b103      	cbz	r3, 800b33a <_isatty_r+0x1a>
 800b338:	6023      	str	r3, [r4, #0]
 800b33a:	bd38      	pop	{r3, r4, r5, pc}
 800b33c:	2000aa1c 	.word	0x2000aa1c

0800b340 <_raise_r>:
 800b340:	291f      	cmp	r1, #31
 800b342:	b538      	push	{r3, r4, r5, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	460d      	mov	r5, r1
 800b348:	d904      	bls.n	800b354 <_raise_r+0x14>
 800b34a:	2316      	movs	r3, #22
 800b34c:	6003      	str	r3, [r0, #0]
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b356:	b112      	cbz	r2, 800b35e <_raise_r+0x1e>
 800b358:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b35c:	b94b      	cbnz	r3, 800b372 <_raise_r+0x32>
 800b35e:	4620      	mov	r0, r4
 800b360:	f000 f830 	bl	800b3c4 <_getpid_r>
 800b364:	462a      	mov	r2, r5
 800b366:	4601      	mov	r1, r0
 800b368:	4620      	mov	r0, r4
 800b36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b36e:	f000 b817 	b.w	800b3a0 <_kill_r>
 800b372:	2b01      	cmp	r3, #1
 800b374:	d00a      	beq.n	800b38c <_raise_r+0x4c>
 800b376:	1c59      	adds	r1, r3, #1
 800b378:	d103      	bne.n	800b382 <_raise_r+0x42>
 800b37a:	2316      	movs	r3, #22
 800b37c:	6003      	str	r3, [r0, #0]
 800b37e:	2001      	movs	r0, #1
 800b380:	e7e7      	b.n	800b352 <_raise_r+0x12>
 800b382:	2400      	movs	r4, #0
 800b384:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b388:	4628      	mov	r0, r5
 800b38a:	4798      	blx	r3
 800b38c:	2000      	movs	r0, #0
 800b38e:	e7e0      	b.n	800b352 <_raise_r+0x12>

0800b390 <raise>:
 800b390:	4b02      	ldr	r3, [pc, #8]	; (800b39c <raise+0xc>)
 800b392:	4601      	mov	r1, r0
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	f7ff bfd3 	b.w	800b340 <_raise_r>
 800b39a:	bf00      	nop
 800b39c:	20000208 	.word	0x20000208

0800b3a0 <_kill_r>:
 800b3a0:	b538      	push	{r3, r4, r5, lr}
 800b3a2:	4d07      	ldr	r5, [pc, #28]	; (800b3c0 <_kill_r+0x20>)
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	4608      	mov	r0, r1
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	602b      	str	r3, [r5, #0]
 800b3ae:	f7f7 fa9d 	bl	80028ec <_kill>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	d102      	bne.n	800b3bc <_kill_r+0x1c>
 800b3b6:	682b      	ldr	r3, [r5, #0]
 800b3b8:	b103      	cbz	r3, 800b3bc <_kill_r+0x1c>
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	bd38      	pop	{r3, r4, r5, pc}
 800b3be:	bf00      	nop
 800b3c0:	2000aa1c 	.word	0x2000aa1c

0800b3c4 <_getpid_r>:
 800b3c4:	f7f7 ba8a 	b.w	80028dc <_getpid>

0800b3c8 <_init>:
 800b3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ca:	bf00      	nop
 800b3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ce:	bc08      	pop	{r3}
 800b3d0:	469e      	mov	lr, r3
 800b3d2:	4770      	bx	lr

0800b3d4 <_fini>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr
