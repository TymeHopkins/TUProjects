
Hopkins_Project3_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800564c  0800564c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800564c  0800564c  0001564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005654  08005654  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005668  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005708  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000718  2000014c  080057a8  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000864  080057a8  00020864  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 15 .debug_info   00014390  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002763  00000000  00000000  0003454f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000f98  00000000  00000000  00036cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c20  00000000  00000000  00037c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026f5b  00000000  00000000  00038870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000136ca  00000000  00000000  0005f7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000efb09  00000000  00000000  00072e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004314  00000000  00000000  001629a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  00166cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800561c 	.word	0x0800561c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	0800561c 	.word	0x0800561c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a58:	f000 b970 	b.w	8000d3c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9e08      	ldr	r6, [sp, #32]
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	460f      	mov	r7, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4694      	mov	ip, r2
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0xe2>
 8000a8a:	fab2 f382 	clz	r3, r2
 8000a8e:	b143      	cbz	r3, 8000aa2 <__udivmoddi4+0x2e>
 8000a90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a94:	f1c3 0220 	rsb	r2, r3, #32
 8000a98:	409f      	lsls	r7, r3
 8000a9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a9e:	4317      	orrs	r7, r2
 8000aa0:	409c      	lsls	r4, r3
 8000aa2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000aa6:	fa1f f58c 	uxth.w	r5, ip
 8000aaa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000aae:	0c22      	lsrs	r2, r4, #16
 8000ab0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ab4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ab8:	fb01 f005 	mul.w	r0, r1, r5
 8000abc:	4290      	cmp	r0, r2
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ac8:	f080 811c 	bcs.w	8000d04 <__udivmoddi4+0x290>
 8000acc:	4290      	cmp	r0, r2
 8000ace:	f240 8119 	bls.w	8000d04 <__udivmoddi4+0x290>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	4462      	add	r2, ip
 8000ad6:	1a12      	subs	r2, r2, r0
 8000ad8:	b2a4      	uxth	r4, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ae6:	fb00 f505 	mul.w	r5, r0, r5
 8000aea:	42a5      	cmp	r5, r4
 8000aec:	d90a      	bls.n	8000b04 <__udivmoddi4+0x90>
 8000aee:	eb1c 0404 	adds.w	r4, ip, r4
 8000af2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000af6:	f080 8107 	bcs.w	8000d08 <__udivmoddi4+0x294>
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	f240 8104 	bls.w	8000d08 <__udivmoddi4+0x294>
 8000b00:	4464      	add	r4, ip
 8000b02:	3802      	subs	r0, #2
 8000b04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b08:	1b64      	subs	r4, r4, r5
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11e      	cbz	r6, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40dc      	lsrs	r4, r3
 8000b10:	2300      	movs	r3, #0
 8000b12:	e9c6 4300 	strd	r4, r3, [r6]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0xbc>
 8000b1e:	2e00      	cmp	r6, #0
 8000b20:	f000 80ed 	beq.w	8000cfe <__udivmoddi4+0x28a>
 8000b24:	2100      	movs	r1, #0
 8000b26:	e9c6 0500 	strd	r0, r5, [r6]
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b30:	fab3 f183 	clz	r1, r3
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d149      	bne.n	8000bcc <__udivmoddi4+0x158>
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	d302      	bcc.n	8000b42 <__udivmoddi4+0xce>
 8000b3c:	4282      	cmp	r2, r0
 8000b3e:	f200 80f8 	bhi.w	8000d32 <__udivmoddi4+0x2be>
 8000b42:	1a84      	subs	r4, r0, r2
 8000b44:	eb65 0203 	sbc.w	r2, r5, r3
 8000b48:	2001      	movs	r0, #1
 8000b4a:	4617      	mov	r7, r2
 8000b4c:	2e00      	cmp	r6, #0
 8000b4e:	d0e2      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	e9c6 4700 	strd	r4, r7, [r6]
 8000b54:	e7df      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b56:	b902      	cbnz	r2, 8000b5a <__udivmoddi4+0xe6>
 8000b58:	deff      	udf	#255	; 0xff
 8000b5a:	fab2 f382 	clz	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f040 8090 	bne.w	8000c84 <__udivmoddi4+0x210>
 8000b64:	1a8a      	subs	r2, r1, r2
 8000b66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6a:	fa1f fe8c 	uxth.w	lr, ip
 8000b6e:	2101      	movs	r1, #1
 8000b70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b74:	fb07 2015 	mls	r0, r7, r5, r2
 8000b78:	0c22      	lsrs	r2, r4, #16
 8000b7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b7e:	fb0e f005 	mul.w	r0, lr, r5
 8000b82:	4290      	cmp	r0, r2
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x124>
 8000b86:	eb1c 0202 	adds.w	r2, ip, r2
 8000b8a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x122>
 8000b90:	4290      	cmp	r0, r2
 8000b92:	f200 80cb 	bhi.w	8000d2c <__udivmoddi4+0x2b8>
 8000b96:	4645      	mov	r5, r8
 8000b98:	1a12      	subs	r2, r2, r0
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ba0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ba4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x14e>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bb8:	d202      	bcs.n	8000bc0 <__udivmoddi4+0x14c>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	f200 80bb 	bhi.w	8000d36 <__udivmoddi4+0x2c2>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	eba4 040e 	sub.w	r4, r4, lr
 8000bc6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bca:	e79f      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bcc:	f1c1 0720 	rsb	r7, r1, #32
 8000bd0:	408b      	lsls	r3, r1
 8000bd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bda:	fa05 f401 	lsl.w	r4, r5, r1
 8000bde:	fa20 f307 	lsr.w	r3, r0, r7
 8000be2:	40fd      	lsrs	r5, r7
 8000be4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be8:	4323      	orrs	r3, r4
 8000bea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bee:	fa1f fe8c 	uxth.w	lr, ip
 8000bf2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bf6:	0c1c      	lsrs	r4, r3, #16
 8000bf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bfc:	fb08 f50e 	mul.w	r5, r8, lr
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	fa00 f001 	lsl.w	r0, r0, r1
 8000c0a:	d90b      	bls.n	8000c24 <__udivmoddi4+0x1b0>
 8000c0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c14:	f080 8088 	bcs.w	8000d28 <__udivmoddi4+0x2b4>
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	f240 8085 	bls.w	8000d28 <__udivmoddi4+0x2b4>
 8000c1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c22:	4464      	add	r4, ip
 8000c24:	1b64      	subs	r4, r4, r5
 8000c26:	b29d      	uxth	r5, r3
 8000c28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c38:	45a6      	cmp	lr, r4
 8000c3a:	d908      	bls.n	8000c4e <__udivmoddi4+0x1da>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c44:	d26c      	bcs.n	8000d20 <__udivmoddi4+0x2ac>
 8000c46:	45a6      	cmp	lr, r4
 8000c48:	d96a      	bls.n	8000d20 <__udivmoddi4+0x2ac>
 8000c4a:	3b02      	subs	r3, #2
 8000c4c:	4464      	add	r4, ip
 8000c4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c52:	fba3 9502 	umull	r9, r5, r3, r2
 8000c56:	eba4 040e 	sub.w	r4, r4, lr
 8000c5a:	42ac      	cmp	r4, r5
 8000c5c:	46c8      	mov	r8, r9
 8000c5e:	46ae      	mov	lr, r5
 8000c60:	d356      	bcc.n	8000d10 <__udivmoddi4+0x29c>
 8000c62:	d053      	beq.n	8000d0c <__udivmoddi4+0x298>
 8000c64:	b156      	cbz	r6, 8000c7c <__udivmoddi4+0x208>
 8000c66:	ebb0 0208 	subs.w	r2, r0, r8
 8000c6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c72:	40ca      	lsrs	r2, r1
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	4317      	orrs	r7, r2
 8000c78:	e9c6 7400 	strd	r7, r4, [r6]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	f1c3 0120 	rsb	r1, r3, #32
 8000c88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c90:	fa25 f101 	lsr.w	r1, r5, r1
 8000c94:	409d      	lsls	r5, r3
 8000c96:	432a      	orrs	r2, r5
 8000c98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ca0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ca8:	0c11      	lsrs	r1, r2, #16
 8000caa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cae:	fb00 f50e 	mul.w	r5, r0, lr
 8000cb2:	428d      	cmp	r5, r1
 8000cb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x258>
 8000cba:	eb1c 0101 	adds.w	r1, ip, r1
 8000cbe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cc2:	d22f      	bcs.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc4:	428d      	cmp	r5, r1
 8000cc6:	d92d      	bls.n	8000d24 <__udivmoddi4+0x2b0>
 8000cc8:	3802      	subs	r0, #2
 8000cca:	4461      	add	r1, ip
 8000ccc:	1b49      	subs	r1, r1, r5
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ce0:	4291      	cmp	r1, r2
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x282>
 8000ce4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ce8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cec:	d216      	bcs.n	8000d1c <__udivmoddi4+0x2a8>
 8000cee:	4291      	cmp	r1, r2
 8000cf0:	d914      	bls.n	8000d1c <__udivmoddi4+0x2a8>
 8000cf2:	3d02      	subs	r5, #2
 8000cf4:	4462      	add	r2, ip
 8000cf6:	1a52      	subs	r2, r2, r1
 8000cf8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cfc:	e738      	b.n	8000b70 <__udivmoddi4+0xfc>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	4630      	mov	r0, r6
 8000d02:	e708      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000d04:	4639      	mov	r1, r7
 8000d06:	e6e6      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	e6fb      	b.n	8000b04 <__udivmoddi4+0x90>
 8000d0c:	4548      	cmp	r0, r9
 8000d0e:	d2a9      	bcs.n	8000c64 <__udivmoddi4+0x1f0>
 8000d10:	ebb9 0802 	subs.w	r8, r9, r2
 8000d14:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	e7a3      	b.n	8000c64 <__udivmoddi4+0x1f0>
 8000d1c:	4645      	mov	r5, r8
 8000d1e:	e7ea      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d20:	462b      	mov	r3, r5
 8000d22:	e794      	b.n	8000c4e <__udivmoddi4+0x1da>
 8000d24:	4640      	mov	r0, r8
 8000d26:	e7d1      	b.n	8000ccc <__udivmoddi4+0x258>
 8000d28:	46d0      	mov	r8, sl
 8000d2a:	e77b      	b.n	8000c24 <__udivmoddi4+0x1b0>
 8000d2c:	3d02      	subs	r5, #2
 8000d2e:	4462      	add	r2, ip
 8000d30:	e732      	b.n	8000b98 <__udivmoddi4+0x124>
 8000d32:	4608      	mov	r0, r1
 8000d34:	e70a      	b.n	8000b4c <__udivmoddi4+0xd8>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	e742      	b.n	8000bc2 <__udivmoddi4+0x14e>

08000d3c <__aeabi_idiv0>:
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop

08000d40 <MPU6050_init>:
float tempCelcius = 0;

float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly
void MPU6050_init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c2, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	2275      	movs	r2, #117	; 0x75
 8000d58:	21d0      	movs	r1, #208	; 0xd0
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MPU6050_init+0xa8>)
 8000d5c:	f001 fe0a 	bl	8002974 <HAL_I2C_Mem_Read>
	if (check == 104)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	2b68      	cmp	r3, #104	; 0x68
 8000d64:	d13b      	bne.n	8000dde <MPU6050_init+0x9e>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	2301      	movs	r3, #1
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	1dbb      	adds	r3, r7, #6
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	226b      	movs	r2, #107	; 0x6b
 8000d7c:	21d0      	movs	r1, #208	; 0xd0
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <MPU6050_init+0xa8>)
 8000d80:	f001 fce4 	bl	800274c <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8000d84:	2307      	movs	r3, #7
 8000d86:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8000d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8c:	9302      	str	r3, [sp, #8]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	9301      	str	r3, [sp, #4]
 8000d92:	1dbb      	adds	r3, r7, #6
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	2301      	movs	r3, #1
 8000d98:	2219      	movs	r2, #25
 8000d9a:	21d0      	movs	r1, #208	; 0xd0
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MPU6050_init+0xa8>)
 8000d9e:	f001 fcd5 	bl	800274c <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	9302      	str	r3, [sp, #8]
 8000dac:	2301      	movs	r3, #1
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	1dbb      	adds	r3, r7, #6
 8000db2:	9300      	str	r3, [sp, #0]
 8000db4:	2301      	movs	r3, #1
 8000db6:	221c      	movs	r2, #28
 8000db8:	21d0      	movs	r1, #208	; 0xd0
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <MPU6050_init+0xa8>)
 8000dbc:	f001 fcc6 	bl	800274c <HAL_I2C_Mem_Write>

		data = 0x00;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c2, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	1dbb      	adds	r3, r7, #6
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	221b      	movs	r2, #27
 8000dd6:	21d0      	movs	r1, #208	; 0xd0
 8000dd8:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MPU6050_init+0xa8>)
 8000dda:	f001 fcb7 	bl	800274c <HAL_I2C_Mem_Write>
	}

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000274 	.word	0x20000274

08000dec <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df6:	9302      	str	r3, [sp, #8]
 8000df8:	2306      	movs	r3, #6
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	2301      	movs	r3, #1
 8000e02:	223b      	movs	r2, #59	; 0x3b
 8000e04:	21d0      	movs	r1, #208	; 0xd0
 8000e06:	4835      	ldr	r0, [pc, #212]	; (8000edc <MPU6050_Read_Accel+0xf0>)
 8000e08:	f001 fdb4 	bl	8002974 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000e0c:	783b      	ldrb	r3, [r7, #0]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	787b      	ldrb	r3, [r7, #1]
 8000e14:	b21b      	sxth	r3, r3
 8000e16:	4313      	orrs	r3, r2
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <MPU6050_Read_Accel+0xf4>)
 8000e1c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000e1e:	78bb      	ldrb	r3, [r7, #2]
 8000e20:	021b      	lsls	r3, r3, #8
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	78fb      	ldrb	r3, [r7, #3]
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MPU6050_Read_Accel+0xf8>)
 8000e2e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	797b      	ldrb	r3, [r7, #5]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <MPU6050_Read_Accel+0xfc>)
 8000e40:	801a      	strh	r2, [r3, #0]

	Ax = Accel_X_RAW*100/16384.0;
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <MPU6050_Read_Accel+0xf4>)
 8000e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2364      	movs	r3, #100	; 0x64
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fb2b 	bl	80004ac <__aeabi_i2d>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b24      	ldr	r3, [pc, #144]	; (8000eec <MPU6050_Read_Accel+0x100>)
 8000e5c:	f7ff fcba 	bl	80007d4 <__aeabi_ddiv>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fd9c 	bl	80009a4 <__aeabi_d2f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a20      	ldr	r2, [pc, #128]	; (8000ef0 <MPU6050_Read_Accel+0x104>)
 8000e70:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW*100/16384.0;
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <MPU6050_Read_Accel+0xf8>)
 8000e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	2364      	movs	r3, #100	; 0x64
 8000e7c:	fb02 f303 	mul.w	r3, r2, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb13 	bl	80004ac <__aeabi_i2d>
 8000e86:	f04f 0200 	mov.w	r2, #0
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MPU6050_Read_Accel+0x100>)
 8000e8c:	f7ff fca2 	bl	80007d4 <__aeabi_ddiv>
 8000e90:	4602      	mov	r2, r0
 8000e92:	460b      	mov	r3, r1
 8000e94:	4610      	mov	r0, r2
 8000e96:	4619      	mov	r1, r3
 8000e98:	f7ff fd84 	bl	80009a4 <__aeabi_d2f>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a15      	ldr	r2, [pc, #84]	; (8000ef4 <MPU6050_Read_Accel+0x108>)
 8000ea0:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW*100/16384.0;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MPU6050_Read_Accel+0xfc>)
 8000ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	2364      	movs	r3, #100	; 0x64
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fafb 	bl	80004ac <__aeabi_i2d>
 8000eb6:	f04f 0200 	mov.w	r2, #0
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MPU6050_Read_Accel+0x100>)
 8000ebc:	f7ff fc8a 	bl	80007d4 <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fd6c 	bl	80009a4 <__aeabi_d2f>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <MPU6050_Read_Accel+0x10c>)
 8000ed0:	6013      	str	r3, [r2, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000274 	.word	0x20000274
 8000ee0:	20000168 	.word	0x20000168
 8000ee4:	2000016a 	.word	0x2000016a
 8000ee8:	2000016c 	.word	0x2000016c
 8000eec:	40d00000 	.word	0x40d00000
 8000ef0:	20000174 	.word	0x20000174
 8000ef4:	20000178 	.word	0x20000178
 8000ef8:	2000017c 	.word	0x2000017c
 8000efc:	00000000 	.word	0x00000000

08000f00 <MPU6050_Read_Gyro>:
void MPU6050_Read_Gyro (void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	HAL_I2C_Mem_Read (&hi2c2, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	9302      	str	r3, [sp, #8]
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	463b      	mov	r3, r7
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2301      	movs	r3, #1
 8000f16:	2243      	movs	r2, #67	; 0x43
 8000f18:	21d0      	movs	r1, #208	; 0xd0
 8000f1a:	4831      	ldr	r0, [pc, #196]	; (8000fe0 <MPU6050_Read_Gyro+0xe0>)
 8000f1c:	f001 fd2a 	bl	8002974 <HAL_I2C_Mem_Read>
	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f20:	783b      	ldrb	r3, [r7, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	787b      	ldrb	r3, [r7, #1]
 8000f28:	b21b      	sxth	r3, r3
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	b21a      	sxth	r2, r3
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <MPU6050_Read_Gyro+0xe4>)
 8000f30:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f32:	783b      	ldrb	r3, [r7, #0]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <MPU6050_Read_Gyro+0xe8>)
 8000f42:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f44:	783b      	ldrb	r3, [r7, #0]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	787b      	ldrb	r3, [r7, #1]
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21a      	sxth	r2, r3
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <MPU6050_Read_Gyro+0xec>)
 8000f54:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW/131.0;
 8000f56:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <MPU6050_Read_Gyro+0xe4>)
 8000f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff faa5 	bl	80004ac <__aeabi_i2d>
 8000f62:	a31d      	add	r3, pc, #116	; (adr r3, 8000fd8 <MPU6050_Read_Gyro+0xd8>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fc34 	bl	80007d4 <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fd16 	bl	80009a4 <__aeabi_d2f>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <MPU6050_Read_Gyro+0xf0>)
 8000f7c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <MPU6050_Read_Gyro+0xe8>)
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa91 	bl	80004ac <__aeabi_i2d>
 8000f8a:	a313      	add	r3, pc, #76	; (adr r3, 8000fd8 <MPU6050_Read_Gyro+0xd8>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff fc20 	bl	80007d4 <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fd02 	bl	80009a4 <__aeabi_d2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <MPU6050_Read_Gyro+0xf4>)
 8000fa4:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MPU6050_Read_Gyro+0xec>)
 8000fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa7d 	bl	80004ac <__aeabi_i2d>
 8000fb2:	a309      	add	r3, pc, #36	; (adr r3, 8000fd8 <MPU6050_Read_Gyro+0xd8>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fc0c 	bl	80007d4 <__aeabi_ddiv>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fcee 	bl	80009a4 <__aeabi_d2f>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <MPU6050_Read_Gyro+0xf8>)
 8000fcc:	6013      	str	r3, [r2, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40606000 	.word	0x40606000
 8000fe0:	20000274 	.word	0x20000274
 8000fe4:	2000016e 	.word	0x2000016e
 8000fe8:	20000170 	.word	0x20000170
 8000fec:	20000172 	.word	0x20000172
 8000ff0:	20000180 	.word	0x20000180
 8000ff4:	20000184 	.word	0x20000184
 8000ff8:	20000188 	.word	0x20000188

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001002:	f000 fcc0 	bl	8001986 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001006:	f000 f83d 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100a:	f000 f98f 	bl	800132c <MX_GPIO_Init>
  MX_ETH_Init();
 800100e:	f000 f8a1 	bl	8001154 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001012:	f000 f92d 	bl	8001270 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001016:	f000 f95b 	bl	80012d0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C2_Init();
 800101a:	f000 f8e9 	bl	80011f0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
	MPU6050_init();
 800101e:	f7ff fe8f 	bl	8000d40 <MPU6050_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      MPU6050_Read_Accel();
 8001022:	f7ff fee3 	bl	8000dec <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001026:	f7ff ff6b 	bl	8000f00 <MPU6050_Read_Gyro>
	  data[0]= Ax;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <main+0x6c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	603b      	str	r3, [r7, #0]
	  data[1]= Ay;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <main+0x70>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	607b      	str	r3, [r7, #4]
	  data[2]= Az;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <main+0x74>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60bb      	str	r3, [r7, #8]
	  data[3]= Gx;
 800103c:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <main+0x78>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
	  data[4]= Gy;
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <main+0x7c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
	  data[5]= Gz;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <main+0x80>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	617b      	str	r3, [r7, #20]
	  HAL_UART_Transmit(&huart3, (uint8_t *)data, sizeof(float)*6, HAL_MAX_DELAY);
 800104e:	4639      	mov	r1, r7
 8001050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001054:	2218      	movs	r2, #24
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <main+0x84>)
 8001058:	f003 fb38 	bl	80046cc <HAL_UART_Transmit>
	  HAL_Delay(500); // Delay for 1 second
 800105c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001060:	f000 fcee 	bl	8001a40 <HAL_Delay>
      MPU6050_Read_Accel();
 8001064:	e7dd      	b.n	8001022 <main+0x26>
 8001066:	bf00      	nop
 8001068:	20000174 	.word	0x20000174
 800106c:	20000178 	.word	0x20000178
 8001070:	2000017c 	.word	0x2000017c
 8001074:	20000180 	.word	0x20000180
 8001078:	20000184 	.word	0x20000184
 800107c:	20000188 	.word	0x20000188
 8001080:	200002c8 	.word	0x200002c8

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b094      	sub	sp, #80	; 0x50
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0320 	add.w	r3, r7, #32
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f004 fa96 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a8:	f002 f9f8 	bl	800349c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <SystemClock_Config+0xc8>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	4a26      	ldr	r2, [pc, #152]	; (800114c <SystemClock_Config+0xc8>)
 80010b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b6:	6413      	str	r3, [r2, #64]	; 0x40
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <SystemClock_Config+0xcc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010cc:	4a20      	ldr	r2, [pc, #128]	; (8001150 <SystemClock_Config+0xcc>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010e0:	2301      	movs	r3, #1
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ea:	2302      	movs	r3, #2
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010f4:	2304      	movs	r3, #4
 80010f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010f8:	2348      	movs	r3, #72	; 0x48
 80010fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fc:	2302      	movs	r3, #2
 80010fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001100:	2303      	movs	r3, #3
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001104:	f107 0320 	add.w	r3, r7, #32
 8001108:	4618      	mov	r0, r3
 800110a:	f002 f9d7 	bl	80034bc <HAL_RCC_OscConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001114:	f000 f9b8 	bl	8001488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001118:	230f      	movs	r3, #15
 800111a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111c:	2302      	movs	r3, #2
 800111e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2102      	movs	r1, #2
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fc65 	bl	8003a04 <HAL_RCC_ClockConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001140:	f000 f9a2 	bl	8001488 <Error_Handler>
  }
}
 8001144:	bf00      	nop
 8001146:	3750      	adds	r7, #80	; 0x50
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40023800 	.word	0x40023800
 8001150:	40007000 	.word	0x40007000

08001154 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_ETH_Init+0x84>)
 800115a:	4a20      	ldr	r2, [pc, #128]	; (80011dc <MX_ETH_Init+0x88>)
 800115c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_ETH_Init+0x8c>)
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_ETH_Init+0x8c>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_ETH_Init+0x8c>)
 800116c:	22e1      	movs	r2, #225	; 0xe1
 800116e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_ETH_Init+0x8c>)
 8001172:	2200      	movs	r2, #0
 8001174:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_ETH_Init+0x8c>)
 8001178:	2200      	movs	r2, #0
 800117a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_ETH_Init+0x8c>)
 800117e:	2200      	movs	r2, #0
 8001180:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <MX_ETH_Init+0x84>)
 8001184:	4a16      	ldr	r2, [pc, #88]	; (80011e0 <MX_ETH_Init+0x8c>)
 8001186:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_ETH_Init+0x84>)
 800118a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800118e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_ETH_Init+0x84>)
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <MX_ETH_Init+0x90>)
 8001194:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_ETH_Init+0x84>)
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_ETH_Init+0x94>)
 800119a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_ETH_Init+0x84>)
 800119e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011a2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011a4:	480c      	ldr	r0, [pc, #48]	; (80011d8 <MX_ETH_Init+0x84>)
 80011a6:	f000 fd55 	bl	8001c54 <HAL_ETH_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011b0:	f000 f96a 	bl	8001488 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011b4:	2238      	movs	r2, #56	; 0x38
 80011b6:	2100      	movs	r1, #0
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_ETH_Init+0x98>)
 80011ba:	f004 fa03 	bl	80055c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_ETH_Init+0x98>)
 80011c0:	2221      	movs	r2, #33	; 0x21
 80011c2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_ETH_Init+0x98>)
 80011c6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80011ca:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_ETH_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001c4 	.word	0x200001c4
 80011dc:	40028000 	.word	0x40028000
 80011e0:	20000858 	.word	0x20000858
 80011e4:	200000ac 	.word	0x200000ac
 80011e8:	2000000c 	.word	0x2000000c
 80011ec:	2000018c 	.word	0x2000018c

080011f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_I2C2_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_I2C2_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_I2C2_Init+0x74>)
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <MX_I2C2_Init+0x7c>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_I2C2_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_I2C2_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_I2C2_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_I2C2_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C2_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C2_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C2_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800122a:	480e      	ldr	r0, [pc, #56]	; (8001264 <MX_I2C2_Init+0x74>)
 800122c:	f001 f9fe 	bl	800262c <HAL_I2C_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001236:	f000 f927 	bl	8001488 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <MX_I2C2_Init+0x74>)
 800123e:	f001 ff4d 	bl	80030dc <HAL_I2CEx_ConfigAnalogFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001248:	f000 f91e 	bl	8001488 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_I2C2_Init+0x74>)
 8001250:	f001 ff8f 	bl	8003172 <HAL_I2CEx_ConfigDigitalFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800125a:	f000 f915 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000274 	.word	0x20000274
 8001268:	40005800 	.word	0x40005800
 800126c:	00808cd2 	.word	0x00808cd2

08001270 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <MX_USART3_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 80012b4:	f003 f9bc 	bl	8004630 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f000 f8e3 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200002c8 	.word	0x200002c8
 80012cc:	40004800 	.word	0x40004800

080012d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012de:	2206      	movs	r2, #6
 80012e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e4:	2202      	movs	r2, #2
 80012e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	2202      	movs	r2, #2
 80012f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	2201      	movs	r2, #1
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001314:	f001 ff79 	bl	800320a <HAL_PCD_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800131e:	f000 f8b3 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000350 	.word	0x20000350

0800132c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08c      	sub	sp, #48	; 0x30
 8001330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	4b4d      	ldr	r3, [pc, #308]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <MX_GPIO_Init+0x14c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a46      	ldr	r2, [pc, #280]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a40      	ldr	r2, [pc, #256]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <MX_GPIO_Init+0x14c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a3a      	ldr	r2, [pc, #232]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b38      	ldr	r3, [pc, #224]	; (8001478 <MX_GPIO_Init+0x14c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	4b35      	ldr	r3, [pc, #212]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a34      	ldr	r2, [pc, #208]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b32      	ldr	r3, [pc, #200]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ba:	4b2f      	ldr	r3, [pc, #188]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d2:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a28      	ldr	r2, [pc, #160]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <MX_GPIO_Init+0x14c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80013f0:	4822      	ldr	r0, [pc, #136]	; (800147c <MX_GPIO_Init+0x150>)
 80013f2:	f001 f901 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	4821      	ldr	r0, [pc, #132]	; (8001480 <MX_GPIO_Init+0x154>)
 80013fc:	f001 f8fc 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001406:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <MX_GPIO_Init+0x158>)
 8001418:	f000 ff42 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800141c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	4811      	ldr	r0, [pc, #68]	; (800147c <MX_GPIO_Init+0x150>)
 8001436:	f000 ff33 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800143a:	2340      	movs	r3, #64	; 0x40
 800143c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	2300      	movs	r3, #0
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <MX_GPIO_Init+0x154>)
 8001452:	f000 ff25 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_GPIO_Init+0x154>)
 800146a:	f000 ff19 	bl	80022a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	; 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400
 8001480:	40021800 	.word	0x40021800
 8001484:	40020800 	.word	0x40020800

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_MspInit+0x44>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_MspInit+0x44>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x44>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x44>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x44>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x44>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a4e      	ldr	r2, [pc, #312]	; (8001634 <HAL_ETH_MspInit+0x158>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	f040 8096 	bne.w	800162c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001500:	4b4d      	ldr	r3, [pc, #308]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
 800150c:	4b4a      	ldr	r3, [pc, #296]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4a46      	ldr	r2, [pc, #280]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800151e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001522:	6313      	str	r3, [r2, #48]	; 0x30
 8001524:	4b44      	ldr	r3, [pc, #272]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4b41      	ldr	r3, [pc, #260]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001536:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800153a:	6313      	str	r3, [r2, #48]	; 0x30
 800153c:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	617b      	str	r3, [r7, #20]
 800155e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001564:	4a34      	ldr	r2, [pc, #208]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6313      	str	r3, [r2, #48]	; 0x30
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001590:	4b29      	ldr	r3, [pc, #164]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	4a28      	ldr	r2, [pc, #160]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 8001596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800159a:	6313      	str	r3, [r2, #48]	; 0x30
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_ETH_MspInit+0x15c>)
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015a8:	2332      	movs	r3, #50	; 0x32
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b8:	230b      	movs	r3, #11
 80015ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <HAL_ETH_MspInit+0x160>)
 80015c4:	f000 fe6c 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015c8:	2386      	movs	r3, #134	; 0x86
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d8:	230b      	movs	r3, #11
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4817      	ldr	r0, [pc, #92]	; (8001640 <HAL_ETH_MspInit+0x164>)
 80015e4:	f000 fe5c 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fa:	230b      	movs	r3, #11
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	480f      	ldr	r0, [pc, #60]	; (8001644 <HAL_ETH_MspInit+0x168>)
 8001606:	f000 fe4b 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800160a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800161c:	230b      	movs	r3, #11
 800161e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <HAL_ETH_MspInit+0x16c>)
 8001628:	f000 fe3a 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800162c:	bf00      	nop
 800162e:	3738      	adds	r7, #56	; 0x38
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40028000 	.word	0x40028000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	40021800 	.word	0x40021800

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0aa      	sub	sp, #168	; 0xa8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	2284      	movs	r2, #132	; 0x84
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f003 ffa9 	bl	80055c4 <memset>
  if(hi2c->Instance==I2C2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a21      	ldr	r2, [pc, #132]	; (80016fc <HAL_I2C_MspInit+0xb0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d13b      	bne.n	80016f4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800167c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001680:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001682:	2300      	movs	r3, #0
 8001684:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fbe0 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001696:	f7ff fef7 	bl	8001488 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 80016a0:	f043 0320 	orr.w	r3, r3, #32
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ca:	2304      	movs	r3, #4
 80016cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016d4:	4619      	mov	r1, r3
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 80016d8:	f000 fde2 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 80016e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016e6:	6413      	str	r3, [r2, #64]	; 0x40
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	37a8      	adds	r7, #168	; 0xa8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40005800 	.word	0x40005800
 8001700:	40023800 	.word	0x40023800
 8001704:	40021400 	.word	0x40021400

08001708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0aa      	sub	sp, #168	; 0xa8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	2284      	movs	r2, #132	; 0x84
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f003 ff4b 	bl	80055c4 <memset>
  if(huart->Instance==USART3)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a22      	ldr	r2, [pc, #136]	; (80017bc <HAL_UART_MspInit+0xb4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d13c      	bne.n	80017b2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800173e:	2300      	movs	r3, #0
 8001740:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4618      	mov	r0, r3
 8001748:	f002 fb82 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001752:	f7ff fe99 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_UART_MspInit+0xb8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_UART_MspInit+0xb8>)
 800175c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_UART_MspInit+0xb8>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_UART_MspInit+0xb8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a13      	ldr	r2, [pc, #76]	; (80017c0 <HAL_UART_MspInit+0xb8>)
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_UART_MspInit+0xb8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001786:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001794:	2301      	movs	r3, #1
 8001796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017a0:	2307      	movs	r3, #7
 80017a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <HAL_UART_MspInit+0xbc>)
 80017ae:	f000 fd77 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	37a8      	adds	r7, #168	; 0xa8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40004800 	.word	0x40004800
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020c00 	.word	0x40020c00

080017c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0ac      	sub	sp, #176	; 0xb0
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	2284      	movs	r2, #132	; 0x84
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 feeb 	bl	80055c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017f6:	d159      	bne.n	80018ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80017f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fb21 	bl	8003e50 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001814:	f7ff fe38 	bl	8001488 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a25      	ldr	r2, [pc, #148]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001830:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001834:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800184a:	230a      	movs	r3, #10
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001854:	4619      	mov	r1, r3
 8001856:	4818      	ldr	r0, [pc, #96]	; (80018b8 <HAL_PCD_MspInit+0xf0>)
 8001858:	f000 fd22 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800185c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001874:	4619      	mov	r1, r3
 8001876:	4810      	ldr	r0, [pc, #64]	; (80018b8 <HAL_PCD_MspInit+0xf0>)
 8001878:	f000 fd12 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 800187e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 8001882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001886:	6353      	str	r3, [r2, #52]	; 0x34
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 800189a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189e:	6453      	str	r3, [r2, #68]	; 0x44
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <HAL_PCD_MspInit+0xec>)
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	37b0      	adds	r7, #176	; 0xb0
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <NMI_Handler+0x4>

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <HardFault_Handler+0x4>

080018c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <MemManage_Handler+0x4>

080018ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <BusFault_Handler+0x4>

080018d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <UsageFault_Handler+0x4>

080018da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001908:	f000 f87a 	bl	8001a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <SystemInit+0x20>)
 8001916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SystemInit+0x20>)
 800191c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff ffd7 	bl	8001910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f003 fe37 	bl	80055d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff fb49 	bl	8000ffc <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001978:	0800565c 	.word	0x0800565c
  ldr r2, =_sbss
 800197c:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001980:	20000864 	.word	0x20000864

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>

08001986 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198a:	2003      	movs	r0, #3
 800198c:	f000 f92e 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001990:	2000      	movs	r0, #0
 8001992:	f000 f805 	bl	80019a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001996:	f7ff fd7d 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_InitTick+0x54>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x58>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f93b 	bl	8001c3a <HAL_SYSTICK_Config>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00e      	b.n	80019ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d80a      	bhi.n	80019ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	f000 f911 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e0:	4a06      	ldr	r2, [pc, #24]	; (80019fc <HAL_InitTick+0x5c>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e000      	b.n	80019ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000004 	.word	0x20000004

08001a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x20>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <HAL_IncTick+0x24>)
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000860 	.word	0x20000860

08001a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <HAL_GetTick+0x14>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	20000860 	.word	0x20000860

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff ffee 	bl	8001a28 <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffde 	bl	8001a28 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	05fa0000 	.word	0x05fa0000

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff47 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff5c 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffb0 	bl	8001ba8 <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06a      	b.n	8001d3c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d106      	bne.n	8001c7e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2223      	movs	r2, #35	; 0x23
 8001c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fc2f 	bl	80014dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b31      	ldr	r3, [pc, #196]	; (8001d44 <HAL_ETH_Init+0xf0>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	4a30      	ldr	r2, [pc, #192]	; (8001d44 <HAL_ETH_Init+0xf0>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c88:	6453      	str	r3, [r2, #68]	; 0x44
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_ETH_Init+0xf0>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_ETH_Init+0xf4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <HAL_ETH_Init+0xf4>)
 8001c9c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ca0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_ETH_Init+0xf4>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	4927      	ldr	r1, [pc, #156]	; (8001d48 <HAL_ETH_Init+0xf4>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HAL_ETH_Init+0xf4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff feac 	bl	8001a28 <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cd2:	e011      	b.n	8001cf8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cd4:	f7ff fea8 	bl	8001a28 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ce2:	d909      	bls.n	8001cf8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	22e0      	movs	r2, #224	; 0xe0
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e021      	b.n	8001d3c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e4      	bne.n	8001cd4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f958 	bl	8001fc0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 f9ff 	bl	8002114 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fa55 	bl	80021c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f9bd 	bl	80020a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2210      	movs	r2, #16
 8001d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40013800 	.word	0x40013800

08001d4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4b51      	ldr	r3, [pc, #324]	; (8001ea8 <ETH_SetMACConfig+0x15c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	7c1b      	ldrb	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d102      	bne.n	8001d74 <ETH_SetMACConfig+0x28>
 8001d6e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d72:	e000      	b.n	8001d76 <ETH_SetMACConfig+0x2a>
 8001d74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	7c5b      	ldrb	r3, [r3, #17]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <ETH_SetMACConfig+0x38>
 8001d7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d82:	e000      	b.n	8001d86 <ETH_SetMACConfig+0x3a>
 8001d84:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d86:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	7fdb      	ldrb	r3, [r3, #31]
 8001d92:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d94:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	7f92      	ldrb	r2, [r2, #30]
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d102      	bne.n	8001daa <ETH_SetMACConfig+0x5e>
 8001da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da8:	e000      	b.n	8001dac <ETH_SetMACConfig+0x60>
 8001daa:	2200      	movs	r2, #0
                        macconf->Speed |
 8001dac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	7f1b      	ldrb	r3, [r3, #28]
 8001db2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001db4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d102      	bne.n	8001dd4 <ETH_SetMACConfig+0x88>
 8001dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd2:	e000      	b.n	8001dd6 <ETH_SetMACConfig+0x8a>
 8001dd4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dd6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	7bdb      	ldrb	r3, [r3, #15]
 8001ddc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001dde:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001de4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dee:	4313      	orrs	r3, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7ff fe1a 	bl	8001a40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e22:	4013      	ands	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	d101      	bne.n	8001e3a <ETH_SetMACConfig+0xee>
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	e000      	b.n	8001e3c <ETH_SetMACConfig+0xf0>
 8001e3a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e3c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e4a:	2a01      	cmp	r2, #1
 8001e4c:	d101      	bne.n	8001e52 <ETH_SetMACConfig+0x106>
 8001e4e:	2208      	movs	r2, #8
 8001e50:	e000      	b.n	8001e54 <ETH_SetMACConfig+0x108>
 8001e52:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e5c:	2a01      	cmp	r2, #1
 8001e5e:	d101      	bne.n	8001e64 <ETH_SetMACConfig+0x118>
 8001e60:	2204      	movs	r2, #4
 8001e62:	e000      	b.n	8001e66 <ETH_SetMACConfig+0x11a>
 8001e64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d101      	bne.n	8001e76 <ETH_SetMACConfig+0x12a>
 8001e72:	2202      	movs	r2, #2
 8001e74:	e000      	b.n	8001e78 <ETH_SetMACConfig+0x12c>
 8001e76:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff fdd5 	bl	8001a40 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	619a      	str	r2, [r3, #24]
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	ff20810f 	.word	0xff20810f

08001eac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <ETH_SetDMAConfig+0x110>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	7b1b      	ldrb	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <ETH_SetDMAConfig+0x2c>
 8001ed2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ed6:	e000      	b.n	8001eda <ETH_SetDMAConfig+0x2e>
 8001ed8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	7b5b      	ldrb	r3, [r3, #13]
 8001ede:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ee0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	7f52      	ldrb	r2, [r2, #29]
 8001ee6:	2a00      	cmp	r2, #0
 8001ee8:	d102      	bne.n	8001ef0 <ETH_SetDMAConfig+0x44>
 8001eea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eee:	e000      	b.n	8001ef2 <ETH_SetDMAConfig+0x46>
 8001ef0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001ef2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	7b9b      	ldrb	r3, [r3, #14]
 8001ef8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001efa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	7f1b      	ldrb	r3, [r3, #28]
 8001f06:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	7f9b      	ldrb	r3, [r3, #30]
 8001f0e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f10:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f1e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f20:	4313      	orrs	r3, r2
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	461a      	mov	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff fd7c 	bl	8001a40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f50:	461a      	mov	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	791b      	ldrb	r3, [r3, #4]
 8001f5a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f60:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f66:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f6c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f74:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f76:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f7e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f84:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f92:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff fd4d 	bl	8001a40 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	f8de3f23 	.word	0xf8de3f23

08001fc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0a6      	sub	sp, #152	; 0x98
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002006:	2300      	movs	r3, #0
 8002008:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800202c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002034:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fe86 	bl	8001d4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002040:	2301      	movs	r3, #1
 8002042:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002044:	2301      	movs	r3, #1
 8002046:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800204e:	2301      	movs	r3, #1
 8002050:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002062:	2300      	movs	r3, #0
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002066:	2301      	movs	r3, #1
 8002068:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800206c:	2301      	movs	r3, #1
 800206e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002070:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002074:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800207a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800207c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002080:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002090:	f107 0308 	add.w	r3, r7, #8
 8002094:	4619      	mov	r1, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff08 	bl	8001eac <ETH_SetDMAConfig>
}
 800209c:	bf00      	nop
 800209e:	3798      	adds	r7, #152	; 0x98
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3305      	adds	r3, #5
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	3204      	adds	r2, #4
 80020bc:	7812      	ldrb	r2, [r2, #0]
 80020be:	4313      	orrs	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <ETH_MACAddressConfig+0x68>)
 80020c6:	4413      	add	r3, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3303      	adds	r3, #3
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	061a      	lsls	r2, r3, #24
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3302      	adds	r3, #2
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	041b      	lsls	r3, r3, #16
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3301      	adds	r3, #1
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	4313      	orrs	r3, r2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	7812      	ldrb	r2, [r2, #0]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <ETH_MACAddressConfig+0x6c>)
 80020f6:	4413      	add	r3, r2
 80020f8:	461a      	mov	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	bf00      	nop
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	40028040 	.word	0x40028040
 8002110:	40028044 	.word	0x40028044

08002114 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e03e      	b.n	80021a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	3206      	adds	r2, #6
 8002154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d80c      	bhi.n	8002184 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	e004      	b.n	800218e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d9bd      	bls.n	8002122 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b8:	611a      	str	r2, [r3, #16]
}
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b085      	sub	sp, #20
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	e046      	b.n	8002262 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	2200      	movs	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2200      	movs	r2, #0
 8002208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002210:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002218:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	3212      	adds	r2, #18
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d80c      	bhi.n	8002252 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6919      	ldr	r1, [r3, #16]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	461a      	mov	r2, r3
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	e004      	b.n	800225c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3301      	adds	r3, #1
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b03      	cmp	r3, #3
 8002266:	d9b5      	bls.n	80021d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	60da      	str	r2, [r3, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e175      	b.n	80025ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8164 	bne.w	80025a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d005      	beq.n	80022f6 <HAL_GPIO_Init+0x56>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d130      	bne.n	8002358 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800232c:	2201      	movs	r2, #1
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	f003 0201 	and.w	r2, r3, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b03      	cmp	r3, #3
 8002362:	d017      	beq.n	8002394 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	2203      	movs	r2, #3
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d123      	bne.n	80023e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80be 	beq.w	80025a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_GPIO_Init+0x324>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	4a65      	ldr	r2, [pc, #404]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002434:	6453      	str	r3, [r2, #68]	; 0x44
 8002436:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_GPIO_Init+0x324>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002442:	4a61      	ldr	r2, [pc, #388]	; (80025c8 <HAL_GPIO_Init+0x328>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a58      	ldr	r2, [pc, #352]	; (80025cc <HAL_GPIO_Init+0x32c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d037      	beq.n	80024de <HAL_GPIO_Init+0x23e>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a57      	ldr	r2, [pc, #348]	; (80025d0 <HAL_GPIO_Init+0x330>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_GPIO_Init+0x23a>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a56      	ldr	r2, [pc, #344]	; (80025d4 <HAL_GPIO_Init+0x334>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d02b      	beq.n	80024d6 <HAL_GPIO_Init+0x236>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a55      	ldr	r2, [pc, #340]	; (80025d8 <HAL_GPIO_Init+0x338>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d025      	beq.n	80024d2 <HAL_GPIO_Init+0x232>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a54      	ldr	r2, [pc, #336]	; (80025dc <HAL_GPIO_Init+0x33c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d01f      	beq.n	80024ce <HAL_GPIO_Init+0x22e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a53      	ldr	r2, [pc, #332]	; (80025e0 <HAL_GPIO_Init+0x340>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d019      	beq.n	80024ca <HAL_GPIO_Init+0x22a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_GPIO_Init+0x344>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x226>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a51      	ldr	r2, [pc, #324]	; (80025e8 <HAL_GPIO_Init+0x348>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x222>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a50      	ldr	r2, [pc, #320]	; (80025ec <HAL_GPIO_Init+0x34c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x21e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4f      	ldr	r2, [pc, #316]	; (80025f0 <HAL_GPIO_Init+0x350>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x21a>
 80024b6:	2309      	movs	r3, #9
 80024b8:	e012      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ba:	230a      	movs	r3, #10
 80024bc:	e010      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024be:	2308      	movs	r3, #8
 80024c0:	e00e      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024c6:	2306      	movs	r3, #6
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x240>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	; (80025c8 <HAL_GPIO_Init+0x328>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a34      	ldr	r2, [pc, #208]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <HAL_GPIO_Init+0x354>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <HAL_GPIO_Init+0x354>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1f      	ldr	r2, [pc, #124]	; (80025f4 <HAL_GPIO_Init+0x354>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b1d      	ldr	r3, [pc, #116]	; (80025f4 <HAL_GPIO_Init+0x354>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_GPIO_Init+0x354>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae86 	bls.w	80022c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40022400 	.word	0x40022400
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e07f      	b.n	800273e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe fffa 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2224      	movs	r2, #36	; 0x24
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0201 	bic.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800267c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800268c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e006      	b.n	80026b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d104      	bne.n	80026c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <HAL_I2C_Init+0x11c>)
 80026d2:	430b      	orrs	r3, r1
 80026d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69d9      	ldr	r1, [r3, #28]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1a      	ldr	r2, [r3, #32]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	02008000 	.word	0x02008000

0800274c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b20      	cmp	r3, #32
 8002770:	f040 80f9 	bne.w	8002966 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_I2C_Mem_Write+0x34>
 800277a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0ed      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_I2C_Mem_Write+0x4e>
 8002796:	2302      	movs	r3, #2
 8002798:	e0e6      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027a2:	f7ff f941 	bl	8001a28 <HAL_GetTick>
 80027a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2319      	movs	r3, #25
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fac3 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0d1      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2221      	movs	r2, #33	; 0x21
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2240      	movs	r2, #64	; 0x40
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a3a      	ldr	r2, [r7, #32]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ec:	88f8      	ldrh	r0, [r7, #6]
 80027ee:	893a      	ldrh	r2, [r7, #8]
 80027f0:	8979      	ldrh	r1, [r7, #10]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4603      	mov	r3, r0
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f9d3 	bl	8002ba8 <I2C_RequestMemoryWrite>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0a9      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2bff      	cmp	r3, #255	; 0xff
 800281c:	d90e      	bls.n	800283c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	b2da      	uxtb	r2, r3
 800282a:	8979      	ldrh	r1, [r7, #10]
 800282c:	2300      	movs	r3, #0
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fc1f 	bl	8003078 <I2C_TransferConfig>
 800283a:	e00f      	b.n	800285c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	2300      	movs	r3, #0
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fc0e 	bl	8003078 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 faad 	bl	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e07b      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d034      	beq.n	8002914 <HAL_I2C_Mem_Write+0x1c8>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d130      	bne.n	8002914 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fa3f 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e04d      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	2bff      	cmp	r3, #255	; 0xff
 80028d4:	d90e      	bls.n	80028f4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	22ff      	movs	r2, #255	; 0xff
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8979      	ldrh	r1, [r7, #10]
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fbc3 	bl	8003078 <I2C_TransferConfig>
 80028f2:	e00f      	b.n	8002914 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002902:	b2da      	uxtb	r2, r3
 8002904:	8979      	ldrh	r1, [r7, #10]
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fbb2 	bl	8003078 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d19e      	bne.n	800285c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fa8c 	bl	8002e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e01a      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2220      	movs	r2, #32
 8002938:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_I2C_Mem_Write+0x224>)
 8002946:	400b      	ands	r3, r1
 8002948:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	fe00e800 	.word	0xfe00e800

08002974 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af02      	add	r7, sp, #8
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	4608      	mov	r0, r1
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	4603      	mov	r3, r0
 8002984:	817b      	strh	r3, [r7, #10]
 8002986:	460b      	mov	r3, r1
 8002988:	813b      	strh	r3, [r7, #8]
 800298a:	4613      	mov	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b20      	cmp	r3, #32
 8002998:	f040 80fd 	bne.w	8002b96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_I2C_Mem_Read+0x34>
 80029a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e0f1      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_I2C_Mem_Read+0x4e>
 80029be:	2302      	movs	r3, #2
 80029c0:	e0ea      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ca:	f7ff f82d 	bl	8001a28 <HAL_GetTick>
 80029ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2319      	movs	r3, #25
 80029d6:	2201      	movs	r2, #1
 80029d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 f9af 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0d5      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2222      	movs	r2, #34	; 0x22
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a14:	88f8      	ldrh	r0, [r7, #6]
 8002a16:	893a      	ldrh	r2, [r7, #8]
 8002a18:	8979      	ldrh	r1, [r7, #10]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4603      	mov	r3, r0
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f913 	bl	8002c50 <I2C_RequestMemoryRead>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0ad      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2bff      	cmp	r3, #255	; 0xff
 8002a44:	d90e      	bls.n	8002a64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	22ff      	movs	r2, #255	; 0xff
 8002a4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	8979      	ldrh	r1, [r7, #10]
 8002a54:	4b52      	ldr	r3, [pc, #328]	; (8002ba0 <HAL_I2C_Mem_Read+0x22c>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f000 fb0b 	bl	8003078 <I2C_TransferConfig>
 8002a62:	e00f      	b.n	8002a84 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	8979      	ldrh	r1, [r7, #10]
 8002a76:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_I2C_Mem_Read+0x22c>)
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fafa 	bl	8003078 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f956 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07c      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d034      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x1d0>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d130      	bne.n	8002b44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	2200      	movs	r2, #0
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f927 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e04d      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2bff      	cmp	r3, #255	; 0xff
 8002b04:	d90e      	bls.n	8002b24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	8979      	ldrh	r1, [r7, #10]
 8002b14:	2300      	movs	r3, #0
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 faab 	bl	8003078 <I2C_TransferConfig>
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	8979      	ldrh	r1, [r7, #10]
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa9a 	bl	8003078 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d19a      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f974 	bl	8002e40 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e01a      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2220      	movs	r2, #32
 8002b68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_I2C_Mem_Read+0x230>)
 8002b76:	400b      	ands	r3, r1
 8002b78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
  }
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	80002400 	.word	0x80002400
 8002ba4:	fe00e800 	.word	0xfe00e800

08002ba8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	817b      	strh	r3, [r7, #10]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	813b      	strh	r3, [r7, #8]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	8979      	ldrh	r1, [r7, #10]
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <I2C_RequestMemoryWrite+0xa4>)
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fa51 	bl	8003078 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	69b9      	ldr	r1, [r7, #24]
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f8f0 	bl	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e02c      	b.n	8002c44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bea:	88fb      	ldrh	r3, [r7, #6]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d105      	bne.n	8002bfc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bf0:	893b      	ldrh	r3, [r7, #8]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfa:	e015      	b.n	8002c28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bfc:	893b      	ldrh	r3, [r7, #8]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	69b9      	ldr	r1, [r7, #24]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f8d6 	bl	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e012      	b.n	8002c44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c1e:	893b      	ldrh	r3, [r7, #8]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f884 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	80002000 	.word	0x80002000

08002c50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	4608      	mov	r0, r1
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4603      	mov	r3, r0
 8002c60:	817b      	strh	r3, [r7, #10]
 8002c62:	460b      	mov	r3, r1
 8002c64:	813b      	strh	r3, [r7, #8]
 8002c66:	4613      	mov	r3, r2
 8002c68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	8979      	ldrh	r1, [r7, #10]
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <I2C_RequestMemoryRead+0xa4>)
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f9fe 	bl	8003078 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	69b9      	ldr	r1, [r7, #24]
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f89d 	bl	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e02c      	b.n	8002cea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c96:	893b      	ldrh	r3, [r7, #8]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca0:	e015      	b.n	8002cce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ca2:	893b      	ldrh	r3, [r7, #8]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f883 	bl	8002dc0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e012      	b.n	8002cea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc4:	893b      	ldrh	r3, [r7, #8]
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f831 	bl	8002d40 <I2C_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	80002000 	.word	0x80002000

08002cf8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d103      	bne.n	8002d16 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2200      	movs	r2, #0
 8002d14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d007      	beq.n	8002d34 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	619a      	str	r2, [r3, #24]
  }
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d50:	e022      	b.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d58:	d01e      	beq.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5a:	f7fe fe65 	bl	8001a28 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d302      	bcc.n	8002d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d113      	bne.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f043 0220 	orr.w	r2, r3, #32
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e00f      	b.n	8002db8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	699a      	ldr	r2, [r3, #24]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d0cd      	beq.n	8002d52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dcc:	e02c      	b.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 f870 	bl	8002eb8 <I2C_IsErrorOccurred>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e02a      	b.n	8002e38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d01e      	beq.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7fe fe1d 	bl	8001a28 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d1cb      	bne.n	8002dce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4c:	e028      	b.n	8002ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 f830 	bl	8002eb8 <I2C_IsErrorOccurred>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e026      	b.n	8002eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fe fde1 	bl	8001a28 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d113      	bne.n	8002ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f043 0220 	orr.w	r2, r3, #32
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e007      	b.n	8002eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d1cf      	bne.n	8002e4e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d068      	beq.n	8002fb6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2210      	movs	r2, #16
 8002eea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002eec:	e049      	b.n	8002f82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef4:	d045      	beq.n	8002f82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ef6:	f7fe fd97 	bl	8001a28 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d302      	bcc.n	8002f0c <I2C_IsErrorOccurred+0x54>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d13a      	bne.n	8002f82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2e:	d121      	bne.n	8002f74 <I2C_IsErrorOccurred+0xbc>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f36:	d01d      	beq.n	8002f74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d01a      	beq.n	8002f74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f4e:	f7fe fd6b 	bl	8001a28 <HAL_GetTick>
 8002f52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f54:	e00e      	b.n	8002f74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f56:	f7fe fd67 	bl	8001a28 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b19      	cmp	r3, #25
 8002f62:	d907      	bls.n	8002f74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002f72:	e006      	b.n	8002f82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b20      	cmp	r3, #32
 8002f80:	d1e9      	bne.n	8002f56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	f003 0320 	and.w	r3, r3, #32
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d003      	beq.n	8002f98 <I2C_IsErrorOccurred+0xe0>
 8002f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0aa      	beq.n	8002eee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	f043 0304 	orr.w	r3, r3, #4
 8002fae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00b      	beq.n	8002fe0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f043 0308 	orr.w	r3, r3, #8
 8002ff0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ffa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01c      	beq.n	8003066 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fe63 	bl	8002cf8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <I2C_IsErrorOccurred+0x1bc>)
 800303e:	400b      	ands	r3, r1
 8003040:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800306a:	4618      	mov	r0, r3
 800306c:	3728      	adds	r7, #40	; 0x28
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	817b      	strh	r3, [r7, #10]
 8003086:	4613      	mov	r3, r2
 8003088:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003090:	7a7b      	ldrb	r3, [r7, #9]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003098:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	0d5b      	lsrs	r3, r3, #21
 80030b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <I2C_TransferConfig+0x60>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	43db      	mvns	r3, r3
 80030bc:	ea02 0103 	and.w	r1, r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80030ca:	bf00      	nop
 80030cc:	371c      	adds	r7, #28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	03ff63ff 	.word	0x03ff63ff

080030dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d138      	bne.n	8003164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e032      	b.n	8003166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2224      	movs	r2, #36	; 0x24
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800312e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003160:	2300      	movs	r3, #0
 8003162:	e000      	b.n	8003166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003164:	2302      	movs	r3, #2
  }
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b20      	cmp	r3, #32
 8003186:	d139      	bne.n	80031fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003192:	2302      	movs	r3, #2
 8003194:	e033      	b.n	80031fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2224      	movs	r2, #36	; 0x24
 80031a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0201 	bic.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800320a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320c:	b08f      	sub	sp, #60	; 0x3c
 800320e:	af0a      	add	r7, sp, #40	; 0x28
 8003210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e116      	b.n	800344a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7fe fac6 	bl	80017c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2203      	movs	r2, #3
 8003240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f001 ff16 	bl	800508c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	687e      	ldr	r6, [r7, #4]
 8003268:	466d      	mov	r5, sp
 800326a:	f106 0410 	add.w	r4, r6, #16
 800326e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800327a:	e885 0003 	stmia.w	r5, {r0, r1}
 800327e:	1d33      	adds	r3, r6, #4
 8003280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003282:	6838      	ldr	r0, [r7, #0]
 8003284:	f001 feaa 	bl	8004fdc <USB_CoreInit>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0d7      	b.n	800344a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f001 ff04 	bl	80050ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
 80032aa:	e04a      	b.n	8003342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	333d      	adds	r3, #61	; 0x3d
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	333c      	adds	r3, #60	; 0x3c
 80032d0:	7bfa      	ldrb	r2, [r7, #15]
 80032d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	b298      	uxth	r0, r3
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3344      	adds	r3, #68	; 0x44
 80032e8:	4602      	mov	r2, r0
 80032ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3340      	adds	r3, #64	; 0x40
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3348      	adds	r3, #72	; 0x48
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	334c      	adds	r3, #76	; 0x4c
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	3354      	adds	r3, #84	; 0x54
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	3301      	adds	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d3af      	bcc.n	80032ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	e044      	b.n	80033dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	3301      	adds	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d3b5      	bcc.n	8003352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	687e      	ldr	r6, [r7, #4]
 80033ee:	466d      	mov	r5, sp
 80033f0:	f106 0410 	add.w	r4, r6, #16
 80033f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003400:	e885 0003 	stmia.w	r5, {r0, r1}
 8003404:	1d33      	adds	r3, r6, #4
 8003406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003408:	6838      	ldr	r0, [r7, #0]
 800340a:	f001 fe9d 	bl	8005148 <USB_DevInit>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e014      	b.n	800344a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2b01      	cmp	r3, #1
 8003436:	d102      	bne.n	800343e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f000 f80b 	bl	8003454 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 f85b 	bl	80054fe <USB_DevDisconnect>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003454 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_PCDEx_ActivateLPM+0x44>)
 8003484:	4313      	orrs	r3, r2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	10000003 	.word	0x10000003

0800349c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a0:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034aa:	6013      	str	r3, [r2, #0]
}
 80034ac:	bf00      	nop
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40007000 	.word	0x40007000

080034bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e291      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8087 	beq.w	80035ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034e0:	4b96      	ldr	r3, [pc, #600]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d00c      	beq.n	8003506 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ec:	4b93      	ldr	r3, [pc, #588]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d112      	bne.n	800351e <HAL_RCC_OscConfig+0x62>
 80034f8:	4b90      	ldr	r3, [pc, #576]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003504:	d10b      	bne.n	800351e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003506:	4b8d      	ldr	r3, [pc, #564]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d06c      	beq.n	80035ec <HAL_RCC_OscConfig+0x130>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d168      	bne.n	80035ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e26b      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x7a>
 8003528:	4b84      	ldr	r3, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a83      	ldr	r2, [pc, #524]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800352e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	e02e      	b.n	8003594 <HAL_RCC_OscConfig+0xd8>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x9c>
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7b      	ldr	r2, [pc, #492]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e01d      	b.n	8003594 <HAL_RCC_OscConfig+0xd8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d10c      	bne.n	800357c <HAL_RCC_OscConfig+0xc0>
 8003562:	4b76      	ldr	r3, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	4b73      	ldr	r3, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a72      	ldr	r2, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	e00b      	b.n	8003594 <HAL_RCC_OscConfig+0xd8>
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b6c      	ldr	r3, [pc, #432]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6b      	ldr	r2, [pc, #428]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe fa44 	bl	8001a28 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe fa40 	bl	8001a28 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e21f      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0xe8>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fa30 	bl	8001a28 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe fa2c 	bl	8001a28 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e20b      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	4b57      	ldr	r3, [pc, #348]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x110>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d069      	beq.n	80036ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035fa:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003606:	4b4d      	ldr	r3, [pc, #308]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x190>
 8003612:	4b4a      	ldr	r3, [pc, #296]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_RCC_OscConfig+0x17a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d001      	beq.n	8003636 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e1df      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	493d      	ldr	r1, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	e040      	b.n	80036ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d023      	beq.n	800369c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003654:	4b39      	ldr	r3, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a38      	ldr	r2, [pc, #224]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe f9e2 	bl	8001a28 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003668:	f7fe f9de 	bl	8001a28 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e1bd      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367a:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4929      	ldr	r1, [pc, #164]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
 800369a:	e018      	b.n	80036ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a26      	ldr	r2, [pc, #152]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe f9be 	bl	8001a28 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fe f9ba 	bl	8001a28 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e199      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d038      	beq.n	800374c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d019      	beq.n	8003716 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x280>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fe f99b 	bl	8001a28 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fe f997 	bl	8001a28 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e176      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003708:	4b0c      	ldr	r3, [pc, #48]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x23a>
 8003714:	e01a      	b.n	800374c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x280>)
 8003718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_RCC_OscConfig+0x280>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fe f981 	bl	8001a28 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe f97d 	bl	8001a28 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d903      	bls.n	8003740 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e15c      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
 800373c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b91      	ldr	r3, [pc, #580]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ee      	bne.n	800372a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a4 	beq.w	80038a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b8b      	ldr	r3, [pc, #556]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a87      	ldr	r2, [pc, #540]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003782:	4b82      	ldr	r3, [pc, #520]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800378e:	4b7f      	ldr	r3, [pc, #508]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a7e      	ldr	r2, [pc, #504]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7fe f945 	bl	8001a28 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7fe f941 	bl	8001a28 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b64      	cmp	r3, #100	; 0x64
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e120      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b4:	4b75      	ldr	r3, [pc, #468]	; (800398c <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x31a>
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
 80037d4:	e02d      	b.n	8003832 <HAL_RCC_OscConfig+0x376>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x33c>
 80037de:	4b6a      	ldr	r3, [pc, #424]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a69      	ldr	r2, [pc, #420]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ea:	4b67      	ldr	r3, [pc, #412]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a66      	ldr	r2, [pc, #408]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80037f0:	f023 0304 	bic.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	e01c      	b.n	8003832 <HAL_RCC_OscConfig+0x376>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_OscConfig+0x35e>
 8003800:	4b61      	ldr	r3, [pc, #388]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a60      	ldr	r2, [pc, #384]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003806:	f043 0304 	orr.w	r3, r3, #4
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b5e      	ldr	r3, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a5d      	ldr	r2, [pc, #372]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
 8003818:	e00b      	b.n	8003832 <HAL_RCC_OscConfig+0x376>
 800381a:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	4a5a      	ldr	r2, [pc, #360]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	6713      	str	r3, [r2, #112]	; 0x70
 8003826:	4b58      	ldr	r3, [pc, #352]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a57      	ldr	r2, [pc, #348]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800382c:	f023 0304 	bic.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d015      	beq.n	8003866 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe f8f5 	bl	8001a28 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003840:	e00a      	b.n	8003858 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fe f8f1 	bl	8001a28 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e0ce      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003858:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ee      	beq.n	8003842 <HAL_RCC_OscConfig+0x386>
 8003864:	e014      	b.n	8003890 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fe f8df 	bl	8001a28 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fe f8db 	bl	8001a28 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0b8      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003884:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1ee      	bne.n	800386e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003890:	7dfb      	ldrb	r3, [r7, #23]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003896:	4b3c      	ldr	r3, [pc, #240]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a3b      	ldr	r2, [pc, #236]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80a4 	beq.w	80039f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038ac:	4b36      	ldr	r3, [pc, #216]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 030c 	and.w	r3, r3, #12
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d06b      	beq.n	8003990 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d149      	bne.n	8003954 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a30      	ldr	r2, [pc, #192]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80038c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038cc:	f7fe f8ac 	bl	8001a28 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fe f8a8 	bl	8001a28 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e087      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e6:	4b28      	ldr	r3, [pc, #160]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	019b      	lsls	r3, r3, #6
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	041b      	lsls	r3, r3, #16
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	4313      	orrs	r3, r2
 8003918:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800391e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe f87c 	bl	8001a28 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe f878 	bl	8001a28 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e057      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x478>
 8003952:	e04f      	b.n	80039f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0b      	ldr	r2, [pc, #44]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe f862 	bl	8001a28 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe f85e 	bl	8001a28 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e03d      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b03      	ldr	r3, [pc, #12]	; (8003988 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x4ac>
 8003986:	e035      	b.n	80039f4 <HAL_RCC_OscConfig+0x538>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x544>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d028      	beq.n	80039f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d121      	bne.n	80039f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d11a      	bne.n	80039f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d111      	bne.n	80039f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0d0      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d910      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b67      	ldr	r3, [pc, #412]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 020f 	bic.w	r2, r3, #15
 8003a32:	4965      	ldr	r1, [pc, #404]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0b8      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	494d      	ldr	r1, [pc, #308]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d040      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d115      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e073      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06b      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4936      	ldr	r1, [pc, #216]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fd ff96 	bl	8001a28 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd ff92 	bl	8001a28 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e053      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d210      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 020f 	bic.w	r2, r3, #15
 8003b3e:	4922      	ldr	r1, [pc, #136]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e032      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4916      	ldr	r1, [pc, #88]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490e      	ldr	r1, [pc, #56]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b96:	f000 f821 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	490a      	ldr	r1, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fef2 	bl	80019a0 <HAL_InitTick>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	08005634 	.word	0x08005634
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be0:	b094      	sub	sp, #80	; 0x50
 8003be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	647b      	str	r3, [r7, #68]	; 0x44
 8003be8:	2300      	movs	r3, #0
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bec:	2300      	movs	r3, #0
 8003bee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf4:	4b79      	ldr	r3, [pc, #484]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d00d      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x40>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	f200 80e1 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x34>
 8003c0a:	2b04      	cmp	r3, #4
 8003c0c:	d003      	beq.n	8003c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c0e:	e0db      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b73      	ldr	r3, [pc, #460]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c14:	e0db      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c16:	4b73      	ldr	r3, [pc, #460]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1a:	e0d8      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1c:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c24:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c26:	4b6d      	ldr	r3, [pc, #436]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	2200      	movs	r2, #0
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	633b      	str	r3, [r7, #48]	; 0x30
 8003c46:	2300      	movs	r3, #0
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c4e:	4622      	mov	r2, r4
 8003c50:	462b      	mov	r3, r5
 8003c52:	f04f 0000 	mov.w	r0, #0
 8003c56:	f04f 0100 	mov.w	r1, #0
 8003c5a:	0159      	lsls	r1, r3, #5
 8003c5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c60:	0150      	lsls	r0, r2, #5
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4621      	mov	r1, r4
 8003c68:	1a51      	subs	r1, r2, r1
 8003c6a:	6139      	str	r1, [r7, #16]
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c80:	4659      	mov	r1, fp
 8003c82:	018b      	lsls	r3, r1, #6
 8003c84:	4651      	mov	r1, sl
 8003c86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c8a:	4651      	mov	r1, sl
 8003c8c:	018a      	lsls	r2, r1, #6
 8003c8e:	4651      	mov	r1, sl
 8003c90:	ebb2 0801 	subs.w	r8, r2, r1
 8003c94:	4659      	mov	r1, fp
 8003c96:	eb63 0901 	sbc.w	r9, r3, r1
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cae:	4690      	mov	r8, r2
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	eb18 0303 	adds.w	r3, r8, r3
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	eb49 0303 	adc.w	r3, r9, r3
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cce:	4629      	mov	r1, r5
 8003cd0:	024b      	lsls	r3, r1, #9
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cd8:	4621      	mov	r1, r4
 8003cda:	024a      	lsls	r2, r1, #9
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ce8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cec:	f7fc feaa 	bl	8000a44 <__aeabi_uldivmod>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cf8:	e058      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfa:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	099b      	lsrs	r3, r3, #6
 8003d00:	2200      	movs	r2, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	4611      	mov	r1, r2
 8003d06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d0a:	623b      	str	r3, [r7, #32]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	f04f 0000 	mov.w	r0, #0
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	0159      	lsls	r1, r3, #5
 8003d22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d26:	0150      	lsls	r0, r2, #5
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d32:	4649      	mov	r1, r9
 8003d34:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d4c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d50:	eb63 050b 	sbc.w	r5, r3, fp
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	00eb      	lsls	r3, r5, #3
 8003d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d62:	00e2      	lsls	r2, r4, #3
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	4643      	mov	r3, r8
 8003d6a:	18e3      	adds	r3, r4, r3
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	464b      	mov	r3, r9
 8003d70:	eb45 0303 	adc.w	r3, r5, r3
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d82:	4629      	mov	r1, r5
 8003d84:	028b      	lsls	r3, r1, #10
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	028a      	lsls	r2, r1, #10
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d96:	2200      	movs	r2, #0
 8003d98:	61bb      	str	r3, [r7, #24]
 8003d9a:	61fa      	str	r2, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	f7fc fe50 	bl	8000a44 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x200>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3750      	adds	r7, #80	; 0x50
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	007a1200 	.word	0x007a1200

08003de8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000000 	.word	0x20000000

08003e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e04:	f7ff fff0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0a9b      	lsrs	r3, r3, #10
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4903      	ldr	r1, [pc, #12]	; (8003e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40023800 	.word	0x40023800
 8003e24:	08005644 	.word	0x08005644

08003e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e2c:	f7ff ffdc 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0b5b      	lsrs	r3, r3, #13
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08005644 	.word	0x08005644

08003e50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d012      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e78:	4b69      	ldr	r3, [pc, #420]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	4a68      	ldr	r2, [pc, #416]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e82:	6093      	str	r3, [r2, #8]
 8003e84:	4b66      	ldr	r3, [pc, #408]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8c:	4964      	ldr	r1, [pc, #400]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d017      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eaa:	4b5d      	ldr	r3, [pc, #372]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	4959      	ldr	r1, [pc, #356]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d017      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ee6:	4b4e      	ldr	r3, [pc, #312]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	494a      	ldr	r1, [pc, #296]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f04:	d101      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f22:	2301      	movs	r3, #1
 8003f24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 808b 	beq.w	800404a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f34:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4a39      	ldr	r2, [pc, #228]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f40:	4b37      	ldr	r3, [pc, #220]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a34      	ldr	r2, [pc, #208]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd fd66 	bl	8001a28 <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f60:	f7fd fd62 	bl	8001a28 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b64      	cmp	r3, #100	; 0x64
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e357      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f72:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7e:	4b28      	ldr	r3, [pc, #160]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d035      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d02e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f9c:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb2:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fbe:	4a18      	ldr	r2, [pc, #96]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fc4:	4b16      	ldr	r3, [pc, #88]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d114      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fd2a 	bl	8001a28 <HAL_GetTick>
 8003fd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fd fd26 	bl	8001a28 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e319      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ee      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004006:	d111      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004016:	400b      	ands	r3, r1
 8004018:	4901      	ldr	r1, [pc, #4]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
 800401e:	e00b      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004020:	40023800 	.word	0x40023800
 8004024:	40007000 	.word	0x40007000
 8004028:	0ffffcff 	.word	0x0ffffcff
 800402c:	4baa      	ldr	r3, [pc, #680]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4aa9      	ldr	r2, [pc, #676]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004032:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	4ba7      	ldr	r3, [pc, #668]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	49a4      	ldr	r1, [pc, #656]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004046:	4313      	orrs	r3, r2
 8004048:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d010      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004056:	4ba0      	ldr	r3, [pc, #640]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800405c:	4a9e      	ldr	r2, [pc, #632]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004066:	4b9c      	ldr	r3, [pc, #624]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004068:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	4999      	ldr	r1, [pc, #612]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004092:	4991      	ldr	r1, [pc, #580]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040b4:	4988      	ldr	r1, [pc, #544]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d00a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040c8:	4b83      	ldr	r3, [pc, #524]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d6:	4980      	ldr	r1, [pc, #512]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ea:	4b7b      	ldr	r3, [pc, #492]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4977      	ldr	r1, [pc, #476]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410c:	4b72      	ldr	r3, [pc, #456]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	496f      	ldr	r1, [pc, #444]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800412e:	4b6a      	ldr	r3, [pc, #424]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004134:	f023 020c 	bic.w	r2, r3, #12
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800413c:	4966      	ldr	r1, [pc, #408]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004150:	4b61      	ldr	r3, [pc, #388]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415e:	495e      	ldr	r1, [pc, #376]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004172:	4b59      	ldr	r3, [pc, #356]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004180:	4955      	ldr	r1, [pc, #340]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004194:	4b50      	ldr	r3, [pc, #320]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a2:	494d      	ldr	r1, [pc, #308]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041b6:	4b48      	ldr	r3, [pc, #288]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	4944      	ldr	r1, [pc, #272]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041d8:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	493c      	ldr	r1, [pc, #240]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	4933      	ldr	r1, [pc, #204]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800421c:	4b2e      	ldr	r3, [pc, #184]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800422a:	492b      	ldr	r1, [pc, #172]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d011      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800423e:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004244:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424c:	4922      	ldr	r1, [pc, #136]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425c:	d101      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800425e:	2301      	movs	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800426e:	2301      	movs	r3, #1
 8004270:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800428c:	4912      	ldr	r1, [pc, #72]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00b      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b0:	4909      	ldr	r1, [pc, #36]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d006      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80d9 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a01      	ldr	r2, [pc, #4]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042d6:	e001      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80042d8:	40023800 	.word	0x40023800
 80042dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042de:	f7fd fba3 	bl	8001a28 <HAL_GetTick>
 80042e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042e4:	e008      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042e6:	f7fd fb9f 	bl	8001a28 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b64      	cmp	r3, #100	; 0x64
 80042f2:	d901      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e194      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042f8:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f0      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d021      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004314:	2b00      	cmp	r3, #0
 8004316:	d11d      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004318:	4b64      	ldr	r3, [pc, #400]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004326:	4b61      	ldr	r3, [pc, #388]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800432c:	0e1b      	lsrs	r3, r3, #24
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	019a      	lsls	r2, r3, #6
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	041b      	lsls	r3, r3, #16
 800433e:	431a      	orrs	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	071b      	lsls	r3, r3, #28
 800434c:	4957      	ldr	r1, [pc, #348]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004372:	2b00      	cmp	r3, #0
 8004374:	d02e      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437e:	d129      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004380:	4b4a      	ldr	r3, [pc, #296]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004386:	0c1b      	lsrs	r3, r3, #16
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800438e:	4b47      	ldr	r3, [pc, #284]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004394:	0f1b      	lsrs	r3, r3, #28
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	019a      	lsls	r2, r3, #6
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	431a      	orrs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	071b      	lsls	r3, r3, #28
 80043b4:	493d      	ldr	r1, [pc, #244]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043bc:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c2:	f023 021f 	bic.w	r2, r3, #31
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	3b01      	subs	r3, #1
 80043cc:	4937      	ldr	r1, [pc, #220]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043e0:	4b32      	ldr	r3, [pc, #200]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	0e1b      	lsrs	r3, r3, #24
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f4:	0f1b      	lsrs	r3, r3, #28
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	019a      	lsls	r2, r3, #6
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	431a      	orrs	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	061b      	lsls	r3, r3, #24
 800440e:	431a      	orrs	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	071b      	lsls	r3, r3, #28
 8004414:	4925      	ldr	r1, [pc, #148]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d011      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	019a      	lsls	r2, r3, #6
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	041b      	lsls	r3, r3, #16
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	061b      	lsls	r3, r3, #24
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	071b      	lsls	r3, r3, #28
 8004444:	4919      	ldr	r1, [pc, #100]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004458:	f7fd fae6 	bl	8001a28 <HAL_GetTick>
 800445c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004460:	f7fd fae2 	bl	8001a28 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0d7      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b01      	cmp	r3, #1
 8004482:	f040 80cd 	bne.w	8004620 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004492:	f7fd fac9 	bl	8001a28 <HAL_GetTick>
 8004496:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004498:	e00a      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800449a:	f7fd fac5 	bl	8001a28 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b64      	cmp	r3, #100	; 0x64
 80044a6:	d903      	bls.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e0ba      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80044ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044b0:	4b5e      	ldr	r3, [pc, #376]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044bc:	d0ed      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d02e      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d12a      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044e6:	4b51      	ldr	r3, [pc, #324]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044f4:	4b4d      	ldr	r3, [pc, #308]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	0f1b      	lsrs	r3, r3, #28
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	019a      	lsls	r2, r3, #6
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	041b      	lsls	r3, r3, #16
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	061b      	lsls	r3, r3, #24
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	071b      	lsls	r3, r3, #28
 800451a:	4944      	ldr	r1, [pc, #272]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800451c:	4313      	orrs	r3, r2
 800451e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004522:	4b42      	ldr	r3, [pc, #264]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004528:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	3b01      	subs	r3, #1
 8004532:	021b      	lsls	r3, r3, #8
 8004534:	493d      	ldr	r1, [pc, #244]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d022      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004550:	d11d      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004552:	4b36      	ldr	r3, [pc, #216]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004558:	0e1b      	lsrs	r3, r3, #24
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004560:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	0f1b      	lsrs	r3, r3, #28
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	019a      	lsls	r2, r3, #6
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	431a      	orrs	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	061b      	lsls	r3, r3, #24
 8004580:	431a      	orrs	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	071b      	lsls	r3, r3, #28
 8004586:	4929      	ldr	r1, [pc, #164]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d028      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800459a:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800459c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a0:	0e1b      	lsrs	r3, r3, #24
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	f003 0303 	and.w	r3, r3, #3
 80045b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	019a      	lsls	r2, r3, #6
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	041b      	lsls	r3, r3, #16
 80045c0:	431a      	orrs	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	4917      	ldr	r1, [pc, #92]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	4911      	ldr	r1, [pc, #68]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80045ec:	4b0f      	ldr	r3, [pc, #60]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a0e      	ldr	r2, [pc, #56]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fd fa16 	bl	8001a28 <HAL_GetTick>
 80045fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004600:	f7fd fa12 	bl	8001a28 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	; 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e007      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800461a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461e:	d1ef      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800

08004630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e040      	b.n	80046c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd f858 	bl	8001708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8b0 	bl	80047d4 <UART_SetConfig>
 8004674:	4603      	mov	r3, r0
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e022      	b.n	80046c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fb08 	bl	8004c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800469a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fb8f 	bl	8004de0 <UART_CheckIdleState>
 80046c2:	4603      	mov	r3, r0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e0:	2b20      	cmp	r3, #32
 80046e2:	d171      	bne.n	80047c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_UART_Transmit+0x24>
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e06a      	b.n	80047ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2221      	movs	r2, #33	; 0x21
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004702:	f7fd f991 	bl	8001a28 <HAL_GetTick>
 8004706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d108      	bne.n	8004734 <HAL_UART_Transmit+0x68>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	e003      	b.n	800473c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800473c:	e02c      	b.n	8004798 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2200      	movs	r2, #0
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 fb80 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e038      	b.n	80047ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800476c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	3302      	adds	r3, #2
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e007      	b.n	8004786 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	3301      	adds	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1cc      	bne.n	800473e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	2140      	movs	r1, #64	; 0x40
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fb4d 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e005      	b.n	80047ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	4ba6      	ldr	r3, [pc, #664]	; (8004a98 <UART_SetConfig+0x2c4>)
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	6979      	ldr	r1, [r7, #20]
 8004808:	430b      	orrs	r3, r1
 800480a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	430a      	orrs	r2, r1
 8004844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a94      	ldr	r2, [pc, #592]	; (8004a9c <UART_SetConfig+0x2c8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d120      	bne.n	8004892 <UART_SetConfig+0xbe>
 8004850:	4b93      	ldr	r3, [pc, #588]	; (8004aa0 <UART_SetConfig+0x2cc>)
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d816      	bhi.n	800488c <UART_SetConfig+0xb8>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x90>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004875 	.word	0x08004875
 8004868:	08004881 	.word	0x08004881
 800486c:	0800487b 	.word	0x0800487b
 8004870:	08004887 	.word	0x08004887
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e150      	b.n	8004b1c <UART_SetConfig+0x348>
 800487a:	2302      	movs	r3, #2
 800487c:	77fb      	strb	r3, [r7, #31]
 800487e:	e14d      	b.n	8004b1c <UART_SetConfig+0x348>
 8004880:	2304      	movs	r3, #4
 8004882:	77fb      	strb	r3, [r7, #31]
 8004884:	e14a      	b.n	8004b1c <UART_SetConfig+0x348>
 8004886:	2308      	movs	r3, #8
 8004888:	77fb      	strb	r3, [r7, #31]
 800488a:	e147      	b.n	8004b1c <UART_SetConfig+0x348>
 800488c:	2310      	movs	r3, #16
 800488e:	77fb      	strb	r3, [r7, #31]
 8004890:	e144      	b.n	8004b1c <UART_SetConfig+0x348>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <UART_SetConfig+0x2d0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d132      	bne.n	8004902 <UART_SetConfig+0x12e>
 800489c:	4b80      	ldr	r3, [pc, #512]	; (8004aa0 <UART_SetConfig+0x2cc>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b0c      	cmp	r3, #12
 80048a8:	d828      	bhi.n	80048fc <UART_SetConfig+0x128>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0xdc>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048e5 	.word	0x080048e5
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048fd 	.word	0x080048fd
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048f1 	.word	0x080048f1
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048eb 	.word	0x080048eb
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	080048fd 	.word	0x080048fd
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	080048f7 	.word	0x080048f7
 80048e4:	2300      	movs	r3, #0
 80048e6:	77fb      	strb	r3, [r7, #31]
 80048e8:	e118      	b.n	8004b1c <UART_SetConfig+0x348>
 80048ea:	2302      	movs	r3, #2
 80048ec:	77fb      	strb	r3, [r7, #31]
 80048ee:	e115      	b.n	8004b1c <UART_SetConfig+0x348>
 80048f0:	2304      	movs	r3, #4
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e112      	b.n	8004b1c <UART_SetConfig+0x348>
 80048f6:	2308      	movs	r3, #8
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e10f      	b.n	8004b1c <UART_SetConfig+0x348>
 80048fc:	2310      	movs	r3, #16
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e10c      	b.n	8004b1c <UART_SetConfig+0x348>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a68      	ldr	r2, [pc, #416]	; (8004aa8 <UART_SetConfig+0x2d4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d120      	bne.n	800494e <UART_SetConfig+0x17a>
 800490c:	4b64      	ldr	r3, [pc, #400]	; (8004aa0 <UART_SetConfig+0x2cc>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004912:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004916:	2b30      	cmp	r3, #48	; 0x30
 8004918:	d013      	beq.n	8004942 <UART_SetConfig+0x16e>
 800491a:	2b30      	cmp	r3, #48	; 0x30
 800491c:	d814      	bhi.n	8004948 <UART_SetConfig+0x174>
 800491e:	2b20      	cmp	r3, #32
 8004920:	d009      	beq.n	8004936 <UART_SetConfig+0x162>
 8004922:	2b20      	cmp	r3, #32
 8004924:	d810      	bhi.n	8004948 <UART_SetConfig+0x174>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <UART_SetConfig+0x15c>
 800492a:	2b10      	cmp	r3, #16
 800492c:	d006      	beq.n	800493c <UART_SetConfig+0x168>
 800492e:	e00b      	b.n	8004948 <UART_SetConfig+0x174>
 8004930:	2300      	movs	r3, #0
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e0f2      	b.n	8004b1c <UART_SetConfig+0x348>
 8004936:	2302      	movs	r3, #2
 8004938:	77fb      	strb	r3, [r7, #31]
 800493a:	e0ef      	b.n	8004b1c <UART_SetConfig+0x348>
 800493c:	2304      	movs	r3, #4
 800493e:	77fb      	strb	r3, [r7, #31]
 8004940:	e0ec      	b.n	8004b1c <UART_SetConfig+0x348>
 8004942:	2308      	movs	r3, #8
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e0e9      	b.n	8004b1c <UART_SetConfig+0x348>
 8004948:	2310      	movs	r3, #16
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e0e6      	b.n	8004b1c <UART_SetConfig+0x348>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a56      	ldr	r2, [pc, #344]	; (8004aac <UART_SetConfig+0x2d8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d120      	bne.n	800499a <UART_SetConfig+0x1c6>
 8004958:	4b51      	ldr	r3, [pc, #324]	; (8004aa0 <UART_SetConfig+0x2cc>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004962:	2bc0      	cmp	r3, #192	; 0xc0
 8004964:	d013      	beq.n	800498e <UART_SetConfig+0x1ba>
 8004966:	2bc0      	cmp	r3, #192	; 0xc0
 8004968:	d814      	bhi.n	8004994 <UART_SetConfig+0x1c0>
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d009      	beq.n	8004982 <UART_SetConfig+0x1ae>
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d810      	bhi.n	8004994 <UART_SetConfig+0x1c0>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <UART_SetConfig+0x1a8>
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d006      	beq.n	8004988 <UART_SetConfig+0x1b4>
 800497a:	e00b      	b.n	8004994 <UART_SetConfig+0x1c0>
 800497c:	2300      	movs	r3, #0
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e0cc      	b.n	8004b1c <UART_SetConfig+0x348>
 8004982:	2302      	movs	r3, #2
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e0c9      	b.n	8004b1c <UART_SetConfig+0x348>
 8004988:	2304      	movs	r3, #4
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e0c6      	b.n	8004b1c <UART_SetConfig+0x348>
 800498e:	2308      	movs	r3, #8
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e0c3      	b.n	8004b1c <UART_SetConfig+0x348>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e0c0      	b.n	8004b1c <UART_SetConfig+0x348>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a44      	ldr	r2, [pc, #272]	; (8004ab0 <UART_SetConfig+0x2dc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d125      	bne.n	80049f0 <UART_SetConfig+0x21c>
 80049a4:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <UART_SetConfig+0x2cc>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b2:	d017      	beq.n	80049e4 <UART_SetConfig+0x210>
 80049b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b8:	d817      	bhi.n	80049ea <UART_SetConfig+0x216>
 80049ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049be:	d00b      	beq.n	80049d8 <UART_SetConfig+0x204>
 80049c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c4:	d811      	bhi.n	80049ea <UART_SetConfig+0x216>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <UART_SetConfig+0x1fe>
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d006      	beq.n	80049de <UART_SetConfig+0x20a>
 80049d0:	e00b      	b.n	80049ea <UART_SetConfig+0x216>
 80049d2:	2300      	movs	r3, #0
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e0a1      	b.n	8004b1c <UART_SetConfig+0x348>
 80049d8:	2302      	movs	r3, #2
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e09e      	b.n	8004b1c <UART_SetConfig+0x348>
 80049de:	2304      	movs	r3, #4
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e09b      	b.n	8004b1c <UART_SetConfig+0x348>
 80049e4:	2308      	movs	r3, #8
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e098      	b.n	8004b1c <UART_SetConfig+0x348>
 80049ea:	2310      	movs	r3, #16
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e095      	b.n	8004b1c <UART_SetConfig+0x348>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <UART_SetConfig+0x2e0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d125      	bne.n	8004a46 <UART_SetConfig+0x272>
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <UART_SetConfig+0x2cc>)
 80049fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a08:	d017      	beq.n	8004a3a <UART_SetConfig+0x266>
 8004a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0e:	d817      	bhi.n	8004a40 <UART_SetConfig+0x26c>
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	d00b      	beq.n	8004a2e <UART_SetConfig+0x25a>
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d811      	bhi.n	8004a40 <UART_SetConfig+0x26c>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <UART_SetConfig+0x254>
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d006      	beq.n	8004a34 <UART_SetConfig+0x260>
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x26c>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e076      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e073      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a34:	2304      	movs	r3, #4
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e070      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e06d      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e06a      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <UART_SetConfig+0x2e4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d138      	bne.n	8004ac2 <UART_SetConfig+0x2ee>
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <UART_SetConfig+0x2cc>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5e:	d017      	beq.n	8004a90 <UART_SetConfig+0x2bc>
 8004a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a64:	d82a      	bhi.n	8004abc <UART_SetConfig+0x2e8>
 8004a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6a:	d00b      	beq.n	8004a84 <UART_SetConfig+0x2b0>
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a70:	d824      	bhi.n	8004abc <UART_SetConfig+0x2e8>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <UART_SetConfig+0x2aa>
 8004a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7a:	d006      	beq.n	8004a8a <UART_SetConfig+0x2b6>
 8004a7c:	e01e      	b.n	8004abc <UART_SetConfig+0x2e8>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	77fb      	strb	r3, [r7, #31]
 8004a82:	e04b      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a84:	2302      	movs	r3, #2
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e048      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a8a:	2304      	movs	r3, #4
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e045      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a90:	2308      	movs	r3, #8
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e042      	b.n	8004b1c <UART_SetConfig+0x348>
 8004a96:	bf00      	nop
 8004a98:	efff69f3 	.word	0xefff69f3
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40004400 	.word	0x40004400
 8004aa8:	40004800 	.word	0x40004800
 8004aac:	40004c00 	.word	0x40004c00
 8004ab0:	40005000 	.word	0x40005000
 8004ab4:	40011400 	.word	0x40011400
 8004ab8:	40007800 	.word	0x40007800
 8004abc:	2310      	movs	r3, #16
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e02c      	b.n	8004b1c <UART_SetConfig+0x348>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a72      	ldr	r2, [pc, #456]	; (8004c90 <UART_SetConfig+0x4bc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d125      	bne.n	8004b18 <UART_SetConfig+0x344>
 8004acc:	4b71      	ldr	r3, [pc, #452]	; (8004c94 <UART_SetConfig+0x4c0>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ada:	d017      	beq.n	8004b0c <UART_SetConfig+0x338>
 8004adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ae0:	d817      	bhi.n	8004b12 <UART_SetConfig+0x33e>
 8004ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae6:	d00b      	beq.n	8004b00 <UART_SetConfig+0x32c>
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	d811      	bhi.n	8004b12 <UART_SetConfig+0x33e>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <UART_SetConfig+0x326>
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af6:	d006      	beq.n	8004b06 <UART_SetConfig+0x332>
 8004af8:	e00b      	b.n	8004b12 <UART_SetConfig+0x33e>
 8004afa:	2300      	movs	r3, #0
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e00d      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b00:	2302      	movs	r3, #2
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e00a      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b06:	2304      	movs	r3, #4
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e007      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e004      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b12:	2310      	movs	r3, #16
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e001      	b.n	8004b1c <UART_SetConfig+0x348>
 8004b18:	2310      	movs	r3, #16
 8004b1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b24:	d15b      	bne.n	8004bde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b26:	7ffb      	ldrb	r3, [r7, #31]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d828      	bhi.n	8004b7e <UART_SetConfig+0x3aa>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x360>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7ff f952 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61b8      	str	r0, [r7, #24]
        break;
 8004b5e:	e013      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7ff f962 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61b8      	str	r0, [r7, #24]
        break;
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <UART_SetConfig+0x4c4>)
 8004b6a:	61bb      	str	r3, [r7, #24]
        break;
 8004b6c:	e00c      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7ff f835 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8004b72:	61b8      	str	r0, [r7, #24]
        break;
 8004b74:	e008      	b.n	8004b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b7a:	61bb      	str	r3, [r7, #24]
        break;
 8004b7c:	e004      	b.n	8004b88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77bb      	strb	r3, [r7, #30]
        break;
 8004b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d074      	beq.n	8004c78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	005a      	lsls	r2, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	441a      	add	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d916      	bls.n	8004bd8 <UART_SetConfig+0x404>
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb0:	d212      	bcs.n	8004bd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f023 030f 	bic.w	r3, r3, #15
 8004bba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	89fa      	ldrh	r2, [r7, #14]
 8004bd4:	60da      	str	r2, [r3, #12]
 8004bd6:	e04f      	b.n	8004c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	77bb      	strb	r3, [r7, #30]
 8004bdc:	e04c      	b.n	8004c78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bde:	7ffb      	ldrb	r3, [r7, #31]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d828      	bhi.n	8004c36 <UART_SetConfig+0x462>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <UART_SetConfig+0x418>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c10:	f7ff f8f6 	bl	8003e00 <HAL_RCC_GetPCLK1Freq>
 8004c14:	61b8      	str	r0, [r7, #24]
        break;
 8004c16:	e013      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7ff f906 	bl	8003e28 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	61b8      	str	r0, [r7, #24]
        break;
 8004c1e:	e00f      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b1d      	ldr	r3, [pc, #116]	; (8004c98 <UART_SetConfig+0x4c4>)
 8004c22:	61bb      	str	r3, [r7, #24]
        break;
 8004c24:	e00c      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7fe ffd9 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8004c2a:	61b8      	str	r0, [r7, #24]
        break;
 8004c2c:	e008      	b.n	8004c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e004      	b.n	8004c40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d018      	beq.n	8004c78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	085a      	lsrs	r2, r3, #1
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	441a      	add	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b0f      	cmp	r3, #15
 8004c5e:	d909      	bls.n	8004c74 <UART_SetConfig+0x4a0>
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c66:	d205      	bcs.n	8004c74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60da      	str	r2, [r3, #12]
 8004c72:	e001      	b.n	8004c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c84:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3720      	adds	r7, #32
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40007c00 	.word	0x40007c00
 8004c94:	40023800 	.word	0x40023800
 8004c98:	00f42400 	.word	0x00f42400

08004c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	f003 0308 	and.w	r3, r3, #8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d9a:	d10a      	bne.n	8004db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df0:	f7fc fe1a 	bl	8001a28 <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d10e      	bne.n	8004e22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f81b 	bl	8004e4e <UART_WaitOnFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e011      	b.n	8004e46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b09c      	sub	sp, #112	; 0x70
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	60f8      	str	r0, [r7, #12]
 8004e56:	60b9      	str	r1, [r7, #8]
 8004e58:	603b      	str	r3, [r7, #0]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5e:	e0a7      	b.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e66:	f000 80a3 	beq.w	8004fb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fc fddd 	bl	8001a28 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d13f      	bne.n	8004f00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e94:	667b      	str	r3, [r7, #100]	; 0x64
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ea4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e6      	bne.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3308      	adds	r3, #8
 8004ed0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ed2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ed4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ed8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e5      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e068      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d050      	beq.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1c:	d148      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	e853 3f00 	ldrex	r3, [r3]
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
 8004f48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e6      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f023 0301 	bic.w	r3, r3, #1
 8004f70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3308      	adds	r3, #8
 8004f78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f7a:	623a      	str	r2, [r7, #32]
 8004f7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	69f9      	ldr	r1, [r7, #28]
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e5      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e010      	b.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	69da      	ldr	r2, [r3, #28]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	f43f af48 	beq.w	8004e60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3770      	adds	r7, #112	; 0x70
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
	...

08004fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fdc:	b084      	sub	sp, #16
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	f107 001c 	add.w	r0, r7, #28
 8004fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d120      	bne.n	8005036 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	4b20      	ldr	r3, [pc, #128]	; (8005088 <USB_CoreInit+0xac>)
 8005006:	4013      	ands	r3, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501a:	2b01      	cmp	r3, #1
 800501c:	d105      	bne.n	800502a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa96 	bl	800555c <USB_CoreReset>
 8005030:	4603      	mov	r3, r0
 8005032:	73fb      	strb	r3, [r7, #15]
 8005034:	e010      	b.n	8005058 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fa8a 	bl	800555c <USB_CoreReset>
 8005048:	4603      	mov	r3, r0
 800504a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b01      	cmp	r3, #1
 800505c:	d10b      	bne.n	8005076 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0206 	orr.w	r2, r3, #6
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005076:	7bfb      	ldrb	r3, [r7, #15]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005082:	b004      	add	sp, #16
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	ffbdffbf 	.word	0xffbdffbf

0800508c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 0201 	bic.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050ca:	78fb      	ldrb	r3, [r7, #3]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d115      	bne.n	80050fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050dc:	2001      	movs	r0, #1
 80050de:	f7fc fcaf 	bl	8001a40 <HAL_Delay>
      ms++;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	3301      	adds	r3, #1
 80050e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fa29 	bl	8005540 <USB_GetMode>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d01e      	beq.n	8005132 <USB_SetCurrentMode+0x84>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b31      	cmp	r3, #49	; 0x31
 80050f8:	d9f0      	bls.n	80050dc <USB_SetCurrentMode+0x2e>
 80050fa:	e01a      	b.n	8005132 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d115      	bne.n	800512e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800510e:	2001      	movs	r0, #1
 8005110:	f7fc fc96 	bl	8001a40 <HAL_Delay>
      ms++;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa10 	bl	8005540 <USB_GetMode>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <USB_SetCurrentMode+0x84>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b31      	cmp	r3, #49	; 0x31
 800512a:	d9f0      	bls.n	800510e <USB_SetCurrentMode+0x60>
 800512c:	e001      	b.n	8005132 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e005      	b.n	800513e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b32      	cmp	r3, #50	; 0x32
 8005136:	d101      	bne.n	800513c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e000      	b.n	800513e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005148:	b084      	sub	sp, #16
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005156:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]
 8005166:	e009      	b.n	800517c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3340      	adds	r3, #64	; 0x40
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	2200      	movs	r2, #0
 8005174:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	3301      	adds	r3, #1
 800517a:	613b      	str	r3, [r7, #16]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	2b0e      	cmp	r3, #14
 8005180:	d9f2      	bls.n	8005168 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d11c      	bne.n	80051c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e005      	b.n	80051ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e0:	4619      	mov	r1, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e8:	461a      	mov	r2, r3
 80051ea:	680b      	ldr	r3, [r1, #0]
 80051ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d10c      	bne.n	800520e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051fa:	2100      	movs	r1, #0
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f965 	bl	80054cc <USB_SetDevSpeed>
 8005202:	e008      	b.n	8005216 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005204:	2101      	movs	r1, #1
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f960 	bl	80054cc <USB_SetDevSpeed>
 800520c:	e003      	b.n	8005216 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800520e:	2103      	movs	r1, #3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f95b 	bl	80054cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005216:	2110      	movs	r1, #16
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f8f3 	bl	8005404 <USB_FlushTxFifo>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f91f 	bl	800546c <USB_FlushRxFifo>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	461a      	mov	r2, r3
 8005240:	2300      	movs	r3, #0
 8005242:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005256:	461a      	mov	r2, r3
 8005258:	2300      	movs	r3, #0
 800525a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	e043      	b.n	80052ea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005278:	d118      	bne.n	80052ac <USB_DevInit+0x164>
    {
      if (i == 0U)
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528c:	461a      	mov	r2, r3
 800528e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e013      	b.n	80052be <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	461a      	mov	r2, r3
 80052a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e008      	b.n	80052be <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	461a      	mov	r2, r3
 80052ba:	2300      	movs	r3, #0
 80052bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ca:	461a      	mov	r2, r3
 80052cc:	2300      	movs	r3, #0
 80052ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052dc:	461a      	mov	r2, r3
 80052de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	3301      	adds	r3, #1
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3b7      	bcc.n	8005262 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e043      	b.n	8005380 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800530a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800530e:	d118      	bne.n	8005342 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e013      	b.n	8005354 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e008      	b.n	8005354 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534e:	461a      	mov	r2, r3
 8005350:	2300      	movs	r3, #0
 8005352:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	461a      	mov	r2, r3
 8005362:	2300      	movs	r3, #0
 8005364:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005372:	461a      	mov	r2, r3
 8005374:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005378:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3301      	adds	r3, #1
 800537e:	613b      	str	r3, [r7, #16]
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	429a      	cmp	r2, r3
 8005386:	d3b7      	bcc.n	80052f8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d105      	bne.n	80053bc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f043 0210 	orr.w	r2, r3, #16
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699a      	ldr	r2, [r3, #24]
 80053c0:	4b0e      	ldr	r3, [pc, #56]	; (80053fc <USB_DevInit+0x2b4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f043 0208 	orr.w	r2, r3, #8
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d105      	bne.n	80053ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	4b06      	ldr	r3, [pc, #24]	; (8005400 <USB_DevInit+0x2b8>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr
 80053fc:	803c3800 	.word	0x803c3800
 8005400:	40000004 	.word	0x40000004

08005404 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3301      	adds	r3, #1
 8005416:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4a13      	ldr	r2, [pc, #76]	; (8005468 <USB_FlushTxFifo+0x64>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e01b      	b.n	800545c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	daf2      	bge.n	8005412 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	019b      	lsls	r3, r3, #6
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4a08      	ldr	r2, [pc, #32]	; (8005468 <USB_FlushTxFifo+0x64>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e006      	b.n	800545c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d0f0      	beq.n	800543c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	00030d40 	.word	0x00030d40

0800546c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3301      	adds	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <USB_FlushRxFifo+0x5c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e018      	b.n	80054bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	daf2      	bge.n	8005478 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2210      	movs	r2, #16
 800549a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <USB_FlushRxFifo+0x5c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e006      	b.n	80054bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0310 	and.w	r3, r3, #16
 80054b6:	2b10      	cmp	r3, #16
 80054b8:	d0f0      	beq.n	800549c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	00030d40 	.word	0x00030d40

080054cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005518:	f023 0303 	bic.w	r3, r3, #3
 800551c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552c:	f043 0302 	orr.w	r3, r3, #2
 8005530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	f003 0301 	and.w	r3, r3, #1
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <USB_CoreReset+0x64>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e01b      	b.n	80055b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	daf2      	bge.n	8005568 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <USB_CoreReset+0x64>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d901      	bls.n	80055a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e006      	b.n	80055b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d0f0      	beq.n	8005592 <USB_CoreReset+0x36>

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	00030d40 	.word	0x00030d40

080055c4 <memset>:
 80055c4:	4402      	add	r2, r0
 80055c6:	4603      	mov	r3, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <__libc_init_array>:
 80055d4:	b570      	push	{r4, r5, r6, lr}
 80055d6:	4d0d      	ldr	r5, [pc, #52]	; (800560c <__libc_init_array+0x38>)
 80055d8:	4c0d      	ldr	r4, [pc, #52]	; (8005610 <__libc_init_array+0x3c>)
 80055da:	1b64      	subs	r4, r4, r5
 80055dc:	10a4      	asrs	r4, r4, #2
 80055de:	2600      	movs	r6, #0
 80055e0:	42a6      	cmp	r6, r4
 80055e2:	d109      	bne.n	80055f8 <__libc_init_array+0x24>
 80055e4:	4d0b      	ldr	r5, [pc, #44]	; (8005614 <__libc_init_array+0x40>)
 80055e6:	4c0c      	ldr	r4, [pc, #48]	; (8005618 <__libc_init_array+0x44>)
 80055e8:	f000 f818 	bl	800561c <_init>
 80055ec:	1b64      	subs	r4, r4, r5
 80055ee:	10a4      	asrs	r4, r4, #2
 80055f0:	2600      	movs	r6, #0
 80055f2:	42a6      	cmp	r6, r4
 80055f4:	d105      	bne.n	8005602 <__libc_init_array+0x2e>
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fc:	4798      	blx	r3
 80055fe:	3601      	adds	r6, #1
 8005600:	e7ee      	b.n	80055e0 <__libc_init_array+0xc>
 8005602:	f855 3b04 	ldr.w	r3, [r5], #4
 8005606:	4798      	blx	r3
 8005608:	3601      	adds	r6, #1
 800560a:	e7f2      	b.n	80055f2 <__libc_init_array+0x1e>
 800560c:	08005654 	.word	0x08005654
 8005610:	08005654 	.word	0x08005654
 8005614:	08005654 	.word	0x08005654
 8005618:	08005658 	.word	0x08005658

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
