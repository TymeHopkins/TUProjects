
Hopkins_Project2_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c290  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c8  0800c460  0800c460  0001c460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d728  0800d728  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800d728  0800d728  0001d728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d730  0800d730  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d730  0800d730  0001d730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d734  0800d734  0001d734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d738  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a89c  20000210  0800d948  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000aaac  0800d948  0002aaac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   000124d4  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f7f  00000000  00000000  00032757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  000356d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b98  00000000  00000000  00036618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000280ee  00000000  00000000  000371b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ca3  00000000  00000000  0005f29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee729  00000000  00000000  00072f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005748  00000000  00000000  0016166c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00166db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c448 	.word	0x0800c448

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800c448 	.word	0x0800c448

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <getTitleScreen>:
#include "fonts.h"
#include "colors.h"
#include "ili9163.h"

void getTitleScreen()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af02      	add	r7, sp, #8
	//INITIALIZE TITLE SCREEN UI/UX
	ILI9163_init(0);
 8001036:	2000      	movs	r0, #0
 8001038:	f000 f9d0 	bl	80013dc <ILI9163_init>
	HAL_Delay(1000);
 800103c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001040:	f002 f858 	bl	80030f4 <HAL_Delay>
	ILI9163_newFrame();
 8001044:	f000 fab2 	bl	80015ac <ILI9163_newFrame>

	//TITLE SCREEN BACKGROUND
	ILI9163_fillRect(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT, BLUE);
 8001048:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	22a0      	movs	r2, #160	; 0xa0
 8001052:	2100      	movs	r1, #0
 8001054:	2000      	movs	r0, #0
 8001056:	f000 fb17 	bl	8001688 <ILI9163_fillRect>

	//TITLE SCREEN TITLE
	ILI9163_drawStringF(50, 5, Font_11x18, WHITE, "Tyme's");
 800105a:	4b6e      	ldr	r3, [pc, #440]	; (8001214 <getTitleScreen+0x1e4>)
 800105c:	4a6e      	ldr	r2, [pc, #440]	; (8001218 <getTitleScreen+0x1e8>)
 800105e:	9201      	str	r2, [sp, #4]
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	9200      	str	r2, [sp, #0]
 8001066:	cb0c      	ldmia	r3, {r2, r3}
 8001068:	2105      	movs	r1, #5
 800106a:	2032      	movs	r0, #50	; 0x32
 800106c:	f000 fc09 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(25, 25, Font_11x18, WHITE, "Calculator");
 8001070:	4b68      	ldr	r3, [pc, #416]	; (8001214 <getTitleScreen+0x1e4>)
 8001072:	4a6a      	ldr	r2, [pc, #424]	; (800121c <getTitleScreen+0x1ec>)
 8001074:	9201      	str	r2, [sp, #4]
 8001076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800107a:	9200      	str	r2, [sp, #0]
 800107c:	cb0c      	ldmia	r3, {r2, r3}
 800107e:	2119      	movs	r1, #25
 8001080:	2019      	movs	r0, #25
 8001082:	f000 fbfe 	bl	8001882 <ILI9163_drawStringF>

	//RECTANGLE BOARDER
	ILI9163_drawRect(5, 45, 155, 123, 3, BLACK);
 8001086:	2300      	movs	r3, #0
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	2303      	movs	r3, #3
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	237b      	movs	r3, #123	; 0x7b
 8001090:	229b      	movs	r2, #155	; 0x9b
 8001092:	212d      	movs	r1, #45	; 0x2d
 8001094:	2005      	movs	r0, #5
 8001096:	f000 fb25 	bl	80016e4 <ILI9163_drawRect>

	//CALCULATOR KEY PAD ROW 1
	ILI9163_drawStringF(10, 50, Font_11x18, WHITE, "1");
 800109a:	4b5e      	ldr	r3, [pc, #376]	; (8001214 <getTitleScreen+0x1e4>)
 800109c:	4a60      	ldr	r2, [pc, #384]	; (8001220 <getTitleScreen+0x1f0>)
 800109e:	9201      	str	r2, [sp, #4]
 80010a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	cb0c      	ldmia	r3, {r2, r3}
 80010a8:	2132      	movs	r1, #50	; 0x32
 80010aa:	200a      	movs	r0, #10
 80010ac:	f000 fbe9 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 50, Font_11x18, WHITE, "2");
 80010b0:	4b58      	ldr	r3, [pc, #352]	; (8001214 <getTitleScreen+0x1e4>)
 80010b2:	4a5c      	ldr	r2, [pc, #368]	; (8001224 <getTitleScreen+0x1f4>)
 80010b4:	9201      	str	r2, [sp, #4]
 80010b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ba:	9200      	str	r2, [sp, #0]
 80010bc:	cb0c      	ldmia	r3, {r2, r3}
 80010be:	2132      	movs	r1, #50	; 0x32
 80010c0:	202f      	movs	r0, #47	; 0x2f
 80010c2:	f000 fbde 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 50, Font_11x18, WHITE, "3");
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <getTitleScreen+0x1e4>)
 80010c8:	4a57      	ldr	r2, [pc, #348]	; (8001228 <getTitleScreen+0x1f8>)
 80010ca:	9201      	str	r2, [sp, #4]
 80010cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d0:	9200      	str	r2, [sp, #0]
 80010d2:	cb0c      	ldmia	r3, {r2, r3}
 80010d4:	2132      	movs	r1, #50	; 0x32
 80010d6:	205a      	movs	r0, #90	; 0x5a
 80010d8:	f000 fbd3 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 50, Font_11x18, WHITE, "/");
 80010dc:	4b4d      	ldr	r3, [pc, #308]	; (8001214 <getTitleScreen+0x1e4>)
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <getTitleScreen+0x1fc>)
 80010e0:	9201      	str	r2, [sp, #4]
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	9200      	str	r2, [sp, #0]
 80010e8:	cb0c      	ldmia	r3, {r2, r3}
 80010ea:	2132      	movs	r1, #50	; 0x32
 80010ec:	2084      	movs	r0, #132	; 0x84
 80010ee:	f000 fbc8 	bl	8001882 <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 2
	ILI9163_drawStringF(10, 68, Font_11x18, WHITE, "4");
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <getTitleScreen+0x1e4>)
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <getTitleScreen+0x200>)
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	cb0c      	ldmia	r3, {r2, r3}
 8001100:	2144      	movs	r1, #68	; 0x44
 8001102:	200a      	movs	r0, #10
 8001104:	f000 fbbd 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 68, Font_11x18, WHITE, "5");
 8001108:	4b42      	ldr	r3, [pc, #264]	; (8001214 <getTitleScreen+0x1e4>)
 800110a:	4a4a      	ldr	r2, [pc, #296]	; (8001234 <getTitleScreen+0x204>)
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	cb0c      	ldmia	r3, {r2, r3}
 8001116:	2144      	movs	r1, #68	; 0x44
 8001118:	202f      	movs	r0, #47	; 0x2f
 800111a:	f000 fbb2 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 68, Font_11x18, WHITE, "6");
 800111e:	4b3d      	ldr	r3, [pc, #244]	; (8001214 <getTitleScreen+0x1e4>)
 8001120:	4a45      	ldr	r2, [pc, #276]	; (8001238 <getTitleScreen+0x208>)
 8001122:	9201      	str	r2, [sp, #4]
 8001124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001128:	9200      	str	r2, [sp, #0]
 800112a:	cb0c      	ldmia	r3, {r2, r3}
 800112c:	2144      	movs	r1, #68	; 0x44
 800112e:	205a      	movs	r0, #90	; 0x5a
 8001130:	f000 fba7 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 68, Font_11x18, WHITE, "x");
 8001134:	4b37      	ldr	r3, [pc, #220]	; (8001214 <getTitleScreen+0x1e4>)
 8001136:	4a41      	ldr	r2, [pc, #260]	; (800123c <getTitleScreen+0x20c>)
 8001138:	9201      	str	r2, [sp, #4]
 800113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113e:	9200      	str	r2, [sp, #0]
 8001140:	cb0c      	ldmia	r3, {r2, r3}
 8001142:	2144      	movs	r1, #68	; 0x44
 8001144:	2084      	movs	r0, #132	; 0x84
 8001146:	f000 fb9c 	bl	8001882 <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 3
	ILI9163_drawStringF(10, 86, Font_11x18, WHITE, "7");
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <getTitleScreen+0x1e4>)
 800114c:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <getTitleScreen+0x210>)
 800114e:	9201      	str	r2, [sp, #4]
 8001150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001154:	9200      	str	r2, [sp, #0]
 8001156:	cb0c      	ldmia	r3, {r2, r3}
 8001158:	2156      	movs	r1, #86	; 0x56
 800115a:	200a      	movs	r0, #10
 800115c:	f000 fb91 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 86, Font_11x18, WHITE, "8");
 8001160:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <getTitleScreen+0x1e4>)
 8001162:	4a38      	ldr	r2, [pc, #224]	; (8001244 <getTitleScreen+0x214>)
 8001164:	9201      	str	r2, [sp, #4]
 8001166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800116a:	9200      	str	r2, [sp, #0]
 800116c:	cb0c      	ldmia	r3, {r2, r3}
 800116e:	2156      	movs	r1, #86	; 0x56
 8001170:	202f      	movs	r0, #47	; 0x2f
 8001172:	f000 fb86 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 86, Font_11x18, WHITE, "9");
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <getTitleScreen+0x1e4>)
 8001178:	4a33      	ldr	r2, [pc, #204]	; (8001248 <getTitleScreen+0x218>)
 800117a:	9201      	str	r2, [sp, #4]
 800117c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001180:	9200      	str	r2, [sp, #0]
 8001182:	cb0c      	ldmia	r3, {r2, r3}
 8001184:	2156      	movs	r1, #86	; 0x56
 8001186:	205a      	movs	r0, #90	; 0x5a
 8001188:	f000 fb7b 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 86, Font_11x18, WHITE, "-");
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <getTitleScreen+0x1e4>)
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <getTitleScreen+0x21c>)
 8001190:	9201      	str	r2, [sp, #4]
 8001192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001196:	9200      	str	r2, [sp, #0]
 8001198:	cb0c      	ldmia	r3, {r2, r3}
 800119a:	2156      	movs	r1, #86	; 0x56
 800119c:	2084      	movs	r0, #132	; 0x84
 800119e:	f000 fb70 	bl	8001882 <ILI9163_drawStringF>

	//CALCULATOR KEY PAD ROW 4
	ILI9163_drawStringF(10, 110, Font_11x18, WHITE, "*");
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <getTitleScreen+0x1e4>)
 80011a4:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <getTitleScreen+0x220>)
 80011a6:	9201      	str	r2, [sp, #4]
 80011a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	cb0c      	ldmia	r3, {r2, r3}
 80011b0:	216e      	movs	r1, #110	; 0x6e
 80011b2:	200a      	movs	r0, #10
 80011b4:	f000 fb65 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(47, 104, Font_11x18, WHITE, "0");
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <getTitleScreen+0x1e4>)
 80011ba:	4a26      	ldr	r2, [pc, #152]	; (8001254 <getTitleScreen+0x224>)
 80011bc:	9201      	str	r2, [sp, #4]
 80011be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011c2:	9200      	str	r2, [sp, #0]
 80011c4:	cb0c      	ldmia	r3, {r2, r3}
 80011c6:	2168      	movs	r1, #104	; 0x68
 80011c8:	202f      	movs	r0, #47	; 0x2f
 80011ca:	f000 fb5a 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(90, 104, Font_11x18, WHITE, "#");
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <getTitleScreen+0x1e4>)
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <getTitleScreen+0x228>)
 80011d2:	9201      	str	r2, [sp, #4]
 80011d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	cb0c      	ldmia	r3, {r2, r3}
 80011dc:	2168      	movs	r1, #104	; 0x68
 80011de:	205a      	movs	r0, #90	; 0x5a
 80011e0:	f000 fb4f 	bl	8001882 <ILI9163_drawStringF>
	ILI9163_drawStringF(132, 104, Font_11x18, WHITE, "+");
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <getTitleScreen+0x1e4>)
 80011e6:	4a1d      	ldr	r2, [pc, #116]	; (800125c <getTitleScreen+0x22c>)
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	9200      	str	r2, [sp, #0]
 80011f0:	cb0c      	ldmia	r3, {r2, r3}
 80011f2:	2168      	movs	r1, #104	; 0x68
 80011f4:	2084      	movs	r0, #132	; 0x84
 80011f6:	f000 fb44 	bl	8001882 <ILI9163_drawStringF>

	//RENDER TITLE SCREEN UI/UX
	HAL_Delay(100);
 80011fa:	2064      	movs	r0, #100	; 0x64
 80011fc:	f001 ff7a 	bl	80030f4 <HAL_Delay>
	ILI9163_render();
 8001200:	f000 f9f0 	bl	80015e4 <ILI9163_render>
	HAL_Delay(1000);
 8001204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001208:	f001 ff74 	bl	80030f4 <HAL_Delay>
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000
 8001218:	0800c460 	.word	0x0800c460
 800121c:	0800c468 	.word	0x0800c468
 8001220:	0800c474 	.word	0x0800c474
 8001224:	0800c478 	.word	0x0800c478
 8001228:	0800c47c 	.word	0x0800c47c
 800122c:	0800c480 	.word	0x0800c480
 8001230:	0800c484 	.word	0x0800c484
 8001234:	0800c488 	.word	0x0800c488
 8001238:	0800c48c 	.word	0x0800c48c
 800123c:	0800c490 	.word	0x0800c490
 8001240:	0800c494 	.word	0x0800c494
 8001244:	0800c498 	.word	0x0800c498
 8001248:	0800c49c 	.word	0x0800c49c
 800124c:	0800c4a0 	.word	0x0800c4a0
 8001250:	0800c4a4 	.word	0x0800c4a4
 8001254:	0800c4a8 	.word	0x0800c4a8
 8001258:	0800c4ac 	.word	0x0800c4ac
 800125c:	0800c4b0 	.word	0x0800c4b0

08001260 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001270:	480c      	ldr	r0, [pc, #48]	; (80012a4 <ILI9163_writeCommand+0x44>)
 8001272:	f002 fe21 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	4809      	ldr	r0, [pc, #36]	; (80012a4 <ILI9163_writeCommand+0x44>)
 800127e:	f002 fe1b 	bl	8003eb8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 8001282:	1df9      	adds	r1, r7, #7
 8001284:	2300      	movs	r3, #0
 8001286:	2201      	movs	r2, #1
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <ILI9163_writeCommand+0x48>)
 800128a:	f004 f910 	bl	80054ae <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <ILI9163_writeCommand+0x44>)
 8001296:	f002 fe0f 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020400 	.word	0x40020400
 80012a8:	2000a22c 	.word	0x2000a22c

080012ac <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <ILI9163_writeData+0x44>)
 80012be:	f002 fdfb 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c8:	4809      	ldr	r0, [pc, #36]	; (80012f0 <ILI9163_writeData+0x44>)
 80012ca:	f002 fdf5 	bl	8003eb8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 80012ce:	1df9      	adds	r1, r7, #7
 80012d0:	2300      	movs	r3, #0
 80012d2:	2201      	movs	r2, #1
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <ILI9163_writeData+0x48>)
 80012d6:	f004 f8ea 	bl	80054ae <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <ILI9163_writeData+0x44>)
 80012e2:	f002 fde9 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020400 	.word	0x40020400
 80012f4:	2000a22c 	.word	0x2000a22c

080012f8 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <ILI9163_writeData16+0x54>)
 800130a:	f002 fdd5 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <ILI9163_writeData16+0x54>)
 8001316:	f002 fdcf 	bl	8003eb8 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	b29b      	uxth	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	733b      	strb	r3, [r7, #12]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 800132a:	f107 010c 	add.w	r1, r7, #12
 800132e:	2300      	movs	r3, #0
 8001330:	2202      	movs	r2, #2
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <ILI9163_writeData16+0x58>)
 8001334:	f004 f8bb 	bl	80054ae <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <ILI9163_writeData16+0x54>)
 8001340:	f002 fdba 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020400 	.word	0x40020400
 8001350:	2000a22c 	.word	0x2000a22c

08001354 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	4611      	mov	r1, r2
 8001360:	461a      	mov	r2, r3
 8001362:	4623      	mov	r3, r4
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	4603      	mov	r3, r0
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	807b      	strh	r3, [r7, #2]
 800136e:	4613      	mov	r3, r2
 8001370:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8001372:	202a      	movs	r0, #42	; 0x2a
 8001374:	f7ff ff74 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 8001378:	88fb      	ldrh	r3, [r7, #6]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ffbc 	bl	80012f8 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ffb8 	bl	80012f8 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8001388:	202b      	movs	r0, #43	; 0x2b
 800138a:	f7ff ff69 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 800138e:	88bb      	ldrh	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ffb1 	bl	80012f8 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 8001396:	883b      	ldrh	r3, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffad 	bl	80012f8 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 800139e:	202c      	movs	r0, #44	; 0x2c
 80013a0:	f7ff ff5e 	bl	8001260 <ILI9163_writeCommand>
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd90      	pop	{r4, r7, pc}

080013ac <ILI9163_reset>:

void ILI9163_reset(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b6:	4808      	ldr	r0, [pc, #32]	; (80013d8 <ILI9163_reset+0x2c>)
 80013b8:	f002 fd7e 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013bc:	2032      	movs	r0, #50	; 0x32
 80013be:	f001 fe99 	bl	80030f4 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80013c2:	2201      	movs	r2, #1
 80013c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <ILI9163_reset+0x2c>)
 80013ca:	f002 fd75 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80013ce:	2064      	movs	r0, #100	; 0x64
 80013d0:	f001 fe90 	bl	80030f4 <HAL_Delay>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40020c00 	.word	0x40020c00

080013dc <ILI9163_init>:

void ILI9163_init(int rotation) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ea:	486e      	ldr	r0, [pc, #440]	; (80015a4 <ILI9163_init+0x1c8>)
 80013ec:	f002 fd64 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	486c      	ldr	r0, [pc, #432]	; (80015a8 <ILI9163_init+0x1cc>)
 80013f8:	f002 fd5e 	bl	8003eb8 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 80013fc:	f7ff ffd6 	bl	80013ac <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8001400:	2011      	movs	r0, #17
 8001402:	f7ff ff2d 	bl	8001260 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8001406:	2005      	movs	r0, #5
 8001408:	f001 fe74 	bl	80030f4 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800140c:	203a      	movs	r0, #58	; 0x3a
 800140e:	f7ff ff27 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8001412:	2005      	movs	r0, #5
 8001414:	f7ff ff4a 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8001418:	2026      	movs	r0, #38	; 0x26
 800141a:	f7ff ff21 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800141e:	2004      	movs	r0, #4
 8001420:	f7ff ff44 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8001424:	20f2      	movs	r0, #242	; 0xf2
 8001426:	f7ff ff1b 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800142a:	2001      	movs	r0, #1
 800142c:	f7ff ff3e 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8001430:	20e0      	movs	r0, #224	; 0xe0
 8001432:	f7ff ff15 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8001436:	203f      	movs	r0, #63	; 0x3f
 8001438:	f7ff ff38 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800143c:	2025      	movs	r0, #37	; 0x25
 800143e:	f7ff ff35 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8001442:	201c      	movs	r0, #28
 8001444:	f7ff ff32 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8001448:	201e      	movs	r0, #30
 800144a:	f7ff ff2f 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800144e:	2020      	movs	r0, #32
 8001450:	f7ff ff2c 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8001454:	2012      	movs	r0, #18
 8001456:	f7ff ff29 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800145a:	202a      	movs	r0, #42	; 0x2a
 800145c:	f7ff ff26 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x90);
 8001460:	2090      	movs	r0, #144	; 0x90
 8001462:	f7ff ff23 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x24);
 8001466:	2024      	movs	r0, #36	; 0x24
 8001468:	f7ff ff20 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x11);
 800146c:	2011      	movs	r0, #17
 800146e:	f7ff ff1d 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff ff1a 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff ff17 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff ff14 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001484:	2000      	movs	r0, #0
 8001486:	f7ff ff11 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ff0e 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 8001490:	20e1      	movs	r0, #225	; 0xe1
 8001492:	f7ff fee5 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 8001496:	2020      	movs	r0, #32
 8001498:	f7ff ff08 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800149c:	2020      	movs	r0, #32
 800149e:	f7ff ff05 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80014a2:	2020      	movs	r0, #32
 80014a4:	f7ff ff02 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80014a8:	2020      	movs	r0, #32
 80014aa:	f7ff feff 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80014ae:	2005      	movs	r0, #5
 80014b0:	f7ff fefc 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fef9 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80014ba:	2015      	movs	r0, #21
 80014bc:	f7ff fef6 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 80014c0:	20a7      	movs	r0, #167	; 0xa7
 80014c2:	f7ff fef3 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 80014c6:	203d      	movs	r0, #61	; 0x3d
 80014c8:	f7ff fef0 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x18);
 80014cc:	2018      	movs	r0, #24
 80014ce:	f7ff feed 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x25);
 80014d2:	2025      	movs	r0, #37	; 0x25
 80014d4:	f7ff feea 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80014d8:	202a      	movs	r0, #42	; 0x2a
 80014da:	f7ff fee7 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80014de:	202b      	movs	r0, #43	; 0x2b
 80014e0:	f7ff fee4 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 80014e4:	202b      	movs	r0, #43	; 0x2b
 80014e6:	f7ff fee1 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 80014ea:	203a      	movs	r0, #58	; 0x3a
 80014ec:	f7ff fede 	bl	80012ac <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 80014f0:	20b1      	movs	r0, #177	; 0xb1
 80014f2:	f7ff feb5 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 80014f6:	2008      	movs	r0, #8
 80014f8:	f7ff fed8 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff fed5 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8001502:	20b2      	movs	r0, #178	; 0xb2
 8001504:	f7ff feac 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8001508:	2008      	movs	r0, #8
 800150a:	f7ff fecf 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800150e:	2002      	movs	r0, #2
 8001510:	f7ff fecc 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8001514:	20b3      	movs	r0, #179	; 0xb3
 8001516:	f7ff fea3 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800151a:	2008      	movs	r0, #8
 800151c:	f7ff fec6 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff fec3 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8001526:	20b4      	movs	r0, #180	; 0xb4
 8001528:	f7ff fe9a 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800152c:	2007      	movs	r0, #7
 800152e:	f7ff febd 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8001532:	202a      	movs	r0, #42	; 0x2a
 8001534:	f7ff fe94 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff feb7 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff feb4 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff feb1 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800154a:	207f      	movs	r0, #127	; 0x7f
 800154c:	f7ff feae 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8001550:	202b      	movs	r0, #43	; 0x2b
 8001552:	f7ff fe85 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fea8 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800155c:	2000      	movs	r0, #0
 800155e:	f7ff fea5 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff fea2 	bl	80012ac <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 8001568:	209f      	movs	r0, #159	; 0x9f
 800156a:	f7ff fe9f 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 800156e:	2036      	movs	r0, #54	; 0x36
 8001570:	f7ff fe76 	bl	8001260 <ILI9163_writeCommand>
	if(rotation)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 800157a:	20a8      	movs	r0, #168	; 0xa8
 800157c:	f7ff fe96 	bl	80012ac <ILI9163_writeData>
 8001580:	e002      	b.n	8001588 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 8001582:	2068      	movs	r0, #104	; 0x68
 8001584:	f7ff fe92 	bl	80012ac <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 8001588:	2013      	movs	r0, #19
 800158a:	f7ff fe69 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 800158e:	2029      	movs	r0, #41	; 0x29
 8001590:	f7ff fe66 	bl	8001260 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 8001594:	202c      	movs	r0, #44	; 0x2c
 8001596:	f7ff fe63 	bl	8001260 <ILI9163_writeCommand>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020c00 	.word	0x40020c00

080015ac <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	e008      	b.n	80015ca <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <ILI9163_newFrame+0x34>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80015d0:	d3f2      	bcc.n	80015b8 <ILI9163_newFrame+0xc>

}
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	2000022c 	.word	0x2000022c

080015e4 <ILI9163_render>:

void ILI9163_render()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	22a0      	movs	r2, #160	; 0xa0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff feb0 	bl	8001354 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015fa:	480d      	ldr	r0, [pc, #52]	; (8001630 <ILI9163_render+0x4c>)
 80015fc:	f002 fc5c 	bl	8003eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8001600:	2201      	movs	r2, #1
 8001602:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <ILI9163_render+0x4c>)
 8001608:	f002 fc56 	bl	8003eb8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 800160c:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001610:	4908      	ldr	r1, [pc, #32]	; (8001634 <ILI9163_render+0x50>)
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <ILI9163_render+0x54>)
 8001614:	f004 f8ba 	bl	800578c <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <ILI9163_render+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
	while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800161e:	bf00      	nop
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <ILI9163_render+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0fb      	beq.n	8001620 <ILI9163_render+0x3c>
}
 8001628:	bf00      	nop
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40020400 	.word	0x40020400
 8001634:	2000022c 	.word	0x2000022c
 8001638:	2000a22c 	.word	0x2000a22c
 800163c:	2000a954 	.word	0x2000a954

08001640 <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	460b      	mov	r3, r1
 800164c:	71bb      	strb	r3, [r7, #6]
 800164e:	4613      	mov	r3, r2
 8001650:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b9f      	cmp	r3, #159	; 0x9f
 8001656:	d80f      	bhi.n	8001678 <ILI9163_drawPixel+0x38>
 8001658:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0b      	blt.n	8001678 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 8001660:	79f9      	ldrb	r1, [r7, #7]
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	015b      	lsls	r3, r3, #5
 800166c:	440b      	add	r3, r1
 800166e:	4905      	ldr	r1, [pc, #20]	; (8001684 <ILI9163_drawPixel+0x44>)
 8001670:	88ba      	ldrh	r2, [r7, #4]
 8001672:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001676:	e000      	b.n	800167a <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8001678:	bf00      	nop
}
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	2000022c 	.word	0x2000022c

08001688 <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	4611      	mov	r1, r2
 8001694:	461a      	mov	r2, r3
 8001696:	4623      	mov	r3, r4
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	4603      	mov	r3, r0
 800169c:	71bb      	strb	r3, [r7, #6]
 800169e:	460b      	mov	r3, r1
 80016a0:	717b      	strb	r3, [r7, #5]
 80016a2:	4613      	mov	r3, r2
 80016a4:	713b      	strb	r3, [r7, #4]
	for(uint8_t x = x1; x < x2; x++)
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e012      	b.n	80016d2 <ILI9163_fillRect+0x4a>
		for(uint8_t y = y1; y < y2; y++)
 80016ac:	79bb      	ldrb	r3, [r7, #6]
 80016ae:	73bb      	strb	r3, [r7, #14]
 80016b0:	e008      	b.n	80016c4 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 80016b2:	8c3a      	ldrh	r2, [r7, #32]
 80016b4:	7bb9      	ldrb	r1, [r7, #14]
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ffc1 	bl	8001640 <ILI9163_drawPixel>
		for(uint8_t y = y1; y < y2; y++)
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	3301      	adds	r3, #1
 80016c2:	73bb      	strb	r3, [r7, #14]
 80016c4:	7bba      	ldrb	r2, [r7, #14]
 80016c6:	793b      	ldrb	r3, [r7, #4]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d3f2      	bcc.n	80016b2 <ILI9163_fillRect+0x2a>
	for(uint8_t x = x1; x < x2; x++)
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	3301      	adds	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	7bfa      	ldrb	r2, [r7, #15]
 80016d4:	797b      	ldrb	r3, [r7, #5]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d3e8      	bcc.n	80016ac <ILI9163_fillRect+0x24>
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}

080016e4 <ILI9163_drawRect>:

void ILI9163_drawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint8_t thickness, uint16_t color) {
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	4604      	mov	r4, r0
 80016ec:	4608      	mov	r0, r1
 80016ee:	4611      	mov	r1, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4623      	mov	r3, r4
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	4603      	mov	r3, r0
 80016f8:	71bb      	strb	r3, [r7, #6]
 80016fa:	460b      	mov	r3, r1
 80016fc:	717b      	strb	r3, [r7, #5]
 80016fe:	4613      	mov	r3, r2
 8001700:	713b      	strb	r3, [r7, #4]
	ILI9163_fillRect(x1, y1, x2, y1+thickness, color);
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	7e3b      	ldrb	r3, [r7, #24]
 8001706:	4413      	add	r3, r2
 8001708:	b2dc      	uxtb	r4, r3
 800170a:	797a      	ldrb	r2, [r7, #5]
 800170c:	79b9      	ldrb	r1, [r7, #6]
 800170e:	79f8      	ldrb	r0, [r7, #7]
 8001710:	8bbb      	ldrh	r3, [r7, #28]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4623      	mov	r3, r4
 8001716:	f7ff ffb7 	bl	8001688 <ILI9163_fillRect>
	ILI9163_fillRect(x1, y2-thickness, x2, y2, color);
 800171a:	793a      	ldrb	r2, [r7, #4]
 800171c:	7e3b      	ldrb	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b2d9      	uxtb	r1, r3
 8001722:	793c      	ldrb	r4, [r7, #4]
 8001724:	797a      	ldrb	r2, [r7, #5]
 8001726:	79f8      	ldrb	r0, [r7, #7]
 8001728:	8bbb      	ldrh	r3, [r7, #28]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	4623      	mov	r3, r4
 800172e:	f7ff ffab 	bl	8001688 <ILI9163_fillRect>

	ILI9163_fillRect(x1, y1, x1+thickness, y2, color);
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	7e3b      	ldrb	r3, [r7, #24]
 8001736:	4413      	add	r3, r2
 8001738:	b2da      	uxtb	r2, r3
 800173a:	793c      	ldrb	r4, [r7, #4]
 800173c:	79b9      	ldrb	r1, [r7, #6]
 800173e:	79f8      	ldrb	r0, [r7, #7]
 8001740:	8bbb      	ldrh	r3, [r7, #28]
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	4623      	mov	r3, r4
 8001746:	f7ff ff9f 	bl	8001688 <ILI9163_fillRect>
	ILI9163_fillRect(x2-thickness, y1, x2, y2, color);
 800174a:	797a      	ldrb	r2, [r7, #5]
 800174c:	7e3b      	ldrb	r3, [r7, #24]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	b2d8      	uxtb	r0, r3
 8001752:	793c      	ldrb	r4, [r7, #4]
 8001754:	797a      	ldrb	r2, [r7, #5]
 8001756:	79b9      	ldrb	r1, [r7, #6]
 8001758:	8bbb      	ldrh	r3, [r7, #28]
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	4623      	mov	r3, r4
 800175e:	f7ff ff93 	bl	8001688 <ILI9163_fillRect>
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}

0800176a <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 800176a:	b082      	sub	sp, #8
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	4603      	mov	r3, r0
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	460b      	mov	r3, r1
 800177a:	71bb      	strb	r3, [r7, #6]
 800177c:	4613      	mov	r3, r2
 800177e:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 8001780:	2300      	movs	r3, #0
 8001782:	81fb      	strh	r3, [r7, #14]
 8001784:	e02f      	b.n	80017e6 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8001786:	6a3a      	ldr	r2, [r7, #32]
 8001788:	797b      	ldrb	r3, [r7, #5]
 800178a:	3b20      	subs	r3, #32
 800178c:	7f79      	ldrb	r1, [r7, #29]
 800178e:	fb03 f101 	mul.w	r1, r3, r1
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	440b      	add	r3, r1
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 800179e:	2300      	movs	r3, #0
 80017a0:	81bb      	strh	r3, [r7, #12]
 80017a2:	e018      	b.n	80017d6 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 80017a4:	897a      	ldrh	r2, [r7, #10]
 80017a6:	89bb      	ldrh	r3, [r7, #12]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	4413      	add	r3, r2
 80017bc:	b2d8      	uxtb	r0, r3
 80017be:	89fb      	ldrh	r3, [r7, #14]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	4413      	add	r3, r2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	f7ff ff38 	bl	8001640 <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 80017d0:	89bb      	ldrh	r3, [r7, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	81bb      	strh	r3, [r7, #12]
 80017d6:	7f3b      	ldrb	r3, [r7, #28]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	89ba      	ldrh	r2, [r7, #12]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3e1      	bcc.n	80017a4 <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 80017e0:	89fb      	ldrh	r3, [r7, #14]
 80017e2:	3301      	adds	r3, #1
 80017e4:	81fb      	strh	r3, [r7, #14]
 80017e6:	7f7b      	ldrb	r3, [r7, #29]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	89fa      	ldrh	r2, [r7, #14]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d3ca      	bcc.n	8001786 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017fc:	b002      	add	sp, #8
 80017fe:	4770      	bx	lr

08001800 <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b087      	sub	sp, #28
 8001804:	af02      	add	r7, sp, #8
 8001806:	4604      	mov	r4, r0
 8001808:	4608      	mov	r0, r1
 800180a:	1d39      	adds	r1, r7, #4
 800180c:	e881 000c 	stmia.w	r1, {r2, r3}
 8001810:	4623      	mov	r3, r4
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	4603      	mov	r3, r0
 8001816:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8001818:	e029      	b.n	800186e <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	793a      	ldrb	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	2b9f      	cmp	r3, #159	; 0x9f
 8001822:	dd12      	ble.n	800184a <ILI9163_drawString+0x4a>
			x = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8001828:	797a      	ldrb	r2, [r7, #5]
 800182a:	7bbb      	ldrb	r3, [r7, #14]
 800182c:	4413      	add	r3, r2
 800182e:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	797a      	ldrb	r2, [r7, #5]
 8001834:	4413      	add	r3, r2
 8001836:	2b7f      	cmp	r3, #127	; 0x7f
 8001838:	dc1e      	bgt.n	8001878 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b20      	cmp	r3, #32
 8001840:	d103      	bne.n	800184a <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	3301      	adds	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8001848:	e011      	b.n	800186e <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 800184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184c:	781a      	ldrb	r2, [r3, #0]
 800184e:	7bb9      	ldrb	r1, [r7, #14]
 8001850:	7bf8      	ldrb	r0, [r7, #15]
 8001852:	8c3b      	ldrh	r3, [r7, #32]
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f7ff ff85 	bl	800176a <ILI9163_drawChar>

		x += font.width;
 8001860:	793a      	ldrb	r2, [r7, #4]
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	4413      	add	r3, r2
 8001866:	73fb      	strb	r3, [r7, #15]
		string++;
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	3301      	adds	r3, #1
 800186c:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1d1      	bne.n	800181a <ILI9163_drawString+0x1a>
	}
}
 8001876:	e000      	b.n	800187a <ILI9163_drawString+0x7a>
				break;
 8001878:	bf00      	nop
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bd90      	pop	{r4, r7, pc}

08001882 <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8001882:	b590      	push	{r4, r7, lr}
 8001884:	b099      	sub	sp, #100	; 0x64
 8001886:	af02      	add	r7, sp, #8
 8001888:	4604      	mov	r4, r0
 800188a:	4608      	mov	r0, r1
 800188c:	1d39      	adds	r1, r7, #4
 800188e:	e881 000c 	stmia.w	r1, {r2, r3}
 8001892:	4623      	mov	r3, r4
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	4603      	mov	r3, r0
 8001898:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 800189a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800189e:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 80018a0:	f107 0018 	add.w	r0, r7, #24
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018a8:	213f      	movs	r1, #63	; 0x3f
 80018aa:	f007 f845 	bl	8008938 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 80018ae:	7bb9      	ldrb	r1, [r7, #14]
 80018b0:	7bf8      	ldrb	r0, [r7, #15]
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	cb0c      	ldmia	r3, {r2, r3}
 80018c2:	f7ff ff9d 	bl	8001800 <ILI9163_drawString>
}
 80018c6:	bf00      	nop
 80018c8:	375c      	adds	r7, #92	; 0x5c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
	...

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f001 fbb0 	bl	800303a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f851 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 f971 	bl	8001bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e2:	f000 f951 	bl	8001b88 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80018e6:	f000 f8f1 	bl	8001acc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80018ea:	f000 f91f 	bl	8001b2c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80018ee:	f000 f8af 	bl	8001a50 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //char keyOperands[8];	//Operands char array of size 8 bits
  //char keyOperators[8]; 	//Operators character array of size 8 bits

  getTitleScreen(); //GUI Title function call
 80018f2:	f7ff fb9d 	bl	8001030 <getTitleScreen>
	sprintf(output, "Value: %s", input);
	ILI9163_drawStringF(5, 56, Font_16x26, RED, input);
	ILI9163_render();
	*/
	//Basic key pad functionality
	if (keyChar != 0) //if button is pressed
 80018f6:	4b1d      	ldr	r3, [pc, #116]	; (800196c <main+0x9c>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0fb      	beq.n	80018f6 <main+0x26>
	{
		if (keyChar == '*')//if '*' button is pressed
 80018fe:	4b1b      	ldr	r3, [pc, #108]	; (800196c <main+0x9c>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b2a      	cmp	r3, #42	; 0x2a
 8001904:	d105      	bne.n	8001912 <main+0x42>
		{
			shiftFlag = 1;
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <main+0xa0>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]
			keyChar = 0;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <main+0x9c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
		}
		keyChar = 0;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <main+0x9c>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
		ILI9163_newFrame();
 8001918:	f7ff fe48 	bl	80015ac <ILI9163_newFrame>
		ILI9163_drawStringF(5, 5, Font_11x18, BLUE, input);
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <main+0xa4>)
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <main+0xa8>)
 8001920:	9201      	str	r2, [sp, #4]
 8001922:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	cb0c      	ldmia	r3, {r2, r3}
 800192a:	2105      	movs	r1, #5
 800192c:	2005      	movs	r0, #5
 800192e:	f7ff ffa8 	bl	8001882 <ILI9163_drawStringF>
		ILI9163_render();
 8001932:	f7ff fe57 	bl	80015e4 <ILI9163_render>
		inputStrLen = strlen(input);
 8001936:	4810      	ldr	r0, [pc, #64]	; (8001978 <main+0xa8>)
 8001938:	f7fe fcba 	bl	80002b0 <strlen>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b0e      	ldr	r3, [pc, #56]	; (800197c <main+0xac>)
 8001942:	601a      	str	r2, [r3, #0]
		if (input[inputStrLen - 1] == '=')
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <main+0xac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <main+0xa8>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	2b3d      	cmp	r3, #61	; 0x3d
 8001950:	d1d1      	bne.n	80018f6 <main+0x26>
		{
			input[inputStrLen - 1] = '\0';
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <main+0xac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3b01      	subs	r3, #1
 8001958:	4a07      	ldr	r2, [pc, #28]	; (8001978 <main+0xa8>)
 800195a:	2100      	movs	r1, #0
 800195c:	54d1      	strb	r1, [r2, r3]
			calculate(input);
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <main+0xa8>)
 8001960:	f000 fb00 	bl	8001f64 <calculate>
			input[0] = '\0';
 8001964:	4b04      	ldr	r3, [pc, #16]	; (8001978 <main+0xa8>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
	if (keyChar != 0) //if button is pressed
 800196a:	e7c4      	b.n	80018f6 <main+0x26>
 800196c:	2000a880 	.word	0x2000a880
 8001970:	2000a884 	.word	0x2000a884
 8001974:	20000000 	.word	0x20000000
 8001978:	2000a888 	.word	0x2000a888
 800197c:	2000a950 	.word	0x2000a950

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	; 0x50
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2230      	movs	r2, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f007 f84e 	bl	8008a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019a4:	f002 fc0e 	bl	80041c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <SystemClock_Config+0xc8>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <SystemClock_Config+0xc8>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	; 0x40
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <SystemClock_Config+0xc8>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019c0:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <SystemClock_Config+0xcc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019c8:	4a20      	ldr	r2, [pc, #128]	; (8001a4c <SystemClock_Config+0xcc>)
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <SystemClock_Config+0xcc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80019f4:	2348      	movs	r3, #72	; 0x48
 80019f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80019fc:	2303      	movs	r3, #3
 80019fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fbed 	bl	80041e4 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a10:	f000 f9f2 	bl	8001df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	2102      	movs	r1, #2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 fe7b 	bl	800472c <HAL_RCC_ClockConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a3c:	f000 f9dc 	bl	8001df8 <Error_Handler>
  }
}
 8001a40:	bf00      	nop
 8001a42:	3750      	adds	r7, #80	; 0x50
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000

08001a50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <MX_SPI1_Init+0x78>)
 8001a58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a6e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a82:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a86:	2208      	movs	r2, #8
 8001a88:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_SPI1_Init+0x74>)
 8001ab0:	f003 fc52 	bl	8005358 <HAL_SPI_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aba:	f000 f99d 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000a22c 	.word	0x2000a22c
 8001ac8:	40013000 	.word	0x40013000

08001acc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ad0:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <MX_USART3_UART_Init+0x5c>)
 8001ad4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001adc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001af2:	220c      	movs	r2, #12
 8001af4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART3_UART_Init+0x58>)
 8001b10:	f004 f98e 	bl	8005e30 <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b1a:	f000 f96d 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000a2f0 	.word	0x2000a2f0
 8001b28:	40004800 	.word	0x40004800

08001b2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b3a:	2206      	movs	r2, #6
 8001b3c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b40:	2202      	movs	r2, #2
 8001b42:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b70:	f002 f9df 	bl	8003f32 <HAL_PCD_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b7a:	f000 f93d 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000a378 	.word	0x2000a378

08001b88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_DMA_Init+0x38>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <MX_DMA_Init+0x38>)
 8001b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_DMA_Init+0x38>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	203b      	movs	r0, #59	; 0x3b
 8001bac:	f001 fba1 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001bb0:	203b      	movs	r0, #59	; 0x3b
 8001bb2:	f001 fbba 	bl	800332a <HAL_NVIC_EnableIRQ>

}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bda:	4b72      	ldr	r3, [pc, #456]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a71      	ldr	r2, [pc, #452]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a6b      	ldr	r2, [pc, #428]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b69      	ldr	r3, [pc, #420]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b66      	ldr	r3, [pc, #408]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a65      	ldr	r2, [pc, #404]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a5f      	ldr	r2, [pc, #380]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	4b5a      	ldr	r3, [pc, #360]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a59      	ldr	r2, [pc, #356]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c40:	f043 0308 	orr.w	r3, r3, #8
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c52:	4b54      	ldr	r3, [pc, #336]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b51      	ldr	r3, [pc, #324]	; (8001da4 <MX_GPIO_Init+0x1e0>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f24a 3193 	movw	r1, #41875	; 0xa393
 8001c70:	484d      	ldr	r0, [pc, #308]	; (8001da8 <MX_GPIO_Init+0x1e4>)
 8001c72:	f002 f921 	bl	8003eb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2140      	movs	r1, #64	; 0x40
 8001c7a:	484c      	ldr	r0, [pc, #304]	; (8001dac <MX_GPIO_Init+0x1e8>)
 8001c7c:	f002 f91c 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	4846      	ldr	r0, [pc, #280]	; (8001db0 <MX_GPIO_Init+0x1ec>)
 8001c98:	f001 ff4a 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c9c:	2332      	movs	r3, #50	; 0x32
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cac:	230b      	movs	r3, #11
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	483e      	ldr	r0, [pc, #248]	; (8001db0 <MX_GPIO_Init+0x1ec>)
 8001cb8:	f001 ff3a 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cbc:	2386      	movs	r3, #134	; 0x86
 8001cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ccc:	230b      	movs	r3, #11
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4837      	ldr	r0, [pc, #220]	; (8001db4 <MX_GPIO_Init+0x1f0>)
 8001cd8:	f001 ff2a 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001cdc:	f240 3381 	movw	r3, #897	; 0x381
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	482c      	ldr	r0, [pc, #176]	; (8001da8 <MX_GPIO_Init+0x1e4>)
 8001cf6:	f001 ff1b 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 PB15 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4;
 8001cfa:	f24a 0312 	movw	r3, #40978	; 0xa012
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d04:	2302      	movs	r3, #2
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4825      	ldr	r0, [pc, #148]	; (8001da8 <MX_GPIO_Init+0x1e4>)
 8001d14:	f001 ff0c 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d18:	2340      	movs	r3, #64	; 0x40
 8001d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481f      	ldr	r0, [pc, #124]	; (8001dac <MX_GPIO_Init+0x1e8>)
 8001d30:	f001 fefe 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	4819      	ldr	r0, [pc, #100]	; (8001dac <MX_GPIO_Init+0x1e8>)
 8001d48:	f001 fef2 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d4c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4813      	ldr	r0, [pc, #76]	; (8001db0 <MX_GPIO_Init+0x1ec>)
 8001d64:	f001 fee4 	bl	8003b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d76:	2303      	movs	r3, #3
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d7a:	230b      	movs	r3, #11
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d7e:	f107 031c 	add.w	r3, r7, #28
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	; (8001dac <MX_GPIO_Init+0x1e8>)
 8001d86:	f001 fed3 	bl	8003b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	2017      	movs	r0, #23
 8001d90:	f001 faaf 	bl	80032f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d94:	2017      	movs	r0, #23
 8001d96:	f001 fac8 	bl	800332a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d9a:	bf00      	nop
 8001d9c:	3730      	adds	r7, #48	; 0x30
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40021800 	.word	0x40021800
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020000 	.word	0x40020000

08001db8 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t SPI_DMA_FL = 0;
  uint32_t SPI_DMA_CNT=1;
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)  {     SPI_DMA_CNT--;     if(SPI_DMA_CNT==0)     {         HAL_SPI_DMAStop(&hspi1);         SPI_DMA_CNT=1;         SPI_DMA_FL=1;     } }
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_SPI_TxCpltCallback+0x34>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_SPI_TxCpltCallback+0x34>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_SPI_TxCpltCallback+0x34>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d108      	bne.n	8001de4 <HAL_SPI_TxCpltCallback+0x2c>
 8001dd2:	4807      	ldr	r0, [pc, #28]	; (8001df0 <HAL_SPI_TxCpltCallback+0x38>)
 8001dd4:	f003 fdce 	bl	8005974 <HAL_SPI_DMAStop>
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <HAL_SPI_TxCpltCallback+0x34>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_SPI_TxCpltCallback+0x3c>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000008 	.word	0x20000008
 8001df0:	2000a22c 	.word	0x2000a22c
 8001df4:	2000a954 	.word	0x2000a954

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <pushOperand>:
    char items[MAX_SIZE];
    int top;
} OperatorStack;

void pushOperand(OperandStack* stack, double value)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	ed87 0b00 	vstr	d0, [r7]
    if (stack->top == MAX_SIZE - 1)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001e16:	2b63      	cmp	r3, #99	; 0x63
 8001e18:	d105      	bne.n	8001e26 <pushOperand+0x22>
    {
        printf("Operand Stack overflow\n");
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <pushOperand+0x4c>)
 8001e1c:	f006 fdee 	bl	80089fc <puts>
        exit(1);
 8001e20:	2001      	movs	r0, #1
 8001e22:	f004 ff4f 	bl	8006cc4 <exit>
    }
    stack->items[++stack->top] = value;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	18d1      	adds	r1, r2, r3
 8001e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e44:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	0800c4d4 	.word	0x0800c4d4

08001e54 <popOperand>:

double popOperand(OperandStack* stack)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    if (stack->top == -1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e66:	d105      	bne.n	8001e74 <popOperand+0x20>
    {
        printf("Operand Stack underflow\n");
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <popOperand+0x4c>)
 8001e6a:	f006 fdc7 	bl	80089fc <puts>
        exit(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f004 ff28 	bl	8006cc4 <exit>
    }
    return stack->items[stack->top--];
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f8d3 3320 	ldr.w	r3, [r3, #800]	; 0x320
 8001e7a:	1e59      	subs	r1, r3, #1
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	f8c2 1320 	str.w	r1, [r2, #800]	; 0x320
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e90:	eeb0 0a47 	vmov.f32	s0, s14
 8001e94:	eef0 0a67 	vmov.f32	s1, s15
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	0800c4ec 	.word	0x0800c4ec

08001ea4 <pushOperator>:

void pushOperator(OperatorStack* stack, char value)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
    if (stack->top == MAX_SIZE - 1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb4:	2b63      	cmp	r3, #99	; 0x63
 8001eb6:	d105      	bne.n	8001ec4 <pushOperator+0x20>
    {
        printf("Operator Stack overflow\n");
 8001eb8:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <pushOperator+0x3c>)
 8001eba:	f006 fd9f 	bl	80089fc <puts>
        exit(1);
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f004 ff00 	bl	8006cc4 <exit>
    }
    stack->items[++stack->top] = value;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	665a      	str	r2, [r3, #100]	; 0x64
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	78f9      	ldrb	r1, [r7, #3]
 8001ed6:	54d1      	strb	r1, [r2, r3]
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	0800c504 	.word	0x0800c504

08001ee4 <popOperator>:

char popOperator(OperatorStack* stack)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    if (stack->top == -1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef4:	d105      	bne.n	8001f02 <popOperator+0x1e>
    {
        printf("Operator Stack underflow\n");
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <popOperator+0x34>)
 8001ef8:	f006 fd80 	bl	80089fc <puts>
        exit(1);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f004 fee1 	bl	8006cc4 <exit>
    }
    return stack->items[stack->top--];
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f06:	1e59      	subs	r1, r3, #1
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6651      	str	r1, [r2, #100]	; 0x64
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	0800c51c 	.word	0x0800c51c

08001f1c <precedence>:

int precedence(char op)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
    switch (op)
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	2b78      	cmp	r3, #120	; 0x78
 8001f2a:	d00f      	beq.n	8001f4c <precedence+0x30>
 8001f2c:	2b78      	cmp	r3, #120	; 0x78
 8001f2e:	dc11      	bgt.n	8001f54 <precedence+0x38>
 8001f30:	2b5e      	cmp	r3, #94	; 0x5e
 8001f32:	d00d      	beq.n	8001f50 <precedence+0x34>
 8001f34:	2b5e      	cmp	r3, #94	; 0x5e
 8001f36:	dc0d      	bgt.n	8001f54 <precedence+0x38>
 8001f38:	2b2f      	cmp	r3, #47	; 0x2f
 8001f3a:	d007      	beq.n	8001f4c <precedence+0x30>
 8001f3c:	2b2f      	cmp	r3, #47	; 0x2f
 8001f3e:	dc09      	bgt.n	8001f54 <precedence+0x38>
 8001f40:	2b2b      	cmp	r3, #43	; 0x2b
 8001f42:	d001      	beq.n	8001f48 <precedence+0x2c>
 8001f44:	2b2d      	cmp	r3, #45	; 0x2d
 8001f46:	d105      	bne.n	8001f54 <precedence+0x38>
    {
    	case '+':
        case '-':
            return 1;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e004      	b.n	8001f56 <precedence+0x3a>
        case 'x':
        case '/':
            return 2;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e002      	b.n	8001f56 <precedence+0x3a>
        case '^':
            return 3;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e000      	b.n	8001f56 <precedence+0x3a>
        default:
            return 0;
 8001f54:	2300      	movs	r3, #0
    }
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <calculate>:

double calculate(const char* expr)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	f2ad 4d44 	subw	sp, sp, #1092	; 0x444
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001f70:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8001f74:	6018      	str	r0, [r3, #0]
    OperatorStack operatorStack = {.top = -1};
 8001f76:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001f7a:	2268      	movs	r2, #104	; 0x68
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f006 fd56 	bl	8008a30 <memset>
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f88:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    OperandStack operandStack = {.top = -1};
 8001f8c:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001f90:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f44f 734a 	mov.w	r3, #808	; 0x328
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	f006 fd47 	bl	8008a30 <memset>
 8001fa2:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001fa6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8001faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fae:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320

    for (int i = 0; i < strlen(expr); ++i)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001fb8:	e214      	b.n	80023e4 <calculate+0x480>
    {
        char c = expr[i];
 8001fba:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001fbe:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8001fc2:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8001fc6:	6812      	ldr	r2, [r2, #0]
 8001fc8:	4413      	add	r3, r2
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f

        if (isdigit(c) || c == '.')
 8001fd0:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4acb      	ldr	r2, [pc, #812]	; (8002304 <calculate+0x3a0>)
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d103      	bne.n	8001fec <calculate+0x88>
 8001fe4:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8001fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8001fea:	d157      	bne.n	800209c <calculate+0x138>
        {
            char number[32]; //temporary array
            int j = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
            while (isdigit(expr[i]) || expr[i] == '.')
 8001ff2:	e016      	b.n	8002022 <calculate+0xbe>
            {
                number[j++] = expr[i++];
 8001ff4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	f8c7 243c 	str.w	r2, [r7, #1084]	; 0x43c
 8001ffe:	461a      	mov	r2, r3
 8002000:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8002004:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	441a      	add	r2, r3
 800200c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002010:	1c59      	adds	r1, r3, #1
 8002012:	f8c7 1438 	str.w	r1, [r7, #1080]	; 0x438
 8002016:	7811      	ldrb	r1, [r2, #0]
 8002018:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800201c:	f2a2 4234 	subw	r2, r2, #1076	; 0x434
 8002020:	54d1      	strb	r1, [r2, r3]
            while (isdigit(expr[i]) || expr[i] == '.')
 8002022:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8002026:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800202a:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	4413      	add	r3, r2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	4ab3      	ldr	r2, [pc, #716]	; (8002304 <calculate+0x3a0>)
 8002038:	4413      	add	r3, r2
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1d7      	bne.n	8001ff4 <calculate+0x90>
 8002044:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8002048:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 800204c:	f2a2 423c 	subw	r2, r2, #1084	; 0x43c
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b2e      	cmp	r3, #46	; 0x2e
 8002058:	d0cc      	beq.n	8001ff4 <calculate+0x90>
            }
            number[j] = '\0'; //Sets null to end of array to convert to string
 800205a:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800205e:	f2a3 4234 	subw	r2, r3, #1076	; 0x434
 8002062:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002066:	4413      	add	r3, r2
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
            pushOperand(&operandStack, atof(number)); //Converts the string of characters to float
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fe23 	bl	8006cbc <atof>
 8002076:	eeb0 7a40 	vmov.f32	s14, s0
 800207a:	eef0 7a60 	vmov.f32	s15, s1
 800207e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002082:	eeb0 0a47 	vmov.f32	s0, s14
 8002086:	eef0 0a67 	vmov.f32	s1, s15
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff feba 	bl	8001e04 <pushOperand>
            --i;
 8002090:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8002094:	3b01      	subs	r3, #1
 8002096:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
        {
 800209a:	e19e      	b.n	80023da <calculate+0x476>
        }

        else if (c == '(')
 800209c:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 80020a0:	2b28      	cmp	r3, #40	; 0x28
 80020a2:	d108      	bne.n	80020b6 <calculate+0x152>
        {
            pushOperator(&operatorStack, c);
 80020a4:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 80020a8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fef8 	bl	8001ea4 <pushOperator>
 80020b4:	e191      	b.n	80023da <calculate+0x476>
        }

        else if (c == ')')
 80020b6:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 80020ba:	2b29      	cmp	r3, #41	; 0x29
 80020bc:	f040 80a9 	bne.w	8002212 <calculate+0x2ae>
        {
            while (operatorStack.top != -1 && operatorStack.items[operatorStack.top] != '(')
 80020c0:	e08c      	b.n	80021dc <calculate+0x278>
            {
                char op = popOperator(&operatorStack);
 80020c2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff0c 	bl	8001ee4 <popOperator>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
                double b = popOperand(&operandStack);
 80020d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff febc 	bl	8001e54 <popOperand>
 80020dc:	ed87 0bfe 	vstr	d0, [r7, #1016]	; 0x3f8
                double a = popOperand(&operandStack);
 80020e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff feb5 	bl	8001e54 <popOperand>
 80020ea:	ed87 0bfc 	vstr	d0, [r7, #1008]	; 0x3f0
                switch (op)
 80020ee:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
 80020f2:	2b78      	cmp	r3, #120	; 0x78
 80020f4:	d036      	beq.n	8002164 <calculate+0x200>
 80020f6:	2b78      	cmp	r3, #120	; 0x78
 80020f8:	dc70      	bgt.n	80021dc <calculate+0x278>
 80020fa:	2b5e      	cmp	r3, #94	; 0x5e
 80020fc:	d05a      	beq.n	80021b4 <calculate+0x250>
 80020fe:	2b5e      	cmp	r3, #94	; 0x5e
 8002100:	dc6c      	bgt.n	80021dc <calculate+0x278>
 8002102:	2b2f      	cmp	r3, #47	; 0x2f
 8002104:	d042      	beq.n	800218c <calculate+0x228>
 8002106:	2b2f      	cmp	r3, #47	; 0x2f
 8002108:	dc68      	bgt.n	80021dc <calculate+0x278>
 800210a:	2b2b      	cmp	r3, #43	; 0x2b
 800210c:	d002      	beq.n	8002114 <calculate+0x1b0>
 800210e:	2b2d      	cmp	r3, #45	; 0x2d
 8002110:	d014      	beq.n	800213c <calculate+0x1d8>
 8002112:	e063      	b.n	80021dc <calculate+0x278>
                {
                    case '+': pushOperand(&operandStack, a + b); break;
 8002114:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8002118:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 800211c:	f7fe f8d6 	bl	80002cc <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	ec43 2b17 	vmov	d7, r2, r3
 8002128:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800212c:	eeb0 0a47 	vmov.f32	s0, s14
 8002130:	eef0 0a67 	vmov.f32	s1, s15
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fe65 	bl	8001e04 <pushOperand>
 800213a:	e04f      	b.n	80021dc <calculate+0x278>
                    case '-': pushOperand(&operandStack, a - b); break;
 800213c:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8002140:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8002144:	f7fe f8c0 	bl	80002c8 <__aeabi_dsub>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	ec43 2b17 	vmov	d7, r2, r3
 8002150:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fe51 	bl	8001e04 <pushOperand>
 8002162:	e03b      	b.n	80021dc <calculate+0x278>
                    case 'x': pushOperand(&operandStack, a * b); break;
 8002164:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8002168:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 800216c:	f7fe fa64 	bl	8000638 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	ec43 2b17 	vmov	d7, r2, r3
 8002178:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800217c:	eeb0 0a47 	vmov.f32	s0, s14
 8002180:	eef0 0a67 	vmov.f32	s1, s15
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fe3d 	bl	8001e04 <pushOperand>
 800218a:	e027      	b.n	80021dc <calculate+0x278>
                    case '/': pushOperand(&operandStack, a / b); break;
 800218c:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 8002190:	e9d7 01fc 	ldrd	r0, r1, [r7, #1008]	; 0x3f0
 8002194:	f7fe fb7a 	bl	800088c <__aeabi_ddiv>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	ec43 2b17 	vmov	d7, r2, r3
 80021a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021a4:	eeb0 0a47 	vmov.f32	s0, s14
 80021a8:	eef0 0a67 	vmov.f32	s1, s15
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fe29 	bl	8001e04 <pushOperand>
 80021b2:	e013      	b.n	80021dc <calculate+0x278>
                    case '^': pushOperand(&operandStack, pow(a, b)); break;
 80021b4:	ed97 1bfe 	vldr	d1, [r7, #1016]	; 0x3f8
 80021b8:	ed97 0bfc 	vldr	d0, [r7, #1008]	; 0x3f0
 80021bc:	f009 fa0c 	bl	800b5d8 <pow>
 80021c0:	eeb0 7a40 	vmov.f32	s14, s0
 80021c4:	eef0 7a60 	vmov.f32	s15, s1
 80021c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021cc:	eeb0 0a47 	vmov.f32	s0, s14
 80021d0:	eef0 0a67 	vmov.f32	s1, s15
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fe15 	bl	8001e04 <pushOperand>
 80021da:	bf00      	nop
            while (operatorStack.top != -1 && operatorStack.items[operatorStack.top] != '(')
 80021dc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80021e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e4:	d009      	beq.n	80021fa <calculate+0x296>
 80021e6:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80021ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021ee:	443b      	add	r3, r7
 80021f0:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 80021f4:	2b28      	cmp	r3, #40	; 0x28
 80021f6:	f47f af64 	bne.w	80020c2 <calculate+0x15e>
                }
            }
            if (operatorStack.top != -1)
 80021fa:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80021fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002202:	f000 80ea 	beq.w	80023da <calculate+0x476>
            {
                popOperator(&operatorStack);
 8002206:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fe6a 	bl	8001ee4 <popOperator>
 8002210:	e0e3      	b.n	80023da <calculate+0x476>
            }
        }

        else if (c == '+' || c == '-' || c == 'x' || c == '/' || c == '^')
 8002212:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002216:	2b2b      	cmp	r3, #43	; 0x2b
 8002218:	f000 80be 	beq.w	8002398 <calculate+0x434>
 800221c:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002220:	2b2d      	cmp	r3, #45	; 0x2d
 8002222:	f000 80b9 	beq.w	8002398 <calculate+0x434>
 8002226:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800222a:	2b78      	cmp	r3, #120	; 0x78
 800222c:	f000 80b4 	beq.w	8002398 <calculate+0x434>
 8002230:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8002234:	2b2f      	cmp	r3, #47	; 0x2f
 8002236:	f000 80af 	beq.w	8002398 <calculate+0x434>
 800223a:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800223e:	2b5e      	cmp	r3, #94	; 0x5e
 8002240:	f040 80cb 	bne.w	80023da <calculate+0x476>
        {
            while (operatorStack.top != -1 && precedence(c) <= precedence(operatorStack.items[operatorStack.top]))
 8002244:	e0a8      	b.n	8002398 <calculate+0x434>
            {
                char op = popOperator(&operatorStack);
 8002246:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fe4a 	bl	8001ee4 <popOperator>
 8002250:	4603      	mov	r3, r0
 8002252:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
                double b = popOperand(&operandStack);
 8002256:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fdfa 	bl	8001e54 <popOperand>
 8002260:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002264:	ed83 0b00 	vstr	d0, [r3]
                double a = popOperand(&operandStack);
 8002268:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fdf1 	bl	8001e54 <popOperand>
 8002272:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002276:	ed83 0b00 	vstr	d0, [r3]
                switch (op)
 800227a:	f897 341e 	ldrb.w	r3, [r7, #1054]	; 0x41e
 800227e:	2b78      	cmp	r3, #120	; 0x78
 8002280:	d042      	beq.n	8002308 <calculate+0x3a4>
 8002282:	2b78      	cmp	r3, #120	; 0x78
 8002284:	f300 8088 	bgt.w	8002398 <calculate+0x434>
 8002288:	2b5e      	cmp	r3, #94	; 0x5e
 800228a:	d06d      	beq.n	8002368 <calculate+0x404>
 800228c:	2b5e      	cmp	r3, #94	; 0x5e
 800228e:	f300 8083 	bgt.w	8002398 <calculate+0x434>
 8002292:	2b2f      	cmp	r3, #47	; 0x2f
 8002294:	d050      	beq.n	8002338 <calculate+0x3d4>
 8002296:	2b2f      	cmp	r3, #47	; 0x2f
 8002298:	dc7e      	bgt.n	8002398 <calculate+0x434>
 800229a:	2b2b      	cmp	r3, #43	; 0x2b
 800229c:	d002      	beq.n	80022a4 <calculate+0x340>
 800229e:	2b2d      	cmp	r3, #45	; 0x2d
 80022a0:	d018      	beq.n	80022d4 <calculate+0x370>
 80022a2:	e079      	b.n	8002398 <calculate+0x434>
                {
                    case '+': pushOperand(&operandStack, a + b); break;
 80022a4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80022b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022b4:	f7fe f80a 	bl	80002cc <__adddf3>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	ec43 2b17 	vmov	d7, r2, r3
 80022c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022c4:	eeb0 0a47 	vmov.f32	s0, s14
 80022c8:	eef0 0a67 	vmov.f32	s1, s15
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff fd99 	bl	8001e04 <pushOperand>
 80022d2:	e061      	b.n	8002398 <calculate+0x434>
                    case '-': pushOperand(&operandStack, a - b); break;
 80022d4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80022e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022e4:	f7fd fff0 	bl	80002c8 <__aeabi_dsub>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	ec43 2b17 	vmov	d7, r2, r3
 80022f0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022f4:	eeb0 0a47 	vmov.f32	s0, s14
 80022f8:	eef0 0a67 	vmov.f32	s1, s15
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fd81 	bl	8001e04 <pushOperand>
 8002302:	e049      	b.n	8002398 <calculate+0x434>
 8002304:	0800d368 	.word	0x0800d368
                    case 'x': pushOperand(&operandStack, a * b); break;
 8002308:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002318:	f7fe f98e 	bl	8000638 <__aeabi_dmul>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	ec43 2b17 	vmov	d7, r2, r3
 8002324:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002328:	eeb0 0a47 	vmov.f32	s0, s14
 800232c:	eef0 0a67 	vmov.f32	s1, s15
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fd67 	bl	8001e04 <pushOperand>
 8002336:	e02f      	b.n	8002398 <calculate+0x434>
                    case '/': pushOperand(&operandStack, a / b); break;
 8002338:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8002344:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002348:	f7fe faa0 	bl	800088c <__aeabi_ddiv>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	ec43 2b17 	vmov	d7, r2, r3
 8002354:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002358:	eeb0 0a47 	vmov.f32	s0, s14
 800235c:	eef0 0a67 	vmov.f32	s1, s15
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fd4f 	bl	8001e04 <pushOperand>
 8002366:	e017      	b.n	8002398 <calculate+0x434>
                    case '^': pushOperand(&operandStack, pow(a, b)); break;
 8002368:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800236c:	ed93 1b00 	vldr	d1, [r3]
 8002370:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002374:	ed93 0b00 	vldr	d0, [r3]
 8002378:	f009 f92e 	bl	800b5d8 <pow>
 800237c:	eeb0 7a40 	vmov.f32	s14, s0
 8002380:	eef0 7a60 	vmov.f32	s15, s1
 8002384:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002388:	eeb0 0a47 	vmov.f32	s0, s14
 800238c:	eef0 0a67 	vmov.f32	s1, s15
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fd37 	bl	8001e04 <pushOperand>
 8002396:	bf00      	nop
            while (operatorStack.top != -1 && precedence(c) <= precedence(operatorStack.items[operatorStack.top]))
 8002398:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023a0:	d013      	beq.n	80023ca <calculate+0x466>
 80023a2:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fdb8 	bl	8001f1c <precedence>
 80023ac:	4604      	mov	r4, r0
 80023ae:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80023b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023b6:	443b      	add	r3, r7
 80023b8:	f813 3cb8 	ldrb.w	r3, [r3, #-184]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fdad 	bl	8001f1c <precedence>
 80023c2:	4603      	mov	r3, r0
 80023c4:	429c      	cmp	r4, r3
 80023c6:	f77f af3e 	ble.w	8002246 <calculate+0x2e2>
                }
            }
            pushOperator(&operatorStack, c);
 80023ca:	f897 241f 	ldrb.w	r2, [r7, #1055]	; 0x41f
 80023ce:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fd65 	bl	8001ea4 <pushOperator>
    for (int i = 0; i < strlen(expr); ++i)
 80023da:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80023de:	3301      	adds	r3, #1
 80023e0:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 80023e4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80023e8:	f2a3 433c 	subw	r3, r3, #1084	; 0x43c
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	f7fd ff5f 	bl	80002b0 <strlen>
 80023f2:	4602      	mov	r2, r0
 80023f4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f63f adde 	bhi.w	8001fba <calculate+0x56>
        }
    }

    while (operatorStack.top != -1)
 80023fe:	e0a6      	b.n	800254e <calculate+0x5ea>
    {
        char op = popOperator(&operatorStack);
 8002400:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fd6d 	bl	8001ee4 <popOperator>
 800240a:	4603      	mov	r3, r0
 800240c:	f887 3437 	strb.w	r3, [r7, #1079]	; 0x437
        double b = popOperand(&operandStack);
 8002410:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fd1d 	bl	8001e54 <popOperand>
 800241a:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 800241e:	ed83 0b00 	vstr	d0, [r3]
        double a = popOperand(&operandStack);
 8002422:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd14 	bl	8001e54 <popOperand>
 800242c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8002430:	ed83 0b00 	vstr	d0, [r3]
        switch (op)
 8002434:	f897 3437 	ldrb.w	r3, [r7, #1079]	; 0x437
 8002438:	2b78      	cmp	r3, #120	; 0x78
 800243a:	d040      	beq.n	80024be <calculate+0x55a>
 800243c:	2b78      	cmp	r3, #120	; 0x78
 800243e:	f300 8086 	bgt.w	800254e <calculate+0x5ea>
 8002442:	2b5e      	cmp	r3, #94	; 0x5e
 8002444:	d06b      	beq.n	800251e <calculate+0x5ba>
 8002446:	2b5e      	cmp	r3, #94	; 0x5e
 8002448:	f300 8081 	bgt.w	800254e <calculate+0x5ea>
 800244c:	2b2f      	cmp	r3, #47	; 0x2f
 800244e:	d04e      	beq.n	80024ee <calculate+0x58a>
 8002450:	2b2f      	cmp	r3, #47	; 0x2f
 8002452:	dc7c      	bgt.n	800254e <calculate+0x5ea>
 8002454:	2b2b      	cmp	r3, #43	; 0x2b
 8002456:	d002      	beq.n	800245e <calculate+0x4fa>
 8002458:	2b2d      	cmp	r3, #45	; 0x2d
 800245a:	d018      	beq.n	800248e <calculate+0x52a>
 800245c:	e077      	b.n	800254e <calculate+0x5ea>
        {
            case '+': pushOperand(&operandStack, a + b); break;
 800245e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800246a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800246e:	f7fd ff2d 	bl	80002cc <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	ec43 2b17 	vmov	d7, r2, r3
 800247a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800247e:	eeb0 0a47 	vmov.f32	s0, s14
 8002482:	eef0 0a67 	vmov.f32	s1, s15
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fcbc 	bl	8001e04 <pushOperand>
 800248c:	e05f      	b.n	800254e <calculate+0x5ea>
            case '-': pushOperand(&operandStack, a - b); break;
 800248e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002496:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800249a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800249e:	f7fd ff13 	bl	80002c8 <__aeabi_dsub>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	ec43 2b17 	vmov	d7, r2, r3
 80024aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024ae:	eeb0 0a47 	vmov.f32	s0, s14
 80024b2:	eef0 0a67 	vmov.f32	s1, s15
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fca4 	bl	8001e04 <pushOperand>
 80024bc:	e047      	b.n	800254e <calculate+0x5ea>
            case 'x': pushOperand(&operandStack, a * b); break;
 80024be:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80024ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ce:	f7fe f8b3 	bl	8000638 <__aeabi_dmul>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	ec43 2b17 	vmov	d7, r2, r3
 80024da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80024de:	eeb0 0a47 	vmov.f32	s0, s14
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fc8c 	bl	8001e04 <pushOperand>
 80024ec:	e02f      	b.n	800254e <calculate+0x5ea>
            case '/': pushOperand(&operandStack, a / b); break;
 80024ee:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 80024fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024fe:	f7fe f9c5 	bl	800088c <__aeabi_ddiv>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	ec43 2b17 	vmov	d7, r2, r3
 800250a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800250e:	eeb0 0a47 	vmov.f32	s0, s14
 8002512:	eef0 0a67 	vmov.f32	s1, s15
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fc74 	bl	8001e04 <pushOperand>
 800251c:	e017      	b.n	800254e <calculate+0x5ea>
            case '^': pushOperand(&operandStack, pow(a, b)); break;
 800251e:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8002522:	ed93 1b00 	vldr	d1, [r3]
 8002526:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800252a:	ed93 0b00 	vldr	d0, [r3]
 800252e:	f009 f853 	bl	800b5d8 <pow>
 8002532:	eeb0 7a40 	vmov.f32	s14, s0
 8002536:	eef0 7a60 	vmov.f32	s15, s1
 800253a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800253e:	eeb0 0a47 	vmov.f32	s0, s14
 8002542:	eef0 0a67 	vmov.f32	s1, s15
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff fc5c 	bl	8001e04 <pushOperand>
 800254c:	bf00      	nop
    while (operatorStack.top != -1)
 800254e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8002552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002556:	f47f af53 	bne.w	8002400 <calculate+0x49c>
        }
    }

    char temp[50];
    sprintf(temp, "Answer: %.3f", popOperand(&operandStack));
 800255a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fc78 	bl	8001e54 <popOperand>
 8002564:	ec53 2b10 	vmov	r2, r3, d0
 8002568:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800256c:	4908      	ldr	r1, [pc, #32]	; (8002590 <calculate+0x62c>)
 800256e:	f005 fa31 	bl	80079d4 <siprintf>
    updateScreen(temp);
 8002572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f80c 	bl	8002594 <updateScreen>
}
 800257c:	bf00      	nop
 800257e:	eeb0 0a47 	vmov.f32	s0, s14
 8002582:	eef0 0a67 	vmov.f32	s1, s15
 8002586:	f207 4744 	addw	r7, r7, #1092	; 0x444
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}
 800258e:	bf00      	nop
 8002590:	0800c538 	.word	0x0800c538

08002594 <updateScreen>:

void updateScreen(char* writeString)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af02      	add	r7, sp, #8
 800259a:	6078      	str	r0, [r7, #4]
    ILI9163_drawStringF(5, 55, Font_11x18, RED, writeString);
 800259c:	4a08      	ldr	r2, [pc, #32]	; (80025c0 <updateScreen+0x2c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	ca0c      	ldmia	r2, {r2, r3}
 80025aa:	2137      	movs	r1, #55	; 0x37
 80025ac:	2005      	movs	r0, #5
 80025ae:	f7ff f968 	bl	8001882 <ILI9163_drawStringF>
    ILI9163_render();
 80025b2:	f7ff f817 	bl	80015e4 <ILI9163_render>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_MspInit+0x44>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_MspInit+0x44>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_MspInit+0x44>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_MspInit+0x44>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_MspInit+0x44>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	; 0x44
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_MspInit+0x44>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a41      	ldr	r2, [pc, #260]	; (8002730 <HAL_SPI_MspInit+0x124>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d17c      	bne.n	8002728 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800262e:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_SPI_MspInit+0x128>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	4a40      	ldr	r2, [pc, #256]	; (8002734 <HAL_SPI_MspInit+0x128>)
 8002634:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002638:	6453      	str	r3, [r2, #68]	; 0x44
 800263a:	4b3e      	ldr	r3, [pc, #248]	; (8002734 <HAL_SPI_MspInit+0x128>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002646:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <HAL_SPI_MspInit+0x128>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a3a      	ldr	r2, [pc, #232]	; (8002734 <HAL_SPI_MspInit+0x128>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b38      	ldr	r3, [pc, #224]	; (8002734 <HAL_SPI_MspInit+0x128>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_SPI_MspInit+0x128>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a34      	ldr	r2, [pc, #208]	; (8002734 <HAL_SPI_MspInit+0x128>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b32      	ldr	r3, [pc, #200]	; (8002734 <HAL_SPI_MspInit+0x128>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002676:	2360      	movs	r3, #96	; 0x60
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002686:	2305      	movs	r3, #5
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4829      	ldr	r0, [pc, #164]	; (8002738 <HAL_SPI_MspInit+0x12c>)
 8002692:	f001 fa4d 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002696:	2320      	movs	r3, #32
 8002698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026a6:	2305      	movs	r3, #5
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	4822      	ldr	r0, [pc, #136]	; (800273c <HAL_SPI_MspInit+0x130>)
 80026b2:	f001 fa3d 	bl	8003b30 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026b8:	4a22      	ldr	r2, [pc, #136]	; (8002744 <HAL_SPI_MspInit+0x138>)
 80026ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026be:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026de:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80026e8:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026f6:	2204      	movs	r2, #4
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_SPI_MspInit+0x134>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_SPI_MspInit+0x134>)
 8002702:	2200      	movs	r2, #0
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_SPI_MspInit+0x134>)
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <HAL_SPI_MspInit+0x134>)
 800270e:	f000 fe27 	bl	8003360 <HAL_DMA_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8002718:	f7ff fb6e 	bl	8001df8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a08      	ldr	r2, [pc, #32]	; (8002740 <HAL_SPI_MspInit+0x134>)
 8002720:	655a      	str	r2, [r3, #84]	; 0x54
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <HAL_SPI_MspInit+0x134>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002728:	bf00      	nop
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40013000 	.word	0x40013000
 8002734:	40023800 	.word	0x40023800
 8002738:	40020000 	.word	0x40020000
 800273c:	40020400 	.word	0x40020400
 8002740:	2000a290 	.word	0x2000a290
 8002744:	40026458 	.word	0x40026458

08002748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b0aa      	sub	sp, #168	; 0xa8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002760:	f107 0310 	add.w	r3, r7, #16
 8002764:	2284      	movs	r2, #132	; 0x84
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f006 f961 	bl	8008a30 <memset>
  if(huart->Instance==USART3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a22      	ldr	r2, [pc, #136]	; (80027fc <HAL_UART_MspInit+0xb4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d13c      	bne.n	80027f2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002778:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800277e:	2300      	movs	r3, #0
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	4618      	mov	r0, r3
 8002788:	f002 f9f6 	bl	8004b78 <HAL_RCCEx_PeriphCLKConfig>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002792:	f7ff fb31 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <HAL_UART_MspInit+0xb8>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <HAL_UART_MspInit+0xb8>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_UART_MspInit+0xb8>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_UART_MspInit+0xb8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <HAL_UART_MspInit+0xb8>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_UART_MspInit+0xb8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80027c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027e0:	2307      	movs	r3, #7
 80027e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <HAL_UART_MspInit+0xbc>)
 80027ee:	f001 f99f 	bl	8003b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027f2:	bf00      	nop
 80027f4:	37a8      	adds	r7, #168	; 0xa8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40004800 	.word	0x40004800
 8002800:	40023800 	.word	0x40023800
 8002804:	40020c00 	.word	0x40020c00

08002808 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0ac      	sub	sp, #176	; 0xb0
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	2284      	movs	r2, #132	; 0x84
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f006 f901 	bl	8008a30 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002836:	d159      	bne.n	80028ec <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002838:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800283c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002844:	f107 0318 	add.w	r3, r7, #24
 8002848:	4618      	mov	r0, r3
 800284a:	f002 f995 	bl	8004b78 <HAL_RCCEx_PeriphCLKConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002854:	f7ff fad0 	bl	8001df8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	4a25      	ldr	r2, [pc, #148]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6313      	str	r3, [r2, #48]	; 0x30
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002870:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287e:	2300      	movs	r3, #0
 8002880:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800288a:	230a      	movs	r3, #10
 800288c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002894:	4619      	mov	r1, r3
 8002896:	4818      	ldr	r0, [pc, #96]	; (80028f8 <HAL_PCD_MspInit+0xf0>)
 8002898:	f001 f94a 	bl	8003b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800289c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028b4:	4619      	mov	r1, r3
 80028b6:	4810      	ldr	r0, [pc, #64]	; (80028f8 <HAL_PCD_MspInit+0xf0>)
 80028b8:	f001 f93a 	bl	8003b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	4a0c      	ldr	r2, [pc, #48]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 80028c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c6:	6353      	str	r3, [r2, #52]	; 0x34
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 80028da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028de:	6453      	str	r3, [r2, #68]	; 0x44
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <HAL_PCD_MspInit+0xec>)
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	37b0      	adds	r7, #176	; 0xb0
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020000 	.word	0x40020000

080028fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290a:	b480      	push	{r7}
 800290c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800290e:	e7fe      	b.n	800290e <HardFault_Handler+0x4>

08002910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <MemManage_Handler+0x4>

08002916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <BusFault_Handler+0x4>

0800291c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <UsageFault_Handler+0x4>

08002922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f000 fbb0 	bl	80030b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	key = 0;
 800295e:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002960:	2200      	movs	r2, #0
 8002962:	801a      	strh	r2, [r3, #0]
	for(uint8_t c=0 ; c<4 ; c++)
 8002964:	2300      	movs	r3, #0
 8002966:	71fb      	strb	r3, [r7, #7]
 8002968:	e075      	b.n	8002a56 <EXTI9_5_IRQHandler+0xfe>
	{
		for(uint8_t i=0 ; i<4 ; i++)
 800296a:	2300      	movs	r3, #0
 800296c:	71bb      	strb	r3, [r7, #6]
 800296e:	e00e      	b.n	800298e <EXTI9_5_IRQHandler+0x36>
		{
			HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8002970:	79bb      	ldrb	r3, [r7, #6]
 8002972:	4a5d      	ldr	r2, [pc, #372]	; (8002ae8 <EXTI9_5_IRQHandler+0x190>)
 8002974:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <EXTI9_5_IRQHandler+0x194>)
 800297c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002980:	2201      	movs	r2, #1
 8002982:	4619      	mov	r1, r3
 8002984:	f001 fa98 	bl	8003eb8 <HAL_GPIO_WritePin>
		for(uint8_t i=0 ; i<4 ; i++)
 8002988:	79bb      	ldrb	r3, [r7, #6]
 800298a:	3301      	adds	r3, #1
 800298c:	71bb      	strb	r3, [r7, #6]
 800298e:	79bb      	ldrb	r3, [r7, #6]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d9ed      	bls.n	8002970 <EXTI9_5_IRQHandler+0x18>
		}
		HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <EXTI9_5_IRQHandler+0x190>)
 8002998:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4a53      	ldr	r2, [pc, #332]	; (8002aec <EXTI9_5_IRQHandler+0x194>)
 80029a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a4:	2200      	movs	r2, #0
 80029a6:	4619      	mov	r1, r3
 80029a8:	f001 fa86 	bl	8003eb8 <HAL_GPIO_WritePin>
		for(uint8_t r=0 ; r<4 ; r++)
 80029ac:	2300      	movs	r3, #0
 80029ae:	717b      	strb	r3, [r7, #5]
 80029b0:	e04b      	b.n	8002a4a <EXTI9_5_IRQHandler+0xf2>
		{
			if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80029b2:	797b      	ldrb	r3, [r7, #5]
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <EXTI9_5_IRQHandler+0x198>)
 80029b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029ba:	797b      	ldrb	r3, [r7, #5]
 80029bc:	494d      	ldr	r1, [pc, #308]	; (8002af4 <EXTI9_5_IRQHandler+0x19c>)
 80029be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f001 fa5f 	bl	8003e88 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d139      	bne.n	8002a44 <EXTI9_5_IRQHandler+0xec>
			{
				if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80029d0:	797b      	ldrb	r3, [r7, #5]
 80029d2:	4a47      	ldr	r2, [pc, #284]	; (8002af0 <EXTI9_5_IRQHandler+0x198>)
 80029d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80029d8:	797b      	ldrb	r3, [r7, #5]
 80029da:	4946      	ldr	r1, [pc, #280]	; (8002af4 <EXTI9_5_IRQHandler+0x19c>)
 80029dc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f001 fa50 	bl	8003e88 <HAL_GPIO_ReadPin>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d12a      	bne.n	8002a44 <EXTI9_5_IRQHandler+0xec>
				{
					key |= 1<<c;
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	2201      	movs	r2, #1
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	b21a      	sxth	r2, r3
 80029f8:	4b3a      	ldr	r3, [pc, #232]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b21b      	sxth	r3, r3
 80029fe:	4313      	orrs	r3, r2
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002a06:	801a      	strh	r2, [r3, #0]
					key |= 1<<(r+8);
 8002a08:	797b      	ldrb	r3, [r7, #5]
 8002a0a:	3308      	adds	r3, #8
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	b21a      	sxth	r2, r3
 8002a14:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b21b      	sxth	r3, r3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002a22:	801a      	strh	r2, [r3, #0]
					while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8002a24:	bf00      	nop
 8002a26:	797b      	ldrb	r3, [r7, #5]
 8002a28:	4a31      	ldr	r2, [pc, #196]	; (8002af0 <EXTI9_5_IRQHandler+0x198>)
 8002a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a2e:	797b      	ldrb	r3, [r7, #5]
 8002a30:	4930      	ldr	r1, [pc, #192]	; (8002af4 <EXTI9_5_IRQHandler+0x19c>)
 8002a32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002a36:	4619      	mov	r1, r3
 8002a38:	4610      	mov	r0, r2
 8002a3a:	f001 fa25 	bl	8003e88 <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <EXTI9_5_IRQHandler+0xce>
		for(uint8_t r=0 ; r<4 ; r++)
 8002a44:	797b      	ldrb	r3, [r7, #5]
 8002a46:	3301      	adds	r3, #1
 8002a48:	717b      	strb	r3, [r7, #5]
 8002a4a:	797b      	ldrb	r3, [r7, #5]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d9b0      	bls.n	80029b2 <EXTI9_5_IRQHandler+0x5a>
	for(uint8_t c=0 ; c<4 ; c++)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	3301      	adds	r3, #1
 8002a54:	71fb      	strb	r3, [r7, #7]
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d986      	bls.n	800296a <EXTI9_5_IRQHandler+0x12>
					}
				}
			}
		}
	}
	if (shiftFlag == 0)
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <EXTI9_5_IRQHandler+0x1a0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d112      	bne.n	8002a8a <EXTI9_5_IRQHandler+0x132>
	{
		keyChar = KeyPadGetChar(key);
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f857 	bl	8002b1c <KeyPadGetChar>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <EXTI9_5_IRQHandler+0x1a4>)
 8002a74:	701a      	strb	r2, [r3, #0]
		appendInput(input, keyChar);
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <EXTI9_5_IRQHandler+0x1a4>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4820      	ldr	r0, [pc, #128]	; (8002b00 <EXTI9_5_IRQHandler+0x1a8>)
 8002a7e:	f000 f9b1 	bl	8002de4 <appendInput>
		key = 0;
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	e014      	b.n	8002ab4 <EXTI9_5_IRQHandler+0x15c>
	}
	else
	{
		keyChar = KeyPadGetShift(key);
 8002a8a:	4b16      	ldr	r3, [pc, #88]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 f8f6 	bl	8002c80 <KeyPadGetShift>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461a      	mov	r2, r3
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <EXTI9_5_IRQHandler+0x1a4>)
 8002a9a:	701a      	strb	r2, [r3, #0]
		appendInput(input, keyChar);
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <EXTI9_5_IRQHandler+0x1a4>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4817      	ldr	r0, [pc, #92]	; (8002b00 <EXTI9_5_IRQHandler+0x1a8>)
 8002aa4:	f000 f99e 	bl	8002de4 <appendInput>
		shiftFlag = 0;
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <EXTI9_5_IRQHandler+0x1a0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
		key = 0;
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <EXTI9_5_IRQHandler+0x18c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f24a 0112 	movw	r1, #40978	; 0xa012
 8002aba:	4812      	ldr	r0, [pc, #72]	; (8002b04 <EXTI9_5_IRQHandler+0x1ac>)
 8002abc:	f001 f9fc 	bl	8003eb8 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002ac0:	2040      	movs	r0, #64	; 0x40
 8002ac2:	f001 fa13 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ac6:	2080      	movs	r0, #128	; 0x80
 8002ac8:	f001 fa10 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002acc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ad0:	f001 fa0c 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002ad4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ad8:	f001 fa08 	bl	8003eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002adc:	bf00      	nop
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	2000a882 	.word	0x2000a882
 8002ae8:	2000000c 	.word	0x2000000c
 8002aec:	0800d2a4 	.word	0x0800d2a4
 8002af0:	2000001c 	.word	0x2000001c
 8002af4:	0800d2ac 	.word	0x0800d2ac
 8002af8:	2000a884 	.word	0x2000a884
 8002afc:	2000a880 	.word	0x2000a880
 8002b00:	2000a888 	.word	0x2000a888
 8002b04:	40020400 	.word	0x40020400

08002b08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002b0c:	4802      	ldr	r0, [pc, #8]	; (8002b18 <DMA2_Stream3_IRQHandler+0x10>)
 8002b0e:	f000 fda5 	bl	800365c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	2000a290 	.word	0x2000a290

08002b1c <KeyPadGetChar>:

/* USER CODE BEGIN 1 */
char KeyPadGetChar(uint16_t	key)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	80fb      	strh	r3, [r7, #6]
  switch(key)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	f640 0208 	movw	r2, #2056	; 0x808
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	f300 809f 	bgt.w	8002c70 <KeyPadGetChar+0x154>
 8002b32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b36:	dc1a      	bgt.n	8002b6e <KeyPadGetChar+0x52>
 8002b38:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8002b3c:	f300 8098 	bgt.w	8002c70 <KeyPadGetChar+0x154>
 8002b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b44:	dc2a      	bgt.n	8002b9c <KeyPadGetChar+0x80>
 8002b46:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8002b4a:	f300 8091 	bgt.w	8002c70 <KeyPadGetChar+0x154>
 8002b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b52:	dc3b      	bgt.n	8002bcc <KeyPadGetChar+0xb0>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d069      	beq.n	8002c2c <KeyPadGetChar+0x110>
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f2c0 8089 	blt.w	8002c70 <KeyPadGetChar+0x154>
 8002b5e:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8002b62:	f300 8085 	bgt.w	8002c70 <KeyPadGetChar+0x154>
 8002b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b6a:	dc47      	bgt.n	8002bfc <KeyPadGetChar+0xe0>
 8002b6c:	e080      	b.n	8002c70 <KeyPadGetChar+0x154>
 8002b6e:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8002b72:	2b07      	cmp	r3, #7
 8002b74:	d87c      	bhi.n	8002c70 <KeyPadGetChar+0x154>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <KeyPadGetChar+0x60>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002c3d 	.word	0x08002c3d
 8002b80:	08002c4d 	.word	0x08002c4d
 8002b84:	08002c71 	.word	0x08002c71
 8002b88:	08002c5d 	.word	0x08002c5d
 8002b8c:	08002c71 	.word	0x08002c71
 8002b90:	08002c71 	.word	0x08002c71
 8002b94:	08002c71 	.word	0x08002c71
 8002b98:	08002c6d 	.word	0x08002c6d
 8002b9c:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002ba0:	2b07      	cmp	r3, #7
 8002ba2:	d865      	bhi.n	8002c70 <KeyPadGetChar+0x154>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <KeyPadGetChar+0x90>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002c39 	.word	0x08002c39
 8002bb0:	08002c49 	.word	0x08002c49
 8002bb4:	08002c71 	.word	0x08002c71
 8002bb8:	08002c59 	.word	0x08002c59
 8002bbc:	08002c71 	.word	0x08002c71
 8002bc0:	08002c71 	.word	0x08002c71
 8002bc4:	08002c71 	.word	0x08002c71
 8002bc8:	08002c69 	.word	0x08002c69
 8002bcc:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002bd0:	2b07      	cmp	r3, #7
 8002bd2:	d84d      	bhi.n	8002c70 <KeyPadGetChar+0x154>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <KeyPadGetChar+0xc0>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002c35 	.word	0x08002c35
 8002be0:	08002c45 	.word	0x08002c45
 8002be4:	08002c71 	.word	0x08002c71
 8002be8:	08002c55 	.word	0x08002c55
 8002bec:	08002c71 	.word	0x08002c71
 8002bf0:	08002c71 	.word	0x08002c71
 8002bf4:	08002c71 	.word	0x08002c71
 8002bf8:	08002c65 	.word	0x08002c65
 8002bfc:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002c00:	2b07      	cmp	r3, #7
 8002c02:	d835      	bhi.n	8002c70 <KeyPadGetChar+0x154>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <KeyPadGetChar+0xf0>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c41 	.word	0x08002c41
 8002c14:	08002c71 	.word	0x08002c71
 8002c18:	08002c51 	.word	0x08002c51
 8002c1c:	08002c71 	.word	0x08002c71
 8002c20:	08002c71 	.word	0x08002c71
 8002c24:	08002c71 	.word	0x08002c71
 8002c28:	08002c61 	.word	0x08002c61
  {
    case 0x0000:
    	return 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e020      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0101:
		return '1';
 8002c30:	2331      	movs	r3, #49	; 0x31
 8002c32:	e01e      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0201:
		return '2';
 8002c34:	2332      	movs	r3, #50	; 0x32
 8002c36:	e01c      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0401:
		return '3';
 8002c38:	2333      	movs	r3, #51	; 0x33
 8002c3a:	e01a      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0801:
		return '/'; //Was 'A' changed to '/'
 8002c3c:	232f      	movs	r3, #47	; 0x2f
 8002c3e:	e018      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0102:
		return '4';
 8002c40:	2334      	movs	r3, #52	; 0x34
 8002c42:	e016      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0202:
		return '5';
 8002c44:	2335      	movs	r3, #53	; 0x35
 8002c46:	e014      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0402:
		return '6';
 8002c48:	2336      	movs	r3, #54	; 0x36
 8002c4a:	e012      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0802:
		return 'x'; //Was 'B' changed to 'x'
 8002c4c:	2378      	movs	r3, #120	; 0x78
 8002c4e:	e010      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0104:
		return '7';
 8002c50:	2337      	movs	r3, #55	; 0x37
 8002c52:	e00e      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0204:
		return '8';
 8002c54:	2338      	movs	r3, #56	; 0x38
 8002c56:	e00c      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0404:
		return '9';
 8002c58:	2339      	movs	r3, #57	; 0x39
 8002c5a:	e00a      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0804:
		return '-'; //Was 'c' changed to '-'
 8002c5c:	232d      	movs	r3, #45	; 0x2d
 8002c5e:	e008      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0108:
		return '*'; //Shift key
 8002c60:	232a      	movs	r3, #42	; 0x2a
 8002c62:	e006      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0208:
		return '0';
 8002c64:	2330      	movs	r3, #48	; 0x30
 8002c66:	e004      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0408:
		return '='; //Was '#' changed to '='
 8002c68:	233d      	movs	r3, #61	; 0x3d
 8002c6a:	e002      	b.n	8002c72 <KeyPadGetChar+0x156>
	case 0x0808:
		return '+'; //Was 'D' changed to '+'
 8002c6c:	232b      	movs	r3, #43	; 0x2b
 8002c6e:	e000      	b.n	8002c72 <KeyPadGetChar+0x156>
	default:
		return 0;
 8002c70:	2300      	movs	r3, #0
	}
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop

08002c80 <KeyPadGetShift>:

char KeyPadGetShift(uint16_t key)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
  switch(key)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f640 0208 	movw	r2, #2056	; 0x808
 8002c90:	4293      	cmp	r3, r2
 8002c92:	f300 80a1 	bgt.w	8002dd8 <KeyPadGetShift+0x158>
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9a:	dc1a      	bgt.n	8002cd2 <KeyPadGetShift+0x52>
 8002c9c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8002ca0:	f300 809a 	bgt.w	8002dd8 <KeyPadGetShift+0x158>
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	dc2a      	bgt.n	8002d00 <KeyPadGetShift+0x80>
 8002caa:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8002cae:	f300 8093 	bgt.w	8002dd8 <KeyPadGetShift+0x158>
 8002cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb6:	dc3b      	bgt.n	8002d30 <KeyPadGetShift+0xb0>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d069      	beq.n	8002d90 <KeyPadGetShift+0x110>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f2c0 808b 	blt.w	8002dd8 <KeyPadGetShift+0x158>
 8002cc2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8002cc6:	f300 8087 	bgt.w	8002dd8 <KeyPadGetShift+0x158>
 8002cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cce:	dc47      	bgt.n	8002d60 <KeyPadGetShift+0xe0>
 8002cd0:	e082      	b.n	8002dd8 <KeyPadGetShift+0x158>
 8002cd2:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8002cd6:	2b07      	cmp	r3, #7
 8002cd8:	d87e      	bhi.n	8002dd8 <KeyPadGetShift+0x158>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <KeyPadGetShift+0x60>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002da1 	.word	0x08002da1
 8002ce4:	08002db1 	.word	0x08002db1
 8002ce8:	08002dd9 	.word	0x08002dd9
 8002cec:	08002dc1 	.word	0x08002dc1
 8002cf0:	08002dd9 	.word	0x08002dd9
 8002cf4:	08002dd9 	.word	0x08002dd9
 8002cf8:	08002dd9 	.word	0x08002dd9
 8002cfc:	08002dd5 	.word	0x08002dd5
 8002d00:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002d04:	2b07      	cmp	r3, #7
 8002d06:	d867      	bhi.n	8002dd8 <KeyPadGetShift+0x158>
 8002d08:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <KeyPadGetShift+0x90>)
 8002d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0e:	bf00      	nop
 8002d10:	08002d9d 	.word	0x08002d9d
 8002d14:	08002dad 	.word	0x08002dad
 8002d18:	08002dd9 	.word	0x08002dd9
 8002d1c:	08002dbd 	.word	0x08002dbd
 8002d20:	08002dd9 	.word	0x08002dd9
 8002d24:	08002dd9 	.word	0x08002dd9
 8002d28:	08002dd9 	.word	0x08002dd9
 8002d2c:	08002dcd 	.word	0x08002dcd
 8002d30:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8002d34:	2b07      	cmp	r3, #7
 8002d36:	d84f      	bhi.n	8002dd8 <KeyPadGetShift+0x158>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <KeyPadGetShift+0xc0>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d99 	.word	0x08002d99
 8002d44:	08002da9 	.word	0x08002da9
 8002d48:	08002dd9 	.word	0x08002dd9
 8002d4c:	08002db9 	.word	0x08002db9
 8002d50:	08002dd9 	.word	0x08002dd9
 8002d54:	08002dd9 	.word	0x08002dd9
 8002d58:	08002dd9 	.word	0x08002dd9
 8002d5c:	08002dc9 	.word	0x08002dc9
 8002d60:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8002d64:	2b07      	cmp	r3, #7
 8002d66:	d837      	bhi.n	8002dd8 <KeyPadGetShift+0x158>
 8002d68:	a201      	add	r2, pc, #4	; (adr r2, 8002d70 <KeyPadGetShift+0xf0>)
 8002d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6e:	bf00      	nop
 8002d70:	08002d95 	.word	0x08002d95
 8002d74:	08002da5 	.word	0x08002da5
 8002d78:	08002dd9 	.word	0x08002dd9
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002dd9 	.word	0x08002dd9
 8002d84:	08002dd9 	.word	0x08002dd9
 8002d88:	08002dd9 	.word	0x08002dd9
 8002d8c:	08002dc5 	.word	0x08002dc5
  {
    case 0x0000:
    	return 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e022      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0101:
		return '1';
 8002d94:	2331      	movs	r3, #49	; 0x31
 8002d96:	e020      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0201:
		return '2';
 8002d98:	2332      	movs	r3, #50	; 0x32
 8002d9a:	e01e      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0401:
		return '3';
 8002d9c:	2333      	movs	r3, #51	; 0x33
 8002d9e:	e01c      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0801:
		return '('; //Was '/' changed to '('
 8002da0:	2328      	movs	r3, #40	; 0x28
 8002da2:	e01a      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0102:
		return '4';
 8002da4:	2334      	movs	r3, #52	; 0x34
 8002da6:	e018      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0202:
		return '5';
 8002da8:	2335      	movs	r3, #53	; 0x35
 8002daa:	e016      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0402:
		return '6';
 8002dac:	2336      	movs	r3, #54	; 0x36
 8002dae:	e014      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0802:
		return ')'; //Was 'x' changed to ')'
 8002db0:	2329      	movs	r3, #41	; 0x29
 8002db2:	e012      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0104:
		return '7';
 8002db4:	2337      	movs	r3, #55	; 0x37
 8002db6:	e010      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0204:
		return '8';
 8002db8:	2338      	movs	r3, #56	; 0x38
 8002dba:	e00e      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0404:
		return '9';
 8002dbc:	2339      	movs	r3, #57	; 0x39
 8002dbe:	e00c      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0804:
		return '^'; //Was '-' changed to '^'
 8002dc0:	235e      	movs	r3, #94	; 0x5e
 8002dc2:	e00a      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0108:
		return '*'; //Shift key
 8002dc4:	232a      	movs	r3, #42	; 0x2a
 8002dc6:	e008      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0208:
		return '0';
 8002dc8:	2330      	movs	r3, #48	; 0x30
 8002dca:	e006      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0408:
		return screenClr(); //Was '#' changed to '='
 8002dcc:	f000 f828 	bl	8002e20 <screenClr>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	e002      	b.n	8002dda <KeyPadGetShift+0x15a>
	case 0x0808:
		return '.'; //Was '+' changed to '.'
 8002dd4:	232e      	movs	r3, #46	; 0x2e
 8002dd6:	e000      	b.n	8002dda <KeyPadGetShift+0x15a>
	default:
		return 0;
 8002dd8:	2300      	movs	r3, #0
	}
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop

08002de4 <appendInput>:

void appendInput(char* input, char keyChar)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	70fb      	strb	r3, [r7, #3]
	if (keyChar != '*')
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	2b2a      	cmp	r3, #42	; 0x2a
 8002df4:	d00f      	beq.n	8002e16 <appendInput+0x32>
	{
		int len = strlen(input);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fa5a 	bl	80002b0 <strlen>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
		input[len] = keyChar;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	701a      	strb	r2, [r3, #0]
		input[len + 1] = '\0';
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
	}
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <screenClr>:

char screenClr()
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	input[0] = '\0';
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <screenClr+0x14>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
	ILI9163_newFrame();
 8002e2a:	f7fe fbbf 	bl	80015ac <ILI9163_newFrame>
	return 0;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	2000a888 	.word	0x2000a888

08002e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return 1;
 8002e3c:	2301      	movs	r3, #1
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_kill>:

int _kill(int pid, int sig)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e52:	f005 fdf9 	bl	8008a48 <__errno>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2216      	movs	r2, #22
 8002e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_exit>:

void _exit (int status)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffe7 	bl	8002e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e7a:	e7fe      	b.n	8002e7a <_exit+0x12>

08002e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e00a      	b.n	8002ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e8e:	f3af 8000 	nop.w
 8002e92:	4601      	mov	r1, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	b2ca      	uxtb	r2, r1
 8002e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dbf0      	blt.n	8002e8e <_read+0x12>
  }

  return len;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e009      	b.n	8002edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	60ba      	str	r2, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbf1      	blt.n	8002ec8 <_write+0x12>
  }
  return len;
 8002ee4:	687b      	ldr	r3, [r7, #4]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_close>:

int _close(int file)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f16:	605a      	str	r2, [r3, #4]
  return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <_isatty>:

int _isatty(int file)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f2e:	2301      	movs	r3, #1
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <_sbrk+0x5c>)
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <_sbrk+0x60>)
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f6c:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <_sbrk+0x64>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <_sbrk+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d207      	bcs.n	8002f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f88:	f005 fd5e 	bl	8008a48 <__errno>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	220c      	movs	r2, #12
 8002f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f96:	e009      	b.n	8002fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f98:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4a05      	ldr	r2, [pc, #20]	; (8002fbc <_sbrk+0x64>)
 8002fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20050000 	.word	0x20050000
 8002fb8:	00000400 	.word	0x00000400
 8002fbc:	2000a958 	.word	0x2000a958
 8002fc0:	2000aab0 	.word	0x2000aab0

08002fc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <SystemInit+0x20>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <SystemInit+0x20>)
 8002fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fec:	480d      	ldr	r0, [pc, #52]	; (8003024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fee:	490e      	ldr	r1, [pc, #56]	; (8003028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ff0:	4a0e      	ldr	r2, [pc, #56]	; (800302c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff4:	e002      	b.n	8002ffc <LoopCopyDataInit>

08002ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffa:	3304      	adds	r3, #4

08002ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003000:	d3f9      	bcc.n	8002ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003004:	4c0b      	ldr	r4, [pc, #44]	; (8003034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003008:	e001      	b.n	800300e <LoopFillZerobss>

0800300a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800300c:	3204      	adds	r2, #4

0800300e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003010:	d3fb      	bcc.n	800300a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003012:	f7ff ffd7 	bl	8002fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003016:	f005 fd1d 	bl	8008a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800301a:	f7fe fc59 	bl	80018d0 <main>
  bx  lr    
 800301e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003020:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003028:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 800302c:	0800d738 	.word	0x0800d738
  ldr r2, =_sbss
 8003030:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003034:	2000aaac 	.word	0x2000aaac

08003038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003038:	e7fe      	b.n	8003038 <ADC_IRQHandler>

0800303a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303e:	2003      	movs	r0, #3
 8003040:	f000 f94c 	bl	80032dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003044:	2000      	movs	r0, #0
 8003046:	f000 f805 	bl	8003054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800304a:	f7ff fabb 	bl	80025c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_InitTick+0x54>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <HAL_InitTick+0x58>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306a:	fbb3 f3f1 	udiv	r3, r3, r1
 800306e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003072:	4618      	mov	r0, r3
 8003074:	f000 f967 	bl	8003346 <HAL_SYSTICK_Config>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e00e      	b.n	80030a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d80a      	bhi.n	800309e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003088:	2200      	movs	r2, #0
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003090:	f000 f92f 	bl	80032f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003094:	4a06      	ldr	r2, [pc, #24]	; (80030b0 <HAL_InitTick+0x5c>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	2000002c 	.word	0x2000002c
 80030ac:	20000034 	.word	0x20000034
 80030b0:	20000030 	.word	0x20000030

080030b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_IncTick+0x20>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_IncTick+0x24>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4413      	add	r3, r2
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_IncTick+0x24>)
 80030c6:	6013      	str	r3, [r2, #0]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000034 	.word	0x20000034
 80030d8:	2000a95c 	.word	0x2000a95c

080030dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return uwTick;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_GetTick+0x14>)
 80030e2:	681b      	ldr	r3, [r3, #0]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	2000a95c 	.word	0x2000a95c

080030f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7ff ffee 	bl	80030dc <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800310c:	d005      	beq.n	800311a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <HAL_Delay+0x44>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800311a:	bf00      	nop
 800311c:	f7ff ffde 	bl	80030dc <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f7      	bhi.n	800311c <HAL_Delay+0x28>
  {
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000034 	.word	0x20000034

0800313c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <__NVIC_SetPriorityGrouping+0x40>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003158:	4013      	ands	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <__NVIC_SetPriorityGrouping+0x44>)
 8003166:	4313      	orrs	r3, r2
 8003168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <__NVIC_SetPriorityGrouping+0x40>)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00
 8003180:	05fa0000 	.word	0x05fa0000

08003184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <__NVIC_GetPriorityGrouping+0x18>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	f003 0307 	and.w	r3, r3, #7
}
 8003192:	4618      	mov	r0, r3
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000ed00 	.word	0xe000ed00

080031a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	db0b      	blt.n	80031ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4907      	ldr	r1, [pc, #28]	; (80031d8 <__NVIC_EnableIRQ+0x38>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2001      	movs	r0, #1
 80031c2:	fa00 f202 	lsl.w	r2, r0, r2
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	; (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a8:	d301      	bcc.n	80032ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032aa:	2301      	movs	r3, #1
 80032ac:	e00f      	b.n	80032ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ae:	4a0a      	ldr	r2, [pc, #40]	; (80032d8 <SysTick_Config+0x40>)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b6:	210f      	movs	r1, #15
 80032b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032bc:	f7ff ff8e 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <SysTick_Config+0x40>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c6:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <SysTick_Config+0x40>)
 80032c8:	2207      	movs	r2, #7
 80032ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000e010 	.word	0xe000e010

080032dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7ff ff29 	bl	800313c <__NVIC_SetPriorityGrouping>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b086      	sub	sp, #24
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	4603      	mov	r3, r0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003304:	f7ff ff3e 	bl	8003184 <__NVIC_GetPriorityGrouping>
 8003308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6978      	ldr	r0, [r7, #20]
 8003310:	f7ff ff8e 	bl	8003230 <NVIC_EncodePriority>
 8003314:	4602      	mov	r2, r0
 8003316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff5d 	bl	80031dc <__NVIC_SetPriority>
}
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff31 	bl	80031a0 <__NVIC_EnableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffa2 	bl	8003298 <SysTick_Config>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800336c:	f7ff feb6 	bl	80030dc <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e099      	b.n	80034b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800339c:	e00f      	b.n	80033be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800339e:	f7ff fe9d 	bl	80030dc <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d908      	bls.n	80033be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2203      	movs	r2, #3
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e078      	b.n	80034b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1e8      	bne.n	800339e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4b38      	ldr	r3, [pc, #224]	; (80034b8 <HAL_DMA_Init+0x158>)
 80033d8:	4013      	ands	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	2b04      	cmp	r3, #4
 8003416:	d107      	bne.n	8003428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	4313      	orrs	r3, r2
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0307 	bic.w	r3, r3, #7
 800343e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	2b04      	cmp	r3, #4
 8003450:	d117      	bne.n	8003482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fae7 	bl	8003a38 <DMA_CheckFifoParam>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800347e:	2301      	movs	r3, #1
 8003480:	e016      	b.n	80034b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa9e 	bl	80039cc <DMA_CalcBaseAndBitshift>
 8003490:	4603      	mov	r3, r0
 8003492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	223f      	movs	r2, #63	; 0x3f
 800349a:	409a      	lsls	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	f010803f 	.word	0xf010803f

080034bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_DMA_Start_IT+0x26>
 80034de:	2302      	movs	r3, #2
 80034e0:	e048      	b.n	8003574 <HAL_DMA_Start_IT+0xb8>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d137      	bne.n	8003566 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 fa30 	bl	8003970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003514:	223f      	movs	r2, #63	; 0x3f
 8003516:	409a      	lsls	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0216 	orr.w	r2, r2, #22
 800352a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800353a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	e005      	b.n	8003572 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800356e:	2302      	movs	r3, #2
 8003570:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003572:	7dfb      	ldrb	r3, [r7, #23]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800358a:	f7ff fda7 	bl	80030dc <HAL_GetTick>
 800358e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d008      	beq.n	80035ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e052      	b.n	8003654 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0216 	bic.w	r2, r2, #22
 80035bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <HAL_DMA_Abort+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d007      	beq.n	80035ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035fe:	e013      	b.n	8003628 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003600:	f7ff fd6c 	bl	80030dc <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b05      	cmp	r3, #5
 800360c:	d90c      	bls.n	8003628 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2203      	movs	r2, #3
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e015      	b.n	8003654 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e4      	bne.n	8003600 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	223f      	movs	r2, #63	; 0x3f
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003668:	4b8e      	ldr	r3, [pc, #568]	; (80038a4 <HAL_DMA_IRQHandler+0x248>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a8e      	ldr	r2, [pc, #568]	; (80038a8 <HAL_DMA_IRQHandler+0x24c>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a9b      	lsrs	r3, r3, #10
 8003674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2208      	movs	r2, #8
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0204 	bic.w	r2, r2, #4
 80036ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	2208      	movs	r2, #8
 80036b6:	409a      	lsls	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f043 0201 	orr.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	2201      	movs	r2, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d012      	beq.n	80036fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f043 0202 	orr.w	r2, r3, #2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003702:	2204      	movs	r2, #4
 8003704:	409a      	lsls	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d012      	beq.n	8003734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	2204      	movs	r2, #4
 8003722:	409a      	lsls	r2, r3
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f043 0204 	orr.w	r2, r3, #4
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003738:	2210      	movs	r2, #16
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d043      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d03c      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003756:	2210      	movs	r2, #16
 8003758:	409a      	lsls	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d108      	bne.n	800378c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	2b00      	cmp	r3, #0
 8003780:	d024      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	4798      	blx	r3
 800378a:	e01f      	b.n	80037cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01b      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e016      	b.n	80037cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d107      	bne.n	80037bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0208 	bic.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	2220      	movs	r2, #32
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 808f 	beq.w	80038fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0310 	and.w	r3, r3, #16
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8087 	beq.w	80038fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	2220      	movs	r2, #32
 80037f4:	409a      	lsls	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b05      	cmp	r3, #5
 8003804:	d136      	bne.n	8003874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0216 	bic.w	r2, r2, #22
 8003814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d103      	bne.n	8003836 <HAL_DMA_IRQHandler+0x1da>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003832:	2b00      	cmp	r3, #0
 8003834:	d007      	beq.n	8003846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0208 	bic.w	r2, r2, #8
 8003844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	223f      	movs	r2, #63	; 0x3f
 800384c:	409a      	lsls	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003866:	2b00      	cmp	r3, #0
 8003868:	d07e      	beq.n	8003968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
        }
        return;
 8003872:	e079      	b.n	8003968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01d      	beq.n	80038be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	2b00      	cmp	r3, #0
 8003896:	d031      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	4798      	blx	r3
 80038a0:	e02c      	b.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
 80038a2:	bf00      	nop
 80038a4:	2000002c 	.word	0x2000002c
 80038a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d023      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
 80038bc:	e01e      	b.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0210 	bic.w	r2, r2, #16
 80038da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003900:	2b00      	cmp	r3, #0
 8003902:	d032      	beq.n	800396a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d022      	beq.n	8003956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2205      	movs	r2, #5
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3301      	adds	r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	d307      	bcc.n	8003944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1f2      	bne.n	8003928 <HAL_DMA_IRQHandler+0x2cc>
 8003942:	e000      	b.n	8003946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e000      	b.n	800396a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003968:	bf00      	nop
    }
  }
}
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
 800397c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800398c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d108      	bne.n	80039b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ae:	e007      	b.n	80039c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	60da      	str	r2, [r3, #12]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	3b10      	subs	r3, #16
 80039dc:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <DMA_CalcBaseAndBitshift+0x60>)
 80039de:	fba2 2303 	umull	r2, r3, r2, r3
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039e6:	4a12      	ldr	r2, [pc, #72]	; (8003a30 <DMA_CalcBaseAndBitshift+0x64>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b03      	cmp	r3, #3
 80039f8:	d908      	bls.n	8003a0c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <DMA_CalcBaseAndBitshift+0x68>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	659a      	str	r2, [r3, #88]	; 0x58
 8003a0a:	e006      	b.n	8003a1a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <DMA_CalcBaseAndBitshift+0x68>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	aaaaaaab 	.word	0xaaaaaaab
 8003a30:	0800d2cc 	.word	0x0800d2cc
 8003a34:	fffffc00 	.word	0xfffffc00

08003a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d11f      	bne.n	8003a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b03      	cmp	r3, #3
 8003a56:	d856      	bhi.n	8003b06 <DMA_CheckFifoParam+0xce>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <DMA_CheckFifoParam+0x28>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a71 	.word	0x08003a71
 8003a64:	08003a83 	.word	0x08003a83
 8003a68:	08003a71 	.word	0x08003a71
 8003a6c:	08003b07 	.word	0x08003b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d046      	beq.n	8003b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a80:	e043      	b.n	8003b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a8a:	d140      	bne.n	8003b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a90:	e03d      	b.n	8003b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	d121      	bne.n	8003ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d837      	bhi.n	8003b12 <DMA_CheckFifoParam+0xda>
 8003aa2:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <DMA_CheckFifoParam+0x70>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003abf 	.word	0x08003abf
 8003ab0:	08003ab9 	.word	0x08003ab9
 8003ab4:	08003ad1 	.word	0x08003ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      break;
 8003abc:	e030      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d025      	beq.n	8003b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ace:	e022      	b.n	8003b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ad8:	d11f      	bne.n	8003b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ade:	e01c      	b.n	8003b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d903      	bls.n	8003aee <DMA_CheckFifoParam+0xb6>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d003      	beq.n	8003af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003aec:	e018      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
      break;
 8003af2:	e015      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00e      	beq.n	8003b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      break;
 8003b04:	e00b      	b.n	8003b1e <DMA_CheckFifoParam+0xe6>
      break;
 8003b06:	bf00      	nop
 8003b08:	e00a      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e008      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e006      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
 8003b14:	e004      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e002      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b1a:	bf00      	nop
 8003b1c:	e000      	b.n	8003b20 <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b089      	sub	sp, #36	; 0x24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	e175      	b.n	8003e3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b50:	2201      	movs	r2, #1
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	f040 8164 	bne.w	8003e36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d005      	beq.n	8003b86 <HAL_GPIO_Init+0x56>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d130      	bne.n	8003be8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	2203      	movs	r2, #3
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43db      	mvns	r3, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 0201 	and.w	r2, r3, #1
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d017      	beq.n	8003c24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	2203      	movs	r2, #3
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d123      	bne.n	8003c78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	08da      	lsrs	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3208      	adds	r2, #8
 8003c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	220f      	movs	r2, #15
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	08da      	lsrs	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3208      	adds	r2, #8
 8003c72:	69b9      	ldr	r1, [r7, #24]
 8003c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	2203      	movs	r2, #3
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 0203 	and.w	r2, r3, #3
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80be 	beq.w	8003e36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cba:	4b66      	ldr	r3, [pc, #408]	; (8003e54 <HAL_GPIO_Init+0x324>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <HAL_GPIO_Init+0x324>)
 8003cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_GPIO_Init+0x324>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003cd2:	4a61      	ldr	r2, [pc, #388]	; (8003e58 <HAL_GPIO_Init+0x328>)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	; (8003e5c <HAL_GPIO_Init+0x32c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d037      	beq.n	8003d6e <HAL_GPIO_Init+0x23e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a57      	ldr	r2, [pc, #348]	; (8003e60 <HAL_GPIO_Init+0x330>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_GPIO_Init+0x23a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a56      	ldr	r2, [pc, #344]	; (8003e64 <HAL_GPIO_Init+0x334>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <HAL_GPIO_Init+0x236>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a55      	ldr	r2, [pc, #340]	; (8003e68 <HAL_GPIO_Init+0x338>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_Init+0x232>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a54      	ldr	r2, [pc, #336]	; (8003e6c <HAL_GPIO_Init+0x33c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_Init+0x22e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a53      	ldr	r2, [pc, #332]	; (8003e70 <HAL_GPIO_Init+0x340>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x22a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <HAL_GPIO_Init+0x344>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x226>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a51      	ldr	r2, [pc, #324]	; (8003e78 <HAL_GPIO_Init+0x348>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x222>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a50      	ldr	r2, [pc, #320]	; (8003e7c <HAL_GPIO_Init+0x34c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x21e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4f      	ldr	r2, [pc, #316]	; (8003e80 <HAL_GPIO_Init+0x350>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x21a>
 8003d46:	2309      	movs	r3, #9
 8003d48:	e012      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	e010      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	e00e      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d52:	2307      	movs	r3, #7
 8003d54:	e00c      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e00a      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e008      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e006      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e004      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e002      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_GPIO_Init+0x240>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	69fa      	ldr	r2, [r7, #28]
 8003d72:	f002 0203 	and.w	r2, r2, #3
 8003d76:	0092      	lsls	r2, r2, #2
 8003d78:	4093      	lsls	r3, r2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d80:	4935      	ldr	r1, [pc, #212]	; (8003e58 <HAL_GPIO_Init+0x328>)
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8e:	4b3d      	ldr	r3, [pc, #244]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db2:	4a34      	ldr	r2, [pc, #208]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ddc:	4a29      	ldr	r2, [pc, #164]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003de2:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	43db      	mvns	r3, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4013      	ands	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e06:	4a1f      	ldr	r2, [pc, #124]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e30:	4a14      	ldr	r2, [pc, #80]	; (8003e84 <HAL_GPIO_Init+0x354>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	f67f ae86 	bls.w	8003b50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40013800 	.word	0x40013800
 8003e5c:	40020000 	.word	0x40020000
 8003e60:	40020400 	.word	0x40020400
 8003e64:	40020800 	.word	0x40020800
 8003e68:	40020c00 	.word	0x40020c00
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40021400 	.word	0x40021400
 8003e74:	40021800 	.word	0x40021800
 8003e78:	40021c00 	.word	0x40021c00
 8003e7c:	40022000 	.word	0x40022000
 8003e80:	40022400 	.word	0x40022400
 8003e84:	40013c00 	.word	0x40013c00

08003e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e001      	b.n	8003eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ed4:	e003      	b.n	8003ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	041a      	lsls	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	619a      	str	r2, [r3, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	695a      	ldr	r2, [r3, #20]
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d006      	beq.n	8003f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f02:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f806 	bl	8003f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f34:	b08f      	sub	sp, #60	; 0x3c
 8003f36:	af0a      	add	r7, sp, #40	; 0x28
 8003f38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e116      	b.n	8004172 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7fe fc52 	bl	8002808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2203      	movs	r2, #3
 8003f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 fbfe 	bl	8006784 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	687e      	ldr	r6, [r7, #4]
 8003f90:	466d      	mov	r5, sp
 8003f92:	f106 0410 	add.w	r4, r6, #16
 8003f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fa6:	1d33      	adds	r3, r6, #4
 8003fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003faa:	6838      	ldr	r0, [r7, #0]
 8003fac:	f002 fb92 	bl	80066d4 <USB_CoreInit>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0d7      	b.n	8004172 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f002 fbec 	bl	80067a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	e04a      	b.n	800406a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fd4:	7bfa      	ldrb	r2, [r7, #15]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	333d      	adds	r3, #61	; 0x3d
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fe8:	7bfa      	ldrb	r2, [r7, #15]
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	333c      	adds	r3, #60	; 0x3c
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	b298      	uxth	r0, r3
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3344      	adds	r3, #68	; 0x44
 8004010:	4602      	mov	r2, r0
 8004012:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	3340      	adds	r3, #64	; 0x40
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004028:	7bfa      	ldrb	r2, [r7, #15]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3348      	adds	r3, #72	; 0x48
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800403c:	7bfa      	ldrb	r2, [r7, #15]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	334c      	adds	r3, #76	; 0x4c
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3354      	adds	r3, #84	; 0x54
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	3301      	adds	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	7bfa      	ldrb	r2, [r7, #15]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d3af      	bcc.n	8003fd4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	73fb      	strb	r3, [r7, #15]
 8004078:	e044      	b.n	8004104 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040ce:	2200      	movs	r2, #0
 80040d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	440b      	add	r3, r1
 80040e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	4613      	mov	r3, r2
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	3301      	adds	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	d3b5      	bcc.n	800407a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	687e      	ldr	r6, [r7, #4]
 8004116:	466d      	mov	r5, sp
 8004118:	f106 0410 	add.w	r4, r6, #16
 800411c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800411e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004124:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004128:	e885 0003 	stmia.w	r5, {r0, r1}
 800412c:	1d33      	adds	r3, r6, #4
 800412e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004130:	6838      	ldr	r0, [r7, #0]
 8004132:	f002 fb85 	bl	8006840 <USB_DevInit>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e014      	b.n	8004172 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b01      	cmp	r3, #1
 800415e:	d102      	bne.n	8004166 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f80b 	bl	800417c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f002 fd43 	bl	8006bf6 <USB_DevDisconnect>

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800417c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_PCDEx_ActivateLPM+0x44>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	10000003 	.word	0x10000003

080041c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	40007000 	.word	0x40007000

080041e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041ec:	2300      	movs	r3, #0
 80041ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e291      	b.n	800471e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 8087 	beq.w	8004316 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004208:	4b96      	ldr	r3, [pc, #600]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 030c 	and.w	r3, r3, #12
 8004210:	2b04      	cmp	r3, #4
 8004212:	d00c      	beq.n	800422e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004214:	4b93      	ldr	r3, [pc, #588]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 030c 	and.w	r3, r3, #12
 800421c:	2b08      	cmp	r3, #8
 800421e:	d112      	bne.n	8004246 <HAL_RCC_OscConfig+0x62>
 8004220:	4b90      	ldr	r3, [pc, #576]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422c:	d10b      	bne.n	8004246 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422e:	4b8d      	ldr	r3, [pc, #564]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d06c      	beq.n	8004314 <HAL_RCC_OscConfig+0x130>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d168      	bne.n	8004314 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e26b      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x7a>
 8004250:	4b84      	ldr	r3, [pc, #528]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a83      	ldr	r2, [pc, #524]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425a:	6013      	str	r3, [r2, #0]
 800425c:	e02e      	b.n	80042bc <HAL_RCC_OscConfig+0xd8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x9c>
 8004266:	4b7f      	ldr	r3, [pc, #508]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7e      	ldr	r2, [pc, #504]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800426c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b7c      	ldr	r3, [pc, #496]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a7b      	ldr	r2, [pc, #492]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xd8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0xc0>
 800428a:	4b76      	ldr	r3, [pc, #472]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a75      	ldr	r2, [pc, #468]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b73      	ldr	r3, [pc, #460]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a72      	ldr	r2, [pc, #456]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xd8>
 80042a4:	4b6f      	ldr	r3, [pc, #444]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a6e      	ldr	r2, [pc, #440]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b6c      	ldr	r3, [pc, #432]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a6b      	ldr	r2, [pc, #428]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fe ff0a 	bl	80030dc <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fe ff06 	bl	80030dc <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e21f      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042de:	4b61      	ldr	r3, [pc, #388]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xe8>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fe fef6 	bl	80030dc <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fe fef2 	bl	80030dc <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e20b      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004306:	4b57      	ldr	r3, [pc, #348]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x110>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d069      	beq.n	80043f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004322:	4b50      	ldr	r3, [pc, #320]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432e:	4b4d      	ldr	r3, [pc, #308]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b08      	cmp	r3, #8
 8004338:	d11c      	bne.n	8004374 <HAL_RCC_OscConfig+0x190>
 800433a:	4b4a      	ldr	r3, [pc, #296]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d116      	bne.n	8004374 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004346:	4b47      	ldr	r3, [pc, #284]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_RCC_OscConfig+0x17a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e1df      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	493d      	ldr	r1, [pc, #244]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800436e:	4313      	orrs	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	e040      	b.n	80043f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d023      	beq.n	80043c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437c:	4b39      	ldr	r3, [pc, #228]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a38      	ldr	r2, [pc, #224]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fe fea8 	bl	80030dc <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004390:	f7fe fea4 	bl	80030dc <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1bd      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a2:	4b30      	ldr	r3, [pc, #192]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ae:	4b2d      	ldr	r3, [pc, #180]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4929      	ldr	r1, [pc, #164]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	600b      	str	r3, [r1, #0]
 80043c2:	e018      	b.n	80043f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a26      	ldr	r2, [pc, #152]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fe fe84 	bl	80030dc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fe fe80 	bl	80030dc <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e199      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ea:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d038      	beq.n	8004474 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d019      	beq.n	800443e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	4a15      	ldr	r2, [pc, #84]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004416:	f7fe fe61 	bl	80030dc <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800441e:	f7fe fe5d 	bl	80030dc <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e176      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x23a>
 800443c:	e01a      	b.n	8004474 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800443e:	4b09      	ldr	r3, [pc, #36]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <HAL_RCC_OscConfig+0x280>)
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444a:	f7fe fe47 	bl	80030dc <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004452:	f7fe fe43 	bl	80030dc <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d903      	bls.n	8004468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e15c      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
 8004464:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004468:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ee      	bne.n	8004452 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80a4 	beq.w	80045ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004482:	4b8b      	ldr	r3, [pc, #556]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800448e:	4b88      	ldr	r3, [pc, #544]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a87      	ldr	r2, [pc, #540]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	4b85      	ldr	r3, [pc, #532]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a2:	60bb      	str	r3, [r7, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a6:	2301      	movs	r3, #1
 80044a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044aa:	4b82      	ldr	r3, [pc, #520]	; (80046b4 <HAL_RCC_OscConfig+0x4d0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d118      	bne.n	80044e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044b6:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCC_OscConfig+0x4d0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a7e      	ldr	r2, [pc, #504]	; (80046b4 <HAL_RCC_OscConfig+0x4d0>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c2:	f7fe fe0b 	bl	80030dc <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ca:	f7fe fe07 	bl	80030dc <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e120      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044dc:	4b75      	ldr	r3, [pc, #468]	; (80046b4 <HAL_RCC_OscConfig+0x4d0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <HAL_RCC_OscConfig+0x31a>
 80044f0:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	4a6e      	ldr	r2, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6713      	str	r3, [r2, #112]	; 0x70
 80044fc:	e02d      	b.n	800455a <HAL_RCC_OscConfig+0x376>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10c      	bne.n	8004520 <HAL_RCC_OscConfig+0x33c>
 8004506:	4b6a      	ldr	r3, [pc, #424]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	4a69      	ldr	r2, [pc, #420]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800450c:	f023 0301 	bic.w	r3, r3, #1
 8004510:	6713      	str	r3, [r2, #112]	; 0x70
 8004512:	4b67      	ldr	r3, [pc, #412]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a66      	ldr	r2, [pc, #408]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004518:	f023 0304 	bic.w	r3, r3, #4
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x376>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x35e>
 8004528:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a60      	ldr	r2, [pc, #384]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b5e      	ldr	r3, [pc, #376]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a5d      	ldr	r2, [pc, #372]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x376>
 8004542:	4b5b      	ldr	r3, [pc, #364]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a5a      	ldr	r2, [pc, #360]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a57      	ldr	r2, [pc, #348]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe fdbb 	bl	80030dc <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fdb7 	bl	80030dc <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0ce      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCC_OscConfig+0x386>
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fe fda5 	bl	80030dc <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fe fda1 	bl	80030dc <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4b40      	ldr	r3, [pc, #256]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b3c      	ldr	r3, [pc, #240]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a3b      	ldr	r2, [pc, #236]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 80a4 	beq.w	800471c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045d4:	4b36      	ldr	r3, [pc, #216]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d06b      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d149      	bne.n	800467c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b31      	ldr	r3, [pc, #196]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a30      	ldr	r2, [pc, #192]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fe fd72 	bl	80030dc <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045fc:	f7fe fd6e 	bl	80030dc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e087      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69da      	ldr	r2, [r3, #28]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	019b      	lsls	r3, r3, #6
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	3b01      	subs	r3, #1
 8004634:	041b      	lsls	r3, r3, #16
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	4313      	orrs	r3, r2
 8004640:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004642:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004646:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a18      	ldr	r2, [pc, #96]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800464e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fe fd42 	bl	80030dc <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465c:	f7fe fd3e 	bl	80030dc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e057      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466e:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x478>
 800467a:	e04f      	b.n	800471c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a0b      	ldr	r2, [pc, #44]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 8004682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004688:	f7fe fd28 	bl	80030dc <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004690:	f7fe fd24 	bl	80030dc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e03d      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a2:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <HAL_RCC_OscConfig+0x4cc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x4ac>
 80046ae:	e035      	b.n	800471c <HAL_RCC_OscConfig+0x538>
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80046b8:	4b1b      	ldr	r3, [pc, #108]	; (8004728 <HAL_RCC_OscConfig+0x544>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d028      	beq.n	8004718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d121      	bne.n	8004718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046de:	429a      	cmp	r2, r3
 80046e0:	d11a      	bne.n	8004718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d111      	bne.n	8004718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	3b01      	subs	r3, #1
 8004702:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d107      	bne.n	8004718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004714:	429a      	cmp	r2, r3
 8004716:	d001      	beq.n	800471c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3718      	adds	r7, #24
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023800 	.word	0x40023800

0800472c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d0      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b67      	ldr	r3, [pc, #412]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 020f 	bic.w	r2, r3, #15
 800475a:	4965      	ldr	r1, [pc, #404]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b63      	ldr	r3, [pc, #396]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a58      	ldr	r2, [pc, #352]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a4:	4b53      	ldr	r3, [pc, #332]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a52      	ldr	r2, [pc, #328]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	494d      	ldr	r1, [pc, #308]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d040      	beq.n	8004850 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b47      	ldr	r3, [pc, #284]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ee:	4b41      	ldr	r3, [pc, #260]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e073      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047fe:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e06b      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800480e:	4b39      	ldr	r3, [pc, #228]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f023 0203 	bic.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	4936      	ldr	r1, [pc, #216]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 800481c:	4313      	orrs	r3, r2
 800481e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004820:	f7fe fc5c 	bl	80030dc <HAL_GetTick>
 8004824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	e00a      	b.n	800483e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004828:	f7fe fc58 	bl	80030dc <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e053      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	4b2d      	ldr	r3, [pc, #180]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 020c 	and.w	r2, r3, #12
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d1eb      	bne.n	8004828 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d210      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f023 020f 	bic.w	r2, r3, #15
 8004866:	4922      	ldr	r1, [pc, #136]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e032      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4916      	ldr	r1, [pc, #88]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048aa:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f821 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490a      	ldr	r1, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x1cc>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1d0>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048da:	4b09      	ldr	r3, [pc, #36]	; (8004900 <HAL_RCC_ClockConfig+0x1d4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe fbb8 	bl	8003054 <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023c00 	.word	0x40023c00
 80048f4:	40023800 	.word	0x40023800
 80048f8:	0800d2b4 	.word	0x0800d2b4
 80048fc:	2000002c 	.word	0x2000002c
 8004900:	20000030 	.word	0x20000030

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004908:	b094      	sub	sp, #80	; 0x50
 800490a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	647b      	str	r3, [r7, #68]	; 0x44
 8004910:	2300      	movs	r3, #0
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	2300      	movs	r3, #0
 8004916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491c:	4b79      	ldr	r3, [pc, #484]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d00d      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x40>
 8004928:	2b08      	cmp	r3, #8
 800492a:	f200 80e1 	bhi.w	8004af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x34>
 8004932:	2b04      	cmp	r3, #4
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x3a>
 8004936:	e0db      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b73      	ldr	r3, [pc, #460]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800493a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800493c:	e0db      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493e:	4b73      	ldr	r3, [pc, #460]	; (8004b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8004940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004942:	e0d8      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004944:	4b6f      	ldr	r3, [pc, #444]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800494e:	4b6d      	ldr	r3, [pc, #436]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d063      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495a:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	2200      	movs	r2, #0
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
 8004964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	633b      	str	r3, [r7, #48]	; 0x30
 800496e:	2300      	movs	r3, #0
 8004970:	637b      	str	r3, [r7, #52]	; 0x34
 8004972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	f04f 0000 	mov.w	r0, #0
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004988:	0150      	lsls	r0, r2, #5
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4621      	mov	r1, r4
 8004990:	1a51      	subs	r1, r2, r1
 8004992:	6139      	str	r1, [r7, #16]
 8004994:	4629      	mov	r1, r5
 8004996:	eb63 0301 	sbc.w	r3, r3, r1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a8:	4659      	mov	r1, fp
 80049aa:	018b      	lsls	r3, r1, #6
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b2:	4651      	mov	r1, sl
 80049b4:	018a      	lsls	r2, r1, #6
 80049b6:	4651      	mov	r1, sl
 80049b8:	ebb2 0801 	subs.w	r8, r2, r1
 80049bc:	4659      	mov	r1, fp
 80049be:	eb63 0901 	sbc.w	r9, r3, r1
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d6:	4690      	mov	r8, r2
 80049d8:	4699      	mov	r9, r3
 80049da:	4623      	mov	r3, r4
 80049dc:	eb18 0303 	adds.w	r3, r8, r3
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	462b      	mov	r3, r5
 80049e4:	eb49 0303 	adc.w	r3, r9, r3
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049f6:	4629      	mov	r1, r5
 80049f8:	024b      	lsls	r3, r1, #9
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a00:	4621      	mov	r1, r4
 8004a02:	024a      	lsls	r2, r1, #9
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a14:	f7fc f958 	bl	8000cc8 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a20:	e058      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a32:	623b      	str	r3, [r7, #32]
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
 8004a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	0159      	lsls	r1, r3, #5
 8004a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a4e:	0150      	lsls	r0, r2, #5
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4641      	mov	r1, r8
 8004a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a74:	ebb2 040a 	subs.w	r4, r2, sl
 8004a78:	eb63 050b 	sbc.w	r5, r3, fp
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	00eb      	lsls	r3, r5, #3
 8004a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a8a:	00e2      	lsls	r2, r4, #3
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	461d      	mov	r5, r3
 8004a90:	4643      	mov	r3, r8
 8004a92:	18e3      	adds	r3, r4, r3
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	464b      	mov	r3, r9
 8004a98:	eb45 0303 	adc.w	r3, r5, r3
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aaa:	4629      	mov	r1, r5
 8004aac:	028b      	lsls	r3, r1, #10
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	028a      	lsls	r2, r1, #10
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	61fa      	str	r2, [r7, #28]
 8004ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac8:	f7fc f8fe 	bl	8000cc8 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004ae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aee:	e002      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8004af2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3750      	adds	r7, #80	; 0x50
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	007a1200 	.word	0x007a1200

08004b10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	2000002c 	.word	0x2000002c

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	; (8004b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0a9b      	lsrs	r3, r3, #10
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	0800d2c4 	.word	0x0800d2c4

08004b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b54:	f7ff ffdc 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0b5b      	lsrs	r3, r3, #13
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	; (8004b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	0800d2c4 	.word	0x0800d2c4

08004b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d012      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ba0:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a68      	ldr	r2, [pc, #416]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004baa:	6093      	str	r3, [r2, #8]
 8004bac:	4b66      	ldr	r3, [pc, #408]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	4964      	ldr	r1, [pc, #400]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d017      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bd2:	4b5d      	ldr	r3, [pc, #372]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	4959      	ldr	r1, [pc, #356]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d017      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c0e:	4b4e      	ldr	r3, [pc, #312]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	494a      	ldr	r1, [pc, #296]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 808b 	beq.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c5c:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4a39      	ldr	r2, [pc, #228]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c66:	6413      	str	r3, [r2, #64]	; 0x40
 8004c68:	4b37      	ldr	r3, [pc, #220]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c74:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c80:	f7fe fa2c 	bl	80030dc <HAL_GetTick>
 8004c84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fe fa28 	bl	80030dc <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e357      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca6:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d035      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d02e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc4:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ccc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ce6:	4a18      	ldr	r2, [pc, #96]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cec:	4b16      	ldr	r3, [pc, #88]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d114      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf8:	f7fe f9f0 	bl	80030dc <HAL_GetTick>
 8004cfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d00:	f7fe f9ec 	bl	80030dc <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e319      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d16:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0ee      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2e:	d111      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d30:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d3e:	400b      	ands	r3, r1
 8004d40:	4901      	ldr	r1, [pc, #4]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
 8004d46:	e00b      	b.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40007000 	.word	0x40007000
 8004d50:	0ffffcff 	.word	0x0ffffcff
 8004d54:	4baa      	ldr	r3, [pc, #680]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4aa9      	ldr	r2, [pc, #676]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d5e:	6093      	str	r3, [r2, #8]
 8004d60:	4ba7      	ldr	r3, [pc, #668]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6c:	49a4      	ldr	r1, [pc, #656]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d7e:	4ba0      	ldr	r3, [pc, #640]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d84:	4a9e      	ldr	r2, [pc, #632]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d8e:	4b9c      	ldr	r3, [pc, #624]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	4999      	ldr	r1, [pc, #612]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dac:	4b94      	ldr	r3, [pc, #592]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dba:	4991      	ldr	r1, [pc, #580]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dce:	4b8c      	ldr	r3, [pc, #560]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ddc:	4988      	ldr	r1, [pc, #544]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004df0:	4b83      	ldr	r3, [pc, #524]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfe:	4980      	ldr	r1, [pc, #512]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e12:	4b7b      	ldr	r3, [pc, #492]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4977      	ldr	r1, [pc, #476]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e34:	4b72      	ldr	r3, [pc, #456]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f023 0203 	bic.w	r2, r3, #3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	496f      	ldr	r1, [pc, #444]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e56:	4b6a      	ldr	r3, [pc, #424]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	f023 020c 	bic.w	r2, r3, #12
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e64:	4966      	ldr	r1, [pc, #408]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e78:	4b61      	ldr	r3, [pc, #388]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	495e      	ldr	r1, [pc, #376]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e9a:	4b59      	ldr	r3, [pc, #356]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea8:	4955      	ldr	r1, [pc, #340]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	494d      	ldr	r1, [pc, #308]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ede:	4b48      	ldr	r3, [pc, #288]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4944      	ldr	r1, [pc, #272]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f00:	4b3f      	ldr	r3, [pc, #252]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	493c      	ldr	r1, [pc, #240]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f22:	4b37      	ldr	r3, [pc, #220]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f30:	4933      	ldr	r1, [pc, #204]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f44:	4b2e      	ldr	r3, [pc, #184]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f52:	492b      	ldr	r1, [pc, #172]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d011      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f66:	4b26      	ldr	r3, [pc, #152]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f74:	4922      	ldr	r1, [pc, #136]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f84:	d101      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f96:	2301      	movs	r3, #1
 8004f98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fa6:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb4:	4912      	ldr	r1, [pc, #72]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fd8:	4909      	ldr	r1, [pc, #36]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d006      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 80d9 	beq.w	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a01      	ldr	r2, [pc, #4]	; (8005000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ffe:	e001      	b.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005000:	40023800 	.word	0x40023800
 8005004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005006:	f7fe f869 	bl	80030dc <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800500e:	f7fe f865 	bl	80030dc <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b64      	cmp	r3, #100	; 0x64
 800501a:	d901      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e194      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005020:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1f0      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d021      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503c:	2b00      	cmp	r3, #0
 800503e:	d11d      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005040:	4b64      	ldr	r3, [pc, #400]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800504e:	4b61      	ldr	r3, [pc, #388]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005054:	0e1b      	lsrs	r3, r3, #24
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	019a      	lsls	r2, r3, #6
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	061b      	lsls	r3, r3, #24
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	071b      	lsls	r3, r3, #28
 8005074:	4957      	ldr	r1, [pc, #348]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02e      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050a6:	d129      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050a8:	4b4a      	ldr	r3, [pc, #296]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050ae:	0c1b      	lsrs	r3, r3, #16
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050bc:	0f1b      	lsrs	r3, r3, #28
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	019a      	lsls	r2, r3, #6
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	061b      	lsls	r3, r3, #24
 80050d6:	431a      	orrs	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	071b      	lsls	r3, r3, #28
 80050dc:	493d      	ldr	r1, [pc, #244]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050e4:	4b3b      	ldr	r3, [pc, #236]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ea:	f023 021f 	bic.w	r2, r3, #31
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	3b01      	subs	r3, #1
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01d      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005108:	4b32      	ldr	r3, [pc, #200]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800510a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005116:	4b2f      	ldr	r3, [pc, #188]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	0f1b      	lsrs	r3, r3, #28
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	019a      	lsls	r2, r3, #6
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	431a      	orrs	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	071b      	lsls	r3, r3, #28
 800513c:	4925      	ldr	r1, [pc, #148]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d011      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	019a      	lsls	r2, r3, #6
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	041b      	lsls	r3, r3, #16
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	071b      	lsls	r3, r3, #28
 800516c:	4919      	ldr	r1, [pc, #100]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005174:	4b17      	ldr	r3, [pc, #92]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a16      	ldr	r2, [pc, #88]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800517a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800517e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005180:	f7fd ffac 	bl	80030dc <HAL_GetTick>
 8005184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005186:	e008      	b.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005188:	f7fd ffa8 	bl	80030dc <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e0d7      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800519a:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d0f0      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	f040 80cd 	bne.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ba:	f7fd ff8f 	bl	80030dc <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051c0:	e00a      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051c2:	f7fd ff8b 	bl	80030dc <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b64      	cmp	r3, #100	; 0x64
 80051ce:	d903      	bls.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e0ba      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051d8:	4b5e      	ldr	r3, [pc, #376]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051e4:	d0ed      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005202:	2b00      	cmp	r3, #0
 8005204:	d02e      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d12a      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800520e:	4b51      	ldr	r3, [pc, #324]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800521c:	4b4d      	ldr	r3, [pc, #308]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	0f1b      	lsrs	r3, r3, #28
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	019a      	lsls	r2, r3, #6
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	041b      	lsls	r3, r3, #16
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	071b      	lsls	r3, r3, #28
 8005242:	4944      	ldr	r1, [pc, #272]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005244:	4313      	orrs	r3, r2
 8005246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800524a:	4b42      	ldr	r3, [pc, #264]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800524c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005250:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	021b      	lsls	r3, r3, #8
 800525c:	493d      	ldr	r1, [pc, #244]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d022      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005278:	d11d      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800527a:	4b36      	ldr	r3, [pc, #216]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005288:	4b32      	ldr	r3, [pc, #200]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	0f1b      	lsrs	r3, r3, #28
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	019a      	lsls	r2, r3, #6
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	061b      	lsls	r3, r3, #24
 80052a8:	431a      	orrs	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	071b      	lsls	r3, r3, #28
 80052ae:	4929      	ldr	r1, [pc, #164]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0308 	and.w	r3, r3, #8
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d028      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052c2:	4b24      	ldr	r3, [pc, #144]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	0e1b      	lsrs	r3, r3, #24
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052d0:	4b20      	ldr	r3, [pc, #128]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d6:	0c1b      	lsrs	r3, r3, #16
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	019a      	lsls	r2, r3, #6
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	061b      	lsls	r3, r3, #24
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	071b      	lsls	r3, r3, #28
 80052f6:	4917      	ldr	r1, [pc, #92]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052fe:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4911      	ldr	r1, [pc, #68]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005314:	4b0f      	ldr	r3, [pc, #60]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800531a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005320:	f7fd fedc 	bl	80030dc <HAL_GetTick>
 8005324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005326:	e008      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005328:	f7fd fed8 	bl	80030dc <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e007      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800533a:	4b06      	ldr	r3, [pc, #24]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005346:	d1ef      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	40023800 	.word	0x40023800

08005358 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e09d      	b.n	80054a6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b00      	cmp	r3, #0
 8005370:	d108      	bne.n	8005384 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d009      	beq.n	8005390 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	61da      	str	r2, [r3, #28]
 8005382:	e005      	b.n	8005390 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fd f92e 	bl	800260c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d0:	d902      	bls.n	80053d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
 80053d6:	e002      	b.n	80053de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80053d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80053e6:	d007      	beq.n	80053f8 <HAL_SPI_Init+0xa0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053f0:	d002      	beq.n	80053f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	ea42 0103 	orr.w	r1, r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	0c1b      	lsrs	r3, r3, #16
 8005454:	f003 0204 	and.w	r2, r3, #4
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	f003 0310 	and.w	r3, r3, #16
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005474:	ea42 0103 	orr.w	r1, r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005494:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b088      	sub	sp, #32
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_SPI_Transmit+0x22>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e158      	b.n	8005782 <HAL_SPI_Transmit+0x2d4>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054d8:	f7fd fe00 	bl	80030dc <HAL_GetTick>
 80054dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80054f2:	e13d      	b.n	8005770 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Transmit+0x52>
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005504:	e134      	b.n	8005770 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2203      	movs	r2, #3
 800550a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	88fa      	ldrh	r2, [r7, #6]
 800551e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005550:	d10f      	bne.n	8005572 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d007      	beq.n	8005590 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800558e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005598:	d94b      	bls.n	8005632 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d002      	beq.n	80055a8 <HAL_SPI_Transmit+0xfa>
 80055a2:	8afb      	ldrh	r3, [r7, #22]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d13e      	bne.n	8005626 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	881a      	ldrh	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	1c9a      	adds	r2, r3, #2
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80055cc:	e02b      	b.n	8005626 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b02      	cmp	r3, #2
 80055da:	d112      	bne.n	8005602 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	1c9a      	adds	r2, r3, #2
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005600:	e011      	b.n	8005626 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005602:	f7fd fd6b 	bl	80030dc <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	429a      	cmp	r2, r3
 8005610:	d803      	bhi.n	800561a <HAL_SPI_Transmit+0x16c>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005618:	d102      	bne.n	8005620 <HAL_SPI_Transmit+0x172>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005624:	e0a4      	b.n	8005770 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ce      	bne.n	80055ce <HAL_SPI_Transmit+0x120>
 8005630:	e07c      	b.n	800572c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <HAL_SPI_Transmit+0x192>
 800563a:	8afb      	ldrh	r3, [r7, #22]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d170      	bne.n	8005722 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d912      	bls.n	8005670 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	881a      	ldrh	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	1c9a      	adds	r2, r3, #2
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	3b02      	subs	r3, #2
 8005668:	b29a      	uxth	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566e:	e058      	b.n	8005722 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	1c5a      	adds	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005696:	e044      	b.n	8005722 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d12b      	bne.n	80056fe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d912      	bls.n	80056d6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	881a      	ldrh	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	1c9a      	adds	r2, r3, #2
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	3b02      	subs	r3, #2
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d4:	e025      	b.n	8005722 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	7812      	ldrb	r2, [r2, #0]
 80056e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056fc:	e011      	b.n	8005722 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fe:	f7fd fced 	bl	80030dc <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <HAL_SPI_Transmit+0x268>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005714:	d102      	bne.n	800571c <HAL_SPI_Transmit+0x26e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005720:	e026      	b.n	8005770 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1b5      	bne.n	8005698 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f000 fb13 	bl	8005d5c <SPI_EndRxTxTransaction>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	77fb      	strb	r3, [r7, #31]
 800576c:	e000      	b.n	8005770 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800576e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005780:	7ffb      	ldrb	r3, [r7, #31]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_SPI_Transmit_DMA+0x20>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e0d8      	b.n	800595e <HAL_SPI_Transmit_DMA+0x1d2>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d002      	beq.n	80057c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
 80057c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057c4:	e0c6      	b.n	8005954 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_SPI_Transmit_DMA+0x46>
 80057cc:	88fb      	ldrh	r3, [r7, #6]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80057d6:	e0bd      	b.n	8005954 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2203      	movs	r2, #3
 80057dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	88fa      	ldrh	r2, [r7, #6]
 80057f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005822:	d10f      	bne.n	8005844 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005832:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005842:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005848:	4a47      	ldr	r2, [pc, #284]	; (8005968 <HAL_SPI_Transmit_DMA+0x1dc>)
 800584a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005850:	4a46      	ldr	r2, [pc, #280]	; (800596c <HAL_SPI_Transmit_DMA+0x1e0>)
 8005852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005858:	4a45      	ldr	r2, [pc, #276]	; (8005970 <HAL_SPI_Transmit_DMA+0x1e4>)
 800585a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005860:	2200      	movs	r2, #0
 8005862:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005872:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800587c:	d82d      	bhi.n	80058da <HAL_SPI_Transmit_DMA+0x14e>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005888:	d127      	bne.n	80058da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10f      	bne.n	80058b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80058a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	085b      	lsrs	r3, r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058b6:	e010      	b.n	80058da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	085b      	lsrs	r3, r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3301      	adds	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	4619      	mov	r1, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	330c      	adds	r3, #12
 80058ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80058f2:	f7fd fde3 	bl	80034bc <HAL_DMA_Start_IT>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00c      	beq.n	8005916 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	f043 0210 	orr.w	r2, r3, #16
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005914:	e01e      	b.n	8005954 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d007      	beq.n	8005934 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005932:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0220 	orr.w	r2, r2, #32
 8005942:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0202 	orr.w	r2, r2, #2
 8005952:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800595c:	7dfb      	ldrb	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	08005ac3 	.word	0x08005ac3
 800596c:	08005a1b 	.word	0x08005a1b
 8005970:	08005adf 	.word	0x08005adf

08005974 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00f      	beq.n	80059a8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800598c:	4618      	mov	r0, r3
 800598e:	f7fd fdf5 	bl	800357c <HAL_DMA_Abort>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d007      	beq.n	80059a8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599c:	f043 0210 	orr.w	r2, r3, #16
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00f      	beq.n	80059d0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b4:	4618      	mov	r0, r3
 80059b6:	f7fd fde1 	bl	800357c <HAL_DMA_Abort>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c4:	f043 0210 	orr.w	r2, r3, #16
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0203 	bic.w	r2, r2, #3
 80059de:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b086      	sub	sp, #24
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a28:	f7fd fb58 	bl	80030dc <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a3c:	d03b      	beq.n	8005ab6 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0220 	bic.w	r2, r2, #32
 8005a4c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0202 	bic.w	r2, r2, #2
 8005a5c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	2164      	movs	r1, #100	; 0x64
 8005a62:	6978      	ldr	r0, [r7, #20]
 8005a64:	f000 f97a 	bl	8005d5c <SPI_EndRxTxTransaction>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a72:	f043 0220 	orr.w	r2, r3, #32
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f7ff ffa9 	bl	8005a06 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005ab4:	e002      	b.n	8005abc <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005ab6:	6978      	ldr	r0, [r7, #20]
 8005ab8:	f7fc f97e 	bl	8001db8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f7ff ff8e 	bl	80059f2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0203 	bic.w	r2, r2, #3
 8005afa:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b00:	f043 0210 	orr.w	r2, r3, #16
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff ff78 	bl	8005a06 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b30:	f7fd fad4 	bl	80030dc <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b40:	f7fd facc 	bl	80030dc <HAL_GetTick>
 8005b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b46:	4b39      	ldr	r3, [pc, #228]	; (8005c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	015b      	lsls	r3, r3, #5
 8005b4c:	0d1b      	lsrs	r3, r3, #20
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	fb02 f303 	mul.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b56:	e054      	b.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5e:	d050      	beq.n	8005c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b60:	f7fd fabc 	bl	80030dc <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d902      	bls.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d13d      	bne.n	8005bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b8e:	d111      	bne.n	8005bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b98:	d004      	beq.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba2:	d107      	bne.n	8005bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bbc:	d10f      	bne.n	8005bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bcc:	601a      	str	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e017      	b.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d19b      	bne.n	8005b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	2000002c 	.word	0x2000002c

08005c30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08a      	sub	sp, #40	; 0x28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c42:	f7fd fa4b 	bl	80030dc <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	1a9b      	subs	r3, r3, r2
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	4413      	add	r3, r2
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c52:	f7fd fa43 	bl	80030dc <HAL_GetTick>
 8005c56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c60:	4b3d      	ldr	r3, [pc, #244]	; (8005d58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	00da      	lsls	r2, r3, #3
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	0d1b      	lsrs	r3, r3, #20
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	fb02 f303 	mul.w	r3, r2, r3
 8005c76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c78:	e060      	b.n	8005d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c80:	d107      	bne.n	8005c92 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d104      	bne.n	8005c92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c98:	d050      	beq.n	8005d3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c9a:	f7fd fa1f 	bl	80030dc <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d902      	bls.n	8005cb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d13d      	bne.n	8005d2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cc8:	d111      	bne.n	8005cee <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd2:	d004      	beq.n	8005cde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cdc:	d107      	bne.n	8005cee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cf6:	d10f      	bne.n	8005d18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d06:	601a      	str	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e010      	b.n	8005d4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d196      	bne.n	8005c7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3728      	adds	r7, #40	; 0x28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000002c 	.word	0x2000002c

08005d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af02      	add	r7, sp, #8
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7ff ff5b 	bl	8005c30 <SPI_WaitFifoStateUntilTimeout>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d007      	beq.n	8005d90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d84:	f043 0220 	orr.w	r2, r3, #32
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e046      	b.n	8005e1e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d90:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <SPI_EndRxTxTransaction+0xcc>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <SPI_EndRxTxTransaction+0xd0>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	0d5b      	lsrs	r3, r3, #21
 8005d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dae:	d112      	bne.n	8005dd6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2180      	movs	r1, #128	; 0x80
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff feb0 	bl	8005b20 <SPI_WaitFlagStateUntilTimeout>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dca:	f043 0220 	orr.w	r2, r3, #32
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e023      	b.n	8005e1e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d0f2      	beq.n	8005dd6 <SPI_EndRxTxTransaction+0x7a>
 8005df0:	e000      	b.n	8005df4 <SPI_EndRxTxTransaction+0x98>
        break;
 8005df2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff ff15 	bl	8005c30 <SPI_WaitFifoStateUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e000      	b.n	8005e1e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	2000002c 	.word	0x2000002c
 8005e2c:	165e9f81 	.word	0x165e9f81

08005e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e040      	b.n	8005ec4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f7fc fc78 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f82c 	bl	8005ecc <UART_SetConfig>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e022      	b.n	8005ec4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fa84 	bl	8006394 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005eaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fb0b 	bl	80064d8 <UART_CheckIdleState>
 8005ec2:	4603      	mov	r3, r0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b088      	sub	sp, #32
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	431a      	orrs	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4ba6      	ldr	r3, [pc, #664]	; (8006190 <UART_SetConfig+0x2c4>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	6979      	ldr	r1, [r7, #20]
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68da      	ldr	r2, [r3, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a94      	ldr	r2, [pc, #592]	; (8006194 <UART_SetConfig+0x2c8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d120      	bne.n	8005f8a <UART_SetConfig+0xbe>
 8005f48:	4b93      	ldr	r3, [pc, #588]	; (8006198 <UART_SetConfig+0x2cc>)
 8005f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d816      	bhi.n	8005f84 <UART_SetConfig+0xb8>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <UART_SetConfig+0x90>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f79 	.word	0x08005f79
 8005f64:	08005f73 	.word	0x08005f73
 8005f68:	08005f7f 	.word	0x08005f7f
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e150      	b.n	8006214 <UART_SetConfig+0x348>
 8005f72:	2302      	movs	r3, #2
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e14d      	b.n	8006214 <UART_SetConfig+0x348>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	77fb      	strb	r3, [r7, #31]
 8005f7c:	e14a      	b.n	8006214 <UART_SetConfig+0x348>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	77fb      	strb	r3, [r7, #31]
 8005f82:	e147      	b.n	8006214 <UART_SetConfig+0x348>
 8005f84:	2310      	movs	r3, #16
 8005f86:	77fb      	strb	r3, [r7, #31]
 8005f88:	e144      	b.n	8006214 <UART_SetConfig+0x348>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a83      	ldr	r2, [pc, #524]	; (800619c <UART_SetConfig+0x2d0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d132      	bne.n	8005ffa <UART_SetConfig+0x12e>
 8005f94:	4b80      	ldr	r3, [pc, #512]	; (8006198 <UART_SetConfig+0x2cc>)
 8005f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9a:	f003 030c 	and.w	r3, r3, #12
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d828      	bhi.n	8005ff4 <UART_SetConfig+0x128>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0xdc>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fdd 	.word	0x08005fdd
 8005fac:	08005ff5 	.word	0x08005ff5
 8005fb0:	08005ff5 	.word	0x08005ff5
 8005fb4:	08005ff5 	.word	0x08005ff5
 8005fb8:	08005fe9 	.word	0x08005fe9
 8005fbc:	08005ff5 	.word	0x08005ff5
 8005fc0:	08005ff5 	.word	0x08005ff5
 8005fc4:	08005ff5 	.word	0x08005ff5
 8005fc8:	08005fe3 	.word	0x08005fe3
 8005fcc:	08005ff5 	.word	0x08005ff5
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	08005ff5 	.word	0x08005ff5
 8005fd8:	08005fef 	.word	0x08005fef
 8005fdc:	2300      	movs	r3, #0
 8005fde:	77fb      	strb	r3, [r7, #31]
 8005fe0:	e118      	b.n	8006214 <UART_SetConfig+0x348>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	77fb      	strb	r3, [r7, #31]
 8005fe6:	e115      	b.n	8006214 <UART_SetConfig+0x348>
 8005fe8:	2304      	movs	r3, #4
 8005fea:	77fb      	strb	r3, [r7, #31]
 8005fec:	e112      	b.n	8006214 <UART_SetConfig+0x348>
 8005fee:	2308      	movs	r3, #8
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e10f      	b.n	8006214 <UART_SetConfig+0x348>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e10c      	b.n	8006214 <UART_SetConfig+0x348>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a68      	ldr	r2, [pc, #416]	; (80061a0 <UART_SetConfig+0x2d4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d120      	bne.n	8006046 <UART_SetConfig+0x17a>
 8006004:	4b64      	ldr	r3, [pc, #400]	; (8006198 <UART_SetConfig+0x2cc>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800600e:	2b30      	cmp	r3, #48	; 0x30
 8006010:	d013      	beq.n	800603a <UART_SetConfig+0x16e>
 8006012:	2b30      	cmp	r3, #48	; 0x30
 8006014:	d814      	bhi.n	8006040 <UART_SetConfig+0x174>
 8006016:	2b20      	cmp	r3, #32
 8006018:	d009      	beq.n	800602e <UART_SetConfig+0x162>
 800601a:	2b20      	cmp	r3, #32
 800601c:	d810      	bhi.n	8006040 <UART_SetConfig+0x174>
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <UART_SetConfig+0x15c>
 8006022:	2b10      	cmp	r3, #16
 8006024:	d006      	beq.n	8006034 <UART_SetConfig+0x168>
 8006026:	e00b      	b.n	8006040 <UART_SetConfig+0x174>
 8006028:	2300      	movs	r3, #0
 800602a:	77fb      	strb	r3, [r7, #31]
 800602c:	e0f2      	b.n	8006214 <UART_SetConfig+0x348>
 800602e:	2302      	movs	r3, #2
 8006030:	77fb      	strb	r3, [r7, #31]
 8006032:	e0ef      	b.n	8006214 <UART_SetConfig+0x348>
 8006034:	2304      	movs	r3, #4
 8006036:	77fb      	strb	r3, [r7, #31]
 8006038:	e0ec      	b.n	8006214 <UART_SetConfig+0x348>
 800603a:	2308      	movs	r3, #8
 800603c:	77fb      	strb	r3, [r7, #31]
 800603e:	e0e9      	b.n	8006214 <UART_SetConfig+0x348>
 8006040:	2310      	movs	r3, #16
 8006042:	77fb      	strb	r3, [r7, #31]
 8006044:	e0e6      	b.n	8006214 <UART_SetConfig+0x348>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a56      	ldr	r2, [pc, #344]	; (80061a4 <UART_SetConfig+0x2d8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d120      	bne.n	8006092 <UART_SetConfig+0x1c6>
 8006050:	4b51      	ldr	r3, [pc, #324]	; (8006198 <UART_SetConfig+0x2cc>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800605a:	2bc0      	cmp	r3, #192	; 0xc0
 800605c:	d013      	beq.n	8006086 <UART_SetConfig+0x1ba>
 800605e:	2bc0      	cmp	r3, #192	; 0xc0
 8006060:	d814      	bhi.n	800608c <UART_SetConfig+0x1c0>
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d009      	beq.n	800607a <UART_SetConfig+0x1ae>
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d810      	bhi.n	800608c <UART_SetConfig+0x1c0>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <UART_SetConfig+0x1a8>
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d006      	beq.n	8006080 <UART_SetConfig+0x1b4>
 8006072:	e00b      	b.n	800608c <UART_SetConfig+0x1c0>
 8006074:	2300      	movs	r3, #0
 8006076:	77fb      	strb	r3, [r7, #31]
 8006078:	e0cc      	b.n	8006214 <UART_SetConfig+0x348>
 800607a:	2302      	movs	r3, #2
 800607c:	77fb      	strb	r3, [r7, #31]
 800607e:	e0c9      	b.n	8006214 <UART_SetConfig+0x348>
 8006080:	2304      	movs	r3, #4
 8006082:	77fb      	strb	r3, [r7, #31]
 8006084:	e0c6      	b.n	8006214 <UART_SetConfig+0x348>
 8006086:	2308      	movs	r3, #8
 8006088:	77fb      	strb	r3, [r7, #31]
 800608a:	e0c3      	b.n	8006214 <UART_SetConfig+0x348>
 800608c:	2310      	movs	r3, #16
 800608e:	77fb      	strb	r3, [r7, #31]
 8006090:	e0c0      	b.n	8006214 <UART_SetConfig+0x348>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a44      	ldr	r2, [pc, #272]	; (80061a8 <UART_SetConfig+0x2dc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d125      	bne.n	80060e8 <UART_SetConfig+0x21c>
 800609c:	4b3e      	ldr	r3, [pc, #248]	; (8006198 <UART_SetConfig+0x2cc>)
 800609e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060aa:	d017      	beq.n	80060dc <UART_SetConfig+0x210>
 80060ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b0:	d817      	bhi.n	80060e2 <UART_SetConfig+0x216>
 80060b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b6:	d00b      	beq.n	80060d0 <UART_SetConfig+0x204>
 80060b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060bc:	d811      	bhi.n	80060e2 <UART_SetConfig+0x216>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <UART_SetConfig+0x1fe>
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d006      	beq.n	80060d6 <UART_SetConfig+0x20a>
 80060c8:	e00b      	b.n	80060e2 <UART_SetConfig+0x216>
 80060ca:	2300      	movs	r3, #0
 80060cc:	77fb      	strb	r3, [r7, #31]
 80060ce:	e0a1      	b.n	8006214 <UART_SetConfig+0x348>
 80060d0:	2302      	movs	r3, #2
 80060d2:	77fb      	strb	r3, [r7, #31]
 80060d4:	e09e      	b.n	8006214 <UART_SetConfig+0x348>
 80060d6:	2304      	movs	r3, #4
 80060d8:	77fb      	strb	r3, [r7, #31]
 80060da:	e09b      	b.n	8006214 <UART_SetConfig+0x348>
 80060dc:	2308      	movs	r3, #8
 80060de:	77fb      	strb	r3, [r7, #31]
 80060e0:	e098      	b.n	8006214 <UART_SetConfig+0x348>
 80060e2:	2310      	movs	r3, #16
 80060e4:	77fb      	strb	r3, [r7, #31]
 80060e6:	e095      	b.n	8006214 <UART_SetConfig+0x348>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2f      	ldr	r2, [pc, #188]	; (80061ac <UART_SetConfig+0x2e0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d125      	bne.n	800613e <UART_SetConfig+0x272>
 80060f2:	4b29      	ldr	r3, [pc, #164]	; (8006198 <UART_SetConfig+0x2cc>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80060fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006100:	d017      	beq.n	8006132 <UART_SetConfig+0x266>
 8006102:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006106:	d817      	bhi.n	8006138 <UART_SetConfig+0x26c>
 8006108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610c:	d00b      	beq.n	8006126 <UART_SetConfig+0x25a>
 800610e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006112:	d811      	bhi.n	8006138 <UART_SetConfig+0x26c>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <UART_SetConfig+0x254>
 8006118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611c:	d006      	beq.n	800612c <UART_SetConfig+0x260>
 800611e:	e00b      	b.n	8006138 <UART_SetConfig+0x26c>
 8006120:	2301      	movs	r3, #1
 8006122:	77fb      	strb	r3, [r7, #31]
 8006124:	e076      	b.n	8006214 <UART_SetConfig+0x348>
 8006126:	2302      	movs	r3, #2
 8006128:	77fb      	strb	r3, [r7, #31]
 800612a:	e073      	b.n	8006214 <UART_SetConfig+0x348>
 800612c:	2304      	movs	r3, #4
 800612e:	77fb      	strb	r3, [r7, #31]
 8006130:	e070      	b.n	8006214 <UART_SetConfig+0x348>
 8006132:	2308      	movs	r3, #8
 8006134:	77fb      	strb	r3, [r7, #31]
 8006136:	e06d      	b.n	8006214 <UART_SetConfig+0x348>
 8006138:	2310      	movs	r3, #16
 800613a:	77fb      	strb	r3, [r7, #31]
 800613c:	e06a      	b.n	8006214 <UART_SetConfig+0x348>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <UART_SetConfig+0x2e4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d138      	bne.n	80061ba <UART_SetConfig+0x2ee>
 8006148:	4b13      	ldr	r3, [pc, #76]	; (8006198 <UART_SetConfig+0x2cc>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006152:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006156:	d017      	beq.n	8006188 <UART_SetConfig+0x2bc>
 8006158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800615c:	d82a      	bhi.n	80061b4 <UART_SetConfig+0x2e8>
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	d00b      	beq.n	800617c <UART_SetConfig+0x2b0>
 8006164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006168:	d824      	bhi.n	80061b4 <UART_SetConfig+0x2e8>
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <UART_SetConfig+0x2aa>
 800616e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006172:	d006      	beq.n	8006182 <UART_SetConfig+0x2b6>
 8006174:	e01e      	b.n	80061b4 <UART_SetConfig+0x2e8>
 8006176:	2300      	movs	r3, #0
 8006178:	77fb      	strb	r3, [r7, #31]
 800617a:	e04b      	b.n	8006214 <UART_SetConfig+0x348>
 800617c:	2302      	movs	r3, #2
 800617e:	77fb      	strb	r3, [r7, #31]
 8006180:	e048      	b.n	8006214 <UART_SetConfig+0x348>
 8006182:	2304      	movs	r3, #4
 8006184:	77fb      	strb	r3, [r7, #31]
 8006186:	e045      	b.n	8006214 <UART_SetConfig+0x348>
 8006188:	2308      	movs	r3, #8
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e042      	b.n	8006214 <UART_SetConfig+0x348>
 800618e:	bf00      	nop
 8006190:	efff69f3 	.word	0xefff69f3
 8006194:	40011000 	.word	0x40011000
 8006198:	40023800 	.word	0x40023800
 800619c:	40004400 	.word	0x40004400
 80061a0:	40004800 	.word	0x40004800
 80061a4:	40004c00 	.word	0x40004c00
 80061a8:	40005000 	.word	0x40005000
 80061ac:	40011400 	.word	0x40011400
 80061b0:	40007800 	.word	0x40007800
 80061b4:	2310      	movs	r3, #16
 80061b6:	77fb      	strb	r3, [r7, #31]
 80061b8:	e02c      	b.n	8006214 <UART_SetConfig+0x348>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a72      	ldr	r2, [pc, #456]	; (8006388 <UART_SetConfig+0x4bc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d125      	bne.n	8006210 <UART_SetConfig+0x344>
 80061c4:	4b71      	ldr	r3, [pc, #452]	; (800638c <UART_SetConfig+0x4c0>)
 80061c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80061ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061d2:	d017      	beq.n	8006204 <UART_SetConfig+0x338>
 80061d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80061d8:	d817      	bhi.n	800620a <UART_SetConfig+0x33e>
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d00b      	beq.n	80061f8 <UART_SetConfig+0x32c>
 80061e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e4:	d811      	bhi.n	800620a <UART_SetConfig+0x33e>
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <UART_SetConfig+0x326>
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061ee:	d006      	beq.n	80061fe <UART_SetConfig+0x332>
 80061f0:	e00b      	b.n	800620a <UART_SetConfig+0x33e>
 80061f2:	2300      	movs	r3, #0
 80061f4:	77fb      	strb	r3, [r7, #31]
 80061f6:	e00d      	b.n	8006214 <UART_SetConfig+0x348>
 80061f8:	2302      	movs	r3, #2
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e00a      	b.n	8006214 <UART_SetConfig+0x348>
 80061fe:	2304      	movs	r3, #4
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e007      	b.n	8006214 <UART_SetConfig+0x348>
 8006204:	2308      	movs	r3, #8
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e004      	b.n	8006214 <UART_SetConfig+0x348>
 800620a:	2310      	movs	r3, #16
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e001      	b.n	8006214 <UART_SetConfig+0x348>
 8006210:	2310      	movs	r3, #16
 8006212:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800621c:	d15b      	bne.n	80062d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800621e:	7ffb      	ldrb	r3, [r7, #31]
 8006220:	2b08      	cmp	r3, #8
 8006222:	d828      	bhi.n	8006276 <UART_SetConfig+0x3aa>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0x360>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006251 	.word	0x08006251
 8006230:	08006259 	.word	0x08006259
 8006234:	08006261 	.word	0x08006261
 8006238:	08006277 	.word	0x08006277
 800623c:	08006267 	.word	0x08006267
 8006240:	08006277 	.word	0x08006277
 8006244:	08006277 	.word	0x08006277
 8006248:	08006277 	.word	0x08006277
 800624c:	0800626f 	.word	0x0800626f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006250:	f7fe fc6a 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8006254:	61b8      	str	r0, [r7, #24]
        break;
 8006256:	e013      	b.n	8006280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006258:	f7fe fc7a 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 800625c:	61b8      	str	r0, [r7, #24]
        break;
 800625e:	e00f      	b.n	8006280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006260:	4b4b      	ldr	r3, [pc, #300]	; (8006390 <UART_SetConfig+0x4c4>)
 8006262:	61bb      	str	r3, [r7, #24]
        break;
 8006264:	e00c      	b.n	8006280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006266:	f7fe fb4d 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 800626a:	61b8      	str	r0, [r7, #24]
        break;
 800626c:	e008      	b.n	8006280 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006272:	61bb      	str	r3, [r7, #24]
        break;
 8006274:	e004      	b.n	8006280 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	77bb      	strb	r3, [r7, #30]
        break;
 800627e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d074      	beq.n	8006370 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	005a      	lsls	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	441a      	add	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	2b0f      	cmp	r3, #15
 80062a0:	d916      	bls.n	80062d0 <UART_SetConfig+0x404>
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a8:	d212      	bcs.n	80062d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f023 030f 	bic.w	r3, r3, #15
 80062b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	b29a      	uxth	r2, r3
 80062c0:	89fb      	ldrh	r3, [r7, #14]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	89fa      	ldrh	r2, [r7, #14]
 80062cc:	60da      	str	r2, [r3, #12]
 80062ce:	e04f      	b.n	8006370 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	77bb      	strb	r3, [r7, #30]
 80062d4:	e04c      	b.n	8006370 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062d6:	7ffb      	ldrb	r3, [r7, #31]
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d828      	bhi.n	800632e <UART_SetConfig+0x462>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0x418>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006311 	.word	0x08006311
 80062ec:	08006319 	.word	0x08006319
 80062f0:	0800632f 	.word	0x0800632f
 80062f4:	0800631f 	.word	0x0800631f
 80062f8:	0800632f 	.word	0x0800632f
 80062fc:	0800632f 	.word	0x0800632f
 8006300:	0800632f 	.word	0x0800632f
 8006304:	08006327 	.word	0x08006327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006308:	f7fe fc0e 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 800630c:	61b8      	str	r0, [r7, #24]
        break;
 800630e:	e013      	b.n	8006338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006310:	f7fe fc1e 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 8006314:	61b8      	str	r0, [r7, #24]
        break;
 8006316:	e00f      	b.n	8006338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <UART_SetConfig+0x4c4>)
 800631a:	61bb      	str	r3, [r7, #24]
        break;
 800631c:	e00c      	b.n	8006338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631e:	f7fe faf1 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8006322:	61b8      	str	r0, [r7, #24]
        break;
 8006324:	e008      	b.n	8006338 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800632a:	61bb      	str	r3, [r7, #24]
        break;
 800632c:	e004      	b.n	8006338 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	77bb      	strb	r3, [r7, #30]
        break;
 8006336:	bf00      	nop
    }

    if (pclk != 0U)
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d018      	beq.n	8006370 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	085a      	lsrs	r2, r3, #1
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	441a      	add	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006350:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	2b0f      	cmp	r3, #15
 8006356:	d909      	bls.n	800636c <UART_SetConfig+0x4a0>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635e:	d205      	bcs.n	800636c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	b29a      	uxth	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	e001      	b.n	8006370 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800637c:	7fbb      	ldrb	r3, [r7, #30]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40007c00 	.word	0x40007c00
 800638c:	40023800 	.word	0x40023800
 8006390:	00f42400 	.word	0x00f42400

08006394 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	f003 0308 	and.w	r3, r3, #8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00a      	beq.n	8006446 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01a      	beq.n	80064aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	430a      	orrs	r2, r1
 8006488:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006492:	d10a      	bne.n	80064aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00a      	beq.n	80064cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  }
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af02      	add	r7, sp, #8
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064e8:	f7fc fdf8 	bl	80030dc <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d10e      	bne.n	800651a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f81b 	bl	8006546 <UART_WaitOnFlagUntilTimeout>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e011      	b.n	800653e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2220      	movs	r2, #32
 800651e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b09c      	sub	sp, #112	; 0x70
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	603b      	str	r3, [r7, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006556:	e0a7      	b.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800655e:	f000 80a3 	beq.w	80066a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006562:	f7fc fdbb 	bl	80030dc <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800656e:	429a      	cmp	r2, r3
 8006570:	d302      	bcc.n	8006578 <UART_WaitOnFlagUntilTimeout+0x32>
 8006572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006574:	2b00      	cmp	r3, #0
 8006576:	d13f      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006580:	e853 3f00 	ldrex	r3, [r3]
 8006584:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800658c:	667b      	str	r3, [r7, #100]	; 0x64
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006598:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800659c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800659e:	e841 2300 	strex	r3, r2, [r1]
 80065a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80065a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1e6      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3308      	adds	r3, #8
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	f023 0301 	bic.w	r3, r3, #1
 80065c0:	663b      	str	r3, [r7, #96]	; 0x60
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3308      	adds	r3, #8
 80065c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80065cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80065d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e5      	bne.n	80065aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2220      	movs	r2, #32
 80065e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e068      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d050      	beq.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006614:	d148      	bne.n	80066a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800661e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006634:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
 8006640:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3308      	adds	r3, #8
 8006658:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	e853 3f00 	ldrex	r3, [r3]
 8006660:	613b      	str	r3, [r7, #16]
   return(result);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	66bb      	str	r3, [r7, #104]	; 0x68
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006672:	623a      	str	r2, [r7, #32]
 8006674:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006676:	69f9      	ldr	r1, [r7, #28]
 8006678:	6a3a      	ldr	r2, [r7, #32]
 800667a:	e841 2300 	strex	r3, r2, [r1]
 800667e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1e5      	bne.n	8006652 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e010      	b.n	80066ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69da      	ldr	r2, [r3, #28]
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4013      	ands	r3, r2
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	f43f af48 	beq.w	8006558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3770      	adds	r7, #112	; 0x70
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d4:	b084      	sub	sp, #16
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	f107 001c 	add.w	r0, r7, #28
 80066e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d120      	bne.n	800672e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <USB_CoreInit+0xac>)
 80066fe:	4013      	ands	r3, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa96 	bl	8006c54 <USB_CoreReset>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e010      	b.n	8006750 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fa8a 	bl	8006c54 <USB_CoreReset>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b01      	cmp	r3, #1
 8006754:	d10b      	bne.n	800676e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	f043 0206 	orr.w	r2, r3, #6
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f043 0220 	orr.w	r2, r3, #32
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800677a:	b004      	add	sp, #16
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	ffbdffbf 	.word	0xffbdffbf

08006784 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f023 0201 	bic.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067c2:	78fb      	ldrb	r3, [r7, #3]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d115      	bne.n	80067f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80067d4:	2001      	movs	r0, #1
 80067d6:	f7fc fc8d 	bl	80030f4 <HAL_Delay>
      ms++;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa29 	bl	8006c38 <USB_GetMode>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d01e      	beq.n	800682a <USB_SetCurrentMode+0x84>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b31      	cmp	r3, #49	; 0x31
 80067f0:	d9f0      	bls.n	80067d4 <USB_SetCurrentMode+0x2e>
 80067f2:	e01a      	b.n	800682a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d115      	bne.n	8006826 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006806:	2001      	movs	r0, #1
 8006808:	f7fc fc74 	bl	80030f4 <HAL_Delay>
      ms++;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fa10 	bl	8006c38 <USB_GetMode>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <USB_SetCurrentMode+0x84>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b31      	cmp	r3, #49	; 0x31
 8006822:	d9f0      	bls.n	8006806 <USB_SetCurrentMode+0x60>
 8006824:	e001      	b.n	800682a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e005      	b.n	8006836 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b32      	cmp	r3, #50	; 0x32
 800682e:	d101      	bne.n	8006834 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e000      	b.n	8006836 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
	...

08006840 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006840:	b084      	sub	sp, #16
 8006842:	b580      	push	{r7, lr}
 8006844:	b086      	sub	sp, #24
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800684e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800685a:	2300      	movs	r3, #0
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	e009      	b.n	8006874 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	3340      	adds	r3, #64	; 0x40
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3301      	adds	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b0e      	cmp	r3, #14
 8006878:	d9f2      	bls.n	8006860 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800687a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11c      	bne.n	80068ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e005      	b.n	80068c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068cc:	461a      	mov	r2, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d8:	4619      	mov	r1, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068e0:	461a      	mov	r2, r3
 80068e2:	680b      	ldr	r3, [r1, #0]
 80068e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d10c      	bne.n	8006906 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80068f2:	2100      	movs	r1, #0
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f965 	bl	8006bc4 <USB_SetDevSpeed>
 80068fa:	e008      	b.n	800690e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80068fc:	2101      	movs	r1, #1
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f960 	bl	8006bc4 <USB_SetDevSpeed>
 8006904:	e003      	b.n	800690e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006906:	2103      	movs	r1, #3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f95b 	bl	8006bc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800690e:	2110      	movs	r1, #16
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f8f3 	bl	8006afc <USB_FlushTxFifo>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f91f 	bl	8006b64 <USB_FlushRxFifo>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006936:	461a      	mov	r2, r3
 8006938:	2300      	movs	r3, #0
 800693a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006942:	461a      	mov	r2, r3
 8006944:	2300      	movs	r3, #0
 8006946:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800694e:	461a      	mov	r2, r3
 8006950:	2300      	movs	r3, #0
 8006952:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006954:	2300      	movs	r3, #0
 8006956:	613b      	str	r3, [r7, #16]
 8006958:	e043      	b.n	80069e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800696c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006970:	d118      	bne.n	80069a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006984:	461a      	mov	r2, r3
 8006986:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e013      	b.n	80069b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699a:	461a      	mov	r2, r3
 800699c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80069a0:	6013      	str	r3, [r2, #0]
 80069a2:	e008      	b.n	80069b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	015a      	lsls	r2, r3, #5
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b0:	461a      	mov	r2, r3
 80069b2:	2300      	movs	r3, #0
 80069b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c2:	461a      	mov	r2, r3
 80069c4:	2300      	movs	r3, #0
 80069c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d4:	461a      	mov	r2, r3
 80069d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80069da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	3301      	adds	r3, #1
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d3b7      	bcc.n	800695a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e043      	b.n	8006a78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a06:	d118      	bne.n	8006a3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e013      	b.n	8006a4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	e008      	b.n	8006a4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a46:	461a      	mov	r2, r3
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	3301      	adds	r3, #1
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d3b7      	bcc.n	80069f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006aa0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d105      	bne.n	8006ab4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f043 0210 	orr.w	r2, r3, #16
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699a      	ldr	r2, [r3, #24]
 8006ab8:	4b0e      	ldr	r3, [pc, #56]	; (8006af4 <USB_DevInit+0x2b4>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	f043 0208 	orr.w	r2, r3, #8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d105      	bne.n	8006ae4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699a      	ldr	r2, [r3, #24]
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <USB_DevInit+0x2b8>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006af0:	b004      	add	sp, #16
 8006af2:	4770      	bx	lr
 8006af4:	803c3800 	.word	0x803c3800
 8006af8:	40000004 	.word	0x40000004

08006afc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <USB_FlushTxFifo+0x64>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d901      	bls.n	8006b1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e01b      	b.n	8006b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	daf2      	bge.n	8006b0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	019b      	lsls	r3, r3, #6
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a08      	ldr	r2, [pc, #32]	; (8006b60 <USB_FlushTxFifo+0x64>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e006      	b.n	8006b54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b20      	cmp	r3, #32
 8006b50:	d0f0      	beq.n	8006b34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <USB_FlushRxFifo+0x5c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e018      	b.n	8006bb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	daf2      	bge.n	8006b70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2210      	movs	r2, #16
 8006b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4a08      	ldr	r2, [pc, #32]	; (8006bc0 <USB_FlushRxFifo+0x5c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d901      	bls.n	8006ba6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e006      	b.n	8006bb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d0f0      	beq.n	8006b94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	00030d40 	.word	0x00030d40

08006bc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be4:	4313      	orrs	r3, r2
 8006be6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c10:	f023 0303 	bic.w	r3, r3, #3
 8006c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c24:	f043 0302 	orr.w	r3, r3, #2
 8006c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	f003 0301 	and.w	r3, r3, #1
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <USB_CoreReset+0x64>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d901      	bls.n	8006c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e01b      	b.n	8006caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	daf2      	bge.n	8006c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f043 0201 	orr.w	r2, r3, #1
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a09      	ldr	r2, [pc, #36]	; (8006cb8 <USB_CoreReset+0x64>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e006      	b.n	8006caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d0f0      	beq.n	8006c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	00030d40 	.word	0x00030d40

08006cbc <atof>:
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f001 bd61 	b.w	8008784 <strtod>
	...

08006cc4 <exit>:
 8006cc4:	b508      	push	{r3, lr}
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <exit+0x1c>)
 8006cc8:	4604      	mov	r4, r0
 8006cca:	b113      	cbz	r3, 8006cd2 <exit+0xe>
 8006ccc:	2100      	movs	r1, #0
 8006cce:	f3af 8000 	nop.w
 8006cd2:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <exit+0x20>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	b103      	cbz	r3, 8006cda <exit+0x16>
 8006cd8:	4798      	blx	r3
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f7fc f8c4 	bl	8002e68 <_exit>
 8006ce0:	00000000 	.word	0x00000000
 8006ce4:	2000aa98 	.word	0x2000aa98

08006ce8 <__cvt>:
 8006ce8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	ec55 4b10 	vmov	r4, r5, d0
 8006cf0:	2d00      	cmp	r5, #0
 8006cf2:	460e      	mov	r6, r1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	462b      	mov	r3, r5
 8006cf8:	bfbb      	ittet	lt
 8006cfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cfe:	461d      	movlt	r5, r3
 8006d00:	2300      	movge	r3, #0
 8006d02:	232d      	movlt	r3, #45	; 0x2d
 8006d04:	700b      	strb	r3, [r1, #0]
 8006d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d0c:	4691      	mov	r9, r2
 8006d0e:	f023 0820 	bic.w	r8, r3, #32
 8006d12:	bfbc      	itt	lt
 8006d14:	4622      	movlt	r2, r4
 8006d16:	4614      	movlt	r4, r2
 8006d18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d1c:	d005      	beq.n	8006d2a <__cvt+0x42>
 8006d1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d22:	d100      	bne.n	8006d26 <__cvt+0x3e>
 8006d24:	3601      	adds	r6, #1
 8006d26:	2102      	movs	r1, #2
 8006d28:	e000      	b.n	8006d2c <__cvt+0x44>
 8006d2a:	2103      	movs	r1, #3
 8006d2c:	ab03      	add	r3, sp, #12
 8006d2e:	9301      	str	r3, [sp, #4]
 8006d30:	ab02      	add	r3, sp, #8
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	ec45 4b10 	vmov	d0, r4, r5
 8006d38:	4653      	mov	r3, sl
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	f001 ff58 	bl	8008bf0 <_dtoa_r>
 8006d40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d44:	4607      	mov	r7, r0
 8006d46:	d102      	bne.n	8006d4e <__cvt+0x66>
 8006d48:	f019 0f01 	tst.w	r9, #1
 8006d4c:	d022      	beq.n	8006d94 <__cvt+0xac>
 8006d4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d52:	eb07 0906 	add.w	r9, r7, r6
 8006d56:	d110      	bne.n	8006d7a <__cvt+0x92>
 8006d58:	783b      	ldrb	r3, [r7, #0]
 8006d5a:	2b30      	cmp	r3, #48	; 0x30
 8006d5c:	d10a      	bne.n	8006d74 <__cvt+0x8c>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2300      	movs	r3, #0
 8006d62:	4620      	mov	r0, r4
 8006d64:	4629      	mov	r1, r5
 8006d66:	f7f9 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 8006d6a:	b918      	cbnz	r0, 8006d74 <__cvt+0x8c>
 8006d6c:	f1c6 0601 	rsb	r6, r6, #1
 8006d70:	f8ca 6000 	str.w	r6, [sl]
 8006d74:	f8da 3000 	ldr.w	r3, [sl]
 8006d78:	4499      	add	r9, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4620      	mov	r0, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	f7f9 fec1 	bl	8000b08 <__aeabi_dcmpeq>
 8006d86:	b108      	cbz	r0, 8006d8c <__cvt+0xa4>
 8006d88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d8c:	2230      	movs	r2, #48	; 0x30
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	454b      	cmp	r3, r9
 8006d92:	d307      	bcc.n	8006da4 <__cvt+0xbc>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d98:	1bdb      	subs	r3, r3, r7
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	b004      	add	sp, #16
 8006da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	9103      	str	r1, [sp, #12]
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e7f0      	b.n	8006d8e <__cvt+0xa6>

08006dac <__exponent>:
 8006dac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dae:	4603      	mov	r3, r0
 8006db0:	2900      	cmp	r1, #0
 8006db2:	bfb8      	it	lt
 8006db4:	4249      	neglt	r1, r1
 8006db6:	f803 2b02 	strb.w	r2, [r3], #2
 8006dba:	bfb4      	ite	lt
 8006dbc:	222d      	movlt	r2, #45	; 0x2d
 8006dbe:	222b      	movge	r2, #43	; 0x2b
 8006dc0:	2909      	cmp	r1, #9
 8006dc2:	7042      	strb	r2, [r0, #1]
 8006dc4:	dd2a      	ble.n	8006e1c <__exponent+0x70>
 8006dc6:	f10d 0207 	add.w	r2, sp, #7
 8006dca:	4617      	mov	r7, r2
 8006dcc:	260a      	movs	r6, #10
 8006dce:	4694      	mov	ip, r2
 8006dd0:	fb91 f5f6 	sdiv	r5, r1, r6
 8006dd4:	fb06 1415 	mls	r4, r6, r5, r1
 8006dd8:	3430      	adds	r4, #48	; 0x30
 8006dda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006dde:	460c      	mov	r4, r1
 8006de0:	2c63      	cmp	r4, #99	; 0x63
 8006de2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006de6:	4629      	mov	r1, r5
 8006de8:	dcf1      	bgt.n	8006dce <__exponent+0x22>
 8006dea:	3130      	adds	r1, #48	; 0x30
 8006dec:	f1ac 0402 	sub.w	r4, ip, #2
 8006df0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006df4:	1c41      	adds	r1, r0, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	42ba      	cmp	r2, r7
 8006dfa:	d30a      	bcc.n	8006e12 <__exponent+0x66>
 8006dfc:	f10d 0209 	add.w	r2, sp, #9
 8006e00:	eba2 020c 	sub.w	r2, r2, ip
 8006e04:	42bc      	cmp	r4, r7
 8006e06:	bf88      	it	hi
 8006e08:	2200      	movhi	r2, #0
 8006e0a:	4413      	add	r3, r2
 8006e0c:	1a18      	subs	r0, r3, r0
 8006e0e:	b003      	add	sp, #12
 8006e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006e16:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006e1a:	e7ed      	b.n	8006df8 <__exponent+0x4c>
 8006e1c:	2330      	movs	r3, #48	; 0x30
 8006e1e:	3130      	adds	r1, #48	; 0x30
 8006e20:	7083      	strb	r3, [r0, #2]
 8006e22:	70c1      	strb	r1, [r0, #3]
 8006e24:	1d03      	adds	r3, r0, #4
 8006e26:	e7f1      	b.n	8006e0c <__exponent+0x60>

08006e28 <_printf_float>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	ed2d 8b02 	vpush	{d8}
 8006e30:	b08d      	sub	sp, #52	; 0x34
 8006e32:	460c      	mov	r4, r1
 8006e34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006e38:	4616      	mov	r6, r2
 8006e3a:	461f      	mov	r7, r3
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	f001 fdff 	bl	8008a40 <_localeconv_r>
 8006e42:	f8d0 a000 	ldr.w	sl, [r0]
 8006e46:	4650      	mov	r0, sl
 8006e48:	f7f9 fa32 	bl	80002b0 <strlen>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	f8d8 3000 	ldr.w	r3, [r8]
 8006e58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	f023 0307 	bic.w	r3, r3, #7
 8006e62:	f103 0208 	add.w	r2, r3, #8
 8006e66:	f8c8 2000 	str.w	r2, [r8]
 8006e6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e72:	9307      	str	r3, [sp, #28]
 8006e74:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e78:	ee08 0a10 	vmov	s16, r0
 8006e7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006e80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e84:	4b9e      	ldr	r3, [pc, #632]	; (8007100 <_printf_float+0x2d8>)
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e8a:	f7f9 fe6f 	bl	8000b6c <__aeabi_dcmpun>
 8006e8e:	bb88      	cbnz	r0, 8006ef4 <_printf_float+0xcc>
 8006e90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e94:	4b9a      	ldr	r3, [pc, #616]	; (8007100 <_printf_float+0x2d8>)
 8006e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e9a:	f7f9 fe49 	bl	8000b30 <__aeabi_dcmple>
 8006e9e:	bb48      	cbnz	r0, 8006ef4 <_printf_float+0xcc>
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	4649      	mov	r1, r9
 8006ea8:	f7f9 fe38 	bl	8000b1c <__aeabi_dcmplt>
 8006eac:	b110      	cbz	r0, 8006eb4 <_printf_float+0x8c>
 8006eae:	232d      	movs	r3, #45	; 0x2d
 8006eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eb4:	4a93      	ldr	r2, [pc, #588]	; (8007104 <_printf_float+0x2dc>)
 8006eb6:	4b94      	ldr	r3, [pc, #592]	; (8007108 <_printf_float+0x2e0>)
 8006eb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ebc:	bf94      	ite	ls
 8006ebe:	4690      	movls	r8, r2
 8006ec0:	4698      	movhi	r8, r3
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	9b05      	ldr	r3, [sp, #20]
 8006ec8:	f023 0304 	bic.w	r3, r3, #4
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	f04f 0900 	mov.w	r9, #0
 8006ed2:	9700      	str	r7, [sp, #0]
 8006ed4:	4633      	mov	r3, r6
 8006ed6:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f000 f9da 	bl	8007294 <_printf_common>
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	f040 8090 	bne.w	8007006 <_printf_float+0x1de>
 8006ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eea:	b00d      	add	sp, #52	; 0x34
 8006eec:	ecbd 8b02 	vpop	{d8}
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	4642      	mov	r2, r8
 8006ef6:	464b      	mov	r3, r9
 8006ef8:	4640      	mov	r0, r8
 8006efa:	4649      	mov	r1, r9
 8006efc:	f7f9 fe36 	bl	8000b6c <__aeabi_dcmpun>
 8006f00:	b140      	cbz	r0, 8006f14 <_printf_float+0xec>
 8006f02:	464b      	mov	r3, r9
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bfbc      	itt	lt
 8006f08:	232d      	movlt	r3, #45	; 0x2d
 8006f0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f0e:	4a7f      	ldr	r2, [pc, #508]	; (800710c <_printf_float+0x2e4>)
 8006f10:	4b7f      	ldr	r3, [pc, #508]	; (8007110 <_printf_float+0x2e8>)
 8006f12:	e7d1      	b.n	8006eb8 <_printf_float+0x90>
 8006f14:	6863      	ldr	r3, [r4, #4]
 8006f16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f1a:	9206      	str	r2, [sp, #24]
 8006f1c:	1c5a      	adds	r2, r3, #1
 8006f1e:	d13f      	bne.n	8006fa0 <_printf_float+0x178>
 8006f20:	2306      	movs	r3, #6
 8006f22:	6063      	str	r3, [r4, #4]
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	6861      	ldr	r1, [r4, #4]
 8006f28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	ab0a      	add	r3, sp, #40	; 0x28
 8006f32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006f36:	ab09      	add	r3, sp, #36	; 0x24
 8006f38:	ec49 8b10 	vmov	d0, r8, r9
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7ff fecf 	bl	8006ce8 <__cvt>
 8006f4a:	9b06      	ldr	r3, [sp, #24]
 8006f4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f4e:	2b47      	cmp	r3, #71	; 0x47
 8006f50:	4680      	mov	r8, r0
 8006f52:	d108      	bne.n	8006f66 <_printf_float+0x13e>
 8006f54:	1cc8      	adds	r0, r1, #3
 8006f56:	db02      	blt.n	8006f5e <_printf_float+0x136>
 8006f58:	6863      	ldr	r3, [r4, #4]
 8006f5a:	4299      	cmp	r1, r3
 8006f5c:	dd41      	ble.n	8006fe2 <_printf_float+0x1ba>
 8006f5e:	f1ab 0302 	sub.w	r3, fp, #2
 8006f62:	fa5f fb83 	uxtb.w	fp, r3
 8006f66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f6a:	d820      	bhi.n	8006fae <_printf_float+0x186>
 8006f6c:	3901      	subs	r1, #1
 8006f6e:	465a      	mov	r2, fp
 8006f70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f74:	9109      	str	r1, [sp, #36]	; 0x24
 8006f76:	f7ff ff19 	bl	8006dac <__exponent>
 8006f7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f7c:	1813      	adds	r3, r2, r0
 8006f7e:	2a01      	cmp	r2, #1
 8006f80:	4681      	mov	r9, r0
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	dc02      	bgt.n	8006f8c <_printf_float+0x164>
 8006f86:	6822      	ldr	r2, [r4, #0]
 8006f88:	07d2      	lsls	r2, r2, #31
 8006f8a:	d501      	bpl.n	8006f90 <_printf_float+0x168>
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	6123      	str	r3, [r4, #16]
 8006f90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d09c      	beq.n	8006ed2 <_printf_float+0xaa>
 8006f98:	232d      	movs	r3, #45	; 0x2d
 8006f9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9e:	e798      	b.n	8006ed2 <_printf_float+0xaa>
 8006fa0:	9a06      	ldr	r2, [sp, #24]
 8006fa2:	2a47      	cmp	r2, #71	; 0x47
 8006fa4:	d1be      	bne.n	8006f24 <_printf_float+0xfc>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1bc      	bne.n	8006f24 <_printf_float+0xfc>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e7b9      	b.n	8006f22 <_printf_float+0xfa>
 8006fae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006fb2:	d118      	bne.n	8006fe6 <_printf_float+0x1be>
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	6863      	ldr	r3, [r4, #4]
 8006fb8:	dd0b      	ble.n	8006fd2 <_printf_float+0x1aa>
 8006fba:	6121      	str	r1, [r4, #16]
 8006fbc:	b913      	cbnz	r3, 8006fc4 <_printf_float+0x19c>
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	07d0      	lsls	r0, r2, #31
 8006fc2:	d502      	bpl.n	8006fca <_printf_float+0x1a2>
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	440b      	add	r3, r1
 8006fc8:	6123      	str	r3, [r4, #16]
 8006fca:	65a1      	str	r1, [r4, #88]	; 0x58
 8006fcc:	f04f 0900 	mov.w	r9, #0
 8006fd0:	e7de      	b.n	8006f90 <_printf_float+0x168>
 8006fd2:	b913      	cbnz	r3, 8006fda <_printf_float+0x1b2>
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	07d2      	lsls	r2, r2, #31
 8006fd8:	d501      	bpl.n	8006fde <_printf_float+0x1b6>
 8006fda:	3302      	adds	r3, #2
 8006fdc:	e7f4      	b.n	8006fc8 <_printf_float+0x1a0>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7f2      	b.n	8006fc8 <_printf_float+0x1a0>
 8006fe2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	db05      	blt.n	8006ff8 <_printf_float+0x1d0>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	6121      	str	r1, [r4, #16]
 8006ff0:	07d8      	lsls	r0, r3, #31
 8006ff2:	d5ea      	bpl.n	8006fca <_printf_float+0x1a2>
 8006ff4:	1c4b      	adds	r3, r1, #1
 8006ff6:	e7e7      	b.n	8006fc8 <_printf_float+0x1a0>
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	bfd4      	ite	le
 8006ffc:	f1c1 0202 	rsble	r2, r1, #2
 8007000:	2201      	movgt	r2, #1
 8007002:	4413      	add	r3, r2
 8007004:	e7e0      	b.n	8006fc8 <_printf_float+0x1a0>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	055a      	lsls	r2, r3, #21
 800700a:	d407      	bmi.n	800701c <_printf_float+0x1f4>
 800700c:	6923      	ldr	r3, [r4, #16]
 800700e:	4642      	mov	r2, r8
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	d12c      	bne.n	8007074 <_printf_float+0x24c>
 800701a:	e764      	b.n	8006ee6 <_printf_float+0xbe>
 800701c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007020:	f240 80e0 	bls.w	80071e4 <_printf_float+0x3bc>
 8007024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	f7f9 fd6c 	bl	8000b08 <__aeabi_dcmpeq>
 8007030:	2800      	cmp	r0, #0
 8007032:	d034      	beq.n	800709e <_printf_float+0x276>
 8007034:	4a37      	ldr	r2, [pc, #220]	; (8007114 <_printf_float+0x2ec>)
 8007036:	2301      	movs	r3, #1
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	f43f af51 	beq.w	8006ee6 <_printf_float+0xbe>
 8007044:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007048:	429a      	cmp	r2, r3
 800704a:	db02      	blt.n	8007052 <_printf_float+0x22a>
 800704c:	6823      	ldr	r3, [r4, #0]
 800704e:	07d8      	lsls	r0, r3, #31
 8007050:	d510      	bpl.n	8007074 <_printf_float+0x24c>
 8007052:	ee18 3a10 	vmov	r3, s16
 8007056:	4652      	mov	r2, sl
 8007058:	4631      	mov	r1, r6
 800705a:	4628      	mov	r0, r5
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	f43f af41 	beq.w	8006ee6 <_printf_float+0xbe>
 8007064:	f04f 0800 	mov.w	r8, #0
 8007068:	f104 091a 	add.w	r9, r4, #26
 800706c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706e:	3b01      	subs	r3, #1
 8007070:	4543      	cmp	r3, r8
 8007072:	dc09      	bgt.n	8007088 <_printf_float+0x260>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	079b      	lsls	r3, r3, #30
 8007078:	f100 8107 	bmi.w	800728a <_printf_float+0x462>
 800707c:	68e0      	ldr	r0, [r4, #12]
 800707e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007080:	4298      	cmp	r0, r3
 8007082:	bfb8      	it	lt
 8007084:	4618      	movlt	r0, r3
 8007086:	e730      	b.n	8006eea <_printf_float+0xc2>
 8007088:	2301      	movs	r3, #1
 800708a:	464a      	mov	r2, r9
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	47b8      	blx	r7
 8007092:	3001      	adds	r0, #1
 8007094:	f43f af27 	beq.w	8006ee6 <_printf_float+0xbe>
 8007098:	f108 0801 	add.w	r8, r8, #1
 800709c:	e7e6      	b.n	800706c <_printf_float+0x244>
 800709e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dc39      	bgt.n	8007118 <_printf_float+0x2f0>
 80070a4:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <_printf_float+0x2ec>)
 80070a6:	2301      	movs	r3, #1
 80070a8:	4631      	mov	r1, r6
 80070aa:	4628      	mov	r0, r5
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	f43f af19 	beq.w	8006ee6 <_printf_float+0xbe>
 80070b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d102      	bne.n	80070c2 <_printf_float+0x29a>
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	07d9      	lsls	r1, r3, #31
 80070c0:	d5d8      	bpl.n	8007074 <_printf_float+0x24c>
 80070c2:	ee18 3a10 	vmov	r3, s16
 80070c6:	4652      	mov	r2, sl
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	f43f af09 	beq.w	8006ee6 <_printf_float+0xbe>
 80070d4:	f04f 0900 	mov.w	r9, #0
 80070d8:	f104 0a1a 	add.w	sl, r4, #26
 80070dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070de:	425b      	negs	r3, r3
 80070e0:	454b      	cmp	r3, r9
 80070e2:	dc01      	bgt.n	80070e8 <_printf_float+0x2c0>
 80070e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e6:	e792      	b.n	800700e <_printf_float+0x1e6>
 80070e8:	2301      	movs	r3, #1
 80070ea:	4652      	mov	r2, sl
 80070ec:	4631      	mov	r1, r6
 80070ee:	4628      	mov	r0, r5
 80070f0:	47b8      	blx	r7
 80070f2:	3001      	adds	r0, #1
 80070f4:	f43f aef7 	beq.w	8006ee6 <_printf_float+0xbe>
 80070f8:	f109 0901 	add.w	r9, r9, #1
 80070fc:	e7ee      	b.n	80070dc <_printf_float+0x2b4>
 80070fe:	bf00      	nop
 8007100:	7fefffff 	.word	0x7fefffff
 8007104:	0800d2d4 	.word	0x0800d2d4
 8007108:	0800d2d8 	.word	0x0800d2d8
 800710c:	0800d2dc 	.word	0x0800d2dc
 8007110:	0800d2e0 	.word	0x0800d2e0
 8007114:	0800d2e4 	.word	0x0800d2e4
 8007118:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800711a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800711c:	429a      	cmp	r2, r3
 800711e:	bfa8      	it	ge
 8007120:	461a      	movge	r2, r3
 8007122:	2a00      	cmp	r2, #0
 8007124:	4691      	mov	r9, r2
 8007126:	dc37      	bgt.n	8007198 <_printf_float+0x370>
 8007128:	f04f 0b00 	mov.w	fp, #0
 800712c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007130:	f104 021a 	add.w	r2, r4, #26
 8007134:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007136:	9305      	str	r3, [sp, #20]
 8007138:	eba3 0309 	sub.w	r3, r3, r9
 800713c:	455b      	cmp	r3, fp
 800713e:	dc33      	bgt.n	80071a8 <_printf_float+0x380>
 8007140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007144:	429a      	cmp	r2, r3
 8007146:	db3b      	blt.n	80071c0 <_printf_float+0x398>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	07da      	lsls	r2, r3, #31
 800714c:	d438      	bmi.n	80071c0 <_printf_float+0x398>
 800714e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007152:	eba2 0903 	sub.w	r9, r2, r3
 8007156:	9b05      	ldr	r3, [sp, #20]
 8007158:	1ad2      	subs	r2, r2, r3
 800715a:	4591      	cmp	r9, r2
 800715c:	bfa8      	it	ge
 800715e:	4691      	movge	r9, r2
 8007160:	f1b9 0f00 	cmp.w	r9, #0
 8007164:	dc35      	bgt.n	80071d2 <_printf_float+0x3aa>
 8007166:	f04f 0800 	mov.w	r8, #0
 800716a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800716e:	f104 0a1a 	add.w	sl, r4, #26
 8007172:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007176:	1a9b      	subs	r3, r3, r2
 8007178:	eba3 0309 	sub.w	r3, r3, r9
 800717c:	4543      	cmp	r3, r8
 800717e:	f77f af79 	ble.w	8007074 <_printf_float+0x24c>
 8007182:	2301      	movs	r3, #1
 8007184:	4652      	mov	r2, sl
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	f43f aeaa 	beq.w	8006ee6 <_printf_float+0xbe>
 8007192:	f108 0801 	add.w	r8, r8, #1
 8007196:	e7ec      	b.n	8007172 <_printf_float+0x34a>
 8007198:	4613      	mov	r3, r2
 800719a:	4631      	mov	r1, r6
 800719c:	4642      	mov	r2, r8
 800719e:	4628      	mov	r0, r5
 80071a0:	47b8      	blx	r7
 80071a2:	3001      	adds	r0, #1
 80071a4:	d1c0      	bne.n	8007128 <_printf_float+0x300>
 80071a6:	e69e      	b.n	8006ee6 <_printf_float+0xbe>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	9205      	str	r2, [sp, #20]
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f ae97 	beq.w	8006ee6 <_printf_float+0xbe>
 80071b8:	9a05      	ldr	r2, [sp, #20]
 80071ba:	f10b 0b01 	add.w	fp, fp, #1
 80071be:	e7b9      	b.n	8007134 <_printf_float+0x30c>
 80071c0:	ee18 3a10 	vmov	r3, s16
 80071c4:	4652      	mov	r2, sl
 80071c6:	4631      	mov	r1, r6
 80071c8:	4628      	mov	r0, r5
 80071ca:	47b8      	blx	r7
 80071cc:	3001      	adds	r0, #1
 80071ce:	d1be      	bne.n	800714e <_printf_float+0x326>
 80071d0:	e689      	b.n	8006ee6 <_printf_float+0xbe>
 80071d2:	9a05      	ldr	r2, [sp, #20]
 80071d4:	464b      	mov	r3, r9
 80071d6:	4442      	add	r2, r8
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	d1c1      	bne.n	8007166 <_printf_float+0x33e>
 80071e2:	e680      	b.n	8006ee6 <_printf_float+0xbe>
 80071e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e6:	2a01      	cmp	r2, #1
 80071e8:	dc01      	bgt.n	80071ee <_printf_float+0x3c6>
 80071ea:	07db      	lsls	r3, r3, #31
 80071ec:	d53a      	bpl.n	8007264 <_printf_float+0x43c>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4642      	mov	r2, r8
 80071f2:	4631      	mov	r1, r6
 80071f4:	4628      	mov	r0, r5
 80071f6:	47b8      	blx	r7
 80071f8:	3001      	adds	r0, #1
 80071fa:	f43f ae74 	beq.w	8006ee6 <_printf_float+0xbe>
 80071fe:	ee18 3a10 	vmov	r3, s16
 8007202:	4652      	mov	r2, sl
 8007204:	4631      	mov	r1, r6
 8007206:	4628      	mov	r0, r5
 8007208:	47b8      	blx	r7
 800720a:	3001      	adds	r0, #1
 800720c:	f43f ae6b 	beq.w	8006ee6 <_printf_float+0xbe>
 8007210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007214:	2200      	movs	r2, #0
 8007216:	2300      	movs	r3, #0
 8007218:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800721c:	f7f9 fc74 	bl	8000b08 <__aeabi_dcmpeq>
 8007220:	b9d8      	cbnz	r0, 800725a <_printf_float+0x432>
 8007222:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007226:	f108 0201 	add.w	r2, r8, #1
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	d10e      	bne.n	8007252 <_printf_float+0x42a>
 8007234:	e657      	b.n	8006ee6 <_printf_float+0xbe>
 8007236:	2301      	movs	r3, #1
 8007238:	4652      	mov	r2, sl
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f ae50 	beq.w	8006ee6 <_printf_float+0xbe>
 8007246:	f108 0801 	add.w	r8, r8, #1
 800724a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724c:	3b01      	subs	r3, #1
 800724e:	4543      	cmp	r3, r8
 8007250:	dcf1      	bgt.n	8007236 <_printf_float+0x40e>
 8007252:	464b      	mov	r3, r9
 8007254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007258:	e6da      	b.n	8007010 <_printf_float+0x1e8>
 800725a:	f04f 0800 	mov.w	r8, #0
 800725e:	f104 0a1a 	add.w	sl, r4, #26
 8007262:	e7f2      	b.n	800724a <_printf_float+0x422>
 8007264:	2301      	movs	r3, #1
 8007266:	4642      	mov	r2, r8
 8007268:	e7df      	b.n	800722a <_printf_float+0x402>
 800726a:	2301      	movs	r3, #1
 800726c:	464a      	mov	r2, r9
 800726e:	4631      	mov	r1, r6
 8007270:	4628      	mov	r0, r5
 8007272:	47b8      	blx	r7
 8007274:	3001      	adds	r0, #1
 8007276:	f43f ae36 	beq.w	8006ee6 <_printf_float+0xbe>
 800727a:	f108 0801 	add.w	r8, r8, #1
 800727e:	68e3      	ldr	r3, [r4, #12]
 8007280:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007282:	1a5b      	subs	r3, r3, r1
 8007284:	4543      	cmp	r3, r8
 8007286:	dcf0      	bgt.n	800726a <_printf_float+0x442>
 8007288:	e6f8      	b.n	800707c <_printf_float+0x254>
 800728a:	f04f 0800 	mov.w	r8, #0
 800728e:	f104 0919 	add.w	r9, r4, #25
 8007292:	e7f4      	b.n	800727e <_printf_float+0x456>

08007294 <_printf_common>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	4616      	mov	r6, r2
 800729a:	4699      	mov	r9, r3
 800729c:	688a      	ldr	r2, [r1, #8]
 800729e:	690b      	ldr	r3, [r1, #16]
 80072a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	bfb8      	it	lt
 80072a8:	4613      	movlt	r3, r2
 80072aa:	6033      	str	r3, [r6, #0]
 80072ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072b0:	4607      	mov	r7, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	b10a      	cbz	r2, 80072ba <_printf_common+0x26>
 80072b6:	3301      	adds	r3, #1
 80072b8:	6033      	str	r3, [r6, #0]
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	0699      	lsls	r1, r3, #26
 80072be:	bf42      	ittt	mi
 80072c0:	6833      	ldrmi	r3, [r6, #0]
 80072c2:	3302      	addmi	r3, #2
 80072c4:	6033      	strmi	r3, [r6, #0]
 80072c6:	6825      	ldr	r5, [r4, #0]
 80072c8:	f015 0506 	ands.w	r5, r5, #6
 80072cc:	d106      	bne.n	80072dc <_printf_common+0x48>
 80072ce:	f104 0a19 	add.w	sl, r4, #25
 80072d2:	68e3      	ldr	r3, [r4, #12]
 80072d4:	6832      	ldr	r2, [r6, #0]
 80072d6:	1a9b      	subs	r3, r3, r2
 80072d8:	42ab      	cmp	r3, r5
 80072da:	dc26      	bgt.n	800732a <_printf_common+0x96>
 80072dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072e0:	1e13      	subs	r3, r2, #0
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	bf18      	it	ne
 80072e6:	2301      	movne	r3, #1
 80072e8:	0692      	lsls	r2, r2, #26
 80072ea:	d42b      	bmi.n	8007344 <_printf_common+0xb0>
 80072ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d01e      	beq.n	8007338 <_printf_common+0xa4>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	6922      	ldr	r2, [r4, #16]
 80072fe:	f003 0306 	and.w	r3, r3, #6
 8007302:	2b04      	cmp	r3, #4
 8007304:	bf02      	ittt	eq
 8007306:	68e5      	ldreq	r5, [r4, #12]
 8007308:	6833      	ldreq	r3, [r6, #0]
 800730a:	1aed      	subeq	r5, r5, r3
 800730c:	68a3      	ldr	r3, [r4, #8]
 800730e:	bf0c      	ite	eq
 8007310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007314:	2500      	movne	r5, #0
 8007316:	4293      	cmp	r3, r2
 8007318:	bfc4      	itt	gt
 800731a:	1a9b      	subgt	r3, r3, r2
 800731c:	18ed      	addgt	r5, r5, r3
 800731e:	2600      	movs	r6, #0
 8007320:	341a      	adds	r4, #26
 8007322:	42b5      	cmp	r5, r6
 8007324:	d11a      	bne.n	800735c <_printf_common+0xc8>
 8007326:	2000      	movs	r0, #0
 8007328:	e008      	b.n	800733c <_printf_common+0xa8>
 800732a:	2301      	movs	r3, #1
 800732c:	4652      	mov	r2, sl
 800732e:	4649      	mov	r1, r9
 8007330:	4638      	mov	r0, r7
 8007332:	47c0      	blx	r8
 8007334:	3001      	adds	r0, #1
 8007336:	d103      	bne.n	8007340 <_printf_common+0xac>
 8007338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	3501      	adds	r5, #1
 8007342:	e7c6      	b.n	80072d2 <_printf_common+0x3e>
 8007344:	18e1      	adds	r1, r4, r3
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	2030      	movs	r0, #48	; 0x30
 800734a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800734e:	4422      	add	r2, r4
 8007350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007358:	3302      	adds	r3, #2
 800735a:	e7c7      	b.n	80072ec <_printf_common+0x58>
 800735c:	2301      	movs	r3, #1
 800735e:	4622      	mov	r2, r4
 8007360:	4649      	mov	r1, r9
 8007362:	4638      	mov	r0, r7
 8007364:	47c0      	blx	r8
 8007366:	3001      	adds	r0, #1
 8007368:	d0e6      	beq.n	8007338 <_printf_common+0xa4>
 800736a:	3601      	adds	r6, #1
 800736c:	e7d9      	b.n	8007322 <_printf_common+0x8e>
	...

08007370 <_printf_i>:
 8007370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	7e0f      	ldrb	r7, [r1, #24]
 8007376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007378:	2f78      	cmp	r7, #120	; 0x78
 800737a:	4691      	mov	r9, r2
 800737c:	4680      	mov	r8, r0
 800737e:	460c      	mov	r4, r1
 8007380:	469a      	mov	sl, r3
 8007382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007386:	d807      	bhi.n	8007398 <_printf_i+0x28>
 8007388:	2f62      	cmp	r7, #98	; 0x62
 800738a:	d80a      	bhi.n	80073a2 <_printf_i+0x32>
 800738c:	2f00      	cmp	r7, #0
 800738e:	f000 80d4 	beq.w	800753a <_printf_i+0x1ca>
 8007392:	2f58      	cmp	r7, #88	; 0x58
 8007394:	f000 80c0 	beq.w	8007518 <_printf_i+0x1a8>
 8007398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800739c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073a0:	e03a      	b.n	8007418 <_printf_i+0xa8>
 80073a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073a6:	2b15      	cmp	r3, #21
 80073a8:	d8f6      	bhi.n	8007398 <_printf_i+0x28>
 80073aa:	a101      	add	r1, pc, #4	; (adr r1, 80073b0 <_printf_i+0x40>)
 80073ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073b0:	08007409 	.word	0x08007409
 80073b4:	0800741d 	.word	0x0800741d
 80073b8:	08007399 	.word	0x08007399
 80073bc:	08007399 	.word	0x08007399
 80073c0:	08007399 	.word	0x08007399
 80073c4:	08007399 	.word	0x08007399
 80073c8:	0800741d 	.word	0x0800741d
 80073cc:	08007399 	.word	0x08007399
 80073d0:	08007399 	.word	0x08007399
 80073d4:	08007399 	.word	0x08007399
 80073d8:	08007399 	.word	0x08007399
 80073dc:	08007521 	.word	0x08007521
 80073e0:	08007449 	.word	0x08007449
 80073e4:	080074db 	.word	0x080074db
 80073e8:	08007399 	.word	0x08007399
 80073ec:	08007399 	.word	0x08007399
 80073f0:	08007543 	.word	0x08007543
 80073f4:	08007399 	.word	0x08007399
 80073f8:	08007449 	.word	0x08007449
 80073fc:	08007399 	.word	0x08007399
 8007400:	08007399 	.word	0x08007399
 8007404:	080074e3 	.word	0x080074e3
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	1d1a      	adds	r2, r3, #4
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	602a      	str	r2, [r5, #0]
 8007410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007418:	2301      	movs	r3, #1
 800741a:	e09f      	b.n	800755c <_printf_i+0x1ec>
 800741c:	6820      	ldr	r0, [r4, #0]
 800741e:	682b      	ldr	r3, [r5, #0]
 8007420:	0607      	lsls	r7, r0, #24
 8007422:	f103 0104 	add.w	r1, r3, #4
 8007426:	6029      	str	r1, [r5, #0]
 8007428:	d501      	bpl.n	800742e <_printf_i+0xbe>
 800742a:	681e      	ldr	r6, [r3, #0]
 800742c:	e003      	b.n	8007436 <_printf_i+0xc6>
 800742e:	0646      	lsls	r6, r0, #25
 8007430:	d5fb      	bpl.n	800742a <_printf_i+0xba>
 8007432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007436:	2e00      	cmp	r6, #0
 8007438:	da03      	bge.n	8007442 <_printf_i+0xd2>
 800743a:	232d      	movs	r3, #45	; 0x2d
 800743c:	4276      	negs	r6, r6
 800743e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007442:	485a      	ldr	r0, [pc, #360]	; (80075ac <_printf_i+0x23c>)
 8007444:	230a      	movs	r3, #10
 8007446:	e012      	b.n	800746e <_printf_i+0xfe>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	6820      	ldr	r0, [r4, #0]
 800744c:	1d19      	adds	r1, r3, #4
 800744e:	6029      	str	r1, [r5, #0]
 8007450:	0605      	lsls	r5, r0, #24
 8007452:	d501      	bpl.n	8007458 <_printf_i+0xe8>
 8007454:	681e      	ldr	r6, [r3, #0]
 8007456:	e002      	b.n	800745e <_printf_i+0xee>
 8007458:	0641      	lsls	r1, r0, #25
 800745a:	d5fb      	bpl.n	8007454 <_printf_i+0xe4>
 800745c:	881e      	ldrh	r6, [r3, #0]
 800745e:	4853      	ldr	r0, [pc, #332]	; (80075ac <_printf_i+0x23c>)
 8007460:	2f6f      	cmp	r7, #111	; 0x6f
 8007462:	bf0c      	ite	eq
 8007464:	2308      	moveq	r3, #8
 8007466:	230a      	movne	r3, #10
 8007468:	2100      	movs	r1, #0
 800746a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800746e:	6865      	ldr	r5, [r4, #4]
 8007470:	60a5      	str	r5, [r4, #8]
 8007472:	2d00      	cmp	r5, #0
 8007474:	bfa2      	ittt	ge
 8007476:	6821      	ldrge	r1, [r4, #0]
 8007478:	f021 0104 	bicge.w	r1, r1, #4
 800747c:	6021      	strge	r1, [r4, #0]
 800747e:	b90e      	cbnz	r6, 8007484 <_printf_i+0x114>
 8007480:	2d00      	cmp	r5, #0
 8007482:	d04b      	beq.n	800751c <_printf_i+0x1ac>
 8007484:	4615      	mov	r5, r2
 8007486:	fbb6 f1f3 	udiv	r1, r6, r3
 800748a:	fb03 6711 	mls	r7, r3, r1, r6
 800748e:	5dc7      	ldrb	r7, [r0, r7]
 8007490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007494:	4637      	mov	r7, r6
 8007496:	42bb      	cmp	r3, r7
 8007498:	460e      	mov	r6, r1
 800749a:	d9f4      	bls.n	8007486 <_printf_i+0x116>
 800749c:	2b08      	cmp	r3, #8
 800749e:	d10b      	bne.n	80074b8 <_printf_i+0x148>
 80074a0:	6823      	ldr	r3, [r4, #0]
 80074a2:	07de      	lsls	r6, r3, #31
 80074a4:	d508      	bpl.n	80074b8 <_printf_i+0x148>
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	6861      	ldr	r1, [r4, #4]
 80074aa:	4299      	cmp	r1, r3
 80074ac:	bfde      	ittt	le
 80074ae:	2330      	movle	r3, #48	; 0x30
 80074b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074b8:	1b52      	subs	r2, r2, r5
 80074ba:	6122      	str	r2, [r4, #16]
 80074bc:	f8cd a000 	str.w	sl, [sp]
 80074c0:	464b      	mov	r3, r9
 80074c2:	aa03      	add	r2, sp, #12
 80074c4:	4621      	mov	r1, r4
 80074c6:	4640      	mov	r0, r8
 80074c8:	f7ff fee4 	bl	8007294 <_printf_common>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d14a      	bne.n	8007566 <_printf_i+0x1f6>
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074d4:	b004      	add	sp, #16
 80074d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	4833      	ldr	r0, [pc, #204]	; (80075b0 <_printf_i+0x240>)
 80074e4:	2778      	movs	r7, #120	; 0x78
 80074e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	6829      	ldr	r1, [r5, #0]
 80074ee:	061f      	lsls	r7, r3, #24
 80074f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074f4:	d402      	bmi.n	80074fc <_printf_i+0x18c>
 80074f6:	065f      	lsls	r7, r3, #25
 80074f8:	bf48      	it	mi
 80074fa:	b2b6      	uxthmi	r6, r6
 80074fc:	07df      	lsls	r7, r3, #31
 80074fe:	bf48      	it	mi
 8007500:	f043 0320 	orrmi.w	r3, r3, #32
 8007504:	6029      	str	r1, [r5, #0]
 8007506:	bf48      	it	mi
 8007508:	6023      	strmi	r3, [r4, #0]
 800750a:	b91e      	cbnz	r6, 8007514 <_printf_i+0x1a4>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	f023 0320 	bic.w	r3, r3, #32
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	2310      	movs	r3, #16
 8007516:	e7a7      	b.n	8007468 <_printf_i+0xf8>
 8007518:	4824      	ldr	r0, [pc, #144]	; (80075ac <_printf_i+0x23c>)
 800751a:	e7e4      	b.n	80074e6 <_printf_i+0x176>
 800751c:	4615      	mov	r5, r2
 800751e:	e7bd      	b.n	800749c <_printf_i+0x12c>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	6826      	ldr	r6, [r4, #0]
 8007524:	6961      	ldr	r1, [r4, #20]
 8007526:	1d18      	adds	r0, r3, #4
 8007528:	6028      	str	r0, [r5, #0]
 800752a:	0635      	lsls	r5, r6, #24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	d501      	bpl.n	8007534 <_printf_i+0x1c4>
 8007530:	6019      	str	r1, [r3, #0]
 8007532:	e002      	b.n	800753a <_printf_i+0x1ca>
 8007534:	0670      	lsls	r0, r6, #25
 8007536:	d5fb      	bpl.n	8007530 <_printf_i+0x1c0>
 8007538:	8019      	strh	r1, [r3, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	4615      	mov	r5, r2
 8007540:	e7bc      	b.n	80074bc <_printf_i+0x14c>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	1d1a      	adds	r2, r3, #4
 8007546:	602a      	str	r2, [r5, #0]
 8007548:	681d      	ldr	r5, [r3, #0]
 800754a:	6862      	ldr	r2, [r4, #4]
 800754c:	2100      	movs	r1, #0
 800754e:	4628      	mov	r0, r5
 8007550:	f7f8 fe5e 	bl	8000210 <memchr>
 8007554:	b108      	cbz	r0, 800755a <_printf_i+0x1ea>
 8007556:	1b40      	subs	r0, r0, r5
 8007558:	6060      	str	r0, [r4, #4]
 800755a:	6863      	ldr	r3, [r4, #4]
 800755c:	6123      	str	r3, [r4, #16]
 800755e:	2300      	movs	r3, #0
 8007560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007564:	e7aa      	b.n	80074bc <_printf_i+0x14c>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	462a      	mov	r2, r5
 800756a:	4649      	mov	r1, r9
 800756c:	4640      	mov	r0, r8
 800756e:	47d0      	blx	sl
 8007570:	3001      	adds	r0, #1
 8007572:	d0ad      	beq.n	80074d0 <_printf_i+0x160>
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	079b      	lsls	r3, r3, #30
 8007578:	d413      	bmi.n	80075a2 <_printf_i+0x232>
 800757a:	68e0      	ldr	r0, [r4, #12]
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	4298      	cmp	r0, r3
 8007580:	bfb8      	it	lt
 8007582:	4618      	movlt	r0, r3
 8007584:	e7a6      	b.n	80074d4 <_printf_i+0x164>
 8007586:	2301      	movs	r3, #1
 8007588:	4632      	mov	r2, r6
 800758a:	4649      	mov	r1, r9
 800758c:	4640      	mov	r0, r8
 800758e:	47d0      	blx	sl
 8007590:	3001      	adds	r0, #1
 8007592:	d09d      	beq.n	80074d0 <_printf_i+0x160>
 8007594:	3501      	adds	r5, #1
 8007596:	68e3      	ldr	r3, [r4, #12]
 8007598:	9903      	ldr	r1, [sp, #12]
 800759a:	1a5b      	subs	r3, r3, r1
 800759c:	42ab      	cmp	r3, r5
 800759e:	dcf2      	bgt.n	8007586 <_printf_i+0x216>
 80075a0:	e7eb      	b.n	800757a <_printf_i+0x20a>
 80075a2:	2500      	movs	r5, #0
 80075a4:	f104 0619 	add.w	r6, r4, #25
 80075a8:	e7f5      	b.n	8007596 <_printf_i+0x226>
 80075aa:	bf00      	nop
 80075ac:	0800d2e6 	.word	0x0800d2e6
 80075b0:	0800d2f7 	.word	0x0800d2f7

080075b4 <_scanf_float>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	b087      	sub	sp, #28
 80075ba:	4617      	mov	r7, r2
 80075bc:	9303      	str	r3, [sp, #12]
 80075be:	688b      	ldr	r3, [r1, #8]
 80075c0:	1e5a      	subs	r2, r3, #1
 80075c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80075c6:	bf83      	ittte	hi
 80075c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80075cc:	195b      	addhi	r3, r3, r5
 80075ce:	9302      	strhi	r3, [sp, #8]
 80075d0:	2300      	movls	r3, #0
 80075d2:	bf86      	itte	hi
 80075d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80075d8:	608b      	strhi	r3, [r1, #8]
 80075da:	9302      	strls	r3, [sp, #8]
 80075dc:	680b      	ldr	r3, [r1, #0]
 80075de:	468b      	mov	fp, r1
 80075e0:	2500      	movs	r5, #0
 80075e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80075e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80075ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80075ee:	4680      	mov	r8, r0
 80075f0:	460c      	mov	r4, r1
 80075f2:	465e      	mov	r6, fp
 80075f4:	46aa      	mov	sl, r5
 80075f6:	46a9      	mov	r9, r5
 80075f8:	9501      	str	r5, [sp, #4]
 80075fa:	68a2      	ldr	r2, [r4, #8]
 80075fc:	b152      	cbz	r2, 8007614 <_scanf_float+0x60>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b4e      	cmp	r3, #78	; 0x4e
 8007604:	d864      	bhi.n	80076d0 <_scanf_float+0x11c>
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d83c      	bhi.n	8007684 <_scanf_float+0xd0>
 800760a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800760e:	b2c8      	uxtb	r0, r1
 8007610:	280e      	cmp	r0, #14
 8007612:	d93a      	bls.n	800768a <_scanf_float+0xd6>
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	d003      	beq.n	8007622 <_scanf_float+0x6e>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007620:	6023      	str	r3, [r4, #0]
 8007622:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007626:	f1ba 0f01 	cmp.w	sl, #1
 800762a:	f200 8113 	bhi.w	8007854 <_scanf_float+0x2a0>
 800762e:	455e      	cmp	r6, fp
 8007630:	f200 8105 	bhi.w	800783e <_scanf_float+0x28a>
 8007634:	2501      	movs	r5, #1
 8007636:	4628      	mov	r0, r5
 8007638:	b007      	add	sp, #28
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007642:	2a0d      	cmp	r2, #13
 8007644:	d8e6      	bhi.n	8007614 <_scanf_float+0x60>
 8007646:	a101      	add	r1, pc, #4	; (adr r1, 800764c <_scanf_float+0x98>)
 8007648:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800764c:	0800778b 	.word	0x0800778b
 8007650:	08007615 	.word	0x08007615
 8007654:	08007615 	.word	0x08007615
 8007658:	08007615 	.word	0x08007615
 800765c:	080077eb 	.word	0x080077eb
 8007660:	080077c3 	.word	0x080077c3
 8007664:	08007615 	.word	0x08007615
 8007668:	08007615 	.word	0x08007615
 800766c:	08007799 	.word	0x08007799
 8007670:	08007615 	.word	0x08007615
 8007674:	08007615 	.word	0x08007615
 8007678:	08007615 	.word	0x08007615
 800767c:	08007615 	.word	0x08007615
 8007680:	08007751 	.word	0x08007751
 8007684:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007688:	e7db      	b.n	8007642 <_scanf_float+0x8e>
 800768a:	290e      	cmp	r1, #14
 800768c:	d8c2      	bhi.n	8007614 <_scanf_float+0x60>
 800768e:	a001      	add	r0, pc, #4	; (adr r0, 8007694 <_scanf_float+0xe0>)
 8007690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007694:	08007743 	.word	0x08007743
 8007698:	08007615 	.word	0x08007615
 800769c:	08007743 	.word	0x08007743
 80076a0:	080077d7 	.word	0x080077d7
 80076a4:	08007615 	.word	0x08007615
 80076a8:	080076f1 	.word	0x080076f1
 80076ac:	0800772d 	.word	0x0800772d
 80076b0:	0800772d 	.word	0x0800772d
 80076b4:	0800772d 	.word	0x0800772d
 80076b8:	0800772d 	.word	0x0800772d
 80076bc:	0800772d 	.word	0x0800772d
 80076c0:	0800772d 	.word	0x0800772d
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	0800772d 	.word	0x0800772d
 80076cc:	0800772d 	.word	0x0800772d
 80076d0:	2b6e      	cmp	r3, #110	; 0x6e
 80076d2:	d809      	bhi.n	80076e8 <_scanf_float+0x134>
 80076d4:	2b60      	cmp	r3, #96	; 0x60
 80076d6:	d8b2      	bhi.n	800763e <_scanf_float+0x8a>
 80076d8:	2b54      	cmp	r3, #84	; 0x54
 80076da:	d077      	beq.n	80077cc <_scanf_float+0x218>
 80076dc:	2b59      	cmp	r3, #89	; 0x59
 80076de:	d199      	bne.n	8007614 <_scanf_float+0x60>
 80076e0:	2d07      	cmp	r5, #7
 80076e2:	d197      	bne.n	8007614 <_scanf_float+0x60>
 80076e4:	2508      	movs	r5, #8
 80076e6:	e029      	b.n	800773c <_scanf_float+0x188>
 80076e8:	2b74      	cmp	r3, #116	; 0x74
 80076ea:	d06f      	beq.n	80077cc <_scanf_float+0x218>
 80076ec:	2b79      	cmp	r3, #121	; 0x79
 80076ee:	e7f6      	b.n	80076de <_scanf_float+0x12a>
 80076f0:	6821      	ldr	r1, [r4, #0]
 80076f2:	05c8      	lsls	r0, r1, #23
 80076f4:	d51a      	bpl.n	800772c <_scanf_float+0x178>
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80076fc:	6021      	str	r1, [r4, #0]
 80076fe:	f109 0901 	add.w	r9, r9, #1
 8007702:	b11b      	cbz	r3, 800770c <_scanf_float+0x158>
 8007704:	3b01      	subs	r3, #1
 8007706:	3201      	adds	r2, #1
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	60a2      	str	r2, [r4, #8]
 800770c:	68a3      	ldr	r3, [r4, #8]
 800770e:	3b01      	subs	r3, #1
 8007710:	60a3      	str	r3, [r4, #8]
 8007712:	6923      	ldr	r3, [r4, #16]
 8007714:	3301      	adds	r3, #1
 8007716:	6123      	str	r3, [r4, #16]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3b01      	subs	r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	607b      	str	r3, [r7, #4]
 8007720:	f340 8084 	ble.w	800782c <_scanf_float+0x278>
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	3301      	adds	r3, #1
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	e766      	b.n	80075fa <_scanf_float+0x46>
 800772c:	eb1a 0f05 	cmn.w	sl, r5
 8007730:	f47f af70 	bne.w	8007614 <_scanf_float+0x60>
 8007734:	6822      	ldr	r2, [r4, #0]
 8007736:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	f806 3b01 	strb.w	r3, [r6], #1
 8007740:	e7e4      	b.n	800770c <_scanf_float+0x158>
 8007742:	6822      	ldr	r2, [r4, #0]
 8007744:	0610      	lsls	r0, r2, #24
 8007746:	f57f af65 	bpl.w	8007614 <_scanf_float+0x60>
 800774a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800774e:	e7f4      	b.n	800773a <_scanf_float+0x186>
 8007750:	f1ba 0f00 	cmp.w	sl, #0
 8007754:	d10e      	bne.n	8007774 <_scanf_float+0x1c0>
 8007756:	f1b9 0f00 	cmp.w	r9, #0
 800775a:	d10e      	bne.n	800777a <_scanf_float+0x1c6>
 800775c:	6822      	ldr	r2, [r4, #0]
 800775e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007762:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007766:	d108      	bne.n	800777a <_scanf_float+0x1c6>
 8007768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	f04f 0a01 	mov.w	sl, #1
 8007772:	e7e3      	b.n	800773c <_scanf_float+0x188>
 8007774:	f1ba 0f02 	cmp.w	sl, #2
 8007778:	d055      	beq.n	8007826 <_scanf_float+0x272>
 800777a:	2d01      	cmp	r5, #1
 800777c:	d002      	beq.n	8007784 <_scanf_float+0x1d0>
 800777e:	2d04      	cmp	r5, #4
 8007780:	f47f af48 	bne.w	8007614 <_scanf_float+0x60>
 8007784:	3501      	adds	r5, #1
 8007786:	b2ed      	uxtb	r5, r5
 8007788:	e7d8      	b.n	800773c <_scanf_float+0x188>
 800778a:	f1ba 0f01 	cmp.w	sl, #1
 800778e:	f47f af41 	bne.w	8007614 <_scanf_float+0x60>
 8007792:	f04f 0a02 	mov.w	sl, #2
 8007796:	e7d1      	b.n	800773c <_scanf_float+0x188>
 8007798:	b97d      	cbnz	r5, 80077ba <_scanf_float+0x206>
 800779a:	f1b9 0f00 	cmp.w	r9, #0
 800779e:	f47f af3c 	bne.w	800761a <_scanf_float+0x66>
 80077a2:	6822      	ldr	r2, [r4, #0]
 80077a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80077a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80077ac:	f47f af39 	bne.w	8007622 <_scanf_float+0x6e>
 80077b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80077b4:	6022      	str	r2, [r4, #0]
 80077b6:	2501      	movs	r5, #1
 80077b8:	e7c0      	b.n	800773c <_scanf_float+0x188>
 80077ba:	2d03      	cmp	r5, #3
 80077bc:	d0e2      	beq.n	8007784 <_scanf_float+0x1d0>
 80077be:	2d05      	cmp	r5, #5
 80077c0:	e7de      	b.n	8007780 <_scanf_float+0x1cc>
 80077c2:	2d02      	cmp	r5, #2
 80077c4:	f47f af26 	bne.w	8007614 <_scanf_float+0x60>
 80077c8:	2503      	movs	r5, #3
 80077ca:	e7b7      	b.n	800773c <_scanf_float+0x188>
 80077cc:	2d06      	cmp	r5, #6
 80077ce:	f47f af21 	bne.w	8007614 <_scanf_float+0x60>
 80077d2:	2507      	movs	r5, #7
 80077d4:	e7b2      	b.n	800773c <_scanf_float+0x188>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	0591      	lsls	r1, r2, #22
 80077da:	f57f af1b 	bpl.w	8007614 <_scanf_float+0x60>
 80077de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80077e2:	6022      	str	r2, [r4, #0]
 80077e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80077e8:	e7a8      	b.n	800773c <_scanf_float+0x188>
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80077f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80077f4:	d006      	beq.n	8007804 <_scanf_float+0x250>
 80077f6:	0550      	lsls	r0, r2, #21
 80077f8:	f57f af0c 	bpl.w	8007614 <_scanf_float+0x60>
 80077fc:	f1b9 0f00 	cmp.w	r9, #0
 8007800:	f43f af0f 	beq.w	8007622 <_scanf_float+0x6e>
 8007804:	0591      	lsls	r1, r2, #22
 8007806:	bf58      	it	pl
 8007808:	9901      	ldrpl	r1, [sp, #4]
 800780a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800780e:	bf58      	it	pl
 8007810:	eba9 0101 	subpl.w	r1, r9, r1
 8007814:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007818:	bf58      	it	pl
 800781a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800781e:	6022      	str	r2, [r4, #0]
 8007820:	f04f 0900 	mov.w	r9, #0
 8007824:	e78a      	b.n	800773c <_scanf_float+0x188>
 8007826:	f04f 0a03 	mov.w	sl, #3
 800782a:	e787      	b.n	800773c <_scanf_float+0x188>
 800782c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007830:	4639      	mov	r1, r7
 8007832:	4640      	mov	r0, r8
 8007834:	4798      	blx	r3
 8007836:	2800      	cmp	r0, #0
 8007838:	f43f aedf 	beq.w	80075fa <_scanf_float+0x46>
 800783c:	e6ea      	b.n	8007614 <_scanf_float+0x60>
 800783e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007846:	463a      	mov	r2, r7
 8007848:	4640      	mov	r0, r8
 800784a:	4798      	blx	r3
 800784c:	6923      	ldr	r3, [r4, #16]
 800784e:	3b01      	subs	r3, #1
 8007850:	6123      	str	r3, [r4, #16]
 8007852:	e6ec      	b.n	800762e <_scanf_float+0x7a>
 8007854:	1e6b      	subs	r3, r5, #1
 8007856:	2b06      	cmp	r3, #6
 8007858:	d825      	bhi.n	80078a6 <_scanf_float+0x2f2>
 800785a:	2d02      	cmp	r5, #2
 800785c:	d836      	bhi.n	80078cc <_scanf_float+0x318>
 800785e:	455e      	cmp	r6, fp
 8007860:	f67f aee8 	bls.w	8007634 <_scanf_float+0x80>
 8007864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007868:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800786c:	463a      	mov	r2, r7
 800786e:	4640      	mov	r0, r8
 8007870:	4798      	blx	r3
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	3b01      	subs	r3, #1
 8007876:	6123      	str	r3, [r4, #16]
 8007878:	e7f1      	b.n	800785e <_scanf_float+0x2aa>
 800787a:	9802      	ldr	r0, [sp, #8]
 800787c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007880:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007884:	9002      	str	r0, [sp, #8]
 8007886:	463a      	mov	r2, r7
 8007888:	4640      	mov	r0, r8
 800788a:	4798      	blx	r3
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	3b01      	subs	r3, #1
 8007890:	6123      	str	r3, [r4, #16]
 8007892:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007896:	fa5f fa8a 	uxtb.w	sl, sl
 800789a:	f1ba 0f02 	cmp.w	sl, #2
 800789e:	d1ec      	bne.n	800787a <_scanf_float+0x2c6>
 80078a0:	3d03      	subs	r5, #3
 80078a2:	b2ed      	uxtb	r5, r5
 80078a4:	1b76      	subs	r6, r6, r5
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	05da      	lsls	r2, r3, #23
 80078aa:	d52f      	bpl.n	800790c <_scanf_float+0x358>
 80078ac:	055b      	lsls	r3, r3, #21
 80078ae:	d510      	bpl.n	80078d2 <_scanf_float+0x31e>
 80078b0:	455e      	cmp	r6, fp
 80078b2:	f67f aebf 	bls.w	8007634 <_scanf_float+0x80>
 80078b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80078be:	463a      	mov	r2, r7
 80078c0:	4640      	mov	r0, r8
 80078c2:	4798      	blx	r3
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	3b01      	subs	r3, #1
 80078c8:	6123      	str	r3, [r4, #16]
 80078ca:	e7f1      	b.n	80078b0 <_scanf_float+0x2fc>
 80078cc:	46aa      	mov	sl, r5
 80078ce:	9602      	str	r6, [sp, #8]
 80078d0:	e7df      	b.n	8007892 <_scanf_float+0x2de>
 80078d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	2965      	cmp	r1, #101	; 0x65
 80078da:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80078de:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	d00c      	beq.n	8007900 <_scanf_float+0x34c>
 80078e6:	2945      	cmp	r1, #69	; 0x45
 80078e8:	d00a      	beq.n	8007900 <_scanf_float+0x34c>
 80078ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80078ee:	463a      	mov	r2, r7
 80078f0:	4640      	mov	r0, r8
 80078f2:	4798      	blx	r3
 80078f4:	6923      	ldr	r3, [r4, #16]
 80078f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	1eb5      	subs	r5, r6, #2
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007904:	463a      	mov	r2, r7
 8007906:	4640      	mov	r0, r8
 8007908:	4798      	blx	r3
 800790a:	462e      	mov	r6, r5
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	f015 0510 	ands.w	r5, r5, #16
 8007912:	d158      	bne.n	80079c6 <_scanf_float+0x412>
 8007914:	7035      	strb	r5, [r6, #0]
 8007916:	6823      	ldr	r3, [r4, #0]
 8007918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800791c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007920:	d11c      	bne.n	800795c <_scanf_float+0x3a8>
 8007922:	9b01      	ldr	r3, [sp, #4]
 8007924:	454b      	cmp	r3, r9
 8007926:	eba3 0209 	sub.w	r2, r3, r9
 800792a:	d124      	bne.n	8007976 <_scanf_float+0x3c2>
 800792c:	2200      	movs	r2, #0
 800792e:	4659      	mov	r1, fp
 8007930:	4640      	mov	r0, r8
 8007932:	f000 ff21 	bl	8008778 <_strtod_r>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	6821      	ldr	r1, [r4, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f011 0f02 	tst.w	r1, #2
 8007940:	ec57 6b10 	vmov	r6, r7, d0
 8007944:	f103 0204 	add.w	r2, r3, #4
 8007948:	d020      	beq.n	800798c <_scanf_float+0x3d8>
 800794a:	9903      	ldr	r1, [sp, #12]
 800794c:	600a      	str	r2, [r1, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	e9c3 6700 	strd	r6, r7, [r3]
 8007954:	68e3      	ldr	r3, [r4, #12]
 8007956:	3301      	adds	r3, #1
 8007958:	60e3      	str	r3, [r4, #12]
 800795a:	e66c      	b.n	8007636 <_scanf_float+0x82>
 800795c:	9b04      	ldr	r3, [sp, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0e4      	beq.n	800792c <_scanf_float+0x378>
 8007962:	9905      	ldr	r1, [sp, #20]
 8007964:	230a      	movs	r3, #10
 8007966:	462a      	mov	r2, r5
 8007968:	3101      	adds	r1, #1
 800796a:	4640      	mov	r0, r8
 800796c:	f000 ff98 	bl	80088a0 <_strtol_r>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	9e05      	ldr	r6, [sp, #20]
 8007974:	1ac2      	subs	r2, r0, r3
 8007976:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800797a:	429e      	cmp	r6, r3
 800797c:	bf28      	it	cs
 800797e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007982:	4912      	ldr	r1, [pc, #72]	; (80079cc <_scanf_float+0x418>)
 8007984:	4630      	mov	r0, r6
 8007986:	f000 f825 	bl	80079d4 <siprintf>
 800798a:	e7cf      	b.n	800792c <_scanf_float+0x378>
 800798c:	f011 0f04 	tst.w	r1, #4
 8007990:	9903      	ldr	r1, [sp, #12]
 8007992:	600a      	str	r2, [r1, #0]
 8007994:	d1db      	bne.n	800794e <_scanf_float+0x39a>
 8007996:	f8d3 8000 	ldr.w	r8, [r3]
 800799a:	ee10 2a10 	vmov	r2, s0
 800799e:	ee10 0a10 	vmov	r0, s0
 80079a2:	463b      	mov	r3, r7
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f9 f8e1 	bl	8000b6c <__aeabi_dcmpun>
 80079aa:	b128      	cbz	r0, 80079b8 <_scanf_float+0x404>
 80079ac:	4808      	ldr	r0, [pc, #32]	; (80079d0 <_scanf_float+0x41c>)
 80079ae:	f001 f88f 	bl	8008ad0 <nanf>
 80079b2:	ed88 0a00 	vstr	s0, [r8]
 80079b6:	e7cd      	b.n	8007954 <_scanf_float+0x3a0>
 80079b8:	4630      	mov	r0, r6
 80079ba:	4639      	mov	r1, r7
 80079bc:	f7f9 f934 	bl	8000c28 <__aeabi_d2f>
 80079c0:	f8c8 0000 	str.w	r0, [r8]
 80079c4:	e7c6      	b.n	8007954 <_scanf_float+0x3a0>
 80079c6:	2500      	movs	r5, #0
 80079c8:	e635      	b.n	8007636 <_scanf_float+0x82>
 80079ca:	bf00      	nop
 80079cc:	0800d308 	.word	0x0800d308
 80079d0:	0800d6f7 	.word	0x0800d6f7

080079d4 <siprintf>:
 80079d4:	b40e      	push	{r1, r2, r3}
 80079d6:	b500      	push	{lr}
 80079d8:	b09c      	sub	sp, #112	; 0x70
 80079da:	ab1d      	add	r3, sp, #116	; 0x74
 80079dc:	9002      	str	r0, [sp, #8]
 80079de:	9006      	str	r0, [sp, #24]
 80079e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079e4:	4809      	ldr	r0, [pc, #36]	; (8007a0c <siprintf+0x38>)
 80079e6:	9107      	str	r1, [sp, #28]
 80079e8:	9104      	str	r1, [sp, #16]
 80079ea:	4909      	ldr	r1, [pc, #36]	; (8007a10 <siprintf+0x3c>)
 80079ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f0:	9105      	str	r1, [sp, #20]
 80079f2:	6800      	ldr	r0, [r0, #0]
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	a902      	add	r1, sp, #8
 80079f8:	f002 fa9e 	bl	8009f38 <_svfiprintf_r>
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	b01c      	add	sp, #112	; 0x70
 8007a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a08:	b003      	add	sp, #12
 8007a0a:	4770      	bx	lr
 8007a0c:	200001fc 	.word	0x200001fc
 8007a10:	ffff0208 	.word	0xffff0208

08007a14 <std>:
 8007a14:	2300      	movs	r3, #0
 8007a16:	b510      	push	{r4, lr}
 8007a18:	4604      	mov	r4, r0
 8007a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a22:	6083      	str	r3, [r0, #8]
 8007a24:	8181      	strh	r1, [r0, #12]
 8007a26:	6643      	str	r3, [r0, #100]	; 0x64
 8007a28:	81c2      	strh	r2, [r0, #14]
 8007a2a:	6183      	str	r3, [r0, #24]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	2208      	movs	r2, #8
 8007a30:	305c      	adds	r0, #92	; 0x5c
 8007a32:	f000 fffd 	bl	8008a30 <memset>
 8007a36:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <std+0x58>)
 8007a38:	6263      	str	r3, [r4, #36]	; 0x24
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	; (8007a70 <std+0x5c>)
 8007a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	; (8007a74 <std+0x60>)
 8007a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a42:	4b0d      	ldr	r3, [pc, #52]	; (8007a78 <std+0x64>)
 8007a44:	6323      	str	r3, [r4, #48]	; 0x30
 8007a46:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <std+0x68>)
 8007a48:	6224      	str	r4, [r4, #32]
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	d006      	beq.n	8007a5c <std+0x48>
 8007a4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007a52:	4294      	cmp	r4, r2
 8007a54:	d002      	beq.n	8007a5c <std+0x48>
 8007a56:	33d0      	adds	r3, #208	; 0xd0
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	d105      	bne.n	8007a68 <std+0x54>
 8007a5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a64:	f001 b81a 	b.w	8008a9c <__retarget_lock_init_recursive>
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	bf00      	nop
 8007a6c:	0800ad77 	.word	0x0800ad77
 8007a70:	0800ad99 	.word	0x0800ad99
 8007a74:	0800add1 	.word	0x0800add1
 8007a78:	0800adf5 	.word	0x0800adf5
 8007a7c:	2000a960 	.word	0x2000a960

08007a80 <stdio_exit_handler>:
 8007a80:	4a02      	ldr	r2, [pc, #8]	; (8007a8c <stdio_exit_handler+0xc>)
 8007a82:	4903      	ldr	r1, [pc, #12]	; (8007a90 <stdio_exit_handler+0x10>)
 8007a84:	4803      	ldr	r0, [pc, #12]	; (8007a94 <stdio_exit_handler+0x14>)
 8007a86:	f000 bf0d 	b.w	80088a4 <_fwalk_sglue>
 8007a8a:	bf00      	nop
 8007a8c:	20000038 	.word	0x20000038
 8007a90:	0800a3b5 	.word	0x0800a3b5
 8007a94:	200001b0 	.word	0x200001b0

08007a98 <cleanup_stdio>:
 8007a98:	6841      	ldr	r1, [r0, #4]
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <cleanup_stdio+0x34>)
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	d001      	beq.n	8007aa8 <cleanup_stdio+0x10>
 8007aa4:	f002 fc86 	bl	800a3b4 <_fflush_r>
 8007aa8:	68a1      	ldr	r1, [r4, #8]
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <cleanup_stdio+0x38>)
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <cleanup_stdio+0x1e>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f002 fc7f 	bl	800a3b4 <_fflush_r>
 8007ab6:	68e1      	ldr	r1, [r4, #12]
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <cleanup_stdio+0x3c>)
 8007aba:	4299      	cmp	r1, r3
 8007abc:	d004      	beq.n	8007ac8 <cleanup_stdio+0x30>
 8007abe:	4620      	mov	r0, r4
 8007ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac4:	f002 bc76 	b.w	800a3b4 <_fflush_r>
 8007ac8:	bd10      	pop	{r4, pc}
 8007aca:	bf00      	nop
 8007acc:	2000a960 	.word	0x2000a960
 8007ad0:	2000a9c8 	.word	0x2000a9c8
 8007ad4:	2000aa30 	.word	0x2000aa30

08007ad8 <global_stdio_init.part.0>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <global_stdio_init.part.0+0x30>)
 8007adc:	4c0b      	ldr	r4, [pc, #44]	; (8007b0c <global_stdio_init.part.0+0x34>)
 8007ade:	4a0c      	ldr	r2, [pc, #48]	; (8007b10 <global_stdio_init.part.0+0x38>)
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2104      	movs	r1, #4
 8007ae8:	f7ff ff94 	bl	8007a14 <std>
 8007aec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007af0:	2201      	movs	r2, #1
 8007af2:	2109      	movs	r1, #9
 8007af4:	f7ff ff8e 	bl	8007a14 <std>
 8007af8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007afc:	2202      	movs	r2, #2
 8007afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b02:	2112      	movs	r1, #18
 8007b04:	f7ff bf86 	b.w	8007a14 <std>
 8007b08:	2000aa98 	.word	0x2000aa98
 8007b0c:	2000a960 	.word	0x2000a960
 8007b10:	08007a81 	.word	0x08007a81

08007b14 <__sfp_lock_acquire>:
 8007b14:	4801      	ldr	r0, [pc, #4]	; (8007b1c <__sfp_lock_acquire+0x8>)
 8007b16:	f000 bfc2 	b.w	8008a9e <__retarget_lock_acquire_recursive>
 8007b1a:	bf00      	nop
 8007b1c:	2000aa9d 	.word	0x2000aa9d

08007b20 <__sfp_lock_release>:
 8007b20:	4801      	ldr	r0, [pc, #4]	; (8007b28 <__sfp_lock_release+0x8>)
 8007b22:	f000 bfbd 	b.w	8008aa0 <__retarget_lock_release_recursive>
 8007b26:	bf00      	nop
 8007b28:	2000aa9d 	.word	0x2000aa9d

08007b2c <__sinit>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	4604      	mov	r4, r0
 8007b30:	f7ff fff0 	bl	8007b14 <__sfp_lock_acquire>
 8007b34:	6a23      	ldr	r3, [r4, #32]
 8007b36:	b11b      	cbz	r3, 8007b40 <__sinit+0x14>
 8007b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b3c:	f7ff bff0 	b.w	8007b20 <__sfp_lock_release>
 8007b40:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <__sinit+0x28>)
 8007b42:	6223      	str	r3, [r4, #32]
 8007b44:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <__sinit+0x2c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1f5      	bne.n	8007b38 <__sinit+0xc>
 8007b4c:	f7ff ffc4 	bl	8007ad8 <global_stdio_init.part.0>
 8007b50:	e7f2      	b.n	8007b38 <__sinit+0xc>
 8007b52:	bf00      	nop
 8007b54:	08007a99 	.word	0x08007a99
 8007b58:	2000aa98 	.word	0x2000aa98

08007b5c <sulp>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4604      	mov	r4, r0
 8007b60:	460d      	mov	r5, r1
 8007b62:	ec45 4b10 	vmov	d0, r4, r5
 8007b66:	4616      	mov	r6, r2
 8007b68:	f002 ffc4 	bl	800aaf4 <__ulp>
 8007b6c:	ec51 0b10 	vmov	r0, r1, d0
 8007b70:	b17e      	cbz	r6, 8007b92 <sulp+0x36>
 8007b72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dd09      	ble.n	8007b92 <sulp+0x36>
 8007b7e:	051b      	lsls	r3, r3, #20
 8007b80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b84:	2400      	movs	r4, #0
 8007b86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	f7f8 fd53 	bl	8000638 <__aeabi_dmul>
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	0000      	movs	r0, r0
	...

08007b98 <_strtod_l>:
 8007b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	ed2d 8b02 	vpush	{d8}
 8007ba0:	b09b      	sub	sp, #108	; 0x6c
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	9216      	str	r2, [sp, #88]	; 0x58
 8007baa:	460d      	mov	r5, r1
 8007bac:	f04f 0800 	mov.w	r8, #0
 8007bb0:	f04f 0900 	mov.w	r9, #0
 8007bb4:	460a      	mov	r2, r1
 8007bb6:	9215      	str	r2, [sp, #84]	; 0x54
 8007bb8:	7811      	ldrb	r1, [r2, #0]
 8007bba:	292b      	cmp	r1, #43	; 0x2b
 8007bbc:	d04c      	beq.n	8007c58 <_strtod_l+0xc0>
 8007bbe:	d83a      	bhi.n	8007c36 <_strtod_l+0x9e>
 8007bc0:	290d      	cmp	r1, #13
 8007bc2:	d834      	bhi.n	8007c2e <_strtod_l+0x96>
 8007bc4:	2908      	cmp	r1, #8
 8007bc6:	d834      	bhi.n	8007c32 <_strtod_l+0x9a>
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	d03d      	beq.n	8007c48 <_strtod_l+0xb0>
 8007bcc:	2200      	movs	r2, #0
 8007bce:	920a      	str	r2, [sp, #40]	; 0x28
 8007bd0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007bd2:	7832      	ldrb	r2, [r6, #0]
 8007bd4:	2a30      	cmp	r2, #48	; 0x30
 8007bd6:	f040 80b4 	bne.w	8007d42 <_strtod_l+0x1aa>
 8007bda:	7872      	ldrb	r2, [r6, #1]
 8007bdc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007be0:	2a58      	cmp	r2, #88	; 0x58
 8007be2:	d170      	bne.n	8007cc6 <_strtod_l+0x12e>
 8007be4:	9302      	str	r3, [sp, #8]
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	ab16      	add	r3, sp, #88	; 0x58
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	4a8e      	ldr	r2, [pc, #568]	; (8007e28 <_strtod_l+0x290>)
 8007bf0:	ab17      	add	r3, sp, #92	; 0x5c
 8007bf2:	a915      	add	r1, sp, #84	; 0x54
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f001 fe55 	bl	80098a4 <__gethex>
 8007bfa:	f010 070f 	ands.w	r7, r0, #15
 8007bfe:	4605      	mov	r5, r0
 8007c00:	d005      	beq.n	8007c0e <_strtod_l+0x76>
 8007c02:	2f06      	cmp	r7, #6
 8007c04:	d12a      	bne.n	8007c5c <_strtod_l+0xc4>
 8007c06:	3601      	adds	r6, #1
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9615      	str	r6, [sp, #84]	; 0x54
 8007c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f040 857f 	bne.w	8008714 <_strtod_l+0xb7c>
 8007c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c18:	b1db      	cbz	r3, 8007c52 <_strtod_l+0xba>
 8007c1a:	4642      	mov	r2, r8
 8007c1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c20:	ec43 2b10 	vmov	d0, r2, r3
 8007c24:	b01b      	add	sp, #108	; 0x6c
 8007c26:	ecbd 8b02 	vpop	{d8}
 8007c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c2e:	2920      	cmp	r1, #32
 8007c30:	d1cc      	bne.n	8007bcc <_strtod_l+0x34>
 8007c32:	3201      	adds	r2, #1
 8007c34:	e7bf      	b.n	8007bb6 <_strtod_l+0x1e>
 8007c36:	292d      	cmp	r1, #45	; 0x2d
 8007c38:	d1c8      	bne.n	8007bcc <_strtod_l+0x34>
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	910a      	str	r1, [sp, #40]	; 0x28
 8007c3e:	1c51      	adds	r1, r2, #1
 8007c40:	9115      	str	r1, [sp, #84]	; 0x54
 8007c42:	7852      	ldrb	r2, [r2, #1]
 8007c44:	2a00      	cmp	r2, #0
 8007c46:	d1c3      	bne.n	8007bd0 <_strtod_l+0x38>
 8007c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c4a:	9515      	str	r5, [sp, #84]	; 0x54
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 855f 	bne.w	8008710 <_strtod_l+0xb78>
 8007c52:	4642      	mov	r2, r8
 8007c54:	464b      	mov	r3, r9
 8007c56:	e7e3      	b.n	8007c20 <_strtod_l+0x88>
 8007c58:	2100      	movs	r1, #0
 8007c5a:	e7ef      	b.n	8007c3c <_strtod_l+0xa4>
 8007c5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c5e:	b13a      	cbz	r2, 8007c70 <_strtod_l+0xd8>
 8007c60:	2135      	movs	r1, #53	; 0x35
 8007c62:	a818      	add	r0, sp, #96	; 0x60
 8007c64:	f003 f843 	bl	800acee <__copybits>
 8007c68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f002 fc16 	bl	800a49c <_Bfree>
 8007c70:	3f01      	subs	r7, #1
 8007c72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c74:	2f04      	cmp	r7, #4
 8007c76:	d806      	bhi.n	8007c86 <_strtod_l+0xee>
 8007c78:	e8df f007 	tbb	[pc, r7]
 8007c7c:	201d0314 	.word	0x201d0314
 8007c80:	14          	.byte	0x14
 8007c81:	00          	.byte	0x00
 8007c82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007c86:	05e9      	lsls	r1, r5, #23
 8007c88:	bf48      	it	mi
 8007c8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007c8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c92:	0d1b      	lsrs	r3, r3, #20
 8007c94:	051b      	lsls	r3, r3, #20
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1b9      	bne.n	8007c0e <_strtod_l+0x76>
 8007c9a:	f000 fed5 	bl	8008a48 <__errno>
 8007c9e:	2322      	movs	r3, #34	; 0x22
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	e7b4      	b.n	8007c0e <_strtod_l+0x76>
 8007ca4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007ca8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007cac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007cb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007cb4:	e7e7      	b.n	8007c86 <_strtod_l+0xee>
 8007cb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007e30 <_strtod_l+0x298>
 8007cba:	e7e4      	b.n	8007c86 <_strtod_l+0xee>
 8007cbc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007cc0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8007cc4:	e7df      	b.n	8007c86 <_strtod_l+0xee>
 8007cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	9215      	str	r2, [sp, #84]	; 0x54
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	2b30      	cmp	r3, #48	; 0x30
 8007cd0:	d0f9      	beq.n	8007cc6 <_strtod_l+0x12e>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d09b      	beq.n	8007c0e <_strtod_l+0x76>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	f04f 0a00 	mov.w	sl, #0
 8007cdc:	9304      	str	r3, [sp, #16]
 8007cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ce0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ce2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007ce6:	46d3      	mov	fp, sl
 8007ce8:	220a      	movs	r2, #10
 8007cea:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007cec:	7806      	ldrb	r6, [r0, #0]
 8007cee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007cf2:	b2d9      	uxtb	r1, r3
 8007cf4:	2909      	cmp	r1, #9
 8007cf6:	d926      	bls.n	8007d46 <_strtod_l+0x1ae>
 8007cf8:	494c      	ldr	r1, [pc, #304]	; (8007e2c <_strtod_l+0x294>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f000 fe86 	bl	8008a0c <strncmp>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d030      	beq.n	8007d66 <_strtod_l+0x1ce>
 8007d04:	2000      	movs	r0, #0
 8007d06:	4632      	mov	r2, r6
 8007d08:	9005      	str	r0, [sp, #20]
 8007d0a:	465e      	mov	r6, fp
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2a65      	cmp	r2, #101	; 0x65
 8007d10:	d001      	beq.n	8007d16 <_strtod_l+0x17e>
 8007d12:	2a45      	cmp	r2, #69	; 0x45
 8007d14:	d113      	bne.n	8007d3e <_strtod_l+0x1a6>
 8007d16:	b91e      	cbnz	r6, 8007d20 <_strtod_l+0x188>
 8007d18:	9a04      	ldr	r2, [sp, #16]
 8007d1a:	4302      	orrs	r2, r0
 8007d1c:	d094      	beq.n	8007c48 <_strtod_l+0xb0>
 8007d1e:	2600      	movs	r6, #0
 8007d20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007d22:	1c6a      	adds	r2, r5, #1
 8007d24:	9215      	str	r2, [sp, #84]	; 0x54
 8007d26:	786a      	ldrb	r2, [r5, #1]
 8007d28:	2a2b      	cmp	r2, #43	; 0x2b
 8007d2a:	d074      	beq.n	8007e16 <_strtod_l+0x27e>
 8007d2c:	2a2d      	cmp	r2, #45	; 0x2d
 8007d2e:	d078      	beq.n	8007e22 <_strtod_l+0x28a>
 8007d30:	f04f 0c00 	mov.w	ip, #0
 8007d34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007d38:	2909      	cmp	r1, #9
 8007d3a:	d97f      	bls.n	8007e3c <_strtod_l+0x2a4>
 8007d3c:	9515      	str	r5, [sp, #84]	; 0x54
 8007d3e:	2700      	movs	r7, #0
 8007d40:	e09e      	b.n	8007e80 <_strtod_l+0x2e8>
 8007d42:	2300      	movs	r3, #0
 8007d44:	e7c8      	b.n	8007cd8 <_strtod_l+0x140>
 8007d46:	f1bb 0f08 	cmp.w	fp, #8
 8007d4a:	bfd8      	it	le
 8007d4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007d4e:	f100 0001 	add.w	r0, r0, #1
 8007d52:	bfda      	itte	le
 8007d54:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d58:	9309      	strle	r3, [sp, #36]	; 0x24
 8007d5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007d5e:	f10b 0b01 	add.w	fp, fp, #1
 8007d62:	9015      	str	r0, [sp, #84]	; 0x54
 8007d64:	e7c1      	b.n	8007cea <_strtod_l+0x152>
 8007d66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	9215      	str	r2, [sp, #84]	; 0x54
 8007d6c:	785a      	ldrb	r2, [r3, #1]
 8007d6e:	f1bb 0f00 	cmp.w	fp, #0
 8007d72:	d037      	beq.n	8007de4 <_strtod_l+0x24c>
 8007d74:	9005      	str	r0, [sp, #20]
 8007d76:	465e      	mov	r6, fp
 8007d78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d912      	bls.n	8007da6 <_strtod_l+0x20e>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e7c4      	b.n	8007d0e <_strtod_l+0x176>
 8007d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	9215      	str	r2, [sp, #84]	; 0x54
 8007d8a:	785a      	ldrb	r2, [r3, #1]
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	2a30      	cmp	r2, #48	; 0x30
 8007d90:	d0f8      	beq.n	8007d84 <_strtod_l+0x1ec>
 8007d92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	f200 84c1 	bhi.w	800871e <_strtod_l+0xb86>
 8007d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d9e:	9005      	str	r0, [sp, #20]
 8007da0:	2000      	movs	r0, #0
 8007da2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007da4:	4606      	mov	r6, r0
 8007da6:	3a30      	subs	r2, #48	; 0x30
 8007da8:	f100 0301 	add.w	r3, r0, #1
 8007dac:	d014      	beq.n	8007dd8 <_strtod_l+0x240>
 8007dae:	9905      	ldr	r1, [sp, #20]
 8007db0:	4419      	add	r1, r3
 8007db2:	9105      	str	r1, [sp, #20]
 8007db4:	4633      	mov	r3, r6
 8007db6:	eb00 0c06 	add.w	ip, r0, r6
 8007dba:	210a      	movs	r1, #10
 8007dbc:	4563      	cmp	r3, ip
 8007dbe:	d113      	bne.n	8007de8 <_strtod_l+0x250>
 8007dc0:	1833      	adds	r3, r6, r0
 8007dc2:	2b08      	cmp	r3, #8
 8007dc4:	f106 0601 	add.w	r6, r6, #1
 8007dc8:	4406      	add	r6, r0
 8007dca:	dc1a      	bgt.n	8007e02 <_strtod_l+0x26a>
 8007dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dce:	230a      	movs	r3, #10
 8007dd0:	fb03 2301 	mla	r3, r3, r1, r2
 8007dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007dda:	1c51      	adds	r1, r2, #1
 8007ddc:	9115      	str	r1, [sp, #84]	; 0x54
 8007dde:	7852      	ldrb	r2, [r2, #1]
 8007de0:	4618      	mov	r0, r3
 8007de2:	e7c9      	b.n	8007d78 <_strtod_l+0x1e0>
 8007de4:	4658      	mov	r0, fp
 8007de6:	e7d2      	b.n	8007d8e <_strtod_l+0x1f6>
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	f103 0301 	add.w	r3, r3, #1
 8007dee:	dc03      	bgt.n	8007df8 <_strtod_l+0x260>
 8007df0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007df2:	434f      	muls	r7, r1
 8007df4:	9709      	str	r7, [sp, #36]	; 0x24
 8007df6:	e7e1      	b.n	8007dbc <_strtod_l+0x224>
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	bfd8      	it	le
 8007dfc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007e00:	e7dc      	b.n	8007dbc <_strtod_l+0x224>
 8007e02:	2e10      	cmp	r6, #16
 8007e04:	bfdc      	itt	le
 8007e06:	230a      	movle	r3, #10
 8007e08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007e0c:	e7e3      	b.n	8007dd6 <_strtod_l+0x23e>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9305      	str	r3, [sp, #20]
 8007e12:	2301      	movs	r3, #1
 8007e14:	e780      	b.n	8007d18 <_strtod_l+0x180>
 8007e16:	f04f 0c00 	mov.w	ip, #0
 8007e1a:	1caa      	adds	r2, r5, #2
 8007e1c:	9215      	str	r2, [sp, #84]	; 0x54
 8007e1e:	78aa      	ldrb	r2, [r5, #2]
 8007e20:	e788      	b.n	8007d34 <_strtod_l+0x19c>
 8007e22:	f04f 0c01 	mov.w	ip, #1
 8007e26:	e7f8      	b.n	8007e1a <_strtod_l+0x282>
 8007e28:	0800d310 	.word	0x0800d310
 8007e2c:	0800d30d 	.word	0x0800d30d
 8007e30:	7ff00000 	.word	0x7ff00000
 8007e34:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e36:	1c51      	adds	r1, r2, #1
 8007e38:	9115      	str	r1, [sp, #84]	; 0x54
 8007e3a:	7852      	ldrb	r2, [r2, #1]
 8007e3c:	2a30      	cmp	r2, #48	; 0x30
 8007e3e:	d0f9      	beq.n	8007e34 <_strtod_l+0x29c>
 8007e40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007e44:	2908      	cmp	r1, #8
 8007e46:	f63f af7a 	bhi.w	8007d3e <_strtod_l+0x1a6>
 8007e4a:	3a30      	subs	r2, #48	; 0x30
 8007e4c:	9208      	str	r2, [sp, #32]
 8007e4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e50:	920c      	str	r2, [sp, #48]	; 0x30
 8007e52:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e54:	1c57      	adds	r7, r2, #1
 8007e56:	9715      	str	r7, [sp, #84]	; 0x54
 8007e58:	7852      	ldrb	r2, [r2, #1]
 8007e5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007e5e:	f1be 0f09 	cmp.w	lr, #9
 8007e62:	d938      	bls.n	8007ed6 <_strtod_l+0x33e>
 8007e64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007e66:	1a7f      	subs	r7, r7, r1
 8007e68:	2f08      	cmp	r7, #8
 8007e6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007e6e:	dc03      	bgt.n	8007e78 <_strtod_l+0x2e0>
 8007e70:	9908      	ldr	r1, [sp, #32]
 8007e72:	428f      	cmp	r7, r1
 8007e74:	bfa8      	it	ge
 8007e76:	460f      	movge	r7, r1
 8007e78:	f1bc 0f00 	cmp.w	ip, #0
 8007e7c:	d000      	beq.n	8007e80 <_strtod_l+0x2e8>
 8007e7e:	427f      	negs	r7, r7
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d14f      	bne.n	8007f24 <_strtod_l+0x38c>
 8007e84:	9904      	ldr	r1, [sp, #16]
 8007e86:	4301      	orrs	r1, r0
 8007e88:	f47f aec1 	bne.w	8007c0e <_strtod_l+0x76>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f47f aedb 	bne.w	8007c48 <_strtod_l+0xb0>
 8007e92:	2a69      	cmp	r2, #105	; 0x69
 8007e94:	d029      	beq.n	8007eea <_strtod_l+0x352>
 8007e96:	dc26      	bgt.n	8007ee6 <_strtod_l+0x34e>
 8007e98:	2a49      	cmp	r2, #73	; 0x49
 8007e9a:	d026      	beq.n	8007eea <_strtod_l+0x352>
 8007e9c:	2a4e      	cmp	r2, #78	; 0x4e
 8007e9e:	f47f aed3 	bne.w	8007c48 <_strtod_l+0xb0>
 8007ea2:	499b      	ldr	r1, [pc, #620]	; (8008110 <_strtod_l+0x578>)
 8007ea4:	a815      	add	r0, sp, #84	; 0x54
 8007ea6:	f001 ff3d 	bl	8009d24 <__match>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	f43f aecc 	beq.w	8007c48 <_strtod_l+0xb0>
 8007eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b28      	cmp	r3, #40	; 0x28
 8007eb6:	d12f      	bne.n	8007f18 <_strtod_l+0x380>
 8007eb8:	4996      	ldr	r1, [pc, #600]	; (8008114 <_strtod_l+0x57c>)
 8007eba:	aa18      	add	r2, sp, #96	; 0x60
 8007ebc:	a815      	add	r0, sp, #84	; 0x54
 8007ebe:	f001 ff45 	bl	8009d4c <__hexnan>
 8007ec2:	2805      	cmp	r0, #5
 8007ec4:	d128      	bne.n	8007f18 <_strtod_l+0x380>
 8007ec6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ec8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ecc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007ed0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007ed4:	e69b      	b.n	8007c0e <_strtod_l+0x76>
 8007ed6:	9f08      	ldr	r7, [sp, #32]
 8007ed8:	210a      	movs	r1, #10
 8007eda:	fb01 2107 	mla	r1, r1, r7, r2
 8007ede:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007ee2:	9208      	str	r2, [sp, #32]
 8007ee4:	e7b5      	b.n	8007e52 <_strtod_l+0x2ba>
 8007ee6:	2a6e      	cmp	r2, #110	; 0x6e
 8007ee8:	e7d9      	b.n	8007e9e <_strtod_l+0x306>
 8007eea:	498b      	ldr	r1, [pc, #556]	; (8008118 <_strtod_l+0x580>)
 8007eec:	a815      	add	r0, sp, #84	; 0x54
 8007eee:	f001 ff19 	bl	8009d24 <__match>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f aea8 	beq.w	8007c48 <_strtod_l+0xb0>
 8007ef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007efa:	4988      	ldr	r1, [pc, #544]	; (800811c <_strtod_l+0x584>)
 8007efc:	3b01      	subs	r3, #1
 8007efe:	a815      	add	r0, sp, #84	; 0x54
 8007f00:	9315      	str	r3, [sp, #84]	; 0x54
 8007f02:	f001 ff0f 	bl	8009d24 <__match>
 8007f06:	b910      	cbnz	r0, 8007f0e <_strtod_l+0x376>
 8007f08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	9315      	str	r3, [sp, #84]	; 0x54
 8007f0e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800812c <_strtod_l+0x594>
 8007f12:	f04f 0800 	mov.w	r8, #0
 8007f16:	e67a      	b.n	8007c0e <_strtod_l+0x76>
 8007f18:	4881      	ldr	r0, [pc, #516]	; (8008120 <_strtod_l+0x588>)
 8007f1a:	f000 fdd1 	bl	8008ac0 <nan>
 8007f1e:	ec59 8b10 	vmov	r8, r9, d0
 8007f22:	e674      	b.n	8007c0e <_strtod_l+0x76>
 8007f24:	9b05      	ldr	r3, [sp, #20]
 8007f26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f28:	1afb      	subs	r3, r7, r3
 8007f2a:	f1bb 0f00 	cmp.w	fp, #0
 8007f2e:	bf08      	it	eq
 8007f30:	46b3      	moveq	fp, r6
 8007f32:	2e10      	cmp	r6, #16
 8007f34:	9308      	str	r3, [sp, #32]
 8007f36:	4635      	mov	r5, r6
 8007f38:	bfa8      	it	ge
 8007f3a:	2510      	movge	r5, #16
 8007f3c:	f7f8 fb02 	bl	8000544 <__aeabi_ui2d>
 8007f40:	2e09      	cmp	r6, #9
 8007f42:	4680      	mov	r8, r0
 8007f44:	4689      	mov	r9, r1
 8007f46:	dd13      	ble.n	8007f70 <_strtod_l+0x3d8>
 8007f48:	4b76      	ldr	r3, [pc, #472]	; (8008124 <_strtod_l+0x58c>)
 8007f4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007f4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f52:	f7f8 fb71 	bl	8000638 <__aeabi_dmul>
 8007f56:	4680      	mov	r8, r0
 8007f58:	4650      	mov	r0, sl
 8007f5a:	4689      	mov	r9, r1
 8007f5c:	f7f8 faf2 	bl	8000544 <__aeabi_ui2d>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 f9b0 	bl	80002cc <__adddf3>
 8007f6c:	4680      	mov	r8, r0
 8007f6e:	4689      	mov	r9, r1
 8007f70:	2e0f      	cmp	r6, #15
 8007f72:	dc38      	bgt.n	8007fe6 <_strtod_l+0x44e>
 8007f74:	9b08      	ldr	r3, [sp, #32]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f43f ae49 	beq.w	8007c0e <_strtod_l+0x76>
 8007f7c:	dd24      	ble.n	8007fc8 <_strtod_l+0x430>
 8007f7e:	2b16      	cmp	r3, #22
 8007f80:	dc0b      	bgt.n	8007f9a <_strtod_l+0x402>
 8007f82:	4968      	ldr	r1, [pc, #416]	; (8008124 <_strtod_l+0x58c>)
 8007f84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	f7f8 fb52 	bl	8000638 <__aeabi_dmul>
 8007f94:	4680      	mov	r8, r0
 8007f96:	4689      	mov	r9, r1
 8007f98:	e639      	b.n	8007c0e <_strtod_l+0x76>
 8007f9a:	9a08      	ldr	r2, [sp, #32]
 8007f9c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	db20      	blt.n	8007fe6 <_strtod_l+0x44e>
 8007fa4:	4c5f      	ldr	r4, [pc, #380]	; (8008124 <_strtod_l+0x58c>)
 8007fa6:	f1c6 060f 	rsb	r6, r6, #15
 8007faa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007fae:	4642      	mov	r2, r8
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb6:	f7f8 fb3f 	bl	8000638 <__aeabi_dmul>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	1b9e      	subs	r6, r3, r6
 8007fbe:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007fc2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007fc6:	e7e3      	b.n	8007f90 <_strtod_l+0x3f8>
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	3316      	adds	r3, #22
 8007fcc:	db0b      	blt.n	8007fe6 <_strtod_l+0x44e>
 8007fce:	9b05      	ldr	r3, [sp, #20]
 8007fd0:	1bdf      	subs	r7, r3, r7
 8007fd2:	4b54      	ldr	r3, [pc, #336]	; (8008124 <_strtod_l+0x58c>)
 8007fd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4649      	mov	r1, r9
 8007fe0:	f7f8 fc54 	bl	800088c <__aeabi_ddiv>
 8007fe4:	e7d6      	b.n	8007f94 <_strtod_l+0x3fc>
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	1b75      	subs	r5, r6, r5
 8007fea:	441d      	add	r5, r3
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	dd70      	ble.n	80080d2 <_strtod_l+0x53a>
 8007ff0:	f015 030f 	ands.w	r3, r5, #15
 8007ff4:	d00a      	beq.n	800800c <_strtod_l+0x474>
 8007ff6:	494b      	ldr	r1, [pc, #300]	; (8008124 <_strtod_l+0x58c>)
 8007ff8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ffc:	4642      	mov	r2, r8
 8007ffe:	464b      	mov	r3, r9
 8008000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008004:	f7f8 fb18 	bl	8000638 <__aeabi_dmul>
 8008008:	4680      	mov	r8, r0
 800800a:	4689      	mov	r9, r1
 800800c:	f035 050f 	bics.w	r5, r5, #15
 8008010:	d04d      	beq.n	80080ae <_strtod_l+0x516>
 8008012:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008016:	dd22      	ble.n	800805e <_strtod_l+0x4c6>
 8008018:	2500      	movs	r5, #0
 800801a:	46ab      	mov	fp, r5
 800801c:	9509      	str	r5, [sp, #36]	; 0x24
 800801e:	9505      	str	r5, [sp, #20]
 8008020:	2322      	movs	r3, #34	; 0x22
 8008022:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800812c <_strtod_l+0x594>
 8008026:	6023      	str	r3, [r4, #0]
 8008028:	f04f 0800 	mov.w	r8, #0
 800802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	f43f aded 	beq.w	8007c0e <_strtod_l+0x76>
 8008034:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008036:	4620      	mov	r0, r4
 8008038:	f002 fa30 	bl	800a49c <_Bfree>
 800803c:	9905      	ldr	r1, [sp, #20]
 800803e:	4620      	mov	r0, r4
 8008040:	f002 fa2c 	bl	800a49c <_Bfree>
 8008044:	4659      	mov	r1, fp
 8008046:	4620      	mov	r0, r4
 8008048:	f002 fa28 	bl	800a49c <_Bfree>
 800804c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800804e:	4620      	mov	r0, r4
 8008050:	f002 fa24 	bl	800a49c <_Bfree>
 8008054:	4629      	mov	r1, r5
 8008056:	4620      	mov	r0, r4
 8008058:	f002 fa20 	bl	800a49c <_Bfree>
 800805c:	e5d7      	b.n	8007c0e <_strtod_l+0x76>
 800805e:	4b32      	ldr	r3, [pc, #200]	; (8008128 <_strtod_l+0x590>)
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	2300      	movs	r3, #0
 8008064:	112d      	asrs	r5, r5, #4
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	469a      	mov	sl, r3
 800806c:	2d01      	cmp	r5, #1
 800806e:	dc21      	bgt.n	80080b4 <_strtod_l+0x51c>
 8008070:	b10b      	cbz	r3, 8008076 <_strtod_l+0x4de>
 8008072:	4680      	mov	r8, r0
 8008074:	4689      	mov	r9, r1
 8008076:	492c      	ldr	r1, [pc, #176]	; (8008128 <_strtod_l+0x590>)
 8008078:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800807c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008088:	f7f8 fad6 	bl	8000638 <__aeabi_dmul>
 800808c:	4b27      	ldr	r3, [pc, #156]	; (800812c <_strtod_l+0x594>)
 800808e:	460a      	mov	r2, r1
 8008090:	400b      	ands	r3, r1
 8008092:	4927      	ldr	r1, [pc, #156]	; (8008130 <_strtod_l+0x598>)
 8008094:	428b      	cmp	r3, r1
 8008096:	4680      	mov	r8, r0
 8008098:	d8be      	bhi.n	8008018 <_strtod_l+0x480>
 800809a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800809e:	428b      	cmp	r3, r1
 80080a0:	bf86      	itte	hi
 80080a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008134 <_strtod_l+0x59c>
 80080a6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80080aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80080ae:	2300      	movs	r3, #0
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	e07b      	b.n	80081ac <_strtod_l+0x614>
 80080b4:	07ea      	lsls	r2, r5, #31
 80080b6:	d505      	bpl.n	80080c4 <_strtod_l+0x52c>
 80080b8:	9b04      	ldr	r3, [sp, #16]
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	f7f8 fabb 	bl	8000638 <__aeabi_dmul>
 80080c2:	2301      	movs	r3, #1
 80080c4:	9a04      	ldr	r2, [sp, #16]
 80080c6:	3208      	adds	r2, #8
 80080c8:	f10a 0a01 	add.w	sl, sl, #1
 80080cc:	106d      	asrs	r5, r5, #1
 80080ce:	9204      	str	r2, [sp, #16]
 80080d0:	e7cc      	b.n	800806c <_strtod_l+0x4d4>
 80080d2:	d0ec      	beq.n	80080ae <_strtod_l+0x516>
 80080d4:	426d      	negs	r5, r5
 80080d6:	f015 020f 	ands.w	r2, r5, #15
 80080da:	d00a      	beq.n	80080f2 <_strtod_l+0x55a>
 80080dc:	4b11      	ldr	r3, [pc, #68]	; (8008124 <_strtod_l+0x58c>)
 80080de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e2:	4640      	mov	r0, r8
 80080e4:	4649      	mov	r1, r9
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 fbcf 	bl	800088c <__aeabi_ddiv>
 80080ee:	4680      	mov	r8, r0
 80080f0:	4689      	mov	r9, r1
 80080f2:	112d      	asrs	r5, r5, #4
 80080f4:	d0db      	beq.n	80080ae <_strtod_l+0x516>
 80080f6:	2d1f      	cmp	r5, #31
 80080f8:	dd1e      	ble.n	8008138 <_strtod_l+0x5a0>
 80080fa:	2500      	movs	r5, #0
 80080fc:	46ab      	mov	fp, r5
 80080fe:	9509      	str	r5, [sp, #36]	; 0x24
 8008100:	9505      	str	r5, [sp, #20]
 8008102:	2322      	movs	r3, #34	; 0x22
 8008104:	f04f 0800 	mov.w	r8, #0
 8008108:	f04f 0900 	mov.w	r9, #0
 800810c:	6023      	str	r3, [r4, #0]
 800810e:	e78d      	b.n	800802c <_strtod_l+0x494>
 8008110:	0800d2e1 	.word	0x0800d2e1
 8008114:	0800d324 	.word	0x0800d324
 8008118:	0800d2d9 	.word	0x0800d2d9
 800811c:	0800d46c 	.word	0x0800d46c
 8008120:	0800d6f7 	.word	0x0800d6f7
 8008124:	0800d5e8 	.word	0x0800d5e8
 8008128:	0800d5c0 	.word	0x0800d5c0
 800812c:	7ff00000 	.word	0x7ff00000
 8008130:	7ca00000 	.word	0x7ca00000
 8008134:	7fefffff 	.word	0x7fefffff
 8008138:	f015 0310 	ands.w	r3, r5, #16
 800813c:	bf18      	it	ne
 800813e:	236a      	movne	r3, #106	; 0x6a
 8008140:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80084e4 <_strtod_l+0x94c>
 8008144:	9304      	str	r3, [sp, #16]
 8008146:	4640      	mov	r0, r8
 8008148:	4649      	mov	r1, r9
 800814a:	2300      	movs	r3, #0
 800814c:	07ea      	lsls	r2, r5, #31
 800814e:	d504      	bpl.n	800815a <_strtod_l+0x5c2>
 8008150:	e9da 2300 	ldrd	r2, r3, [sl]
 8008154:	f7f8 fa70 	bl	8000638 <__aeabi_dmul>
 8008158:	2301      	movs	r3, #1
 800815a:	106d      	asrs	r5, r5, #1
 800815c:	f10a 0a08 	add.w	sl, sl, #8
 8008160:	d1f4      	bne.n	800814c <_strtod_l+0x5b4>
 8008162:	b10b      	cbz	r3, 8008168 <_strtod_l+0x5d0>
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	b1bb      	cbz	r3, 800819c <_strtod_l+0x604>
 800816c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008170:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008174:	2b00      	cmp	r3, #0
 8008176:	4649      	mov	r1, r9
 8008178:	dd10      	ble.n	800819c <_strtod_l+0x604>
 800817a:	2b1f      	cmp	r3, #31
 800817c:	f340 811e 	ble.w	80083bc <_strtod_l+0x824>
 8008180:	2b34      	cmp	r3, #52	; 0x34
 8008182:	bfde      	ittt	le
 8008184:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008188:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800818c:	4093      	lslle	r3, r2
 800818e:	f04f 0800 	mov.w	r8, #0
 8008192:	bfcc      	ite	gt
 8008194:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008198:	ea03 0901 	andle.w	r9, r3, r1
 800819c:	2200      	movs	r2, #0
 800819e:	2300      	movs	r3, #0
 80081a0:	4640      	mov	r0, r8
 80081a2:	4649      	mov	r1, r9
 80081a4:	f7f8 fcb0 	bl	8000b08 <__aeabi_dcmpeq>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d1a6      	bne.n	80080fa <_strtod_l+0x562>
 80081ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081b2:	4633      	mov	r3, r6
 80081b4:	465a      	mov	r2, fp
 80081b6:	4620      	mov	r0, r4
 80081b8:	f002 f9d8 	bl	800a56c <__s2b>
 80081bc:	9009      	str	r0, [sp, #36]	; 0x24
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f af2a 	beq.w	8008018 <_strtod_l+0x480>
 80081c4:	9a08      	ldr	r2, [sp, #32]
 80081c6:	9b05      	ldr	r3, [sp, #20]
 80081c8:	2a00      	cmp	r2, #0
 80081ca:	eba3 0307 	sub.w	r3, r3, r7
 80081ce:	bfa8      	it	ge
 80081d0:	2300      	movge	r3, #0
 80081d2:	930c      	str	r3, [sp, #48]	; 0x30
 80081d4:	2500      	movs	r5, #0
 80081d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081da:	9312      	str	r3, [sp, #72]	; 0x48
 80081dc:	46ab      	mov	fp, r5
 80081de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e0:	4620      	mov	r0, r4
 80081e2:	6859      	ldr	r1, [r3, #4]
 80081e4:	f002 f91a 	bl	800a41c <_Balloc>
 80081e8:	9005      	str	r0, [sp, #20]
 80081ea:	2800      	cmp	r0, #0
 80081ec:	f43f af18 	beq.w	8008020 <_strtod_l+0x488>
 80081f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	3202      	adds	r2, #2
 80081f6:	f103 010c 	add.w	r1, r3, #12
 80081fa:	0092      	lsls	r2, r2, #2
 80081fc:	300c      	adds	r0, #12
 80081fe:	f000 fc50 	bl	8008aa2 <memcpy>
 8008202:	ec49 8b10 	vmov	d0, r8, r9
 8008206:	aa18      	add	r2, sp, #96	; 0x60
 8008208:	a917      	add	r1, sp, #92	; 0x5c
 800820a:	4620      	mov	r0, r4
 800820c:	f002 fce2 	bl	800abd4 <__d2b>
 8008210:	ec49 8b18 	vmov	d8, r8, r9
 8008214:	9016      	str	r0, [sp, #88]	; 0x58
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f af02 	beq.w	8008020 <_strtod_l+0x488>
 800821c:	2101      	movs	r1, #1
 800821e:	4620      	mov	r0, r4
 8008220:	f002 fa3c 	bl	800a69c <__i2b>
 8008224:	4683      	mov	fp, r0
 8008226:	2800      	cmp	r0, #0
 8008228:	f43f aefa 	beq.w	8008020 <_strtod_l+0x488>
 800822c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800822e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008230:	2e00      	cmp	r6, #0
 8008232:	bfab      	itete	ge
 8008234:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008236:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008238:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800823a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800823e:	bfac      	ite	ge
 8008240:	eb06 0a03 	addge.w	sl, r6, r3
 8008244:	1b9f      	sublt	r7, r3, r6
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	1af6      	subs	r6, r6, r3
 800824a:	4416      	add	r6, r2
 800824c:	4ba0      	ldr	r3, [pc, #640]	; (80084d0 <_strtod_l+0x938>)
 800824e:	3e01      	subs	r6, #1
 8008250:	429e      	cmp	r6, r3
 8008252:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008256:	f280 80c4 	bge.w	80083e2 <_strtod_l+0x84a>
 800825a:	1b9b      	subs	r3, r3, r6
 800825c:	2b1f      	cmp	r3, #31
 800825e:	eba2 0203 	sub.w	r2, r2, r3
 8008262:	f04f 0101 	mov.w	r1, #1
 8008266:	f300 80b0 	bgt.w	80083ca <_strtod_l+0x832>
 800826a:	fa01 f303 	lsl.w	r3, r1, r3
 800826e:	930e      	str	r3, [sp, #56]	; 0x38
 8008270:	2300      	movs	r3, #0
 8008272:	930d      	str	r3, [sp, #52]	; 0x34
 8008274:	eb0a 0602 	add.w	r6, sl, r2
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	45b2      	cmp	sl, r6
 800827c:	4417      	add	r7, r2
 800827e:	441f      	add	r7, r3
 8008280:	4653      	mov	r3, sl
 8008282:	bfa8      	it	ge
 8008284:	4633      	movge	r3, r6
 8008286:	42bb      	cmp	r3, r7
 8008288:	bfa8      	it	ge
 800828a:	463b      	movge	r3, r7
 800828c:	2b00      	cmp	r3, #0
 800828e:	bfc2      	ittt	gt
 8008290:	1af6      	subgt	r6, r6, r3
 8008292:	1aff      	subgt	r7, r7, r3
 8008294:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008298:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800829a:	2b00      	cmp	r3, #0
 800829c:	dd17      	ble.n	80082ce <_strtod_l+0x736>
 800829e:	4659      	mov	r1, fp
 80082a0:	461a      	mov	r2, r3
 80082a2:	4620      	mov	r0, r4
 80082a4:	f002 faba 	bl	800a81c <__pow5mult>
 80082a8:	4683      	mov	fp, r0
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f43f aeb8 	beq.w	8008020 <_strtod_l+0x488>
 80082b0:	4601      	mov	r1, r0
 80082b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082b4:	4620      	mov	r0, r4
 80082b6:	f002 fa07 	bl	800a6c8 <__multiply>
 80082ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80082bc:	2800      	cmp	r0, #0
 80082be:	f43f aeaf 	beq.w	8008020 <_strtod_l+0x488>
 80082c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80082c4:	4620      	mov	r0, r4
 80082c6:	f002 f8e9 	bl	800a49c <_Bfree>
 80082ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082cc:	9316      	str	r3, [sp, #88]	; 0x58
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	f300 808c 	bgt.w	80083ec <_strtod_l+0x854>
 80082d4:	9b08      	ldr	r3, [sp, #32]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	dd08      	ble.n	80082ec <_strtod_l+0x754>
 80082da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80082dc:	9905      	ldr	r1, [sp, #20]
 80082de:	4620      	mov	r0, r4
 80082e0:	f002 fa9c 	bl	800a81c <__pow5mult>
 80082e4:	9005      	str	r0, [sp, #20]
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f ae9a 	beq.w	8008020 <_strtod_l+0x488>
 80082ec:	2f00      	cmp	r7, #0
 80082ee:	dd08      	ble.n	8008302 <_strtod_l+0x76a>
 80082f0:	9905      	ldr	r1, [sp, #20]
 80082f2:	463a      	mov	r2, r7
 80082f4:	4620      	mov	r0, r4
 80082f6:	f002 faeb 	bl	800a8d0 <__lshift>
 80082fa:	9005      	str	r0, [sp, #20]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f ae8f 	beq.w	8008020 <_strtod_l+0x488>
 8008302:	f1ba 0f00 	cmp.w	sl, #0
 8008306:	dd08      	ble.n	800831a <_strtod_l+0x782>
 8008308:	4659      	mov	r1, fp
 800830a:	4652      	mov	r2, sl
 800830c:	4620      	mov	r0, r4
 800830e:	f002 fadf 	bl	800a8d0 <__lshift>
 8008312:	4683      	mov	fp, r0
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f ae83 	beq.w	8008020 <_strtod_l+0x488>
 800831a:	9a05      	ldr	r2, [sp, #20]
 800831c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800831e:	4620      	mov	r0, r4
 8008320:	f002 fb5e 	bl	800a9e0 <__mdiff>
 8008324:	4605      	mov	r5, r0
 8008326:	2800      	cmp	r0, #0
 8008328:	f43f ae7a 	beq.w	8008020 <_strtod_l+0x488>
 800832c:	68c3      	ldr	r3, [r0, #12]
 800832e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008330:	2300      	movs	r3, #0
 8008332:	60c3      	str	r3, [r0, #12]
 8008334:	4659      	mov	r1, fp
 8008336:	f002 fb37 	bl	800a9a8 <__mcmp>
 800833a:	2800      	cmp	r0, #0
 800833c:	da60      	bge.n	8008400 <_strtod_l+0x868>
 800833e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008340:	ea53 0308 	orrs.w	r3, r3, r8
 8008344:	f040 8084 	bne.w	8008450 <_strtod_l+0x8b8>
 8008348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800834c:	2b00      	cmp	r3, #0
 800834e:	d17f      	bne.n	8008450 <_strtod_l+0x8b8>
 8008350:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008354:	0d1b      	lsrs	r3, r3, #20
 8008356:	051b      	lsls	r3, r3, #20
 8008358:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800835c:	d978      	bls.n	8008450 <_strtod_l+0x8b8>
 800835e:	696b      	ldr	r3, [r5, #20]
 8008360:	b913      	cbnz	r3, 8008368 <_strtod_l+0x7d0>
 8008362:	692b      	ldr	r3, [r5, #16]
 8008364:	2b01      	cmp	r3, #1
 8008366:	dd73      	ble.n	8008450 <_strtod_l+0x8b8>
 8008368:	4629      	mov	r1, r5
 800836a:	2201      	movs	r2, #1
 800836c:	4620      	mov	r0, r4
 800836e:	f002 faaf 	bl	800a8d0 <__lshift>
 8008372:	4659      	mov	r1, fp
 8008374:	4605      	mov	r5, r0
 8008376:	f002 fb17 	bl	800a9a8 <__mcmp>
 800837a:	2800      	cmp	r0, #0
 800837c:	dd68      	ble.n	8008450 <_strtod_l+0x8b8>
 800837e:	9904      	ldr	r1, [sp, #16]
 8008380:	4a54      	ldr	r2, [pc, #336]	; (80084d4 <_strtod_l+0x93c>)
 8008382:	464b      	mov	r3, r9
 8008384:	2900      	cmp	r1, #0
 8008386:	f000 8084 	beq.w	8008492 <_strtod_l+0x8fa>
 800838a:	ea02 0109 	and.w	r1, r2, r9
 800838e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008392:	dc7e      	bgt.n	8008492 <_strtod_l+0x8fa>
 8008394:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008398:	f77f aeb3 	ble.w	8008102 <_strtod_l+0x56a>
 800839c:	4b4e      	ldr	r3, [pc, #312]	; (80084d8 <_strtod_l+0x940>)
 800839e:	4640      	mov	r0, r8
 80083a0:	4649      	mov	r1, r9
 80083a2:	2200      	movs	r2, #0
 80083a4:	f7f8 f948 	bl	8000638 <__aeabi_dmul>
 80083a8:	4b4a      	ldr	r3, [pc, #296]	; (80084d4 <_strtod_l+0x93c>)
 80083aa:	400b      	ands	r3, r1
 80083ac:	4680      	mov	r8, r0
 80083ae:	4689      	mov	r9, r1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f47f ae3f 	bne.w	8008034 <_strtod_l+0x49c>
 80083b6:	2322      	movs	r3, #34	; 0x22
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	e63b      	b.n	8008034 <_strtod_l+0x49c>
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083c0:	fa02 f303 	lsl.w	r3, r2, r3
 80083c4:	ea03 0808 	and.w	r8, r3, r8
 80083c8:	e6e8      	b.n	800819c <_strtod_l+0x604>
 80083ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80083ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80083d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80083d6:	36e2      	adds	r6, #226	; 0xe2
 80083d8:	fa01 f306 	lsl.w	r3, r1, r6
 80083dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80083e0:	e748      	b.n	8008274 <_strtod_l+0x6dc>
 80083e2:	2100      	movs	r1, #0
 80083e4:	2301      	movs	r3, #1
 80083e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80083ea:	e743      	b.n	8008274 <_strtod_l+0x6dc>
 80083ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80083ee:	4632      	mov	r2, r6
 80083f0:	4620      	mov	r0, r4
 80083f2:	f002 fa6d 	bl	800a8d0 <__lshift>
 80083f6:	9016      	str	r0, [sp, #88]	; 0x58
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f47f af6b 	bne.w	80082d4 <_strtod_l+0x73c>
 80083fe:	e60f      	b.n	8008020 <_strtod_l+0x488>
 8008400:	46ca      	mov	sl, r9
 8008402:	d171      	bne.n	80084e8 <_strtod_l+0x950>
 8008404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008406:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800840a:	b352      	cbz	r2, 8008462 <_strtod_l+0x8ca>
 800840c:	4a33      	ldr	r2, [pc, #204]	; (80084dc <_strtod_l+0x944>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d12a      	bne.n	8008468 <_strtod_l+0x8d0>
 8008412:	9b04      	ldr	r3, [sp, #16]
 8008414:	4641      	mov	r1, r8
 8008416:	b1fb      	cbz	r3, 8008458 <_strtod_l+0x8c0>
 8008418:	4b2e      	ldr	r3, [pc, #184]	; (80084d4 <_strtod_l+0x93c>)
 800841a:	ea09 0303 	and.w	r3, r9, r3
 800841e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008426:	d81a      	bhi.n	800845e <_strtod_l+0x8c6>
 8008428:	0d1b      	lsrs	r3, r3, #20
 800842a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800842e:	fa02 f303 	lsl.w	r3, r2, r3
 8008432:	4299      	cmp	r1, r3
 8008434:	d118      	bne.n	8008468 <_strtod_l+0x8d0>
 8008436:	4b2a      	ldr	r3, [pc, #168]	; (80084e0 <_strtod_l+0x948>)
 8008438:	459a      	cmp	sl, r3
 800843a:	d102      	bne.n	8008442 <_strtod_l+0x8aa>
 800843c:	3101      	adds	r1, #1
 800843e:	f43f adef 	beq.w	8008020 <_strtod_l+0x488>
 8008442:	4b24      	ldr	r3, [pc, #144]	; (80084d4 <_strtod_l+0x93c>)
 8008444:	ea0a 0303 	and.w	r3, sl, r3
 8008448:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800844c:	f04f 0800 	mov.w	r8, #0
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1a2      	bne.n	800839c <_strtod_l+0x804>
 8008456:	e5ed      	b.n	8008034 <_strtod_l+0x49c>
 8008458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800845c:	e7e9      	b.n	8008432 <_strtod_l+0x89a>
 800845e:	4613      	mov	r3, r2
 8008460:	e7e7      	b.n	8008432 <_strtod_l+0x89a>
 8008462:	ea53 0308 	orrs.w	r3, r3, r8
 8008466:	d08a      	beq.n	800837e <_strtod_l+0x7e6>
 8008468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800846a:	b1e3      	cbz	r3, 80084a6 <_strtod_l+0x90e>
 800846c:	ea13 0f0a 	tst.w	r3, sl
 8008470:	d0ee      	beq.n	8008450 <_strtod_l+0x8b8>
 8008472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008474:	9a04      	ldr	r2, [sp, #16]
 8008476:	4640      	mov	r0, r8
 8008478:	4649      	mov	r1, r9
 800847a:	b1c3      	cbz	r3, 80084ae <_strtod_l+0x916>
 800847c:	f7ff fb6e 	bl	8007b5c <sulp>
 8008480:	4602      	mov	r2, r0
 8008482:	460b      	mov	r3, r1
 8008484:	ec51 0b18 	vmov	r0, r1, d8
 8008488:	f7f7 ff20 	bl	80002cc <__adddf3>
 800848c:	4680      	mov	r8, r0
 800848e:	4689      	mov	r9, r1
 8008490:	e7de      	b.n	8008450 <_strtod_l+0x8b8>
 8008492:	4013      	ands	r3, r2
 8008494:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008498:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800849c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80084a0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80084a4:	e7d4      	b.n	8008450 <_strtod_l+0x8b8>
 80084a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084a8:	ea13 0f08 	tst.w	r3, r8
 80084ac:	e7e0      	b.n	8008470 <_strtod_l+0x8d8>
 80084ae:	f7ff fb55 	bl	8007b5c <sulp>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	ec51 0b18 	vmov	r0, r1, d8
 80084ba:	f7f7 ff05 	bl	80002c8 <__aeabi_dsub>
 80084be:	2200      	movs	r2, #0
 80084c0:	2300      	movs	r3, #0
 80084c2:	4680      	mov	r8, r0
 80084c4:	4689      	mov	r9, r1
 80084c6:	f7f8 fb1f 	bl	8000b08 <__aeabi_dcmpeq>
 80084ca:	2800      	cmp	r0, #0
 80084cc:	d0c0      	beq.n	8008450 <_strtod_l+0x8b8>
 80084ce:	e618      	b.n	8008102 <_strtod_l+0x56a>
 80084d0:	fffffc02 	.word	0xfffffc02
 80084d4:	7ff00000 	.word	0x7ff00000
 80084d8:	39500000 	.word	0x39500000
 80084dc:	000fffff 	.word	0x000fffff
 80084e0:	7fefffff 	.word	0x7fefffff
 80084e4:	0800d338 	.word	0x0800d338
 80084e8:	4659      	mov	r1, fp
 80084ea:	4628      	mov	r0, r5
 80084ec:	f002 fbcc 	bl	800ac88 <__ratio>
 80084f0:	ec57 6b10 	vmov	r6, r7, d0
 80084f4:	ee10 0a10 	vmov	r0, s0
 80084f8:	2200      	movs	r2, #0
 80084fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f8 fb16 	bl	8000b30 <__aeabi_dcmple>
 8008504:	2800      	cmp	r0, #0
 8008506:	d071      	beq.n	80085ec <_strtod_l+0xa54>
 8008508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800850a:	2b00      	cmp	r3, #0
 800850c:	d17c      	bne.n	8008608 <_strtod_l+0xa70>
 800850e:	f1b8 0f00 	cmp.w	r8, #0
 8008512:	d15a      	bne.n	80085ca <_strtod_l+0xa32>
 8008514:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008518:	2b00      	cmp	r3, #0
 800851a:	d15d      	bne.n	80085d8 <_strtod_l+0xa40>
 800851c:	4b90      	ldr	r3, [pc, #576]	; (8008760 <_strtod_l+0xbc8>)
 800851e:	2200      	movs	r2, #0
 8008520:	4630      	mov	r0, r6
 8008522:	4639      	mov	r1, r7
 8008524:	f7f8 fafa 	bl	8000b1c <__aeabi_dcmplt>
 8008528:	2800      	cmp	r0, #0
 800852a:	d15c      	bne.n	80085e6 <_strtod_l+0xa4e>
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	4b8c      	ldr	r3, [pc, #560]	; (8008764 <_strtod_l+0xbcc>)
 8008532:	2200      	movs	r2, #0
 8008534:	f7f8 f880 	bl	8000638 <__aeabi_dmul>
 8008538:	4606      	mov	r6, r0
 800853a:	460f      	mov	r7, r1
 800853c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008540:	9606      	str	r6, [sp, #24]
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008548:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800854c:	4b86      	ldr	r3, [pc, #536]	; (8008768 <_strtod_l+0xbd0>)
 800854e:	ea0a 0303 	and.w	r3, sl, r3
 8008552:	930d      	str	r3, [sp, #52]	; 0x34
 8008554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008556:	4b85      	ldr	r3, [pc, #532]	; (800876c <_strtod_l+0xbd4>)
 8008558:	429a      	cmp	r2, r3
 800855a:	f040 8090 	bne.w	800867e <_strtod_l+0xae6>
 800855e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008562:	ec49 8b10 	vmov	d0, r8, r9
 8008566:	f002 fac5 	bl	800aaf4 <__ulp>
 800856a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800856e:	ec51 0b10 	vmov	r0, r1, d0
 8008572:	f7f8 f861 	bl	8000638 <__aeabi_dmul>
 8008576:	4642      	mov	r2, r8
 8008578:	464b      	mov	r3, r9
 800857a:	f7f7 fea7 	bl	80002cc <__adddf3>
 800857e:	460b      	mov	r3, r1
 8008580:	4979      	ldr	r1, [pc, #484]	; (8008768 <_strtod_l+0xbd0>)
 8008582:	4a7b      	ldr	r2, [pc, #492]	; (8008770 <_strtod_l+0xbd8>)
 8008584:	4019      	ands	r1, r3
 8008586:	4291      	cmp	r1, r2
 8008588:	4680      	mov	r8, r0
 800858a:	d944      	bls.n	8008616 <_strtod_l+0xa7e>
 800858c:	ee18 2a90 	vmov	r2, s17
 8008590:	4b78      	ldr	r3, [pc, #480]	; (8008774 <_strtod_l+0xbdc>)
 8008592:	429a      	cmp	r2, r3
 8008594:	d104      	bne.n	80085a0 <_strtod_l+0xa08>
 8008596:	ee18 3a10 	vmov	r3, s16
 800859a:	3301      	adds	r3, #1
 800859c:	f43f ad40 	beq.w	8008020 <_strtod_l+0x488>
 80085a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008774 <_strtod_l+0xbdc>
 80085a4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80085a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085aa:	4620      	mov	r0, r4
 80085ac:	f001 ff76 	bl	800a49c <_Bfree>
 80085b0:	9905      	ldr	r1, [sp, #20]
 80085b2:	4620      	mov	r0, r4
 80085b4:	f001 ff72 	bl	800a49c <_Bfree>
 80085b8:	4659      	mov	r1, fp
 80085ba:	4620      	mov	r0, r4
 80085bc:	f001 ff6e 	bl	800a49c <_Bfree>
 80085c0:	4629      	mov	r1, r5
 80085c2:	4620      	mov	r0, r4
 80085c4:	f001 ff6a 	bl	800a49c <_Bfree>
 80085c8:	e609      	b.n	80081de <_strtod_l+0x646>
 80085ca:	f1b8 0f01 	cmp.w	r8, #1
 80085ce:	d103      	bne.n	80085d8 <_strtod_l+0xa40>
 80085d0:	f1b9 0f00 	cmp.w	r9, #0
 80085d4:	f43f ad95 	beq.w	8008102 <_strtod_l+0x56a>
 80085d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008730 <_strtod_l+0xb98>
 80085dc:	4f60      	ldr	r7, [pc, #384]	; (8008760 <_strtod_l+0xbc8>)
 80085de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80085e2:	2600      	movs	r6, #0
 80085e4:	e7ae      	b.n	8008544 <_strtod_l+0x9ac>
 80085e6:	4f5f      	ldr	r7, [pc, #380]	; (8008764 <_strtod_l+0xbcc>)
 80085e8:	2600      	movs	r6, #0
 80085ea:	e7a7      	b.n	800853c <_strtod_l+0x9a4>
 80085ec:	4b5d      	ldr	r3, [pc, #372]	; (8008764 <_strtod_l+0xbcc>)
 80085ee:	4630      	mov	r0, r6
 80085f0:	4639      	mov	r1, r7
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f8 f820 	bl	8000638 <__aeabi_dmul>
 80085f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fa:	4606      	mov	r6, r0
 80085fc:	460f      	mov	r7, r1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d09c      	beq.n	800853c <_strtod_l+0x9a4>
 8008602:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008606:	e79d      	b.n	8008544 <_strtod_l+0x9ac>
 8008608:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008738 <_strtod_l+0xba0>
 800860c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008610:	ec57 6b17 	vmov	r6, r7, d7
 8008614:	e796      	b.n	8008544 <_strtod_l+0x9ac>
 8008616:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800861a:	9b04      	ldr	r3, [sp, #16]
 800861c:	46ca      	mov	sl, r9
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1c2      	bne.n	80085a8 <_strtod_l+0xa10>
 8008622:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008626:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008628:	0d1b      	lsrs	r3, r3, #20
 800862a:	051b      	lsls	r3, r3, #20
 800862c:	429a      	cmp	r2, r3
 800862e:	d1bb      	bne.n	80085a8 <_strtod_l+0xa10>
 8008630:	4630      	mov	r0, r6
 8008632:	4639      	mov	r1, r7
 8008634:	f7f8 fb60 	bl	8000cf8 <__aeabi_d2lz>
 8008638:	f7f7 ffd0 	bl	80005dc <__aeabi_l2d>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f7 fe40 	bl	80002c8 <__aeabi_dsub>
 8008648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800864a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800864e:	ea43 0308 	orr.w	r3, r3, r8
 8008652:	4313      	orrs	r3, r2
 8008654:	4606      	mov	r6, r0
 8008656:	460f      	mov	r7, r1
 8008658:	d054      	beq.n	8008704 <_strtod_l+0xb6c>
 800865a:	a339      	add	r3, pc, #228	; (adr r3, 8008740 <_strtod_l+0xba8>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	f7f8 fa5c 	bl	8000b1c <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	f47f ace5 	bne.w	8008034 <_strtod_l+0x49c>
 800866a:	a337      	add	r3, pc, #220	; (adr r3, 8008748 <_strtod_l+0xbb0>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 fa70 	bl	8000b58 <__aeabi_dcmpgt>
 8008678:	2800      	cmp	r0, #0
 800867a:	d095      	beq.n	80085a8 <_strtod_l+0xa10>
 800867c:	e4da      	b.n	8008034 <_strtod_l+0x49c>
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	b333      	cbz	r3, 80086d0 <_strtod_l+0xb38>
 8008682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008684:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008688:	d822      	bhi.n	80086d0 <_strtod_l+0xb38>
 800868a:	a331      	add	r3, pc, #196	; (adr r3, 8008750 <_strtod_l+0xbb8>)
 800868c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f8 fa4c 	bl	8000b30 <__aeabi_dcmple>
 8008698:	b1a0      	cbz	r0, 80086c4 <_strtod_l+0xb2c>
 800869a:	4639      	mov	r1, r7
 800869c:	4630      	mov	r0, r6
 800869e:	f7f8 faa3 	bl	8000be8 <__aeabi_d2uiz>
 80086a2:	2801      	cmp	r0, #1
 80086a4:	bf38      	it	cc
 80086a6:	2001      	movcc	r0, #1
 80086a8:	f7f7 ff4c 	bl	8000544 <__aeabi_ui2d>
 80086ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	bb23      	cbnz	r3, 80086fe <_strtod_l+0xb66>
 80086b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086b8:	9010      	str	r0, [sp, #64]	; 0x40
 80086ba:	9311      	str	r3, [sp, #68]	; 0x44
 80086bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80086c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80086c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80086d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80086d4:	eeb0 0a48 	vmov.f32	s0, s16
 80086d8:	eef0 0a68 	vmov.f32	s1, s17
 80086dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80086e0:	f002 fa08 	bl	800aaf4 <__ulp>
 80086e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80086e8:	ec53 2b10 	vmov	r2, r3, d0
 80086ec:	f7f7 ffa4 	bl	8000638 <__aeabi_dmul>
 80086f0:	ec53 2b18 	vmov	r2, r3, d8
 80086f4:	f7f7 fdea 	bl	80002cc <__adddf3>
 80086f8:	4680      	mov	r8, r0
 80086fa:	4689      	mov	r9, r1
 80086fc:	e78d      	b.n	800861a <_strtod_l+0xa82>
 80086fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008702:	e7db      	b.n	80086bc <_strtod_l+0xb24>
 8008704:	a314      	add	r3, pc, #80	; (adr r3, 8008758 <_strtod_l+0xbc0>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f8 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800870e:	e7b3      	b.n	8008678 <_strtod_l+0xae0>
 8008710:	2300      	movs	r3, #0
 8008712:	930a      	str	r3, [sp, #40]	; 0x28
 8008714:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	f7ff ba7c 	b.w	8007c16 <_strtod_l+0x7e>
 800871e:	2a65      	cmp	r2, #101	; 0x65
 8008720:	f43f ab75 	beq.w	8007e0e <_strtod_l+0x276>
 8008724:	2a45      	cmp	r2, #69	; 0x45
 8008726:	f43f ab72 	beq.w	8007e0e <_strtod_l+0x276>
 800872a:	2301      	movs	r3, #1
 800872c:	f7ff bbaa 	b.w	8007e84 <_strtod_l+0x2ec>
 8008730:	00000000 	.word	0x00000000
 8008734:	bff00000 	.word	0xbff00000
 8008738:	00000000 	.word	0x00000000
 800873c:	3ff00000 	.word	0x3ff00000
 8008740:	94a03595 	.word	0x94a03595
 8008744:	3fdfffff 	.word	0x3fdfffff
 8008748:	35afe535 	.word	0x35afe535
 800874c:	3fe00000 	.word	0x3fe00000
 8008750:	ffc00000 	.word	0xffc00000
 8008754:	41dfffff 	.word	0x41dfffff
 8008758:	94a03595 	.word	0x94a03595
 800875c:	3fcfffff 	.word	0x3fcfffff
 8008760:	3ff00000 	.word	0x3ff00000
 8008764:	3fe00000 	.word	0x3fe00000
 8008768:	7ff00000 	.word	0x7ff00000
 800876c:	7fe00000 	.word	0x7fe00000
 8008770:	7c9fffff 	.word	0x7c9fffff
 8008774:	7fefffff 	.word	0x7fefffff

08008778 <_strtod_r>:
 8008778:	4b01      	ldr	r3, [pc, #4]	; (8008780 <_strtod_r+0x8>)
 800877a:	f7ff ba0d 	b.w	8007b98 <_strtod_l>
 800877e:	bf00      	nop
 8008780:	20000044 	.word	0x20000044

08008784 <strtod>:
 8008784:	460a      	mov	r2, r1
 8008786:	4601      	mov	r1, r0
 8008788:	4802      	ldr	r0, [pc, #8]	; (8008794 <strtod+0x10>)
 800878a:	4b03      	ldr	r3, [pc, #12]	; (8008798 <strtod+0x14>)
 800878c:	6800      	ldr	r0, [r0, #0]
 800878e:	f7ff ba03 	b.w	8007b98 <_strtod_l>
 8008792:	bf00      	nop
 8008794:	200001fc 	.word	0x200001fc
 8008798:	20000044 	.word	0x20000044

0800879c <_strtol_l.constprop.0>:
 800879c:	2b01      	cmp	r3, #1
 800879e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a2:	d001      	beq.n	80087a8 <_strtol_l.constprop.0+0xc>
 80087a4:	2b24      	cmp	r3, #36	; 0x24
 80087a6:	d906      	bls.n	80087b6 <_strtol_l.constprop.0+0x1a>
 80087a8:	f000 f94e 	bl	8008a48 <__errno>
 80087ac:	2316      	movs	r3, #22
 80087ae:	6003      	str	r3, [r0, #0]
 80087b0:	2000      	movs	r0, #0
 80087b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800889c <_strtol_l.constprop.0+0x100>
 80087ba:	460d      	mov	r5, r1
 80087bc:	462e      	mov	r6, r5
 80087be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80087c6:	f017 0708 	ands.w	r7, r7, #8
 80087ca:	d1f7      	bne.n	80087bc <_strtol_l.constprop.0+0x20>
 80087cc:	2c2d      	cmp	r4, #45	; 0x2d
 80087ce:	d132      	bne.n	8008836 <_strtol_l.constprop.0+0x9a>
 80087d0:	782c      	ldrb	r4, [r5, #0]
 80087d2:	2701      	movs	r7, #1
 80087d4:	1cb5      	adds	r5, r6, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d05b      	beq.n	8008892 <_strtol_l.constprop.0+0xf6>
 80087da:	2b10      	cmp	r3, #16
 80087dc:	d109      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 80087de:	2c30      	cmp	r4, #48	; 0x30
 80087e0:	d107      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 80087e2:	782c      	ldrb	r4, [r5, #0]
 80087e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087e8:	2c58      	cmp	r4, #88	; 0x58
 80087ea:	d14d      	bne.n	8008888 <_strtol_l.constprop.0+0xec>
 80087ec:	786c      	ldrb	r4, [r5, #1]
 80087ee:	2310      	movs	r3, #16
 80087f0:	3502      	adds	r5, #2
 80087f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80087fa:	f04f 0e00 	mov.w	lr, #0
 80087fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008802:	4676      	mov	r6, lr
 8008804:	fb03 8a19 	mls	sl, r3, r9, r8
 8008808:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800880c:	f1bc 0f09 	cmp.w	ip, #9
 8008810:	d816      	bhi.n	8008840 <_strtol_l.constprop.0+0xa4>
 8008812:	4664      	mov	r4, ip
 8008814:	42a3      	cmp	r3, r4
 8008816:	dd24      	ble.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008818:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800881c:	d008      	beq.n	8008830 <_strtol_l.constprop.0+0x94>
 800881e:	45b1      	cmp	r9, r6
 8008820:	d31c      	bcc.n	800885c <_strtol_l.constprop.0+0xc0>
 8008822:	d101      	bne.n	8008828 <_strtol_l.constprop.0+0x8c>
 8008824:	45a2      	cmp	sl, r4
 8008826:	db19      	blt.n	800885c <_strtol_l.constprop.0+0xc0>
 8008828:	fb06 4603 	mla	r6, r6, r3, r4
 800882c:	f04f 0e01 	mov.w	lr, #1
 8008830:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008834:	e7e8      	b.n	8008808 <_strtol_l.constprop.0+0x6c>
 8008836:	2c2b      	cmp	r4, #43	; 0x2b
 8008838:	bf04      	itt	eq
 800883a:	782c      	ldrbeq	r4, [r5, #0]
 800883c:	1cb5      	addeq	r5, r6, #2
 800883e:	e7ca      	b.n	80087d6 <_strtol_l.constprop.0+0x3a>
 8008840:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008844:	f1bc 0f19 	cmp.w	ip, #25
 8008848:	d801      	bhi.n	800884e <_strtol_l.constprop.0+0xb2>
 800884a:	3c37      	subs	r4, #55	; 0x37
 800884c:	e7e2      	b.n	8008814 <_strtol_l.constprop.0+0x78>
 800884e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008852:	f1bc 0f19 	cmp.w	ip, #25
 8008856:	d804      	bhi.n	8008862 <_strtol_l.constprop.0+0xc6>
 8008858:	3c57      	subs	r4, #87	; 0x57
 800885a:	e7db      	b.n	8008814 <_strtol_l.constprop.0+0x78>
 800885c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8008860:	e7e6      	b.n	8008830 <_strtol_l.constprop.0+0x94>
 8008862:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8008866:	d105      	bne.n	8008874 <_strtol_l.constprop.0+0xd8>
 8008868:	2322      	movs	r3, #34	; 0x22
 800886a:	6003      	str	r3, [r0, #0]
 800886c:	4646      	mov	r6, r8
 800886e:	b942      	cbnz	r2, 8008882 <_strtol_l.constprop.0+0xe6>
 8008870:	4630      	mov	r0, r6
 8008872:	e79e      	b.n	80087b2 <_strtol_l.constprop.0+0x16>
 8008874:	b107      	cbz	r7, 8008878 <_strtol_l.constprop.0+0xdc>
 8008876:	4276      	negs	r6, r6
 8008878:	2a00      	cmp	r2, #0
 800887a:	d0f9      	beq.n	8008870 <_strtol_l.constprop.0+0xd4>
 800887c:	f1be 0f00 	cmp.w	lr, #0
 8008880:	d000      	beq.n	8008884 <_strtol_l.constprop.0+0xe8>
 8008882:	1e69      	subs	r1, r5, #1
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	e7f3      	b.n	8008870 <_strtol_l.constprop.0+0xd4>
 8008888:	2430      	movs	r4, #48	; 0x30
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1b1      	bne.n	80087f2 <_strtol_l.constprop.0+0x56>
 800888e:	2308      	movs	r3, #8
 8008890:	e7af      	b.n	80087f2 <_strtol_l.constprop.0+0x56>
 8008892:	2c30      	cmp	r4, #48	; 0x30
 8008894:	d0a5      	beq.n	80087e2 <_strtol_l.constprop.0+0x46>
 8008896:	230a      	movs	r3, #10
 8008898:	e7ab      	b.n	80087f2 <_strtol_l.constprop.0+0x56>
 800889a:	bf00      	nop
 800889c:	0800d369 	.word	0x0800d369

080088a0 <_strtol_r>:
 80088a0:	f7ff bf7c 	b.w	800879c <_strtol_l.constprop.0>

080088a4 <_fwalk_sglue>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	4607      	mov	r7, r0
 80088aa:	4688      	mov	r8, r1
 80088ac:	4614      	mov	r4, r2
 80088ae:	2600      	movs	r6, #0
 80088b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088b4:	f1b9 0901 	subs.w	r9, r9, #1
 80088b8:	d505      	bpl.n	80088c6 <_fwalk_sglue+0x22>
 80088ba:	6824      	ldr	r4, [r4, #0]
 80088bc:	2c00      	cmp	r4, #0
 80088be:	d1f7      	bne.n	80088b0 <_fwalk_sglue+0xc>
 80088c0:	4630      	mov	r0, r6
 80088c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d907      	bls.n	80088dc <_fwalk_sglue+0x38>
 80088cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088d0:	3301      	adds	r3, #1
 80088d2:	d003      	beq.n	80088dc <_fwalk_sglue+0x38>
 80088d4:	4629      	mov	r1, r5
 80088d6:	4638      	mov	r0, r7
 80088d8:	47c0      	blx	r8
 80088da:	4306      	orrs	r6, r0
 80088dc:	3568      	adds	r5, #104	; 0x68
 80088de:	e7e9      	b.n	80088b4 <_fwalk_sglue+0x10>

080088e0 <_vsniprintf_r>:
 80088e0:	b530      	push	{r4, r5, lr}
 80088e2:	4614      	mov	r4, r2
 80088e4:	2c00      	cmp	r4, #0
 80088e6:	b09b      	sub	sp, #108	; 0x6c
 80088e8:	4605      	mov	r5, r0
 80088ea:	461a      	mov	r2, r3
 80088ec:	da05      	bge.n	80088fa <_vsniprintf_r+0x1a>
 80088ee:	238b      	movs	r3, #139	; 0x8b
 80088f0:	6003      	str	r3, [r0, #0]
 80088f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f6:	b01b      	add	sp, #108	; 0x6c
 80088f8:	bd30      	pop	{r4, r5, pc}
 80088fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008902:	bf14      	ite	ne
 8008904:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008908:	4623      	moveq	r3, r4
 800890a:	9302      	str	r3, [sp, #8]
 800890c:	9305      	str	r3, [sp, #20]
 800890e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008912:	9100      	str	r1, [sp, #0]
 8008914:	9104      	str	r1, [sp, #16]
 8008916:	f8ad 300e 	strh.w	r3, [sp, #14]
 800891a:	4669      	mov	r1, sp
 800891c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800891e:	f001 fb0b 	bl	8009f38 <_svfiprintf_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	bfbc      	itt	lt
 8008926:	238b      	movlt	r3, #139	; 0x8b
 8008928:	602b      	strlt	r3, [r5, #0]
 800892a:	2c00      	cmp	r4, #0
 800892c:	d0e3      	beq.n	80088f6 <_vsniprintf_r+0x16>
 800892e:	9b00      	ldr	r3, [sp, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	e7df      	b.n	80088f6 <_vsniprintf_r+0x16>
	...

08008938 <vsniprintf>:
 8008938:	b507      	push	{r0, r1, r2, lr}
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	4613      	mov	r3, r2
 800893e:	460a      	mov	r2, r1
 8008940:	4601      	mov	r1, r0
 8008942:	4803      	ldr	r0, [pc, #12]	; (8008950 <vsniprintf+0x18>)
 8008944:	6800      	ldr	r0, [r0, #0]
 8008946:	f7ff ffcb 	bl	80088e0 <_vsniprintf_r>
 800894a:	b003      	add	sp, #12
 800894c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008950:	200001fc 	.word	0x200001fc

08008954 <_puts_r>:
 8008954:	6a03      	ldr	r3, [r0, #32]
 8008956:	b570      	push	{r4, r5, r6, lr}
 8008958:	6884      	ldr	r4, [r0, #8]
 800895a:	4605      	mov	r5, r0
 800895c:	460e      	mov	r6, r1
 800895e:	b90b      	cbnz	r3, 8008964 <_puts_r+0x10>
 8008960:	f7ff f8e4 	bl	8007b2c <__sinit>
 8008964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008966:	07db      	lsls	r3, r3, #31
 8008968:	d405      	bmi.n	8008976 <_puts_r+0x22>
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	0598      	lsls	r0, r3, #22
 800896e:	d402      	bmi.n	8008976 <_puts_r+0x22>
 8008970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008972:	f000 f894 	bl	8008a9e <__retarget_lock_acquire_recursive>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	0719      	lsls	r1, r3, #28
 800897a:	d513      	bpl.n	80089a4 <_puts_r+0x50>
 800897c:	6923      	ldr	r3, [r4, #16]
 800897e:	b18b      	cbz	r3, 80089a4 <_puts_r+0x50>
 8008980:	3e01      	subs	r6, #1
 8008982:	68a3      	ldr	r3, [r4, #8]
 8008984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008988:	3b01      	subs	r3, #1
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	b9e9      	cbnz	r1, 80089ca <_puts_r+0x76>
 800898e:	2b00      	cmp	r3, #0
 8008990:	da2e      	bge.n	80089f0 <_puts_r+0x9c>
 8008992:	4622      	mov	r2, r4
 8008994:	210a      	movs	r1, #10
 8008996:	4628      	mov	r0, r5
 8008998:	f002 fa5f 	bl	800ae5a <__swbuf_r>
 800899c:	3001      	adds	r0, #1
 800899e:	d007      	beq.n	80089b0 <_puts_r+0x5c>
 80089a0:	250a      	movs	r5, #10
 80089a2:	e007      	b.n	80089b4 <_puts_r+0x60>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f002 fa94 	bl	800aed4 <__swsetup_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d0e7      	beq.n	8008980 <_puts_r+0x2c>
 80089b0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80089b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b6:	07da      	lsls	r2, r3, #31
 80089b8:	d405      	bmi.n	80089c6 <_puts_r+0x72>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	059b      	lsls	r3, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_puts_r+0x72>
 80089c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c2:	f000 f86d 	bl	8008aa0 <__retarget_lock_release_recursive>
 80089c6:	4628      	mov	r0, r5
 80089c8:	bd70      	pop	{r4, r5, r6, pc}
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da04      	bge.n	80089d8 <_puts_r+0x84>
 80089ce:	69a2      	ldr	r2, [r4, #24]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	dc06      	bgt.n	80089e2 <_puts_r+0x8e>
 80089d4:	290a      	cmp	r1, #10
 80089d6:	d004      	beq.n	80089e2 <_puts_r+0x8e>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	1c5a      	adds	r2, r3, #1
 80089dc:	6022      	str	r2, [r4, #0]
 80089de:	7019      	strb	r1, [r3, #0]
 80089e0:	e7cf      	b.n	8008982 <_puts_r+0x2e>
 80089e2:	4622      	mov	r2, r4
 80089e4:	4628      	mov	r0, r5
 80089e6:	f002 fa38 	bl	800ae5a <__swbuf_r>
 80089ea:	3001      	adds	r0, #1
 80089ec:	d1c9      	bne.n	8008982 <_puts_r+0x2e>
 80089ee:	e7df      	b.n	80089b0 <_puts_r+0x5c>
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	250a      	movs	r5, #10
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	6022      	str	r2, [r4, #0]
 80089f8:	701d      	strb	r5, [r3, #0]
 80089fa:	e7db      	b.n	80089b4 <_puts_r+0x60>

080089fc <puts>:
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <puts+0xc>)
 80089fe:	4601      	mov	r1, r0
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	f7ff bfa7 	b.w	8008954 <_puts_r>
 8008a06:	bf00      	nop
 8008a08:	200001fc 	.word	0x200001fc

08008a0c <strncmp>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	b16a      	cbz	r2, 8008a2c <strncmp+0x20>
 8008a10:	3901      	subs	r1, #1
 8008a12:	1884      	adds	r4, r0, r2
 8008a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a18:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d103      	bne.n	8008a28 <strncmp+0x1c>
 8008a20:	42a0      	cmp	r0, r4
 8008a22:	d001      	beq.n	8008a28 <strncmp+0x1c>
 8008a24:	2a00      	cmp	r2, #0
 8008a26:	d1f5      	bne.n	8008a14 <strncmp+0x8>
 8008a28:	1ad0      	subs	r0, r2, r3
 8008a2a:	bd10      	pop	{r4, pc}
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	e7fc      	b.n	8008a2a <strncmp+0x1e>

08008a30 <memset>:
 8008a30:	4402      	add	r2, r0
 8008a32:	4603      	mov	r3, r0
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d100      	bne.n	8008a3a <memset+0xa>
 8008a38:	4770      	bx	lr
 8008a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a3e:	e7f9      	b.n	8008a34 <memset+0x4>

08008a40 <_localeconv_r>:
 8008a40:	4800      	ldr	r0, [pc, #0]	; (8008a44 <_localeconv_r+0x4>)
 8008a42:	4770      	bx	lr
 8008a44:	20000134 	.word	0x20000134

08008a48 <__errno>:
 8008a48:	4b01      	ldr	r3, [pc, #4]	; (8008a50 <__errno+0x8>)
 8008a4a:	6818      	ldr	r0, [r3, #0]
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	200001fc 	.word	0x200001fc

08008a54 <__libc_init_array>:
 8008a54:	b570      	push	{r4, r5, r6, lr}
 8008a56:	4d0d      	ldr	r5, [pc, #52]	; (8008a8c <__libc_init_array+0x38>)
 8008a58:	4c0d      	ldr	r4, [pc, #52]	; (8008a90 <__libc_init_array+0x3c>)
 8008a5a:	1b64      	subs	r4, r4, r5
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	2600      	movs	r6, #0
 8008a60:	42a6      	cmp	r6, r4
 8008a62:	d109      	bne.n	8008a78 <__libc_init_array+0x24>
 8008a64:	4d0b      	ldr	r5, [pc, #44]	; (8008a94 <__libc_init_array+0x40>)
 8008a66:	4c0c      	ldr	r4, [pc, #48]	; (8008a98 <__libc_init_array+0x44>)
 8008a68:	f003 fcee 	bl	800c448 <_init>
 8008a6c:	1b64      	subs	r4, r4, r5
 8008a6e:	10a4      	asrs	r4, r4, #2
 8008a70:	2600      	movs	r6, #0
 8008a72:	42a6      	cmp	r6, r4
 8008a74:	d105      	bne.n	8008a82 <__libc_init_array+0x2e>
 8008a76:	bd70      	pop	{r4, r5, r6, pc}
 8008a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a7c:	4798      	blx	r3
 8008a7e:	3601      	adds	r6, #1
 8008a80:	e7ee      	b.n	8008a60 <__libc_init_array+0xc>
 8008a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a86:	4798      	blx	r3
 8008a88:	3601      	adds	r6, #1
 8008a8a:	e7f2      	b.n	8008a72 <__libc_init_array+0x1e>
 8008a8c:	0800d730 	.word	0x0800d730
 8008a90:	0800d730 	.word	0x0800d730
 8008a94:	0800d730 	.word	0x0800d730
 8008a98:	0800d734 	.word	0x0800d734

08008a9c <__retarget_lock_init_recursive>:
 8008a9c:	4770      	bx	lr

08008a9e <__retarget_lock_acquire_recursive>:
 8008a9e:	4770      	bx	lr

08008aa0 <__retarget_lock_release_recursive>:
 8008aa0:	4770      	bx	lr

08008aa2 <memcpy>:
 8008aa2:	440a      	add	r2, r1
 8008aa4:	4291      	cmp	r1, r2
 8008aa6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008aaa:	d100      	bne.n	8008aae <memcpy+0xc>
 8008aac:	4770      	bx	lr
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ab4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab8:	4291      	cmp	r1, r2
 8008aba:	d1f9      	bne.n	8008ab0 <memcpy+0xe>
 8008abc:	bd10      	pop	{r4, pc}
	...

08008ac0 <nan>:
 8008ac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ac8 <nan+0x8>
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	7ff80000 	.word	0x7ff80000

08008ad0 <nanf>:
 8008ad0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008ad8 <nanf+0x8>
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	7fc00000 	.word	0x7fc00000

08008adc <quorem>:
 8008adc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	6903      	ldr	r3, [r0, #16]
 8008ae2:	690c      	ldr	r4, [r1, #16]
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	db7e      	blt.n	8008be8 <quorem+0x10c>
 8008aea:	3c01      	subs	r4, #1
 8008aec:	f101 0814 	add.w	r8, r1, #20
 8008af0:	f100 0514 	add.w	r5, r0, #20
 8008af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b02:	3301      	adds	r3, #1
 8008b04:	429a      	cmp	r2, r3
 8008b06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b12:	d331      	bcc.n	8008b78 <quorem+0x9c>
 8008b14:	f04f 0e00 	mov.w	lr, #0
 8008b18:	4640      	mov	r0, r8
 8008b1a:	46ac      	mov	ip, r5
 8008b1c:	46f2      	mov	sl, lr
 8008b1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b22:	b293      	uxth	r3, r2
 8008b24:	fb06 e303 	mla	r3, r6, r3, lr
 8008b28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b2c:	0c1a      	lsrs	r2, r3, #16
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	ebaa 0303 	sub.w	r3, sl, r3
 8008b34:	f8dc a000 	ldr.w	sl, [ip]
 8008b38:	fa13 f38a 	uxtah	r3, r3, sl
 8008b3c:	fb06 220e 	mla	r2, r6, lr, r2
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b48:	b292      	uxth	r2, r2
 8008b4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b52:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b56:	4581      	cmp	r9, r0
 8008b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b5c:	f84c 3b04 	str.w	r3, [ip], #4
 8008b60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b64:	d2db      	bcs.n	8008b1e <quorem+0x42>
 8008b66:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b6a:	b92b      	cbnz	r3, 8008b78 <quorem+0x9c>
 8008b6c:	9b01      	ldr	r3, [sp, #4]
 8008b6e:	3b04      	subs	r3, #4
 8008b70:	429d      	cmp	r5, r3
 8008b72:	461a      	mov	r2, r3
 8008b74:	d32c      	bcc.n	8008bd0 <quorem+0xf4>
 8008b76:	613c      	str	r4, [r7, #16]
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f001 ff15 	bl	800a9a8 <__mcmp>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	db22      	blt.n	8008bc8 <quorem+0xec>
 8008b82:	3601      	adds	r6, #1
 8008b84:	4629      	mov	r1, r5
 8008b86:	2000      	movs	r0, #0
 8008b88:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b8c:	f8d1 c000 	ldr.w	ip, [r1]
 8008b90:	b293      	uxth	r3, r2
 8008b92:	1ac3      	subs	r3, r0, r3
 8008b94:	0c12      	lsrs	r2, r2, #16
 8008b96:	fa13 f38c 	uxtah	r3, r3, ip
 8008b9a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ba8:	45c1      	cmp	r9, r8
 8008baa:	f841 3b04 	str.w	r3, [r1], #4
 8008bae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bb2:	d2e9      	bcs.n	8008b88 <quorem+0xac>
 8008bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bbc:	b922      	cbnz	r2, 8008bc8 <quorem+0xec>
 8008bbe:	3b04      	subs	r3, #4
 8008bc0:	429d      	cmp	r5, r3
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	d30a      	bcc.n	8008bdc <quorem+0x100>
 8008bc6:	613c      	str	r4, [r7, #16]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	b003      	add	sp, #12
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	6812      	ldr	r2, [r2, #0]
 8008bd2:	3b04      	subs	r3, #4
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	d1ce      	bne.n	8008b76 <quorem+0x9a>
 8008bd8:	3c01      	subs	r4, #1
 8008bda:	e7c9      	b.n	8008b70 <quorem+0x94>
 8008bdc:	6812      	ldr	r2, [r2, #0]
 8008bde:	3b04      	subs	r3, #4
 8008be0:	2a00      	cmp	r2, #0
 8008be2:	d1f0      	bne.n	8008bc6 <quorem+0xea>
 8008be4:	3c01      	subs	r4, #1
 8008be6:	e7eb      	b.n	8008bc0 <quorem+0xe4>
 8008be8:	2000      	movs	r0, #0
 8008bea:	e7ee      	b.n	8008bca <quorem+0xee>
 8008bec:	0000      	movs	r0, r0
	...

08008bf0 <_dtoa_r>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ed2d 8b04 	vpush	{d8-d9}
 8008bf8:	69c5      	ldr	r5, [r0, #28]
 8008bfa:	b093      	sub	sp, #76	; 0x4c
 8008bfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c00:	ec57 6b10 	vmov	r6, r7, d0
 8008c04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c08:	9107      	str	r1, [sp, #28]
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8008c0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008c10:	b975      	cbnz	r5, 8008c30 <_dtoa_r+0x40>
 8008c12:	2010      	movs	r0, #16
 8008c14:	f001 fa8e 	bl	800a134 <malloc>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	61e0      	str	r0, [r4, #28]
 8008c1c:	b920      	cbnz	r0, 8008c28 <_dtoa_r+0x38>
 8008c1e:	4bae      	ldr	r3, [pc, #696]	; (8008ed8 <_dtoa_r+0x2e8>)
 8008c20:	21ef      	movs	r1, #239	; 0xef
 8008c22:	48ae      	ldr	r0, [pc, #696]	; (8008edc <_dtoa_r+0x2ec>)
 8008c24:	f002 fab0 	bl	800b188 <__assert_func>
 8008c28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c2c:	6005      	str	r5, [r0, #0]
 8008c2e:	60c5      	str	r5, [r0, #12]
 8008c30:	69e3      	ldr	r3, [r4, #28]
 8008c32:	6819      	ldr	r1, [r3, #0]
 8008c34:	b151      	cbz	r1, 8008c4c <_dtoa_r+0x5c>
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	604a      	str	r2, [r1, #4]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4093      	lsls	r3, r2
 8008c3e:	608b      	str	r3, [r1, #8]
 8008c40:	4620      	mov	r0, r4
 8008c42:	f001 fc2b 	bl	800a49c <_Bfree>
 8008c46:	69e3      	ldr	r3, [r4, #28]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	1e3b      	subs	r3, r7, #0
 8008c4e:	bfbb      	ittet	lt
 8008c50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c54:	9303      	strlt	r3, [sp, #12]
 8008c56:	2300      	movge	r3, #0
 8008c58:	2201      	movlt	r2, #1
 8008c5a:	bfac      	ite	ge
 8008c5c:	f8c8 3000 	strge.w	r3, [r8]
 8008c60:	f8c8 2000 	strlt.w	r2, [r8]
 8008c64:	4b9e      	ldr	r3, [pc, #632]	; (8008ee0 <_dtoa_r+0x2f0>)
 8008c66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008c6a:	ea33 0308 	bics.w	r3, r3, r8
 8008c6e:	d11b      	bne.n	8008ca8 <_dtoa_r+0xb8>
 8008c70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c72:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008c7c:	4333      	orrs	r3, r6
 8008c7e:	f000 8593 	beq.w	80097a8 <_dtoa_r+0xbb8>
 8008c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c84:	b963      	cbnz	r3, 8008ca0 <_dtoa_r+0xb0>
 8008c86:	4b97      	ldr	r3, [pc, #604]	; (8008ee4 <_dtoa_r+0x2f4>)
 8008c88:	e027      	b.n	8008cda <_dtoa_r+0xea>
 8008c8a:	4b97      	ldr	r3, [pc, #604]	; (8008ee8 <_dtoa_r+0x2f8>)
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	9800      	ldr	r0, [sp, #0]
 8008c96:	b013      	add	sp, #76	; 0x4c
 8008c98:	ecbd 8b04 	vpop	{d8-d9}
 8008c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca0:	4b90      	ldr	r3, [pc, #576]	; (8008ee4 <_dtoa_r+0x2f4>)
 8008ca2:	9300      	str	r3, [sp, #0]
 8008ca4:	3303      	adds	r3, #3
 8008ca6:	e7f3      	b.n	8008c90 <_dtoa_r+0xa0>
 8008ca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cac:	2200      	movs	r2, #0
 8008cae:	ec51 0b17 	vmov	r0, r1, d7
 8008cb2:	eeb0 8a47 	vmov.f32	s16, s14
 8008cb6:	eef0 8a67 	vmov.f32	s17, s15
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f7f7 ff24 	bl	8000b08 <__aeabi_dcmpeq>
 8008cc0:	4681      	mov	r9, r0
 8008cc2:	b160      	cbz	r0, 8008cde <_dtoa_r+0xee>
 8008cc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8568 	beq.w	80097a2 <_dtoa_r+0xbb2>
 8008cd2:	4b86      	ldr	r3, [pc, #536]	; (8008eec <_dtoa_r+0x2fc>)
 8008cd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	e7da      	b.n	8008c94 <_dtoa_r+0xa4>
 8008cde:	aa10      	add	r2, sp, #64	; 0x40
 8008ce0:	a911      	add	r1, sp, #68	; 0x44
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ce8:	eef0 0a68 	vmov.f32	s1, s17
 8008cec:	f001 ff72 	bl	800abd4 <__d2b>
 8008cf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	d07f      	beq.n	8008dfa <_dtoa_r+0x20a>
 8008cfa:	ee18 3a90 	vmov	r3, s17
 8008cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d06:	ec51 0b18 	vmov	r0, r1, d8
 8008d0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008d16:	4619      	mov	r1, r3
 8008d18:	2200      	movs	r2, #0
 8008d1a:	4b75      	ldr	r3, [pc, #468]	; (8008ef0 <_dtoa_r+0x300>)
 8008d1c:	f7f7 fad4 	bl	80002c8 <__aeabi_dsub>
 8008d20:	a367      	add	r3, pc, #412	; (adr r3, 8008ec0 <_dtoa_r+0x2d0>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fc87 	bl	8000638 <__aeabi_dmul>
 8008d2a:	a367      	add	r3, pc, #412	; (adr r3, 8008ec8 <_dtoa_r+0x2d8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 facc 	bl	80002cc <__adddf3>
 8008d34:	4606      	mov	r6, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	460f      	mov	r7, r1
 8008d3a:	f7f7 fc13 	bl	8000564 <__aeabi_i2d>
 8008d3e:	a364      	add	r3, pc, #400	; (adr r3, 8008ed0 <_dtoa_r+0x2e0>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fc78 	bl	8000638 <__aeabi_dmul>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4630      	mov	r0, r6
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fabc 	bl	80002cc <__adddf3>
 8008d54:	4606      	mov	r6, r0
 8008d56:	460f      	mov	r7, r1
 8008d58:	f7f7 ff1e 	bl	8000b98 <__aeabi_d2iz>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	4683      	mov	fp, r0
 8008d60:	2300      	movs	r3, #0
 8008d62:	4630      	mov	r0, r6
 8008d64:	4639      	mov	r1, r7
 8008d66:	f7f7 fed9 	bl	8000b1c <__aeabi_dcmplt>
 8008d6a:	b148      	cbz	r0, 8008d80 <_dtoa_r+0x190>
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	f7f7 fbf9 	bl	8000564 <__aeabi_i2d>
 8008d72:	4632      	mov	r2, r6
 8008d74:	463b      	mov	r3, r7
 8008d76:	f7f7 fec7 	bl	8000b08 <__aeabi_dcmpeq>
 8008d7a:	b908      	cbnz	r0, 8008d80 <_dtoa_r+0x190>
 8008d7c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008d80:	f1bb 0f16 	cmp.w	fp, #22
 8008d84:	d857      	bhi.n	8008e36 <_dtoa_r+0x246>
 8008d86:	4b5b      	ldr	r3, [pc, #364]	; (8008ef4 <_dtoa_r+0x304>)
 8008d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	ec51 0b18 	vmov	r0, r1, d8
 8008d94:	f7f7 fec2 	bl	8000b1c <__aeabi_dcmplt>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d04e      	beq.n	8008e3a <_dtoa_r+0x24a>
 8008d9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008da0:	2300      	movs	r3, #0
 8008da2:	930c      	str	r3, [sp, #48]	; 0x30
 8008da4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008da6:	1b5b      	subs	r3, r3, r5
 8008da8:	1e5a      	subs	r2, r3, #1
 8008daa:	bf45      	ittet	mi
 8008dac:	f1c3 0301 	rsbmi	r3, r3, #1
 8008db0:	9305      	strmi	r3, [sp, #20]
 8008db2:	2300      	movpl	r3, #0
 8008db4:	2300      	movmi	r3, #0
 8008db6:	9206      	str	r2, [sp, #24]
 8008db8:	bf54      	ite	pl
 8008dba:	9305      	strpl	r3, [sp, #20]
 8008dbc:	9306      	strmi	r3, [sp, #24]
 8008dbe:	f1bb 0f00 	cmp.w	fp, #0
 8008dc2:	db3c      	blt.n	8008e3e <_dtoa_r+0x24e>
 8008dc4:	9b06      	ldr	r3, [sp, #24]
 8008dc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008dca:	445b      	add	r3, fp
 8008dcc:	9306      	str	r3, [sp, #24]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9308      	str	r3, [sp, #32]
 8008dd2:	9b07      	ldr	r3, [sp, #28]
 8008dd4:	2b09      	cmp	r3, #9
 8008dd6:	d868      	bhi.n	8008eaa <_dtoa_r+0x2ba>
 8008dd8:	2b05      	cmp	r3, #5
 8008dda:	bfc4      	itt	gt
 8008ddc:	3b04      	subgt	r3, #4
 8008dde:	9307      	strgt	r3, [sp, #28]
 8008de0:	9b07      	ldr	r3, [sp, #28]
 8008de2:	f1a3 0302 	sub.w	r3, r3, #2
 8008de6:	bfcc      	ite	gt
 8008de8:	2500      	movgt	r5, #0
 8008dea:	2501      	movle	r5, #1
 8008dec:	2b03      	cmp	r3, #3
 8008dee:	f200 8085 	bhi.w	8008efc <_dtoa_r+0x30c>
 8008df2:	e8df f003 	tbb	[pc, r3]
 8008df6:	3b2e      	.short	0x3b2e
 8008df8:	5839      	.short	0x5839
 8008dfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dfe:	441d      	add	r5, r3
 8008e00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	bfc1      	itttt	gt
 8008e08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008e14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008e18:	bfd6      	itet	le
 8008e1a:	f1c3 0320 	rsble	r3, r3, #32
 8008e1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e22:	fa06 f003 	lslle.w	r0, r6, r3
 8008e26:	f7f7 fb8d 	bl	8000544 <__aeabi_ui2d>
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e30:	3d01      	subs	r5, #1
 8008e32:	920e      	str	r2, [sp, #56]	; 0x38
 8008e34:	e76f      	b.n	8008d16 <_dtoa_r+0x126>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e7b3      	b.n	8008da2 <_dtoa_r+0x1b2>
 8008e3a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e3c:	e7b2      	b.n	8008da4 <_dtoa_r+0x1b4>
 8008e3e:	9b05      	ldr	r3, [sp, #20]
 8008e40:	eba3 030b 	sub.w	r3, r3, fp
 8008e44:	9305      	str	r3, [sp, #20]
 8008e46:	f1cb 0300 	rsb	r3, fp, #0
 8008e4a:	9308      	str	r3, [sp, #32]
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e50:	e7bf      	b.n	8008dd2 <_dtoa_r+0x1e2>
 8008e52:	2300      	movs	r3, #0
 8008e54:	9309      	str	r3, [sp, #36]	; 0x24
 8008e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	dc52      	bgt.n	8008f02 <_dtoa_r+0x312>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	9304      	str	r3, [sp, #16]
 8008e62:	461a      	mov	r2, r3
 8008e64:	920a      	str	r2, [sp, #40]	; 0x28
 8008e66:	e00b      	b.n	8008e80 <_dtoa_r+0x290>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e7f3      	b.n	8008e54 <_dtoa_r+0x264>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e72:	445b      	add	r3, fp
 8008e74:	9301      	str	r3, [sp, #4]
 8008e76:	3301      	adds	r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	bfb8      	it	lt
 8008e7e:	2301      	movlt	r3, #1
 8008e80:	69e0      	ldr	r0, [r4, #28]
 8008e82:	2100      	movs	r1, #0
 8008e84:	2204      	movs	r2, #4
 8008e86:	f102 0614 	add.w	r6, r2, #20
 8008e8a:	429e      	cmp	r6, r3
 8008e8c:	d93d      	bls.n	8008f0a <_dtoa_r+0x31a>
 8008e8e:	6041      	str	r1, [r0, #4]
 8008e90:	4620      	mov	r0, r4
 8008e92:	f001 fac3 	bl	800a41c <_Balloc>
 8008e96:	9000      	str	r0, [sp, #0]
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d139      	bne.n	8008f10 <_dtoa_r+0x320>
 8008e9c:	4b16      	ldr	r3, [pc, #88]	; (8008ef8 <_dtoa_r+0x308>)
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	f240 11af 	movw	r1, #431	; 0x1af
 8008ea4:	e6bd      	b.n	8008c22 <_dtoa_r+0x32>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e7e1      	b.n	8008e6e <_dtoa_r+0x27e>
 8008eaa:	2501      	movs	r5, #1
 8008eac:	2300      	movs	r3, #0
 8008eae:	9307      	str	r3, [sp, #28]
 8008eb0:	9509      	str	r5, [sp, #36]	; 0x24
 8008eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2312      	movs	r3, #18
 8008ebe:	e7d1      	b.n	8008e64 <_dtoa_r+0x274>
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800d476 	.word	0x0800d476
 8008edc:	0800d48d 	.word	0x0800d48d
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800d472 	.word	0x0800d472
 8008ee8:	0800d469 	.word	0x0800d469
 8008eec:	0800d2e5 	.word	0x0800d2e5
 8008ef0:	3ff80000 	.word	0x3ff80000
 8008ef4:	0800d5e8 	.word	0x0800d5e8
 8008ef8:	0800d4e5 	.word	0x0800d4e5
 8008efc:	2301      	movs	r3, #1
 8008efe:	9309      	str	r3, [sp, #36]	; 0x24
 8008f00:	e7d7      	b.n	8008eb2 <_dtoa_r+0x2c2>
 8008f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f04:	9301      	str	r3, [sp, #4]
 8008f06:	9304      	str	r3, [sp, #16]
 8008f08:	e7ba      	b.n	8008e80 <_dtoa_r+0x290>
 8008f0a:	3101      	adds	r1, #1
 8008f0c:	0052      	lsls	r2, r2, #1
 8008f0e:	e7ba      	b.n	8008e86 <_dtoa_r+0x296>
 8008f10:	69e3      	ldr	r3, [r4, #28]
 8008f12:	9a00      	ldr	r2, [sp, #0]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	9b04      	ldr	r3, [sp, #16]
 8008f18:	2b0e      	cmp	r3, #14
 8008f1a:	f200 80a8 	bhi.w	800906e <_dtoa_r+0x47e>
 8008f1e:	2d00      	cmp	r5, #0
 8008f20:	f000 80a5 	beq.w	800906e <_dtoa_r+0x47e>
 8008f24:	f1bb 0f00 	cmp.w	fp, #0
 8008f28:	dd38      	ble.n	8008f9c <_dtoa_r+0x3ac>
 8008f2a:	4bc0      	ldr	r3, [pc, #768]	; (800922c <_dtoa_r+0x63c>)
 8008f2c:	f00b 020f 	and.w	r2, fp, #15
 8008f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008f3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008f40:	d019      	beq.n	8008f76 <_dtoa_r+0x386>
 8008f42:	4bbb      	ldr	r3, [pc, #748]	; (8009230 <_dtoa_r+0x640>)
 8008f44:	ec51 0b18 	vmov	r0, r1, d8
 8008f48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f4c:	f7f7 fc9e 	bl	800088c <__aeabi_ddiv>
 8008f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f54:	f008 080f 	and.w	r8, r8, #15
 8008f58:	2503      	movs	r5, #3
 8008f5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009230 <_dtoa_r+0x640>
 8008f5e:	f1b8 0f00 	cmp.w	r8, #0
 8008f62:	d10a      	bne.n	8008f7a <_dtoa_r+0x38a>
 8008f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f68:	4632      	mov	r2, r6
 8008f6a:	463b      	mov	r3, r7
 8008f6c:	f7f7 fc8e 	bl	800088c <__aeabi_ddiv>
 8008f70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f74:	e02b      	b.n	8008fce <_dtoa_r+0x3de>
 8008f76:	2502      	movs	r5, #2
 8008f78:	e7ef      	b.n	8008f5a <_dtoa_r+0x36a>
 8008f7a:	f018 0f01 	tst.w	r8, #1
 8008f7e:	d008      	beq.n	8008f92 <_dtoa_r+0x3a2>
 8008f80:	4630      	mov	r0, r6
 8008f82:	4639      	mov	r1, r7
 8008f84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f88:	f7f7 fb56 	bl	8000638 <__aeabi_dmul>
 8008f8c:	3501      	adds	r5, #1
 8008f8e:	4606      	mov	r6, r0
 8008f90:	460f      	mov	r7, r1
 8008f92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f96:	f109 0908 	add.w	r9, r9, #8
 8008f9a:	e7e0      	b.n	8008f5e <_dtoa_r+0x36e>
 8008f9c:	f000 809f 	beq.w	80090de <_dtoa_r+0x4ee>
 8008fa0:	f1cb 0600 	rsb	r6, fp, #0
 8008fa4:	4ba1      	ldr	r3, [pc, #644]	; (800922c <_dtoa_r+0x63c>)
 8008fa6:	4fa2      	ldr	r7, [pc, #648]	; (8009230 <_dtoa_r+0x640>)
 8008fa8:	f006 020f 	and.w	r2, r6, #15
 8008fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	ec51 0b18 	vmov	r0, r1, d8
 8008fb8:	f7f7 fb3e 	bl	8000638 <__aeabi_dmul>
 8008fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fc0:	1136      	asrs	r6, r6, #4
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	2502      	movs	r5, #2
 8008fc6:	2e00      	cmp	r6, #0
 8008fc8:	d17e      	bne.n	80090c8 <_dtoa_r+0x4d8>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1d0      	bne.n	8008f70 <_dtoa_r+0x380>
 8008fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8084 	beq.w	80090e2 <_dtoa_r+0x4f2>
 8008fda:	4b96      	ldr	r3, [pc, #600]	; (8009234 <_dtoa_r+0x644>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4640      	mov	r0, r8
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	f7f7 fd9b 	bl	8000b1c <__aeabi_dcmplt>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d07b      	beq.n	80090e2 <_dtoa_r+0x4f2>
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d078      	beq.n	80090e2 <_dtoa_r+0x4f2>
 8008ff0:	9b01      	ldr	r3, [sp, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	dd39      	ble.n	800906a <_dtoa_r+0x47a>
 8008ff6:	4b90      	ldr	r3, [pc, #576]	; (8009238 <_dtoa_r+0x648>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 fb1b 	bl	8000638 <__aeabi_dmul>
 8009002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009006:	9e01      	ldr	r6, [sp, #4]
 8009008:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800900c:	3501      	adds	r5, #1
 800900e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009012:	4628      	mov	r0, r5
 8009014:	f7f7 faa6 	bl	8000564 <__aeabi_i2d>
 8009018:	4642      	mov	r2, r8
 800901a:	464b      	mov	r3, r9
 800901c:	f7f7 fb0c 	bl	8000638 <__aeabi_dmul>
 8009020:	4b86      	ldr	r3, [pc, #536]	; (800923c <_dtoa_r+0x64c>)
 8009022:	2200      	movs	r2, #0
 8009024:	f7f7 f952 	bl	80002cc <__adddf3>
 8009028:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800902c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009030:	9303      	str	r3, [sp, #12]
 8009032:	2e00      	cmp	r6, #0
 8009034:	d158      	bne.n	80090e8 <_dtoa_r+0x4f8>
 8009036:	4b82      	ldr	r3, [pc, #520]	; (8009240 <_dtoa_r+0x650>)
 8009038:	2200      	movs	r2, #0
 800903a:	4640      	mov	r0, r8
 800903c:	4649      	mov	r1, r9
 800903e:	f7f7 f943 	bl	80002c8 <__aeabi_dsub>
 8009042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009046:	4680      	mov	r8, r0
 8009048:	4689      	mov	r9, r1
 800904a:	f7f7 fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800904e:	2800      	cmp	r0, #0
 8009050:	f040 8296 	bne.w	8009580 <_dtoa_r+0x990>
 8009054:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009058:	4640      	mov	r0, r8
 800905a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 fd5c 	bl	8000b1c <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 8289 	bne.w	800957c <_dtoa_r+0x98c>
 800906a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800906e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009070:	2b00      	cmp	r3, #0
 8009072:	f2c0 814e 	blt.w	8009312 <_dtoa_r+0x722>
 8009076:	f1bb 0f0e 	cmp.w	fp, #14
 800907a:	f300 814a 	bgt.w	8009312 <_dtoa_r+0x722>
 800907e:	4b6b      	ldr	r3, [pc, #428]	; (800922c <_dtoa_r+0x63c>)
 8009080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009084:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800908a:	2b00      	cmp	r3, #0
 800908c:	f280 80dc 	bge.w	8009248 <_dtoa_r+0x658>
 8009090:	9b04      	ldr	r3, [sp, #16]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f300 80d8 	bgt.w	8009248 <_dtoa_r+0x658>
 8009098:	f040 826f 	bne.w	800957a <_dtoa_r+0x98a>
 800909c:	4b68      	ldr	r3, [pc, #416]	; (8009240 <_dtoa_r+0x650>)
 800909e:	2200      	movs	r2, #0
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	f7f7 fac8 	bl	8000638 <__aeabi_dmul>
 80090a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090ac:	f7f7 fd4a 	bl	8000b44 <__aeabi_dcmpge>
 80090b0:	9e04      	ldr	r6, [sp, #16]
 80090b2:	4637      	mov	r7, r6
 80090b4:	2800      	cmp	r0, #0
 80090b6:	f040 8245 	bne.w	8009544 <_dtoa_r+0x954>
 80090ba:	9d00      	ldr	r5, [sp, #0]
 80090bc:	2331      	movs	r3, #49	; 0x31
 80090be:	f805 3b01 	strb.w	r3, [r5], #1
 80090c2:	f10b 0b01 	add.w	fp, fp, #1
 80090c6:	e241      	b.n	800954c <_dtoa_r+0x95c>
 80090c8:	07f2      	lsls	r2, r6, #31
 80090ca:	d505      	bpl.n	80090d8 <_dtoa_r+0x4e8>
 80090cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d0:	f7f7 fab2 	bl	8000638 <__aeabi_dmul>
 80090d4:	3501      	adds	r5, #1
 80090d6:	2301      	movs	r3, #1
 80090d8:	1076      	asrs	r6, r6, #1
 80090da:	3708      	adds	r7, #8
 80090dc:	e773      	b.n	8008fc6 <_dtoa_r+0x3d6>
 80090de:	2502      	movs	r5, #2
 80090e0:	e775      	b.n	8008fce <_dtoa_r+0x3de>
 80090e2:	9e04      	ldr	r6, [sp, #16]
 80090e4:	465f      	mov	r7, fp
 80090e6:	e792      	b.n	800900e <_dtoa_r+0x41e>
 80090e8:	9900      	ldr	r1, [sp, #0]
 80090ea:	4b50      	ldr	r3, [pc, #320]	; (800922c <_dtoa_r+0x63c>)
 80090ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f0:	4431      	add	r1, r6
 80090f2:	9102      	str	r1, [sp, #8]
 80090f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090f6:	eeb0 9a47 	vmov.f32	s18, s14
 80090fa:	eef0 9a67 	vmov.f32	s19, s15
 80090fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009106:	2900      	cmp	r1, #0
 8009108:	d044      	beq.n	8009194 <_dtoa_r+0x5a4>
 800910a:	494e      	ldr	r1, [pc, #312]	; (8009244 <_dtoa_r+0x654>)
 800910c:	2000      	movs	r0, #0
 800910e:	f7f7 fbbd 	bl	800088c <__aeabi_ddiv>
 8009112:	ec53 2b19 	vmov	r2, r3, d9
 8009116:	f7f7 f8d7 	bl	80002c8 <__aeabi_dsub>
 800911a:	9d00      	ldr	r5, [sp, #0]
 800911c:	ec41 0b19 	vmov	d9, r0, r1
 8009120:	4649      	mov	r1, r9
 8009122:	4640      	mov	r0, r8
 8009124:	f7f7 fd38 	bl	8000b98 <__aeabi_d2iz>
 8009128:	4606      	mov	r6, r0
 800912a:	f7f7 fa1b 	bl	8000564 <__aeabi_i2d>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 f8c7 	bl	80002c8 <__aeabi_dsub>
 800913a:	3630      	adds	r6, #48	; 0x30
 800913c:	f805 6b01 	strb.w	r6, [r5], #1
 8009140:	ec53 2b19 	vmov	r2, r3, d9
 8009144:	4680      	mov	r8, r0
 8009146:	4689      	mov	r9, r1
 8009148:	f7f7 fce8 	bl	8000b1c <__aeabi_dcmplt>
 800914c:	2800      	cmp	r0, #0
 800914e:	d164      	bne.n	800921a <_dtoa_r+0x62a>
 8009150:	4642      	mov	r2, r8
 8009152:	464b      	mov	r3, r9
 8009154:	4937      	ldr	r1, [pc, #220]	; (8009234 <_dtoa_r+0x644>)
 8009156:	2000      	movs	r0, #0
 8009158:	f7f7 f8b6 	bl	80002c8 <__aeabi_dsub>
 800915c:	ec53 2b19 	vmov	r2, r3, d9
 8009160:	f7f7 fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8009164:	2800      	cmp	r0, #0
 8009166:	f040 80b6 	bne.w	80092d6 <_dtoa_r+0x6e6>
 800916a:	9b02      	ldr	r3, [sp, #8]
 800916c:	429d      	cmp	r5, r3
 800916e:	f43f af7c 	beq.w	800906a <_dtoa_r+0x47a>
 8009172:	4b31      	ldr	r3, [pc, #196]	; (8009238 <_dtoa_r+0x648>)
 8009174:	ec51 0b19 	vmov	r0, r1, d9
 8009178:	2200      	movs	r2, #0
 800917a:	f7f7 fa5d 	bl	8000638 <__aeabi_dmul>
 800917e:	4b2e      	ldr	r3, [pc, #184]	; (8009238 <_dtoa_r+0x648>)
 8009180:	ec41 0b19 	vmov	d9, r0, r1
 8009184:	2200      	movs	r2, #0
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 fa55 	bl	8000638 <__aeabi_dmul>
 800918e:	4680      	mov	r8, r0
 8009190:	4689      	mov	r9, r1
 8009192:	e7c5      	b.n	8009120 <_dtoa_r+0x530>
 8009194:	ec51 0b17 	vmov	r0, r1, d7
 8009198:	f7f7 fa4e 	bl	8000638 <__aeabi_dmul>
 800919c:	9b02      	ldr	r3, [sp, #8]
 800919e:	9d00      	ldr	r5, [sp, #0]
 80091a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80091a2:	ec41 0b19 	vmov	d9, r0, r1
 80091a6:	4649      	mov	r1, r9
 80091a8:	4640      	mov	r0, r8
 80091aa:	f7f7 fcf5 	bl	8000b98 <__aeabi_d2iz>
 80091ae:	4606      	mov	r6, r0
 80091b0:	f7f7 f9d8 	bl	8000564 <__aeabi_i2d>
 80091b4:	3630      	adds	r6, #48	; 0x30
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	f7f7 f883 	bl	80002c8 <__aeabi_dsub>
 80091c2:	f805 6b01 	strb.w	r6, [r5], #1
 80091c6:	9b02      	ldr	r3, [sp, #8]
 80091c8:	429d      	cmp	r5, r3
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	f04f 0200 	mov.w	r2, #0
 80091d2:	d124      	bne.n	800921e <_dtoa_r+0x62e>
 80091d4:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <_dtoa_r+0x654>)
 80091d6:	ec51 0b19 	vmov	r0, r1, d9
 80091da:	f7f7 f877 	bl	80002cc <__adddf3>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	f7f7 fcb7 	bl	8000b58 <__aeabi_dcmpgt>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d173      	bne.n	80092d6 <_dtoa_r+0x6e6>
 80091ee:	ec53 2b19 	vmov	r2, r3, d9
 80091f2:	4914      	ldr	r1, [pc, #80]	; (8009244 <_dtoa_r+0x654>)
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 f867 	bl	80002c8 <__aeabi_dsub>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4640      	mov	r0, r8
 8009200:	4649      	mov	r1, r9
 8009202:	f7f7 fc8b 	bl	8000b1c <__aeabi_dcmplt>
 8009206:	2800      	cmp	r0, #0
 8009208:	f43f af2f 	beq.w	800906a <_dtoa_r+0x47a>
 800920c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800920e:	1e6b      	subs	r3, r5, #1
 8009210:	930f      	str	r3, [sp, #60]	; 0x3c
 8009212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009216:	2b30      	cmp	r3, #48	; 0x30
 8009218:	d0f8      	beq.n	800920c <_dtoa_r+0x61c>
 800921a:	46bb      	mov	fp, r7
 800921c:	e04a      	b.n	80092b4 <_dtoa_r+0x6c4>
 800921e:	4b06      	ldr	r3, [pc, #24]	; (8009238 <_dtoa_r+0x648>)
 8009220:	f7f7 fa0a 	bl	8000638 <__aeabi_dmul>
 8009224:	4680      	mov	r8, r0
 8009226:	4689      	mov	r9, r1
 8009228:	e7bd      	b.n	80091a6 <_dtoa_r+0x5b6>
 800922a:	bf00      	nop
 800922c:	0800d5e8 	.word	0x0800d5e8
 8009230:	0800d5c0 	.word	0x0800d5c0
 8009234:	3ff00000 	.word	0x3ff00000
 8009238:	40240000 	.word	0x40240000
 800923c:	401c0000 	.word	0x401c0000
 8009240:	40140000 	.word	0x40140000
 8009244:	3fe00000 	.word	0x3fe00000
 8009248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800924c:	9d00      	ldr	r5, [sp, #0]
 800924e:	4642      	mov	r2, r8
 8009250:	464b      	mov	r3, r9
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 fb19 	bl	800088c <__aeabi_ddiv>
 800925a:	f7f7 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800925e:	9001      	str	r0, [sp, #4]
 8009260:	f7f7 f980 	bl	8000564 <__aeabi_i2d>
 8009264:	4642      	mov	r2, r8
 8009266:	464b      	mov	r3, r9
 8009268:	f7f7 f9e6 	bl	8000638 <__aeabi_dmul>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4630      	mov	r0, r6
 8009272:	4639      	mov	r1, r7
 8009274:	f7f7 f828 	bl	80002c8 <__aeabi_dsub>
 8009278:	9e01      	ldr	r6, [sp, #4]
 800927a:	9f04      	ldr	r7, [sp, #16]
 800927c:	3630      	adds	r6, #48	; 0x30
 800927e:	f805 6b01 	strb.w	r6, [r5], #1
 8009282:	9e00      	ldr	r6, [sp, #0]
 8009284:	1bae      	subs	r6, r5, r6
 8009286:	42b7      	cmp	r7, r6
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	d134      	bne.n	80092f8 <_dtoa_r+0x708>
 800928e:	f7f7 f81d 	bl	80002cc <__adddf3>
 8009292:	4642      	mov	r2, r8
 8009294:	464b      	mov	r3, r9
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	f7f7 fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800929e:	b9c8      	cbnz	r0, 80092d4 <_dtoa_r+0x6e4>
 80092a0:	4642      	mov	r2, r8
 80092a2:	464b      	mov	r3, r9
 80092a4:	4630      	mov	r0, r6
 80092a6:	4639      	mov	r1, r7
 80092a8:	f7f7 fc2e 	bl	8000b08 <__aeabi_dcmpeq>
 80092ac:	b110      	cbz	r0, 80092b4 <_dtoa_r+0x6c4>
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	07db      	lsls	r3, r3, #31
 80092b2:	d40f      	bmi.n	80092d4 <_dtoa_r+0x6e4>
 80092b4:	4651      	mov	r1, sl
 80092b6:	4620      	mov	r0, r4
 80092b8:	f001 f8f0 	bl	800a49c <_Bfree>
 80092bc:	2300      	movs	r3, #0
 80092be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092c0:	702b      	strb	r3, [r5, #0]
 80092c2:	f10b 0301 	add.w	r3, fp, #1
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f43f ace2 	beq.w	8008c94 <_dtoa_r+0xa4>
 80092d0:	601d      	str	r5, [r3, #0]
 80092d2:	e4df      	b.n	8008c94 <_dtoa_r+0xa4>
 80092d4:	465f      	mov	r7, fp
 80092d6:	462b      	mov	r3, r5
 80092d8:	461d      	mov	r5, r3
 80092da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092de:	2a39      	cmp	r2, #57	; 0x39
 80092e0:	d106      	bne.n	80092f0 <_dtoa_r+0x700>
 80092e2:	9a00      	ldr	r2, [sp, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d1f7      	bne.n	80092d8 <_dtoa_r+0x6e8>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	2230      	movs	r2, #48	; 0x30
 80092ec:	3701      	adds	r7, #1
 80092ee:	700a      	strb	r2, [r1, #0]
 80092f0:	781a      	ldrb	r2, [r3, #0]
 80092f2:	3201      	adds	r2, #1
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e790      	b.n	800921a <_dtoa_r+0x62a>
 80092f8:	4ba3      	ldr	r3, [pc, #652]	; (8009588 <_dtoa_r+0x998>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	2200      	movs	r2, #0
 8009302:	2300      	movs	r3, #0
 8009304:	4606      	mov	r6, r0
 8009306:	460f      	mov	r7, r1
 8009308:	f7f7 fbfe 	bl	8000b08 <__aeabi_dcmpeq>
 800930c:	2800      	cmp	r0, #0
 800930e:	d09e      	beq.n	800924e <_dtoa_r+0x65e>
 8009310:	e7d0      	b.n	80092b4 <_dtoa_r+0x6c4>
 8009312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009314:	2a00      	cmp	r2, #0
 8009316:	f000 80ca 	beq.w	80094ae <_dtoa_r+0x8be>
 800931a:	9a07      	ldr	r2, [sp, #28]
 800931c:	2a01      	cmp	r2, #1
 800931e:	f300 80ad 	bgt.w	800947c <_dtoa_r+0x88c>
 8009322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009324:	2a00      	cmp	r2, #0
 8009326:	f000 80a5 	beq.w	8009474 <_dtoa_r+0x884>
 800932a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800932e:	9e08      	ldr	r6, [sp, #32]
 8009330:	9d05      	ldr	r5, [sp, #20]
 8009332:	9a05      	ldr	r2, [sp, #20]
 8009334:	441a      	add	r2, r3
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	9a06      	ldr	r2, [sp, #24]
 800933a:	2101      	movs	r1, #1
 800933c:	441a      	add	r2, r3
 800933e:	4620      	mov	r0, r4
 8009340:	9206      	str	r2, [sp, #24]
 8009342:	f001 f9ab 	bl	800a69c <__i2b>
 8009346:	4607      	mov	r7, r0
 8009348:	b165      	cbz	r5, 8009364 <_dtoa_r+0x774>
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	2b00      	cmp	r3, #0
 800934e:	dd09      	ble.n	8009364 <_dtoa_r+0x774>
 8009350:	42ab      	cmp	r3, r5
 8009352:	9a05      	ldr	r2, [sp, #20]
 8009354:	bfa8      	it	ge
 8009356:	462b      	movge	r3, r5
 8009358:	1ad2      	subs	r2, r2, r3
 800935a:	9205      	str	r2, [sp, #20]
 800935c:	9a06      	ldr	r2, [sp, #24]
 800935e:	1aed      	subs	r5, r5, r3
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	9306      	str	r3, [sp, #24]
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	b1f3      	cbz	r3, 80093a6 <_dtoa_r+0x7b6>
 8009368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 80a3 	beq.w	80094b6 <_dtoa_r+0x8c6>
 8009370:	2e00      	cmp	r6, #0
 8009372:	dd10      	ble.n	8009396 <_dtoa_r+0x7a6>
 8009374:	4639      	mov	r1, r7
 8009376:	4632      	mov	r2, r6
 8009378:	4620      	mov	r0, r4
 800937a:	f001 fa4f 	bl	800a81c <__pow5mult>
 800937e:	4652      	mov	r2, sl
 8009380:	4601      	mov	r1, r0
 8009382:	4607      	mov	r7, r0
 8009384:	4620      	mov	r0, r4
 8009386:	f001 f99f 	bl	800a6c8 <__multiply>
 800938a:	4651      	mov	r1, sl
 800938c:	4680      	mov	r8, r0
 800938e:	4620      	mov	r0, r4
 8009390:	f001 f884 	bl	800a49c <_Bfree>
 8009394:	46c2      	mov	sl, r8
 8009396:	9b08      	ldr	r3, [sp, #32]
 8009398:	1b9a      	subs	r2, r3, r6
 800939a:	d004      	beq.n	80093a6 <_dtoa_r+0x7b6>
 800939c:	4651      	mov	r1, sl
 800939e:	4620      	mov	r0, r4
 80093a0:	f001 fa3c 	bl	800a81c <__pow5mult>
 80093a4:	4682      	mov	sl, r0
 80093a6:	2101      	movs	r1, #1
 80093a8:	4620      	mov	r0, r4
 80093aa:	f001 f977 	bl	800a69c <__i2b>
 80093ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	4606      	mov	r6, r0
 80093b4:	f340 8081 	ble.w	80094ba <_dtoa_r+0x8ca>
 80093b8:	461a      	mov	r2, r3
 80093ba:	4601      	mov	r1, r0
 80093bc:	4620      	mov	r0, r4
 80093be:	f001 fa2d 	bl	800a81c <__pow5mult>
 80093c2:	9b07      	ldr	r3, [sp, #28]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	4606      	mov	r6, r0
 80093c8:	dd7a      	ble.n	80094c0 <_dtoa_r+0x8d0>
 80093ca:	f04f 0800 	mov.w	r8, #0
 80093ce:	6933      	ldr	r3, [r6, #16]
 80093d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d4:	6918      	ldr	r0, [r3, #16]
 80093d6:	f001 f913 	bl	800a600 <__hi0bits>
 80093da:	f1c0 0020 	rsb	r0, r0, #32
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	4418      	add	r0, r3
 80093e2:	f010 001f 	ands.w	r0, r0, #31
 80093e6:	f000 8094 	beq.w	8009512 <_dtoa_r+0x922>
 80093ea:	f1c0 0320 	rsb	r3, r0, #32
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	f340 8085 	ble.w	80094fe <_dtoa_r+0x90e>
 80093f4:	9b05      	ldr	r3, [sp, #20]
 80093f6:	f1c0 001c 	rsb	r0, r0, #28
 80093fa:	4403      	add	r3, r0
 80093fc:	9305      	str	r3, [sp, #20]
 80093fe:	9b06      	ldr	r3, [sp, #24]
 8009400:	4403      	add	r3, r0
 8009402:	4405      	add	r5, r0
 8009404:	9306      	str	r3, [sp, #24]
 8009406:	9b05      	ldr	r3, [sp, #20]
 8009408:	2b00      	cmp	r3, #0
 800940a:	dd05      	ble.n	8009418 <_dtoa_r+0x828>
 800940c:	4651      	mov	r1, sl
 800940e:	461a      	mov	r2, r3
 8009410:	4620      	mov	r0, r4
 8009412:	f001 fa5d 	bl	800a8d0 <__lshift>
 8009416:	4682      	mov	sl, r0
 8009418:	9b06      	ldr	r3, [sp, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dd05      	ble.n	800942a <_dtoa_r+0x83a>
 800941e:	4631      	mov	r1, r6
 8009420:	461a      	mov	r2, r3
 8009422:	4620      	mov	r0, r4
 8009424:	f001 fa54 	bl	800a8d0 <__lshift>
 8009428:	4606      	mov	r6, r0
 800942a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800942c:	2b00      	cmp	r3, #0
 800942e:	d072      	beq.n	8009516 <_dtoa_r+0x926>
 8009430:	4631      	mov	r1, r6
 8009432:	4650      	mov	r0, sl
 8009434:	f001 fab8 	bl	800a9a8 <__mcmp>
 8009438:	2800      	cmp	r0, #0
 800943a:	da6c      	bge.n	8009516 <_dtoa_r+0x926>
 800943c:	2300      	movs	r3, #0
 800943e:	4651      	mov	r1, sl
 8009440:	220a      	movs	r2, #10
 8009442:	4620      	mov	r0, r4
 8009444:	f001 f84c 	bl	800a4e0 <__multadd>
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800944e:	4682      	mov	sl, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 81b0 	beq.w	80097b6 <_dtoa_r+0xbc6>
 8009456:	2300      	movs	r3, #0
 8009458:	4639      	mov	r1, r7
 800945a:	220a      	movs	r2, #10
 800945c:	4620      	mov	r0, r4
 800945e:	f001 f83f 	bl	800a4e0 <__multadd>
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	4607      	mov	r7, r0
 8009468:	f300 8096 	bgt.w	8009598 <_dtoa_r+0x9a8>
 800946c:	9b07      	ldr	r3, [sp, #28]
 800946e:	2b02      	cmp	r3, #2
 8009470:	dc59      	bgt.n	8009526 <_dtoa_r+0x936>
 8009472:	e091      	b.n	8009598 <_dtoa_r+0x9a8>
 8009474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800947a:	e758      	b.n	800932e <_dtoa_r+0x73e>
 800947c:	9b04      	ldr	r3, [sp, #16]
 800947e:	1e5e      	subs	r6, r3, #1
 8009480:	9b08      	ldr	r3, [sp, #32]
 8009482:	42b3      	cmp	r3, r6
 8009484:	bfbf      	itttt	lt
 8009486:	9b08      	ldrlt	r3, [sp, #32]
 8009488:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800948a:	9608      	strlt	r6, [sp, #32]
 800948c:	1af3      	sublt	r3, r6, r3
 800948e:	bfb4      	ite	lt
 8009490:	18d2      	addlt	r2, r2, r3
 8009492:	1b9e      	subge	r6, r3, r6
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	bfbc      	itt	lt
 8009498:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800949a:	2600      	movlt	r6, #0
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfb7      	itett	lt
 80094a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80094a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80094a8:	1a9d      	sublt	r5, r3, r2
 80094aa:	2300      	movlt	r3, #0
 80094ac:	e741      	b.n	8009332 <_dtoa_r+0x742>
 80094ae:	9e08      	ldr	r6, [sp, #32]
 80094b0:	9d05      	ldr	r5, [sp, #20]
 80094b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80094b4:	e748      	b.n	8009348 <_dtoa_r+0x758>
 80094b6:	9a08      	ldr	r2, [sp, #32]
 80094b8:	e770      	b.n	800939c <_dtoa_r+0x7ac>
 80094ba:	9b07      	ldr	r3, [sp, #28]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	dc19      	bgt.n	80094f4 <_dtoa_r+0x904>
 80094c0:	9b02      	ldr	r3, [sp, #8]
 80094c2:	b9bb      	cbnz	r3, 80094f4 <_dtoa_r+0x904>
 80094c4:	9b03      	ldr	r3, [sp, #12]
 80094c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ca:	b99b      	cbnz	r3, 80094f4 <_dtoa_r+0x904>
 80094cc:	9b03      	ldr	r3, [sp, #12]
 80094ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094d2:	0d1b      	lsrs	r3, r3, #20
 80094d4:	051b      	lsls	r3, r3, #20
 80094d6:	b183      	cbz	r3, 80094fa <_dtoa_r+0x90a>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	3301      	adds	r3, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	9b06      	ldr	r3, [sp, #24]
 80094e0:	3301      	adds	r3, #1
 80094e2:	9306      	str	r3, [sp, #24]
 80094e4:	f04f 0801 	mov.w	r8, #1
 80094e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	f47f af6f 	bne.w	80093ce <_dtoa_r+0x7de>
 80094f0:	2001      	movs	r0, #1
 80094f2:	e774      	b.n	80093de <_dtoa_r+0x7ee>
 80094f4:	f04f 0800 	mov.w	r8, #0
 80094f8:	e7f6      	b.n	80094e8 <_dtoa_r+0x8f8>
 80094fa:	4698      	mov	r8, r3
 80094fc:	e7f4      	b.n	80094e8 <_dtoa_r+0x8f8>
 80094fe:	d082      	beq.n	8009406 <_dtoa_r+0x816>
 8009500:	9a05      	ldr	r2, [sp, #20]
 8009502:	331c      	adds	r3, #28
 8009504:	441a      	add	r2, r3
 8009506:	9205      	str	r2, [sp, #20]
 8009508:	9a06      	ldr	r2, [sp, #24]
 800950a:	441a      	add	r2, r3
 800950c:	441d      	add	r5, r3
 800950e:	9206      	str	r2, [sp, #24]
 8009510:	e779      	b.n	8009406 <_dtoa_r+0x816>
 8009512:	4603      	mov	r3, r0
 8009514:	e7f4      	b.n	8009500 <_dtoa_r+0x910>
 8009516:	9b04      	ldr	r3, [sp, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc37      	bgt.n	800958c <_dtoa_r+0x99c>
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	2b02      	cmp	r3, #2
 8009520:	dd34      	ble.n	800958c <_dtoa_r+0x99c>
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	9b01      	ldr	r3, [sp, #4]
 8009528:	b963      	cbnz	r3, 8009544 <_dtoa_r+0x954>
 800952a:	4631      	mov	r1, r6
 800952c:	2205      	movs	r2, #5
 800952e:	4620      	mov	r0, r4
 8009530:	f000 ffd6 	bl	800a4e0 <__multadd>
 8009534:	4601      	mov	r1, r0
 8009536:	4606      	mov	r6, r0
 8009538:	4650      	mov	r0, sl
 800953a:	f001 fa35 	bl	800a9a8 <__mcmp>
 800953e:	2800      	cmp	r0, #0
 8009540:	f73f adbb 	bgt.w	80090ba <_dtoa_r+0x4ca>
 8009544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009546:	9d00      	ldr	r5, [sp, #0]
 8009548:	ea6f 0b03 	mvn.w	fp, r3
 800954c:	f04f 0800 	mov.w	r8, #0
 8009550:	4631      	mov	r1, r6
 8009552:	4620      	mov	r0, r4
 8009554:	f000 ffa2 	bl	800a49c <_Bfree>
 8009558:	2f00      	cmp	r7, #0
 800955a:	f43f aeab 	beq.w	80092b4 <_dtoa_r+0x6c4>
 800955e:	f1b8 0f00 	cmp.w	r8, #0
 8009562:	d005      	beq.n	8009570 <_dtoa_r+0x980>
 8009564:	45b8      	cmp	r8, r7
 8009566:	d003      	beq.n	8009570 <_dtoa_r+0x980>
 8009568:	4641      	mov	r1, r8
 800956a:	4620      	mov	r0, r4
 800956c:	f000 ff96 	bl	800a49c <_Bfree>
 8009570:	4639      	mov	r1, r7
 8009572:	4620      	mov	r0, r4
 8009574:	f000 ff92 	bl	800a49c <_Bfree>
 8009578:	e69c      	b.n	80092b4 <_dtoa_r+0x6c4>
 800957a:	2600      	movs	r6, #0
 800957c:	4637      	mov	r7, r6
 800957e:	e7e1      	b.n	8009544 <_dtoa_r+0x954>
 8009580:	46bb      	mov	fp, r7
 8009582:	4637      	mov	r7, r6
 8009584:	e599      	b.n	80090ba <_dtoa_r+0x4ca>
 8009586:	bf00      	nop
 8009588:	40240000 	.word	0x40240000
 800958c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80c8 	beq.w	8009724 <_dtoa_r+0xb34>
 8009594:	9b04      	ldr	r3, [sp, #16]
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	2d00      	cmp	r5, #0
 800959a:	dd05      	ble.n	80095a8 <_dtoa_r+0x9b8>
 800959c:	4639      	mov	r1, r7
 800959e:	462a      	mov	r2, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f001 f995 	bl	800a8d0 <__lshift>
 80095a6:	4607      	mov	r7, r0
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d05b      	beq.n	8009666 <_dtoa_r+0xa76>
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 ff33 	bl	800a41c <_Balloc>
 80095b6:	4605      	mov	r5, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <_dtoa_r+0x9d6>
 80095ba:	4b83      	ldr	r3, [pc, #524]	; (80097c8 <_dtoa_r+0xbd8>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80095c2:	f7ff bb2e 	b.w	8008c22 <_dtoa_r+0x32>
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	0092      	lsls	r2, r2, #2
 80095cc:	f107 010c 	add.w	r1, r7, #12
 80095d0:	300c      	adds	r0, #12
 80095d2:	f7ff fa66 	bl	8008aa2 <memcpy>
 80095d6:	2201      	movs	r2, #1
 80095d8:	4629      	mov	r1, r5
 80095da:	4620      	mov	r0, r4
 80095dc:	f001 f978 	bl	800a8d0 <__lshift>
 80095e0:	9b00      	ldr	r3, [sp, #0]
 80095e2:	3301      	adds	r3, #1
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ea:	4413      	add	r3, r2
 80095ec:	9308      	str	r3, [sp, #32]
 80095ee:	9b02      	ldr	r3, [sp, #8]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	46b8      	mov	r8, r7
 80095f6:	9306      	str	r3, [sp, #24]
 80095f8:	4607      	mov	r7, r0
 80095fa:	9b04      	ldr	r3, [sp, #16]
 80095fc:	4631      	mov	r1, r6
 80095fe:	3b01      	subs	r3, #1
 8009600:	4650      	mov	r0, sl
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	f7ff fa6a 	bl	8008adc <quorem>
 8009608:	4641      	mov	r1, r8
 800960a:	9002      	str	r0, [sp, #8]
 800960c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009610:	4650      	mov	r0, sl
 8009612:	f001 f9c9 	bl	800a9a8 <__mcmp>
 8009616:	463a      	mov	r2, r7
 8009618:	9005      	str	r0, [sp, #20]
 800961a:	4631      	mov	r1, r6
 800961c:	4620      	mov	r0, r4
 800961e:	f001 f9df 	bl	800a9e0 <__mdiff>
 8009622:	68c2      	ldr	r2, [r0, #12]
 8009624:	4605      	mov	r5, r0
 8009626:	bb02      	cbnz	r2, 800966a <_dtoa_r+0xa7a>
 8009628:	4601      	mov	r1, r0
 800962a:	4650      	mov	r0, sl
 800962c:	f001 f9bc 	bl	800a9a8 <__mcmp>
 8009630:	4602      	mov	r2, r0
 8009632:	4629      	mov	r1, r5
 8009634:	4620      	mov	r0, r4
 8009636:	9209      	str	r2, [sp, #36]	; 0x24
 8009638:	f000 ff30 	bl	800a49c <_Bfree>
 800963c:	9b07      	ldr	r3, [sp, #28]
 800963e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009640:	9d04      	ldr	r5, [sp, #16]
 8009642:	ea43 0102 	orr.w	r1, r3, r2
 8009646:	9b06      	ldr	r3, [sp, #24]
 8009648:	4319      	orrs	r1, r3
 800964a:	d110      	bne.n	800966e <_dtoa_r+0xa7e>
 800964c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009650:	d029      	beq.n	80096a6 <_dtoa_r+0xab6>
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	2b00      	cmp	r3, #0
 8009656:	dd02      	ble.n	800965e <_dtoa_r+0xa6e>
 8009658:	9b02      	ldr	r3, [sp, #8]
 800965a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800965e:	9b01      	ldr	r3, [sp, #4]
 8009660:	f883 9000 	strb.w	r9, [r3]
 8009664:	e774      	b.n	8009550 <_dtoa_r+0x960>
 8009666:	4638      	mov	r0, r7
 8009668:	e7ba      	b.n	80095e0 <_dtoa_r+0x9f0>
 800966a:	2201      	movs	r2, #1
 800966c:	e7e1      	b.n	8009632 <_dtoa_r+0xa42>
 800966e:	9b05      	ldr	r3, [sp, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db04      	blt.n	800967e <_dtoa_r+0xa8e>
 8009674:	9907      	ldr	r1, [sp, #28]
 8009676:	430b      	orrs	r3, r1
 8009678:	9906      	ldr	r1, [sp, #24]
 800967a:	430b      	orrs	r3, r1
 800967c:	d120      	bne.n	80096c0 <_dtoa_r+0xad0>
 800967e:	2a00      	cmp	r2, #0
 8009680:	dded      	ble.n	800965e <_dtoa_r+0xa6e>
 8009682:	4651      	mov	r1, sl
 8009684:	2201      	movs	r2, #1
 8009686:	4620      	mov	r0, r4
 8009688:	f001 f922 	bl	800a8d0 <__lshift>
 800968c:	4631      	mov	r1, r6
 800968e:	4682      	mov	sl, r0
 8009690:	f001 f98a 	bl	800a9a8 <__mcmp>
 8009694:	2800      	cmp	r0, #0
 8009696:	dc03      	bgt.n	80096a0 <_dtoa_r+0xab0>
 8009698:	d1e1      	bne.n	800965e <_dtoa_r+0xa6e>
 800969a:	f019 0f01 	tst.w	r9, #1
 800969e:	d0de      	beq.n	800965e <_dtoa_r+0xa6e>
 80096a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096a4:	d1d8      	bne.n	8009658 <_dtoa_r+0xa68>
 80096a6:	9a01      	ldr	r2, [sp, #4]
 80096a8:	2339      	movs	r3, #57	; 0x39
 80096aa:	7013      	strb	r3, [r2, #0]
 80096ac:	462b      	mov	r3, r5
 80096ae:	461d      	mov	r5, r3
 80096b0:	3b01      	subs	r3, #1
 80096b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096b6:	2a39      	cmp	r2, #57	; 0x39
 80096b8:	d06c      	beq.n	8009794 <_dtoa_r+0xba4>
 80096ba:	3201      	adds	r2, #1
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e747      	b.n	8009550 <_dtoa_r+0x960>
 80096c0:	2a00      	cmp	r2, #0
 80096c2:	dd07      	ble.n	80096d4 <_dtoa_r+0xae4>
 80096c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096c8:	d0ed      	beq.n	80096a6 <_dtoa_r+0xab6>
 80096ca:	9a01      	ldr	r2, [sp, #4]
 80096cc:	f109 0301 	add.w	r3, r9, #1
 80096d0:	7013      	strb	r3, [r2, #0]
 80096d2:	e73d      	b.n	8009550 <_dtoa_r+0x960>
 80096d4:	9b04      	ldr	r3, [sp, #16]
 80096d6:	9a08      	ldr	r2, [sp, #32]
 80096d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80096dc:	4293      	cmp	r3, r2
 80096de:	d043      	beq.n	8009768 <_dtoa_r+0xb78>
 80096e0:	4651      	mov	r1, sl
 80096e2:	2300      	movs	r3, #0
 80096e4:	220a      	movs	r2, #10
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 fefa 	bl	800a4e0 <__multadd>
 80096ec:	45b8      	cmp	r8, r7
 80096ee:	4682      	mov	sl, r0
 80096f0:	f04f 0300 	mov.w	r3, #0
 80096f4:	f04f 020a 	mov.w	r2, #10
 80096f8:	4641      	mov	r1, r8
 80096fa:	4620      	mov	r0, r4
 80096fc:	d107      	bne.n	800970e <_dtoa_r+0xb1e>
 80096fe:	f000 feef 	bl	800a4e0 <__multadd>
 8009702:	4680      	mov	r8, r0
 8009704:	4607      	mov	r7, r0
 8009706:	9b04      	ldr	r3, [sp, #16]
 8009708:	3301      	adds	r3, #1
 800970a:	9304      	str	r3, [sp, #16]
 800970c:	e775      	b.n	80095fa <_dtoa_r+0xa0a>
 800970e:	f000 fee7 	bl	800a4e0 <__multadd>
 8009712:	4639      	mov	r1, r7
 8009714:	4680      	mov	r8, r0
 8009716:	2300      	movs	r3, #0
 8009718:	220a      	movs	r2, #10
 800971a:	4620      	mov	r0, r4
 800971c:	f000 fee0 	bl	800a4e0 <__multadd>
 8009720:	4607      	mov	r7, r0
 8009722:	e7f0      	b.n	8009706 <_dtoa_r+0xb16>
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	9d00      	ldr	r5, [sp, #0]
 800972a:	4631      	mov	r1, r6
 800972c:	4650      	mov	r0, sl
 800972e:	f7ff f9d5 	bl	8008adc <quorem>
 8009732:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009736:	9b00      	ldr	r3, [sp, #0]
 8009738:	f805 9b01 	strb.w	r9, [r5], #1
 800973c:	1aea      	subs	r2, r5, r3
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	4293      	cmp	r3, r2
 8009742:	dd07      	ble.n	8009754 <_dtoa_r+0xb64>
 8009744:	4651      	mov	r1, sl
 8009746:	2300      	movs	r3, #0
 8009748:	220a      	movs	r2, #10
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fec8 	bl	800a4e0 <__multadd>
 8009750:	4682      	mov	sl, r0
 8009752:	e7ea      	b.n	800972a <_dtoa_r+0xb3a>
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfc8      	it	gt
 800975a:	461d      	movgt	r5, r3
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	bfd8      	it	le
 8009760:	2501      	movle	r5, #1
 8009762:	441d      	add	r5, r3
 8009764:	f04f 0800 	mov.w	r8, #0
 8009768:	4651      	mov	r1, sl
 800976a:	2201      	movs	r2, #1
 800976c:	4620      	mov	r0, r4
 800976e:	f001 f8af 	bl	800a8d0 <__lshift>
 8009772:	4631      	mov	r1, r6
 8009774:	4682      	mov	sl, r0
 8009776:	f001 f917 	bl	800a9a8 <__mcmp>
 800977a:	2800      	cmp	r0, #0
 800977c:	dc96      	bgt.n	80096ac <_dtoa_r+0xabc>
 800977e:	d102      	bne.n	8009786 <_dtoa_r+0xb96>
 8009780:	f019 0f01 	tst.w	r9, #1
 8009784:	d192      	bne.n	80096ac <_dtoa_r+0xabc>
 8009786:	462b      	mov	r3, r5
 8009788:	461d      	mov	r5, r3
 800978a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800978e:	2a30      	cmp	r2, #48	; 0x30
 8009790:	d0fa      	beq.n	8009788 <_dtoa_r+0xb98>
 8009792:	e6dd      	b.n	8009550 <_dtoa_r+0x960>
 8009794:	9a00      	ldr	r2, [sp, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	d189      	bne.n	80096ae <_dtoa_r+0xabe>
 800979a:	f10b 0b01 	add.w	fp, fp, #1
 800979e:	2331      	movs	r3, #49	; 0x31
 80097a0:	e796      	b.n	80096d0 <_dtoa_r+0xae0>
 80097a2:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <_dtoa_r+0xbdc>)
 80097a4:	f7ff ba99 	b.w	8008cda <_dtoa_r+0xea>
 80097a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f47f aa6d 	bne.w	8008c8a <_dtoa_r+0x9a>
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <_dtoa_r+0xbe0>)
 80097b2:	f7ff ba92 	b.w	8008cda <_dtoa_r+0xea>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	dcb5      	bgt.n	8009728 <_dtoa_r+0xb38>
 80097bc:	9b07      	ldr	r3, [sp, #28]
 80097be:	2b02      	cmp	r3, #2
 80097c0:	f73f aeb1 	bgt.w	8009526 <_dtoa_r+0x936>
 80097c4:	e7b0      	b.n	8009728 <_dtoa_r+0xb38>
 80097c6:	bf00      	nop
 80097c8:	0800d4e5 	.word	0x0800d4e5
 80097cc:	0800d2e4 	.word	0x0800d2e4
 80097d0:	0800d469 	.word	0x0800d469

080097d4 <rshift>:
 80097d4:	6903      	ldr	r3, [r0, #16]
 80097d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80097e2:	f100 0414 	add.w	r4, r0, #20
 80097e6:	dd45      	ble.n	8009874 <rshift+0xa0>
 80097e8:	f011 011f 	ands.w	r1, r1, #31
 80097ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80097f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80097f4:	d10c      	bne.n	8009810 <rshift+0x3c>
 80097f6:	f100 0710 	add.w	r7, r0, #16
 80097fa:	4629      	mov	r1, r5
 80097fc:	42b1      	cmp	r1, r6
 80097fe:	d334      	bcc.n	800986a <rshift+0x96>
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	1eea      	subs	r2, r5, #3
 8009806:	4296      	cmp	r6, r2
 8009808:	bf38      	it	cc
 800980a:	2300      	movcc	r3, #0
 800980c:	4423      	add	r3, r4
 800980e:	e015      	b.n	800983c <rshift+0x68>
 8009810:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009814:	f1c1 0820 	rsb	r8, r1, #32
 8009818:	40cf      	lsrs	r7, r1
 800981a:	f105 0e04 	add.w	lr, r5, #4
 800981e:	46a1      	mov	r9, r4
 8009820:	4576      	cmp	r6, lr
 8009822:	46f4      	mov	ip, lr
 8009824:	d815      	bhi.n	8009852 <rshift+0x7e>
 8009826:	1a9a      	subs	r2, r3, r2
 8009828:	0092      	lsls	r2, r2, #2
 800982a:	3a04      	subs	r2, #4
 800982c:	3501      	adds	r5, #1
 800982e:	42ae      	cmp	r6, r5
 8009830:	bf38      	it	cc
 8009832:	2200      	movcc	r2, #0
 8009834:	18a3      	adds	r3, r4, r2
 8009836:	50a7      	str	r7, [r4, r2]
 8009838:	b107      	cbz	r7, 800983c <rshift+0x68>
 800983a:	3304      	adds	r3, #4
 800983c:	1b1a      	subs	r2, r3, r4
 800983e:	42a3      	cmp	r3, r4
 8009840:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009844:	bf08      	it	eq
 8009846:	2300      	moveq	r3, #0
 8009848:	6102      	str	r2, [r0, #16]
 800984a:	bf08      	it	eq
 800984c:	6143      	streq	r3, [r0, #20]
 800984e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009852:	f8dc c000 	ldr.w	ip, [ip]
 8009856:	fa0c fc08 	lsl.w	ip, ip, r8
 800985a:	ea4c 0707 	orr.w	r7, ip, r7
 800985e:	f849 7b04 	str.w	r7, [r9], #4
 8009862:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009866:	40cf      	lsrs	r7, r1
 8009868:	e7da      	b.n	8009820 <rshift+0x4c>
 800986a:	f851 cb04 	ldr.w	ip, [r1], #4
 800986e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009872:	e7c3      	b.n	80097fc <rshift+0x28>
 8009874:	4623      	mov	r3, r4
 8009876:	e7e1      	b.n	800983c <rshift+0x68>

08009878 <__hexdig_fun>:
 8009878:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800987c:	2b09      	cmp	r3, #9
 800987e:	d802      	bhi.n	8009886 <__hexdig_fun+0xe>
 8009880:	3820      	subs	r0, #32
 8009882:	b2c0      	uxtb	r0, r0
 8009884:	4770      	bx	lr
 8009886:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800988a:	2b05      	cmp	r3, #5
 800988c:	d801      	bhi.n	8009892 <__hexdig_fun+0x1a>
 800988e:	3847      	subs	r0, #71	; 0x47
 8009890:	e7f7      	b.n	8009882 <__hexdig_fun+0xa>
 8009892:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009896:	2b05      	cmp	r3, #5
 8009898:	d801      	bhi.n	800989e <__hexdig_fun+0x26>
 800989a:	3827      	subs	r0, #39	; 0x27
 800989c:	e7f1      	b.n	8009882 <__hexdig_fun+0xa>
 800989e:	2000      	movs	r0, #0
 80098a0:	4770      	bx	lr
	...

080098a4 <__gethex>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	4617      	mov	r7, r2
 80098aa:	680a      	ldr	r2, [r1, #0]
 80098ac:	b085      	sub	sp, #20
 80098ae:	f102 0b02 	add.w	fp, r2, #2
 80098b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098ba:	4681      	mov	r9, r0
 80098bc:	468a      	mov	sl, r1
 80098be:	9302      	str	r3, [sp, #8]
 80098c0:	32fe      	adds	r2, #254	; 0xfe
 80098c2:	eb02 030b 	add.w	r3, r2, fp
 80098c6:	46d8      	mov	r8, fp
 80098c8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	2830      	cmp	r0, #48	; 0x30
 80098d0:	d0f7      	beq.n	80098c2 <__gethex+0x1e>
 80098d2:	f7ff ffd1 	bl	8009878 <__hexdig_fun>
 80098d6:	4604      	mov	r4, r0
 80098d8:	2800      	cmp	r0, #0
 80098da:	d138      	bne.n	800994e <__gethex+0xaa>
 80098dc:	49a7      	ldr	r1, [pc, #668]	; (8009b7c <__gethex+0x2d8>)
 80098de:	2201      	movs	r2, #1
 80098e0:	4640      	mov	r0, r8
 80098e2:	f7ff f893 	bl	8008a0c <strncmp>
 80098e6:	4606      	mov	r6, r0
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d169      	bne.n	80099c0 <__gethex+0x11c>
 80098ec:	f898 0001 	ldrb.w	r0, [r8, #1]
 80098f0:	465d      	mov	r5, fp
 80098f2:	f7ff ffc1 	bl	8009878 <__hexdig_fun>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d064      	beq.n	80099c4 <__gethex+0x120>
 80098fa:	465a      	mov	r2, fp
 80098fc:	7810      	ldrb	r0, [r2, #0]
 80098fe:	2830      	cmp	r0, #48	; 0x30
 8009900:	4690      	mov	r8, r2
 8009902:	f102 0201 	add.w	r2, r2, #1
 8009906:	d0f9      	beq.n	80098fc <__gethex+0x58>
 8009908:	f7ff ffb6 	bl	8009878 <__hexdig_fun>
 800990c:	2301      	movs	r3, #1
 800990e:	fab0 f480 	clz	r4, r0
 8009912:	0964      	lsrs	r4, r4, #5
 8009914:	465e      	mov	r6, fp
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	4642      	mov	r2, r8
 800991a:	4615      	mov	r5, r2
 800991c:	3201      	adds	r2, #1
 800991e:	7828      	ldrb	r0, [r5, #0]
 8009920:	f7ff ffaa 	bl	8009878 <__hexdig_fun>
 8009924:	2800      	cmp	r0, #0
 8009926:	d1f8      	bne.n	800991a <__gethex+0x76>
 8009928:	4994      	ldr	r1, [pc, #592]	; (8009b7c <__gethex+0x2d8>)
 800992a:	2201      	movs	r2, #1
 800992c:	4628      	mov	r0, r5
 800992e:	f7ff f86d 	bl	8008a0c <strncmp>
 8009932:	b978      	cbnz	r0, 8009954 <__gethex+0xb0>
 8009934:	b946      	cbnz	r6, 8009948 <__gethex+0xa4>
 8009936:	1c6e      	adds	r6, r5, #1
 8009938:	4632      	mov	r2, r6
 800993a:	4615      	mov	r5, r2
 800993c:	3201      	adds	r2, #1
 800993e:	7828      	ldrb	r0, [r5, #0]
 8009940:	f7ff ff9a 	bl	8009878 <__hexdig_fun>
 8009944:	2800      	cmp	r0, #0
 8009946:	d1f8      	bne.n	800993a <__gethex+0x96>
 8009948:	1b73      	subs	r3, r6, r5
 800994a:	009e      	lsls	r6, r3, #2
 800994c:	e004      	b.n	8009958 <__gethex+0xb4>
 800994e:	2400      	movs	r4, #0
 8009950:	4626      	mov	r6, r4
 8009952:	e7e1      	b.n	8009918 <__gethex+0x74>
 8009954:	2e00      	cmp	r6, #0
 8009956:	d1f7      	bne.n	8009948 <__gethex+0xa4>
 8009958:	782b      	ldrb	r3, [r5, #0]
 800995a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800995e:	2b50      	cmp	r3, #80	; 0x50
 8009960:	d13d      	bne.n	80099de <__gethex+0x13a>
 8009962:	786b      	ldrb	r3, [r5, #1]
 8009964:	2b2b      	cmp	r3, #43	; 0x2b
 8009966:	d02f      	beq.n	80099c8 <__gethex+0x124>
 8009968:	2b2d      	cmp	r3, #45	; 0x2d
 800996a:	d031      	beq.n	80099d0 <__gethex+0x12c>
 800996c:	1c69      	adds	r1, r5, #1
 800996e:	f04f 0b00 	mov.w	fp, #0
 8009972:	7808      	ldrb	r0, [r1, #0]
 8009974:	f7ff ff80 	bl	8009878 <__hexdig_fun>
 8009978:	1e42      	subs	r2, r0, #1
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	2a18      	cmp	r2, #24
 800997e:	d82e      	bhi.n	80099de <__gethex+0x13a>
 8009980:	f1a0 0210 	sub.w	r2, r0, #16
 8009984:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009988:	f7ff ff76 	bl	8009878 <__hexdig_fun>
 800998c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8009990:	fa5f fc8c 	uxtb.w	ip, ip
 8009994:	f1bc 0f18 	cmp.w	ip, #24
 8009998:	d91d      	bls.n	80099d6 <__gethex+0x132>
 800999a:	f1bb 0f00 	cmp.w	fp, #0
 800999e:	d000      	beq.n	80099a2 <__gethex+0xfe>
 80099a0:	4252      	negs	r2, r2
 80099a2:	4416      	add	r6, r2
 80099a4:	f8ca 1000 	str.w	r1, [sl]
 80099a8:	b1dc      	cbz	r4, 80099e2 <__gethex+0x13e>
 80099aa:	9b01      	ldr	r3, [sp, #4]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bf14      	ite	ne
 80099b0:	f04f 0800 	movne.w	r8, #0
 80099b4:	f04f 0806 	moveq.w	r8, #6
 80099b8:	4640      	mov	r0, r8
 80099ba:	b005      	add	sp, #20
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c0:	4645      	mov	r5, r8
 80099c2:	4626      	mov	r6, r4
 80099c4:	2401      	movs	r4, #1
 80099c6:	e7c7      	b.n	8009958 <__gethex+0xb4>
 80099c8:	f04f 0b00 	mov.w	fp, #0
 80099cc:	1ca9      	adds	r1, r5, #2
 80099ce:	e7d0      	b.n	8009972 <__gethex+0xce>
 80099d0:	f04f 0b01 	mov.w	fp, #1
 80099d4:	e7fa      	b.n	80099cc <__gethex+0x128>
 80099d6:	230a      	movs	r3, #10
 80099d8:	fb03 0002 	mla	r0, r3, r2, r0
 80099dc:	e7d0      	b.n	8009980 <__gethex+0xdc>
 80099de:	4629      	mov	r1, r5
 80099e0:	e7e0      	b.n	80099a4 <__gethex+0x100>
 80099e2:	eba5 0308 	sub.w	r3, r5, r8
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4621      	mov	r1, r4
 80099ea:	2b07      	cmp	r3, #7
 80099ec:	dc0a      	bgt.n	8009a04 <__gethex+0x160>
 80099ee:	4648      	mov	r0, r9
 80099f0:	f000 fd14 	bl	800a41c <_Balloc>
 80099f4:	4604      	mov	r4, r0
 80099f6:	b940      	cbnz	r0, 8009a0a <__gethex+0x166>
 80099f8:	4b61      	ldr	r3, [pc, #388]	; (8009b80 <__gethex+0x2dc>)
 80099fa:	4602      	mov	r2, r0
 80099fc:	21e4      	movs	r1, #228	; 0xe4
 80099fe:	4861      	ldr	r0, [pc, #388]	; (8009b84 <__gethex+0x2e0>)
 8009a00:	f001 fbc2 	bl	800b188 <__assert_func>
 8009a04:	3101      	adds	r1, #1
 8009a06:	105b      	asrs	r3, r3, #1
 8009a08:	e7ef      	b.n	80099ea <__gethex+0x146>
 8009a0a:	f100 0a14 	add.w	sl, r0, #20
 8009a0e:	2300      	movs	r3, #0
 8009a10:	495a      	ldr	r1, [pc, #360]	; (8009b7c <__gethex+0x2d8>)
 8009a12:	f8cd a004 	str.w	sl, [sp, #4]
 8009a16:	469b      	mov	fp, r3
 8009a18:	45a8      	cmp	r8, r5
 8009a1a:	d342      	bcc.n	8009aa2 <__gethex+0x1fe>
 8009a1c:	9801      	ldr	r0, [sp, #4]
 8009a1e:	f840 bb04 	str.w	fp, [r0], #4
 8009a22:	eba0 000a 	sub.w	r0, r0, sl
 8009a26:	1080      	asrs	r0, r0, #2
 8009a28:	6120      	str	r0, [r4, #16]
 8009a2a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f000 fde6 	bl	800a600 <__hi0bits>
 8009a34:	683d      	ldr	r5, [r7, #0]
 8009a36:	eba8 0000 	sub.w	r0, r8, r0
 8009a3a:	42a8      	cmp	r0, r5
 8009a3c:	dd59      	ble.n	8009af2 <__gethex+0x24e>
 8009a3e:	eba0 0805 	sub.w	r8, r0, r5
 8009a42:	4641      	mov	r1, r8
 8009a44:	4620      	mov	r0, r4
 8009a46:	f001 f975 	bl	800ad34 <__any_on>
 8009a4a:	4683      	mov	fp, r0
 8009a4c:	b1b8      	cbz	r0, 8009a7e <__gethex+0x1da>
 8009a4e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009a52:	1159      	asrs	r1, r3, #5
 8009a54:	f003 021f 	and.w	r2, r3, #31
 8009a58:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009a5c:	f04f 0b01 	mov.w	fp, #1
 8009a60:	fa0b f202 	lsl.w	r2, fp, r2
 8009a64:	420a      	tst	r2, r1
 8009a66:	d00a      	beq.n	8009a7e <__gethex+0x1da>
 8009a68:	455b      	cmp	r3, fp
 8009a6a:	dd06      	ble.n	8009a7a <__gethex+0x1d6>
 8009a6c:	f1a8 0102 	sub.w	r1, r8, #2
 8009a70:	4620      	mov	r0, r4
 8009a72:	f001 f95f 	bl	800ad34 <__any_on>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	d138      	bne.n	8009aec <__gethex+0x248>
 8009a7a:	f04f 0b02 	mov.w	fp, #2
 8009a7e:	4641      	mov	r1, r8
 8009a80:	4620      	mov	r0, r4
 8009a82:	f7ff fea7 	bl	80097d4 <rshift>
 8009a86:	4446      	add	r6, r8
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	42b3      	cmp	r3, r6
 8009a8c:	da41      	bge.n	8009b12 <__gethex+0x26e>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4648      	mov	r0, r9
 8009a92:	f000 fd03 	bl	800a49c <_Bfree>
 8009a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009aa0:	e78a      	b.n	80099b8 <__gethex+0x114>
 8009aa2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009aa6:	2a2e      	cmp	r2, #46	; 0x2e
 8009aa8:	d014      	beq.n	8009ad4 <__gethex+0x230>
 8009aaa:	2b20      	cmp	r3, #32
 8009aac:	d106      	bne.n	8009abc <__gethex+0x218>
 8009aae:	9b01      	ldr	r3, [sp, #4]
 8009ab0:	f843 bb04 	str.w	fp, [r3], #4
 8009ab4:	f04f 0b00 	mov.w	fp, #0
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	465b      	mov	r3, fp
 8009abc:	7828      	ldrb	r0, [r5, #0]
 8009abe:	9303      	str	r3, [sp, #12]
 8009ac0:	f7ff feda 	bl	8009878 <__hexdig_fun>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	f000 000f 	and.w	r0, r0, #15
 8009aca:	4098      	lsls	r0, r3
 8009acc:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	e7a1      	b.n	8009a18 <__gethex+0x174>
 8009ad4:	45a8      	cmp	r8, r5
 8009ad6:	d8e8      	bhi.n	8009aaa <__gethex+0x206>
 8009ad8:	2201      	movs	r2, #1
 8009ada:	4628      	mov	r0, r5
 8009adc:	9303      	str	r3, [sp, #12]
 8009ade:	f7fe ff95 	bl	8008a0c <strncmp>
 8009ae2:	4926      	ldr	r1, [pc, #152]	; (8009b7c <__gethex+0x2d8>)
 8009ae4:	9b03      	ldr	r3, [sp, #12]
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d1df      	bne.n	8009aaa <__gethex+0x206>
 8009aea:	e795      	b.n	8009a18 <__gethex+0x174>
 8009aec:	f04f 0b03 	mov.w	fp, #3
 8009af0:	e7c5      	b.n	8009a7e <__gethex+0x1da>
 8009af2:	da0b      	bge.n	8009b0c <__gethex+0x268>
 8009af4:	eba5 0800 	sub.w	r8, r5, r0
 8009af8:	4621      	mov	r1, r4
 8009afa:	4642      	mov	r2, r8
 8009afc:	4648      	mov	r0, r9
 8009afe:	f000 fee7 	bl	800a8d0 <__lshift>
 8009b02:	eba6 0608 	sub.w	r6, r6, r8
 8009b06:	4604      	mov	r4, r0
 8009b08:	f100 0a14 	add.w	sl, r0, #20
 8009b0c:	f04f 0b00 	mov.w	fp, #0
 8009b10:	e7ba      	b.n	8009a88 <__gethex+0x1e4>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	42b3      	cmp	r3, r6
 8009b16:	dd73      	ble.n	8009c00 <__gethex+0x35c>
 8009b18:	1b9e      	subs	r6, r3, r6
 8009b1a:	42b5      	cmp	r5, r6
 8009b1c:	dc34      	bgt.n	8009b88 <__gethex+0x2e4>
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d023      	beq.n	8009b6c <__gethex+0x2c8>
 8009b24:	2b03      	cmp	r3, #3
 8009b26:	d025      	beq.n	8009b74 <__gethex+0x2d0>
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d115      	bne.n	8009b58 <__gethex+0x2b4>
 8009b2c:	42b5      	cmp	r5, r6
 8009b2e:	d113      	bne.n	8009b58 <__gethex+0x2b4>
 8009b30:	2d01      	cmp	r5, #1
 8009b32:	d10b      	bne.n	8009b4c <__gethex+0x2a8>
 8009b34:	9a02      	ldr	r2, [sp, #8]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	f8ca 3000 	str.w	r3, [sl]
 8009b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b44:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009b48:	601c      	str	r4, [r3, #0]
 8009b4a:	e735      	b.n	80099b8 <__gethex+0x114>
 8009b4c:	1e69      	subs	r1, r5, #1
 8009b4e:	4620      	mov	r0, r4
 8009b50:	f001 f8f0 	bl	800ad34 <__any_on>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d1ed      	bne.n	8009b34 <__gethex+0x290>
 8009b58:	4621      	mov	r1, r4
 8009b5a:	4648      	mov	r0, r9
 8009b5c:	f000 fc9e 	bl	800a49c <_Bfree>
 8009b60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b62:	2300      	movs	r3, #0
 8009b64:	6013      	str	r3, [r2, #0]
 8009b66:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009b6a:	e725      	b.n	80099b8 <__gethex+0x114>
 8009b6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1f2      	bne.n	8009b58 <__gethex+0x2b4>
 8009b72:	e7df      	b.n	8009b34 <__gethex+0x290>
 8009b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1dc      	bne.n	8009b34 <__gethex+0x290>
 8009b7a:	e7ed      	b.n	8009b58 <__gethex+0x2b4>
 8009b7c:	0800d30d 	.word	0x0800d30d
 8009b80:	0800d4e5 	.word	0x0800d4e5
 8009b84:	0800d4f6 	.word	0x0800d4f6
 8009b88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8009b8c:	f1bb 0f00 	cmp.w	fp, #0
 8009b90:	d133      	bne.n	8009bfa <__gethex+0x356>
 8009b92:	f1b8 0f00 	cmp.w	r8, #0
 8009b96:	d004      	beq.n	8009ba2 <__gethex+0x2fe>
 8009b98:	4641      	mov	r1, r8
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f001 f8ca 	bl	800ad34 <__any_on>
 8009ba0:	4683      	mov	fp, r0
 8009ba2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009bac:	f008 081f 	and.w	r8, r8, #31
 8009bb0:	fa03 f308 	lsl.w	r3, r3, r8
 8009bb4:	4213      	tst	r3, r2
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4620      	mov	r0, r4
 8009bba:	bf18      	it	ne
 8009bbc:	f04b 0b02 	orrne.w	fp, fp, #2
 8009bc0:	1bad      	subs	r5, r5, r6
 8009bc2:	f7ff fe07 	bl	80097d4 <rshift>
 8009bc6:	687e      	ldr	r6, [r7, #4]
 8009bc8:	f04f 0802 	mov.w	r8, #2
 8009bcc:	f1bb 0f00 	cmp.w	fp, #0
 8009bd0:	d04a      	beq.n	8009c68 <__gethex+0x3c4>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d016      	beq.n	8009c06 <__gethex+0x362>
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d018      	beq.n	8009c0e <__gethex+0x36a>
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d109      	bne.n	8009bf4 <__gethex+0x350>
 8009be0:	f01b 0f02 	tst.w	fp, #2
 8009be4:	d006      	beq.n	8009bf4 <__gethex+0x350>
 8009be6:	f8da 3000 	ldr.w	r3, [sl]
 8009bea:	ea4b 0b03 	orr.w	fp, fp, r3
 8009bee:	f01b 0f01 	tst.w	fp, #1
 8009bf2:	d10f      	bne.n	8009c14 <__gethex+0x370>
 8009bf4:	f048 0810 	orr.w	r8, r8, #16
 8009bf8:	e036      	b.n	8009c68 <__gethex+0x3c4>
 8009bfa:	f04f 0b01 	mov.w	fp, #1
 8009bfe:	e7d0      	b.n	8009ba2 <__gethex+0x2fe>
 8009c00:	f04f 0801 	mov.w	r8, #1
 8009c04:	e7e2      	b.n	8009bcc <__gethex+0x328>
 8009c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c08:	f1c3 0301 	rsb	r3, r3, #1
 8009c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0ef      	beq.n	8009bf4 <__gethex+0x350>
 8009c14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c18:	f104 0214 	add.w	r2, r4, #20
 8009c1c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009c26:	2300      	movs	r3, #0
 8009c28:	4694      	mov	ip, r2
 8009c2a:	f852 1b04 	ldr.w	r1, [r2], #4
 8009c2e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8009c32:	d01e      	beq.n	8009c72 <__gethex+0x3ce>
 8009c34:	3101      	adds	r1, #1
 8009c36:	f8cc 1000 	str.w	r1, [ip]
 8009c3a:	f1b8 0f02 	cmp.w	r8, #2
 8009c3e:	f104 0214 	add.w	r2, r4, #20
 8009c42:	d13d      	bne.n	8009cc0 <__gethex+0x41c>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	42ab      	cmp	r3, r5
 8009c4a:	d10b      	bne.n	8009c64 <__gethex+0x3c0>
 8009c4c:	1169      	asrs	r1, r5, #5
 8009c4e:	2301      	movs	r3, #1
 8009c50:	f005 051f 	and.w	r5, r5, #31
 8009c54:	fa03 f505 	lsl.w	r5, r3, r5
 8009c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c5c:	421d      	tst	r5, r3
 8009c5e:	bf18      	it	ne
 8009c60:	f04f 0801 	movne.w	r8, #1
 8009c64:	f048 0820 	orr.w	r8, r8, #32
 8009c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c6a:	601c      	str	r4, [r3, #0]
 8009c6c:	9b02      	ldr	r3, [sp, #8]
 8009c6e:	601e      	str	r6, [r3, #0]
 8009c70:	e6a2      	b.n	80099b8 <__gethex+0x114>
 8009c72:	4290      	cmp	r0, r2
 8009c74:	f842 3c04 	str.w	r3, [r2, #-4]
 8009c78:	d8d6      	bhi.n	8009c28 <__gethex+0x384>
 8009c7a:	68a2      	ldr	r2, [r4, #8]
 8009c7c:	4593      	cmp	fp, r2
 8009c7e:	db17      	blt.n	8009cb0 <__gethex+0x40c>
 8009c80:	6861      	ldr	r1, [r4, #4]
 8009c82:	4648      	mov	r0, r9
 8009c84:	3101      	adds	r1, #1
 8009c86:	f000 fbc9 	bl	800a41c <_Balloc>
 8009c8a:	4682      	mov	sl, r0
 8009c8c:	b918      	cbnz	r0, 8009c96 <__gethex+0x3f2>
 8009c8e:	4b1b      	ldr	r3, [pc, #108]	; (8009cfc <__gethex+0x458>)
 8009c90:	4602      	mov	r2, r0
 8009c92:	2184      	movs	r1, #132	; 0x84
 8009c94:	e6b3      	b.n	80099fe <__gethex+0x15a>
 8009c96:	6922      	ldr	r2, [r4, #16]
 8009c98:	3202      	adds	r2, #2
 8009c9a:	f104 010c 	add.w	r1, r4, #12
 8009c9e:	0092      	lsls	r2, r2, #2
 8009ca0:	300c      	adds	r0, #12
 8009ca2:	f7fe fefe 	bl	8008aa2 <memcpy>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4648      	mov	r0, r9
 8009caa:	f000 fbf7 	bl	800a49c <_Bfree>
 8009cae:	4654      	mov	r4, sl
 8009cb0:	6922      	ldr	r2, [r4, #16]
 8009cb2:	1c51      	adds	r1, r2, #1
 8009cb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009cb8:	6121      	str	r1, [r4, #16]
 8009cba:	2101      	movs	r1, #1
 8009cbc:	6151      	str	r1, [r2, #20]
 8009cbe:	e7bc      	b.n	8009c3a <__gethex+0x396>
 8009cc0:	6921      	ldr	r1, [r4, #16]
 8009cc2:	4559      	cmp	r1, fp
 8009cc4:	dd0b      	ble.n	8009cde <__gethex+0x43a>
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff fd83 	bl	80097d4 <rshift>
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	3601      	adds	r6, #1
 8009cd2:	42b3      	cmp	r3, r6
 8009cd4:	f6ff aedb 	blt.w	8009a8e <__gethex+0x1ea>
 8009cd8:	f04f 0801 	mov.w	r8, #1
 8009cdc:	e7c2      	b.n	8009c64 <__gethex+0x3c0>
 8009cde:	f015 051f 	ands.w	r5, r5, #31
 8009ce2:	d0f9      	beq.n	8009cd8 <__gethex+0x434>
 8009ce4:	9b01      	ldr	r3, [sp, #4]
 8009ce6:	441a      	add	r2, r3
 8009ce8:	f1c5 0520 	rsb	r5, r5, #32
 8009cec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009cf0:	f000 fc86 	bl	800a600 <__hi0bits>
 8009cf4:	42a8      	cmp	r0, r5
 8009cf6:	dbe6      	blt.n	8009cc6 <__gethex+0x422>
 8009cf8:	e7ee      	b.n	8009cd8 <__gethex+0x434>
 8009cfa:	bf00      	nop
 8009cfc:	0800d4e5 	.word	0x0800d4e5

08009d00 <L_shift>:
 8009d00:	f1c2 0208 	rsb	r2, r2, #8
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	f1c2 0620 	rsb	r6, r2, #32
 8009d0c:	6843      	ldr	r3, [r0, #4]
 8009d0e:	6804      	ldr	r4, [r0, #0]
 8009d10:	fa03 f506 	lsl.w	r5, r3, r6
 8009d14:	432c      	orrs	r4, r5
 8009d16:	40d3      	lsrs	r3, r2
 8009d18:	6004      	str	r4, [r0, #0]
 8009d1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d1e:	4288      	cmp	r0, r1
 8009d20:	d3f4      	bcc.n	8009d0c <L_shift+0xc>
 8009d22:	bd70      	pop	{r4, r5, r6, pc}

08009d24 <__match>:
 8009d24:	b530      	push	{r4, r5, lr}
 8009d26:	6803      	ldr	r3, [r0, #0]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d2e:	b914      	cbnz	r4, 8009d36 <__match+0x12>
 8009d30:	6003      	str	r3, [r0, #0]
 8009d32:	2001      	movs	r0, #1
 8009d34:	bd30      	pop	{r4, r5, pc}
 8009d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d3e:	2d19      	cmp	r5, #25
 8009d40:	bf98      	it	ls
 8009d42:	3220      	addls	r2, #32
 8009d44:	42a2      	cmp	r2, r4
 8009d46:	d0f0      	beq.n	8009d2a <__match+0x6>
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e7f3      	b.n	8009d34 <__match+0x10>

08009d4c <__hexnan>:
 8009d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d50:	680b      	ldr	r3, [r1, #0]
 8009d52:	6801      	ldr	r1, [r0, #0]
 8009d54:	115e      	asrs	r6, r3, #5
 8009d56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009d5a:	f013 031f 	ands.w	r3, r3, #31
 8009d5e:	b087      	sub	sp, #28
 8009d60:	bf18      	it	ne
 8009d62:	3604      	addne	r6, #4
 8009d64:	2500      	movs	r5, #0
 8009d66:	1f37      	subs	r7, r6, #4
 8009d68:	4682      	mov	sl, r0
 8009d6a:	4690      	mov	r8, r2
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009d72:	46b9      	mov	r9, r7
 8009d74:	463c      	mov	r4, r7
 8009d76:	9502      	str	r5, [sp, #8]
 8009d78:	46ab      	mov	fp, r5
 8009d7a:	784a      	ldrb	r2, [r1, #1]
 8009d7c:	1c4b      	adds	r3, r1, #1
 8009d7e:	9303      	str	r3, [sp, #12]
 8009d80:	b342      	cbz	r2, 8009dd4 <__hexnan+0x88>
 8009d82:	4610      	mov	r0, r2
 8009d84:	9105      	str	r1, [sp, #20]
 8009d86:	9204      	str	r2, [sp, #16]
 8009d88:	f7ff fd76 	bl	8009878 <__hexdig_fun>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d14f      	bne.n	8009e30 <__hexnan+0xe4>
 8009d90:	9a04      	ldr	r2, [sp, #16]
 8009d92:	9905      	ldr	r1, [sp, #20]
 8009d94:	2a20      	cmp	r2, #32
 8009d96:	d818      	bhi.n	8009dca <__hexnan+0x7e>
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	459b      	cmp	fp, r3
 8009d9c:	dd13      	ble.n	8009dc6 <__hexnan+0x7a>
 8009d9e:	454c      	cmp	r4, r9
 8009da0:	d206      	bcs.n	8009db0 <__hexnan+0x64>
 8009da2:	2d07      	cmp	r5, #7
 8009da4:	dc04      	bgt.n	8009db0 <__hexnan+0x64>
 8009da6:	462a      	mov	r2, r5
 8009da8:	4649      	mov	r1, r9
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7ff ffa8 	bl	8009d00 <L_shift>
 8009db0:	4544      	cmp	r4, r8
 8009db2:	d950      	bls.n	8009e56 <__hexnan+0x10a>
 8009db4:	2300      	movs	r3, #0
 8009db6:	f1a4 0904 	sub.w	r9, r4, #4
 8009dba:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dbe:	f8cd b008 	str.w	fp, [sp, #8]
 8009dc2:	464c      	mov	r4, r9
 8009dc4:	461d      	mov	r5, r3
 8009dc6:	9903      	ldr	r1, [sp, #12]
 8009dc8:	e7d7      	b.n	8009d7a <__hexnan+0x2e>
 8009dca:	2a29      	cmp	r2, #41	; 0x29
 8009dcc:	d155      	bne.n	8009e7a <__hexnan+0x12e>
 8009dce:	3102      	adds	r1, #2
 8009dd0:	f8ca 1000 	str.w	r1, [sl]
 8009dd4:	f1bb 0f00 	cmp.w	fp, #0
 8009dd8:	d04f      	beq.n	8009e7a <__hexnan+0x12e>
 8009dda:	454c      	cmp	r4, r9
 8009ddc:	d206      	bcs.n	8009dec <__hexnan+0xa0>
 8009dde:	2d07      	cmp	r5, #7
 8009de0:	dc04      	bgt.n	8009dec <__hexnan+0xa0>
 8009de2:	462a      	mov	r2, r5
 8009de4:	4649      	mov	r1, r9
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7ff ff8a 	bl	8009d00 <L_shift>
 8009dec:	4544      	cmp	r4, r8
 8009dee:	d934      	bls.n	8009e5a <__hexnan+0x10e>
 8009df0:	f1a8 0204 	sub.w	r2, r8, #4
 8009df4:	4623      	mov	r3, r4
 8009df6:	f853 1b04 	ldr.w	r1, [r3], #4
 8009dfa:	f842 1f04 	str.w	r1, [r2, #4]!
 8009dfe:	429f      	cmp	r7, r3
 8009e00:	d2f9      	bcs.n	8009df6 <__hexnan+0xaa>
 8009e02:	1b3b      	subs	r3, r7, r4
 8009e04:	f023 0303 	bic.w	r3, r3, #3
 8009e08:	3304      	adds	r3, #4
 8009e0a:	3e03      	subs	r6, #3
 8009e0c:	3401      	adds	r4, #1
 8009e0e:	42a6      	cmp	r6, r4
 8009e10:	bf38      	it	cc
 8009e12:	2304      	movcc	r3, #4
 8009e14:	4443      	add	r3, r8
 8009e16:	2200      	movs	r2, #0
 8009e18:	f843 2b04 	str.w	r2, [r3], #4
 8009e1c:	429f      	cmp	r7, r3
 8009e1e:	d2fb      	bcs.n	8009e18 <__hexnan+0xcc>
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	b91b      	cbnz	r3, 8009e2c <__hexnan+0xe0>
 8009e24:	4547      	cmp	r7, r8
 8009e26:	d126      	bne.n	8009e76 <__hexnan+0x12a>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	2005      	movs	r0, #5
 8009e2e:	e025      	b.n	8009e7c <__hexnan+0x130>
 8009e30:	3501      	adds	r5, #1
 8009e32:	2d08      	cmp	r5, #8
 8009e34:	f10b 0b01 	add.w	fp, fp, #1
 8009e38:	dd06      	ble.n	8009e48 <__hexnan+0xfc>
 8009e3a:	4544      	cmp	r4, r8
 8009e3c:	d9c3      	bls.n	8009dc6 <__hexnan+0x7a>
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e44:	2501      	movs	r5, #1
 8009e46:	3c04      	subs	r4, #4
 8009e48:	6822      	ldr	r2, [r4, #0]
 8009e4a:	f000 000f 	and.w	r0, r0, #15
 8009e4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009e52:	6020      	str	r0, [r4, #0]
 8009e54:	e7b7      	b.n	8009dc6 <__hexnan+0x7a>
 8009e56:	2508      	movs	r5, #8
 8009e58:	e7b5      	b.n	8009dc6 <__hexnan+0x7a>
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d0df      	beq.n	8009e20 <__hexnan+0xd4>
 8009e60:	f1c3 0320 	rsb	r3, r3, #32
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e68:	40da      	lsrs	r2, r3
 8009e6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009e6e:	4013      	ands	r3, r2
 8009e70:	f846 3c04 	str.w	r3, [r6, #-4]
 8009e74:	e7d4      	b.n	8009e20 <__hexnan+0xd4>
 8009e76:	3f04      	subs	r7, #4
 8009e78:	e7d2      	b.n	8009e20 <__hexnan+0xd4>
 8009e7a:	2004      	movs	r0, #4
 8009e7c:	b007      	add	sp, #28
 8009e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e82 <__ssputs_r>:
 8009e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e86:	688e      	ldr	r6, [r1, #8]
 8009e88:	461f      	mov	r7, r3
 8009e8a:	42be      	cmp	r6, r7
 8009e8c:	680b      	ldr	r3, [r1, #0]
 8009e8e:	4682      	mov	sl, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	4690      	mov	r8, r2
 8009e94:	d82c      	bhi.n	8009ef0 <__ssputs_r+0x6e>
 8009e96:	898a      	ldrh	r2, [r1, #12]
 8009e98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e9c:	d026      	beq.n	8009eec <__ssputs_r+0x6a>
 8009e9e:	6965      	ldr	r5, [r4, #20]
 8009ea0:	6909      	ldr	r1, [r1, #16]
 8009ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea6:	eba3 0901 	sub.w	r9, r3, r1
 8009eaa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eae:	1c7b      	adds	r3, r7, #1
 8009eb0:	444b      	add	r3, r9
 8009eb2:	106d      	asrs	r5, r5, #1
 8009eb4:	429d      	cmp	r5, r3
 8009eb6:	bf38      	it	cc
 8009eb8:	461d      	movcc	r5, r3
 8009eba:	0553      	lsls	r3, r2, #21
 8009ebc:	d527      	bpl.n	8009f0e <__ssputs_r+0x8c>
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f000 f960 	bl	800a184 <_malloc_r>
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	b360      	cbz	r0, 8009f22 <__ssputs_r+0xa0>
 8009ec8:	6921      	ldr	r1, [r4, #16]
 8009eca:	464a      	mov	r2, r9
 8009ecc:	f7fe fde9 	bl	8008aa2 <memcpy>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	6126      	str	r6, [r4, #16]
 8009ede:	6165      	str	r5, [r4, #20]
 8009ee0:	444e      	add	r6, r9
 8009ee2:	eba5 0509 	sub.w	r5, r5, r9
 8009ee6:	6026      	str	r6, [r4, #0]
 8009ee8:	60a5      	str	r5, [r4, #8]
 8009eea:	463e      	mov	r6, r7
 8009eec:	42be      	cmp	r6, r7
 8009eee:	d900      	bls.n	8009ef2 <__ssputs_r+0x70>
 8009ef0:	463e      	mov	r6, r7
 8009ef2:	6820      	ldr	r0, [r4, #0]
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	f001 f8b3 	bl	800b062 <memmove>
 8009efc:	68a3      	ldr	r3, [r4, #8]
 8009efe:	1b9b      	subs	r3, r3, r6
 8009f00:	60a3      	str	r3, [r4, #8]
 8009f02:	6823      	ldr	r3, [r4, #0]
 8009f04:	4433      	add	r3, r6
 8009f06:	6023      	str	r3, [r4, #0]
 8009f08:	2000      	movs	r0, #0
 8009f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f0e:	462a      	mov	r2, r5
 8009f10:	f000 ff74 	bl	800adfc <_realloc_r>
 8009f14:	4606      	mov	r6, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d1e0      	bne.n	8009edc <__ssputs_r+0x5a>
 8009f1a:	6921      	ldr	r1, [r4, #16]
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	f001 f967 	bl	800b1f0 <_free_r>
 8009f22:	230c      	movs	r3, #12
 8009f24:	f8ca 3000 	str.w	r3, [sl]
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f2e:	81a3      	strh	r3, [r4, #12]
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f34:	e7e9      	b.n	8009f0a <__ssputs_r+0x88>
	...

08009f38 <_svfiprintf_r>:
 8009f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3c:	4698      	mov	r8, r3
 8009f3e:	898b      	ldrh	r3, [r1, #12]
 8009f40:	061b      	lsls	r3, r3, #24
 8009f42:	b09d      	sub	sp, #116	; 0x74
 8009f44:	4607      	mov	r7, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	4614      	mov	r4, r2
 8009f4a:	d50e      	bpl.n	8009f6a <_svfiprintf_r+0x32>
 8009f4c:	690b      	ldr	r3, [r1, #16]
 8009f4e:	b963      	cbnz	r3, 8009f6a <_svfiprintf_r+0x32>
 8009f50:	2140      	movs	r1, #64	; 0x40
 8009f52:	f000 f917 	bl	800a184 <_malloc_r>
 8009f56:	6028      	str	r0, [r5, #0]
 8009f58:	6128      	str	r0, [r5, #16]
 8009f5a:	b920      	cbnz	r0, 8009f66 <_svfiprintf_r+0x2e>
 8009f5c:	230c      	movs	r3, #12
 8009f5e:	603b      	str	r3, [r7, #0]
 8009f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f64:	e0d0      	b.n	800a108 <_svfiprintf_r+0x1d0>
 8009f66:	2340      	movs	r3, #64	; 0x40
 8009f68:	616b      	str	r3, [r5, #20]
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6e:	2320      	movs	r3, #32
 8009f70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f78:	2330      	movs	r3, #48	; 0x30
 8009f7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a120 <_svfiprintf_r+0x1e8>
 8009f7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f82:	f04f 0901 	mov.w	r9, #1
 8009f86:	4623      	mov	r3, r4
 8009f88:	469a      	mov	sl, r3
 8009f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f8e:	b10a      	cbz	r2, 8009f94 <_svfiprintf_r+0x5c>
 8009f90:	2a25      	cmp	r2, #37	; 0x25
 8009f92:	d1f9      	bne.n	8009f88 <_svfiprintf_r+0x50>
 8009f94:	ebba 0b04 	subs.w	fp, sl, r4
 8009f98:	d00b      	beq.n	8009fb2 <_svfiprintf_r+0x7a>
 8009f9a:	465b      	mov	r3, fp
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ff6e 	bl	8009e82 <__ssputs_r>
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	f000 80a9 	beq.w	800a0fe <_svfiprintf_r+0x1c6>
 8009fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fae:	445a      	add	r2, fp
 8009fb0:	9209      	str	r2, [sp, #36]	; 0x24
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 80a1 	beq.w	800a0fe <_svfiprintf_r+0x1c6>
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc6:	f10a 0a01 	add.w	sl, sl, #1
 8009fca:	9304      	str	r3, [sp, #16]
 8009fcc:	9307      	str	r3, [sp, #28]
 8009fce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fd2:	931a      	str	r3, [sp, #104]	; 0x68
 8009fd4:	4654      	mov	r4, sl
 8009fd6:	2205      	movs	r2, #5
 8009fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fdc:	4850      	ldr	r0, [pc, #320]	; (800a120 <_svfiprintf_r+0x1e8>)
 8009fde:	f7f6 f917 	bl	8000210 <memchr>
 8009fe2:	9a04      	ldr	r2, [sp, #16]
 8009fe4:	b9d8      	cbnz	r0, 800a01e <_svfiprintf_r+0xe6>
 8009fe6:	06d0      	lsls	r0, r2, #27
 8009fe8:	bf44      	itt	mi
 8009fea:	2320      	movmi	r3, #32
 8009fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ff0:	0711      	lsls	r1, r2, #28
 8009ff2:	bf44      	itt	mi
 8009ff4:	232b      	movmi	r3, #43	; 0x2b
 8009ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffe:	2b2a      	cmp	r3, #42	; 0x2a
 800a000:	d015      	beq.n	800a02e <_svfiprintf_r+0xf6>
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4654      	mov	r4, sl
 800a006:	2000      	movs	r0, #0
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4621      	mov	r1, r4
 800a00e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a012:	3b30      	subs	r3, #48	; 0x30
 800a014:	2b09      	cmp	r3, #9
 800a016:	d94d      	bls.n	800a0b4 <_svfiprintf_r+0x17c>
 800a018:	b1b0      	cbz	r0, 800a048 <_svfiprintf_r+0x110>
 800a01a:	9207      	str	r2, [sp, #28]
 800a01c:	e014      	b.n	800a048 <_svfiprintf_r+0x110>
 800a01e:	eba0 0308 	sub.w	r3, r0, r8
 800a022:	fa09 f303 	lsl.w	r3, r9, r3
 800a026:	4313      	orrs	r3, r2
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	46a2      	mov	sl, r4
 800a02c:	e7d2      	b.n	8009fd4 <_svfiprintf_r+0x9c>
 800a02e:	9b03      	ldr	r3, [sp, #12]
 800a030:	1d19      	adds	r1, r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	9103      	str	r1, [sp, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	bfbb      	ittet	lt
 800a03a:	425b      	neglt	r3, r3
 800a03c:	f042 0202 	orrlt.w	r2, r2, #2
 800a040:	9307      	strge	r3, [sp, #28]
 800a042:	9307      	strlt	r3, [sp, #28]
 800a044:	bfb8      	it	lt
 800a046:	9204      	strlt	r2, [sp, #16]
 800a048:	7823      	ldrb	r3, [r4, #0]
 800a04a:	2b2e      	cmp	r3, #46	; 0x2e
 800a04c:	d10c      	bne.n	800a068 <_svfiprintf_r+0x130>
 800a04e:	7863      	ldrb	r3, [r4, #1]
 800a050:	2b2a      	cmp	r3, #42	; 0x2a
 800a052:	d134      	bne.n	800a0be <_svfiprintf_r+0x186>
 800a054:	9b03      	ldr	r3, [sp, #12]
 800a056:	1d1a      	adds	r2, r3, #4
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	9203      	str	r2, [sp, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	bfb8      	it	lt
 800a060:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a064:	3402      	adds	r4, #2
 800a066:	9305      	str	r3, [sp, #20]
 800a068:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a130 <_svfiprintf_r+0x1f8>
 800a06c:	7821      	ldrb	r1, [r4, #0]
 800a06e:	2203      	movs	r2, #3
 800a070:	4650      	mov	r0, sl
 800a072:	f7f6 f8cd 	bl	8000210 <memchr>
 800a076:	b138      	cbz	r0, 800a088 <_svfiprintf_r+0x150>
 800a078:	9b04      	ldr	r3, [sp, #16]
 800a07a:	eba0 000a 	sub.w	r0, r0, sl
 800a07e:	2240      	movs	r2, #64	; 0x40
 800a080:	4082      	lsls	r2, r0
 800a082:	4313      	orrs	r3, r2
 800a084:	3401      	adds	r4, #1
 800a086:	9304      	str	r3, [sp, #16]
 800a088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08c:	4825      	ldr	r0, [pc, #148]	; (800a124 <_svfiprintf_r+0x1ec>)
 800a08e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a092:	2206      	movs	r2, #6
 800a094:	f7f6 f8bc 	bl	8000210 <memchr>
 800a098:	2800      	cmp	r0, #0
 800a09a:	d038      	beq.n	800a10e <_svfiprintf_r+0x1d6>
 800a09c:	4b22      	ldr	r3, [pc, #136]	; (800a128 <_svfiprintf_r+0x1f0>)
 800a09e:	bb1b      	cbnz	r3, 800a0e8 <_svfiprintf_r+0x1b0>
 800a0a0:	9b03      	ldr	r3, [sp, #12]
 800a0a2:	3307      	adds	r3, #7
 800a0a4:	f023 0307 	bic.w	r3, r3, #7
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	9303      	str	r3, [sp, #12]
 800a0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ae:	4433      	add	r3, r6
 800a0b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b2:	e768      	b.n	8009f86 <_svfiprintf_r+0x4e>
 800a0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b8:	460c      	mov	r4, r1
 800a0ba:	2001      	movs	r0, #1
 800a0bc:	e7a6      	b.n	800a00c <_svfiprintf_r+0xd4>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	3401      	adds	r4, #1
 800a0c2:	9305      	str	r3, [sp, #20]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	f04f 0c0a 	mov.w	ip, #10
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0d0:	3a30      	subs	r2, #48	; 0x30
 800a0d2:	2a09      	cmp	r2, #9
 800a0d4:	d903      	bls.n	800a0de <_svfiprintf_r+0x1a6>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d0c6      	beq.n	800a068 <_svfiprintf_r+0x130>
 800a0da:	9105      	str	r1, [sp, #20]
 800a0dc:	e7c4      	b.n	800a068 <_svfiprintf_r+0x130>
 800a0de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e7f0      	b.n	800a0ca <_svfiprintf_r+0x192>
 800a0e8:	ab03      	add	r3, sp, #12
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	462a      	mov	r2, r5
 800a0ee:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <_svfiprintf_r+0x1f4>)
 800a0f0:	a904      	add	r1, sp, #16
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f7fc fe98 	bl	8006e28 <_printf_float>
 800a0f8:	1c42      	adds	r2, r0, #1
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	d1d6      	bne.n	800a0ac <_svfiprintf_r+0x174>
 800a0fe:	89ab      	ldrh	r3, [r5, #12]
 800a100:	065b      	lsls	r3, r3, #25
 800a102:	f53f af2d 	bmi.w	8009f60 <_svfiprintf_r+0x28>
 800a106:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a108:	b01d      	add	sp, #116	; 0x74
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	ab03      	add	r3, sp, #12
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	462a      	mov	r2, r5
 800a114:	4b05      	ldr	r3, [pc, #20]	; (800a12c <_svfiprintf_r+0x1f4>)
 800a116:	a904      	add	r1, sp, #16
 800a118:	4638      	mov	r0, r7
 800a11a:	f7fd f929 	bl	8007370 <_printf_i>
 800a11e:	e7eb      	b.n	800a0f8 <_svfiprintf_r+0x1c0>
 800a120:	0800d556 	.word	0x0800d556
 800a124:	0800d560 	.word	0x0800d560
 800a128:	08006e29 	.word	0x08006e29
 800a12c:	08009e83 	.word	0x08009e83
 800a130:	0800d55c 	.word	0x0800d55c

0800a134 <malloc>:
 800a134:	4b02      	ldr	r3, [pc, #8]	; (800a140 <malloc+0xc>)
 800a136:	4601      	mov	r1, r0
 800a138:	6818      	ldr	r0, [r3, #0]
 800a13a:	f000 b823 	b.w	800a184 <_malloc_r>
 800a13e:	bf00      	nop
 800a140:	200001fc 	.word	0x200001fc

0800a144 <sbrk_aligned>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	4e0e      	ldr	r6, [pc, #56]	; (800a180 <sbrk_aligned+0x3c>)
 800a148:	460c      	mov	r4, r1
 800a14a:	6831      	ldr	r1, [r6, #0]
 800a14c:	4605      	mov	r5, r0
 800a14e:	b911      	cbnz	r1, 800a156 <sbrk_aligned+0x12>
 800a150:	f000 fff8 	bl	800b144 <_sbrk_r>
 800a154:	6030      	str	r0, [r6, #0]
 800a156:	4621      	mov	r1, r4
 800a158:	4628      	mov	r0, r5
 800a15a:	f000 fff3 	bl	800b144 <_sbrk_r>
 800a15e:	1c43      	adds	r3, r0, #1
 800a160:	d00a      	beq.n	800a178 <sbrk_aligned+0x34>
 800a162:	1cc4      	adds	r4, r0, #3
 800a164:	f024 0403 	bic.w	r4, r4, #3
 800a168:	42a0      	cmp	r0, r4
 800a16a:	d007      	beq.n	800a17c <sbrk_aligned+0x38>
 800a16c:	1a21      	subs	r1, r4, r0
 800a16e:	4628      	mov	r0, r5
 800a170:	f000 ffe8 	bl	800b144 <_sbrk_r>
 800a174:	3001      	adds	r0, #1
 800a176:	d101      	bne.n	800a17c <sbrk_aligned+0x38>
 800a178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a17c:	4620      	mov	r0, r4
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	2000aaa4 	.word	0x2000aaa4

0800a184 <_malloc_r>:
 800a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a188:	1ccd      	adds	r5, r1, #3
 800a18a:	f025 0503 	bic.w	r5, r5, #3
 800a18e:	3508      	adds	r5, #8
 800a190:	2d0c      	cmp	r5, #12
 800a192:	bf38      	it	cc
 800a194:	250c      	movcc	r5, #12
 800a196:	2d00      	cmp	r5, #0
 800a198:	4607      	mov	r7, r0
 800a19a:	db01      	blt.n	800a1a0 <_malloc_r+0x1c>
 800a19c:	42a9      	cmp	r1, r5
 800a19e:	d905      	bls.n	800a1ac <_malloc_r+0x28>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	603b      	str	r3, [r7, #0]
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a280 <_malloc_r+0xfc>
 800a1b0:	f000 f928 	bl	800a404 <__malloc_lock>
 800a1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b8:	461c      	mov	r4, r3
 800a1ba:	bb5c      	cbnz	r4, 800a214 <_malloc_r+0x90>
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4638      	mov	r0, r7
 800a1c0:	f7ff ffc0 	bl	800a144 <sbrk_aligned>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	d155      	bne.n	800a276 <_malloc_r+0xf2>
 800a1ca:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ce:	4626      	mov	r6, r4
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	d145      	bne.n	800a260 <_malloc_r+0xdc>
 800a1d4:	2c00      	cmp	r4, #0
 800a1d6:	d048      	beq.n	800a26a <_malloc_r+0xe6>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4638      	mov	r0, r7
 800a1de:	eb04 0903 	add.w	r9, r4, r3
 800a1e2:	f000 ffaf 	bl	800b144 <_sbrk_r>
 800a1e6:	4581      	cmp	r9, r0
 800a1e8:	d13f      	bne.n	800a26a <_malloc_r+0xe6>
 800a1ea:	6821      	ldr	r1, [r4, #0]
 800a1ec:	1a6d      	subs	r5, r5, r1
 800a1ee:	4629      	mov	r1, r5
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f7ff ffa7 	bl	800a144 <sbrk_aligned>
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	d037      	beq.n	800a26a <_malloc_r+0xe6>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	442b      	add	r3, r5
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	f8d8 3000 	ldr.w	r3, [r8]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d038      	beq.n	800a27a <_malloc_r+0xf6>
 800a208:	685a      	ldr	r2, [r3, #4]
 800a20a:	42a2      	cmp	r2, r4
 800a20c:	d12b      	bne.n	800a266 <_malloc_r+0xe2>
 800a20e:	2200      	movs	r2, #0
 800a210:	605a      	str	r2, [r3, #4]
 800a212:	e00f      	b.n	800a234 <_malloc_r+0xb0>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	1b52      	subs	r2, r2, r5
 800a218:	d41f      	bmi.n	800a25a <_malloc_r+0xd6>
 800a21a:	2a0b      	cmp	r2, #11
 800a21c:	d917      	bls.n	800a24e <_malloc_r+0xca>
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	42a3      	cmp	r3, r4
 800a222:	6025      	str	r5, [r4, #0]
 800a224:	bf18      	it	ne
 800a226:	6059      	strne	r1, [r3, #4]
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	bf08      	it	eq
 800a22c:	f8c8 1000 	streq.w	r1, [r8]
 800a230:	5162      	str	r2, [r4, r5]
 800a232:	604b      	str	r3, [r1, #4]
 800a234:	4638      	mov	r0, r7
 800a236:	f104 060b 	add.w	r6, r4, #11
 800a23a:	f000 f8e9 	bl	800a410 <__malloc_unlock>
 800a23e:	f026 0607 	bic.w	r6, r6, #7
 800a242:	1d23      	adds	r3, r4, #4
 800a244:	1af2      	subs	r2, r6, r3
 800a246:	d0ae      	beq.n	800a1a6 <_malloc_r+0x22>
 800a248:	1b9b      	subs	r3, r3, r6
 800a24a:	50a3      	str	r3, [r4, r2]
 800a24c:	e7ab      	b.n	800a1a6 <_malloc_r+0x22>
 800a24e:	42a3      	cmp	r3, r4
 800a250:	6862      	ldr	r2, [r4, #4]
 800a252:	d1dd      	bne.n	800a210 <_malloc_r+0x8c>
 800a254:	f8c8 2000 	str.w	r2, [r8]
 800a258:	e7ec      	b.n	800a234 <_malloc_r+0xb0>
 800a25a:	4623      	mov	r3, r4
 800a25c:	6864      	ldr	r4, [r4, #4]
 800a25e:	e7ac      	b.n	800a1ba <_malloc_r+0x36>
 800a260:	4634      	mov	r4, r6
 800a262:	6876      	ldr	r6, [r6, #4]
 800a264:	e7b4      	b.n	800a1d0 <_malloc_r+0x4c>
 800a266:	4613      	mov	r3, r2
 800a268:	e7cc      	b.n	800a204 <_malloc_r+0x80>
 800a26a:	230c      	movs	r3, #12
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	4638      	mov	r0, r7
 800a270:	f000 f8ce 	bl	800a410 <__malloc_unlock>
 800a274:	e797      	b.n	800a1a6 <_malloc_r+0x22>
 800a276:	6025      	str	r5, [r4, #0]
 800a278:	e7dc      	b.n	800a234 <_malloc_r+0xb0>
 800a27a:	605b      	str	r3, [r3, #4]
 800a27c:	deff      	udf	#255	; 0xff
 800a27e:	bf00      	nop
 800a280:	2000aaa0 	.word	0x2000aaa0

0800a284 <__ascii_mbtowc>:
 800a284:	b082      	sub	sp, #8
 800a286:	b901      	cbnz	r1, 800a28a <__ascii_mbtowc+0x6>
 800a288:	a901      	add	r1, sp, #4
 800a28a:	b142      	cbz	r2, 800a29e <__ascii_mbtowc+0x1a>
 800a28c:	b14b      	cbz	r3, 800a2a2 <__ascii_mbtowc+0x1e>
 800a28e:	7813      	ldrb	r3, [r2, #0]
 800a290:	600b      	str	r3, [r1, #0]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	1e10      	subs	r0, r2, #0
 800a296:	bf18      	it	ne
 800a298:	2001      	movne	r0, #1
 800a29a:	b002      	add	sp, #8
 800a29c:	4770      	bx	lr
 800a29e:	4610      	mov	r0, r2
 800a2a0:	e7fb      	b.n	800a29a <__ascii_mbtowc+0x16>
 800a2a2:	f06f 0001 	mvn.w	r0, #1
 800a2a6:	e7f8      	b.n	800a29a <__ascii_mbtowc+0x16>

0800a2a8 <__sflush_r>:
 800a2a8:	898a      	ldrh	r2, [r1, #12]
 800a2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	0710      	lsls	r0, r2, #28
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	d458      	bmi.n	800a368 <__sflush_r+0xc0>
 800a2b6:	684b      	ldr	r3, [r1, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dc05      	bgt.n	800a2c8 <__sflush_r+0x20>
 800a2bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dc02      	bgt.n	800a2c8 <__sflush_r+0x20>
 800a2c2:	2000      	movs	r0, #0
 800a2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	d0f9      	beq.n	800a2c2 <__sflush_r+0x1a>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2d4:	682f      	ldr	r7, [r5, #0]
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	d032      	beq.n	800a342 <__sflush_r+0x9a>
 800a2dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	075a      	lsls	r2, r3, #29
 800a2e2:	d505      	bpl.n	800a2f0 <__sflush_r+0x48>
 800a2e4:	6863      	ldr	r3, [r4, #4]
 800a2e6:	1ac0      	subs	r0, r0, r3
 800a2e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2ea:	b10b      	cbz	r3, 800a2f0 <__sflush_r+0x48>
 800a2ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2ee:	1ac0      	subs	r0, r0, r3
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2f6:	6a21      	ldr	r1, [r4, #32]
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b0      	blx	r6
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	d106      	bne.n	800a310 <__sflush_r+0x68>
 800a302:	6829      	ldr	r1, [r5, #0]
 800a304:	291d      	cmp	r1, #29
 800a306:	d82b      	bhi.n	800a360 <__sflush_r+0xb8>
 800a308:	4a29      	ldr	r2, [pc, #164]	; (800a3b0 <__sflush_r+0x108>)
 800a30a:	410a      	asrs	r2, r1
 800a30c:	07d6      	lsls	r6, r2, #31
 800a30e:	d427      	bmi.n	800a360 <__sflush_r+0xb8>
 800a310:	2200      	movs	r2, #0
 800a312:	6062      	str	r2, [r4, #4]
 800a314:	04d9      	lsls	r1, r3, #19
 800a316:	6922      	ldr	r2, [r4, #16]
 800a318:	6022      	str	r2, [r4, #0]
 800a31a:	d504      	bpl.n	800a326 <__sflush_r+0x7e>
 800a31c:	1c42      	adds	r2, r0, #1
 800a31e:	d101      	bne.n	800a324 <__sflush_r+0x7c>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b903      	cbnz	r3, 800a326 <__sflush_r+0x7e>
 800a324:	6560      	str	r0, [r4, #84]	; 0x54
 800a326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a328:	602f      	str	r7, [r5, #0]
 800a32a:	2900      	cmp	r1, #0
 800a32c:	d0c9      	beq.n	800a2c2 <__sflush_r+0x1a>
 800a32e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a332:	4299      	cmp	r1, r3
 800a334:	d002      	beq.n	800a33c <__sflush_r+0x94>
 800a336:	4628      	mov	r0, r5
 800a338:	f000 ff5a 	bl	800b1f0 <_free_r>
 800a33c:	2000      	movs	r0, #0
 800a33e:	6360      	str	r0, [r4, #52]	; 0x34
 800a340:	e7c0      	b.n	800a2c4 <__sflush_r+0x1c>
 800a342:	2301      	movs	r3, #1
 800a344:	4628      	mov	r0, r5
 800a346:	47b0      	blx	r6
 800a348:	1c41      	adds	r1, r0, #1
 800a34a:	d1c8      	bne.n	800a2de <__sflush_r+0x36>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0c5      	beq.n	800a2de <__sflush_r+0x36>
 800a352:	2b1d      	cmp	r3, #29
 800a354:	d001      	beq.n	800a35a <__sflush_r+0xb2>
 800a356:	2b16      	cmp	r3, #22
 800a358:	d101      	bne.n	800a35e <__sflush_r+0xb6>
 800a35a:	602f      	str	r7, [r5, #0]
 800a35c:	e7b1      	b.n	800a2c2 <__sflush_r+0x1a>
 800a35e:	89a3      	ldrh	r3, [r4, #12]
 800a360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a364:	81a3      	strh	r3, [r4, #12]
 800a366:	e7ad      	b.n	800a2c4 <__sflush_r+0x1c>
 800a368:	690f      	ldr	r7, [r1, #16]
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	d0a9      	beq.n	800a2c2 <__sflush_r+0x1a>
 800a36e:	0793      	lsls	r3, r2, #30
 800a370:	680e      	ldr	r6, [r1, #0]
 800a372:	bf08      	it	eq
 800a374:	694b      	ldreq	r3, [r1, #20]
 800a376:	600f      	str	r7, [r1, #0]
 800a378:	bf18      	it	ne
 800a37a:	2300      	movne	r3, #0
 800a37c:	eba6 0807 	sub.w	r8, r6, r7
 800a380:	608b      	str	r3, [r1, #8]
 800a382:	f1b8 0f00 	cmp.w	r8, #0
 800a386:	dd9c      	ble.n	800a2c2 <__sflush_r+0x1a>
 800a388:	6a21      	ldr	r1, [r4, #32]
 800a38a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a38c:	4643      	mov	r3, r8
 800a38e:	463a      	mov	r2, r7
 800a390:	4628      	mov	r0, r5
 800a392:	47b0      	blx	r6
 800a394:	2800      	cmp	r0, #0
 800a396:	dc06      	bgt.n	800a3a6 <__sflush_r+0xfe>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3a4:	e78e      	b.n	800a2c4 <__sflush_r+0x1c>
 800a3a6:	4407      	add	r7, r0
 800a3a8:	eba8 0800 	sub.w	r8, r8, r0
 800a3ac:	e7e9      	b.n	800a382 <__sflush_r+0xda>
 800a3ae:	bf00      	nop
 800a3b0:	dfbffffe 	.word	0xdfbffffe

0800a3b4 <_fflush_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	690b      	ldr	r3, [r1, #16]
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	b913      	cbnz	r3, 800a3c4 <_fflush_r+0x10>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	b118      	cbz	r0, 800a3ce <_fflush_r+0x1a>
 800a3c6:	6a03      	ldr	r3, [r0, #32]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <_fflush_r+0x1a>
 800a3ca:	f7fd fbaf 	bl	8007b2c <__sinit>
 800a3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0f3      	beq.n	800a3be <_fflush_r+0xa>
 800a3d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3d8:	07d0      	lsls	r0, r2, #31
 800a3da:	d404      	bmi.n	800a3e6 <_fflush_r+0x32>
 800a3dc:	0599      	lsls	r1, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_fflush_r+0x32>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3e2:	f7fe fb5c 	bl	8008a9e <__retarget_lock_acquire_recursive>
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	f7ff ff5d 	bl	800a2a8 <__sflush_r>
 800a3ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3f0:	07da      	lsls	r2, r3, #31
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	d4e4      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	059b      	lsls	r3, r3, #22
 800a3fa:	d4e1      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a3fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3fe:	f7fe fb4f 	bl	8008aa0 <__retarget_lock_release_recursive>
 800a402:	e7dd      	b.n	800a3c0 <_fflush_r+0xc>

0800a404 <__malloc_lock>:
 800a404:	4801      	ldr	r0, [pc, #4]	; (800a40c <__malloc_lock+0x8>)
 800a406:	f7fe bb4a 	b.w	8008a9e <__retarget_lock_acquire_recursive>
 800a40a:	bf00      	nop
 800a40c:	2000aa9c 	.word	0x2000aa9c

0800a410 <__malloc_unlock>:
 800a410:	4801      	ldr	r0, [pc, #4]	; (800a418 <__malloc_unlock+0x8>)
 800a412:	f7fe bb45 	b.w	8008aa0 <__retarget_lock_release_recursive>
 800a416:	bf00      	nop
 800a418:	2000aa9c 	.word	0x2000aa9c

0800a41c <_Balloc>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	69c6      	ldr	r6, [r0, #28]
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	b976      	cbnz	r6, 800a444 <_Balloc+0x28>
 800a426:	2010      	movs	r0, #16
 800a428:	f7ff fe84 	bl	800a134 <malloc>
 800a42c:	4602      	mov	r2, r0
 800a42e:	61e0      	str	r0, [r4, #28]
 800a430:	b920      	cbnz	r0, 800a43c <_Balloc+0x20>
 800a432:	4b18      	ldr	r3, [pc, #96]	; (800a494 <_Balloc+0x78>)
 800a434:	4818      	ldr	r0, [pc, #96]	; (800a498 <_Balloc+0x7c>)
 800a436:	216b      	movs	r1, #107	; 0x6b
 800a438:	f000 fea6 	bl	800b188 <__assert_func>
 800a43c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a440:	6006      	str	r6, [r0, #0]
 800a442:	60c6      	str	r6, [r0, #12]
 800a444:	69e6      	ldr	r6, [r4, #28]
 800a446:	68f3      	ldr	r3, [r6, #12]
 800a448:	b183      	cbz	r3, 800a46c <_Balloc+0x50>
 800a44a:	69e3      	ldr	r3, [r4, #28]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a452:	b9b8      	cbnz	r0, 800a484 <_Balloc+0x68>
 800a454:	2101      	movs	r1, #1
 800a456:	fa01 f605 	lsl.w	r6, r1, r5
 800a45a:	1d72      	adds	r2, r6, #5
 800a45c:	0092      	lsls	r2, r2, #2
 800a45e:	4620      	mov	r0, r4
 800a460:	f000 feb0 	bl	800b1c4 <_calloc_r>
 800a464:	b160      	cbz	r0, 800a480 <_Balloc+0x64>
 800a466:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a46a:	e00e      	b.n	800a48a <_Balloc+0x6e>
 800a46c:	2221      	movs	r2, #33	; 0x21
 800a46e:	2104      	movs	r1, #4
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fea7 	bl	800b1c4 <_calloc_r>
 800a476:	69e3      	ldr	r3, [r4, #28]
 800a478:	60f0      	str	r0, [r6, #12]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e4      	bne.n	800a44a <_Balloc+0x2e>
 800a480:	2000      	movs	r0, #0
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	6802      	ldr	r2, [r0, #0]
 800a486:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a48a:	2300      	movs	r3, #0
 800a48c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a490:	e7f7      	b.n	800a482 <_Balloc+0x66>
 800a492:	bf00      	nop
 800a494:	0800d476 	.word	0x0800d476
 800a498:	0800d567 	.word	0x0800d567

0800a49c <_Bfree>:
 800a49c:	b570      	push	{r4, r5, r6, lr}
 800a49e:	69c6      	ldr	r6, [r0, #28]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	b976      	cbnz	r6, 800a4c4 <_Bfree+0x28>
 800a4a6:	2010      	movs	r0, #16
 800a4a8:	f7ff fe44 	bl	800a134 <malloc>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	61e8      	str	r0, [r5, #28]
 800a4b0:	b920      	cbnz	r0, 800a4bc <_Bfree+0x20>
 800a4b2:	4b09      	ldr	r3, [pc, #36]	; (800a4d8 <_Bfree+0x3c>)
 800a4b4:	4809      	ldr	r0, [pc, #36]	; (800a4dc <_Bfree+0x40>)
 800a4b6:	218f      	movs	r1, #143	; 0x8f
 800a4b8:	f000 fe66 	bl	800b188 <__assert_func>
 800a4bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4c0:	6006      	str	r6, [r0, #0]
 800a4c2:	60c6      	str	r6, [r0, #12]
 800a4c4:	b13c      	cbz	r4, 800a4d6 <_Bfree+0x3a>
 800a4c6:	69eb      	ldr	r3, [r5, #28]
 800a4c8:	6862      	ldr	r2, [r4, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4d0:	6021      	str	r1, [r4, #0]
 800a4d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a4d6:	bd70      	pop	{r4, r5, r6, pc}
 800a4d8:	0800d476 	.word	0x0800d476
 800a4dc:	0800d567 	.word	0x0800d567

0800a4e0 <__multadd>:
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	690d      	ldr	r5, [r1, #16]
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	460c      	mov	r4, r1
 800a4ea:	461e      	mov	r6, r3
 800a4ec:	f101 0c14 	add.w	ip, r1, #20
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a4f6:	b299      	uxth	r1, r3
 800a4f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a4fc:	0c1e      	lsrs	r6, r3, #16
 800a4fe:	0c0b      	lsrs	r3, r1, #16
 800a500:	fb02 3306 	mla	r3, r2, r6, r3
 800a504:	b289      	uxth	r1, r1
 800a506:	3001      	adds	r0, #1
 800a508:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a50c:	4285      	cmp	r5, r0
 800a50e:	f84c 1b04 	str.w	r1, [ip], #4
 800a512:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a516:	dcec      	bgt.n	800a4f2 <__multadd+0x12>
 800a518:	b30e      	cbz	r6, 800a55e <__multadd+0x7e>
 800a51a:	68a3      	ldr	r3, [r4, #8]
 800a51c:	42ab      	cmp	r3, r5
 800a51e:	dc19      	bgt.n	800a554 <__multadd+0x74>
 800a520:	6861      	ldr	r1, [r4, #4]
 800a522:	4638      	mov	r0, r7
 800a524:	3101      	adds	r1, #1
 800a526:	f7ff ff79 	bl	800a41c <_Balloc>
 800a52a:	4680      	mov	r8, r0
 800a52c:	b928      	cbnz	r0, 800a53a <__multadd+0x5a>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b0c      	ldr	r3, [pc, #48]	; (800a564 <__multadd+0x84>)
 800a532:	480d      	ldr	r0, [pc, #52]	; (800a568 <__multadd+0x88>)
 800a534:	21ba      	movs	r1, #186	; 0xba
 800a536:	f000 fe27 	bl	800b188 <__assert_func>
 800a53a:	6922      	ldr	r2, [r4, #16]
 800a53c:	3202      	adds	r2, #2
 800a53e:	f104 010c 	add.w	r1, r4, #12
 800a542:	0092      	lsls	r2, r2, #2
 800a544:	300c      	adds	r0, #12
 800a546:	f7fe faac 	bl	8008aa2 <memcpy>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4638      	mov	r0, r7
 800a54e:	f7ff ffa5 	bl	800a49c <_Bfree>
 800a552:	4644      	mov	r4, r8
 800a554:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a558:	3501      	adds	r5, #1
 800a55a:	615e      	str	r6, [r3, #20]
 800a55c:	6125      	str	r5, [r4, #16]
 800a55e:	4620      	mov	r0, r4
 800a560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a564:	0800d4e5 	.word	0x0800d4e5
 800a568:	0800d567 	.word	0x0800d567

0800a56c <__s2b>:
 800a56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	4615      	mov	r5, r2
 800a574:	461f      	mov	r7, r3
 800a576:	2209      	movs	r2, #9
 800a578:	3308      	adds	r3, #8
 800a57a:	4606      	mov	r6, r0
 800a57c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a580:	2100      	movs	r1, #0
 800a582:	2201      	movs	r2, #1
 800a584:	429a      	cmp	r2, r3
 800a586:	db09      	blt.n	800a59c <__s2b+0x30>
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff ff47 	bl	800a41c <_Balloc>
 800a58e:	b940      	cbnz	r0, 800a5a2 <__s2b+0x36>
 800a590:	4602      	mov	r2, r0
 800a592:	4b19      	ldr	r3, [pc, #100]	; (800a5f8 <__s2b+0x8c>)
 800a594:	4819      	ldr	r0, [pc, #100]	; (800a5fc <__s2b+0x90>)
 800a596:	21d3      	movs	r1, #211	; 0xd3
 800a598:	f000 fdf6 	bl	800b188 <__assert_func>
 800a59c:	0052      	lsls	r2, r2, #1
 800a59e:	3101      	adds	r1, #1
 800a5a0:	e7f0      	b.n	800a584 <__s2b+0x18>
 800a5a2:	9b08      	ldr	r3, [sp, #32]
 800a5a4:	6143      	str	r3, [r0, #20]
 800a5a6:	2d09      	cmp	r5, #9
 800a5a8:	f04f 0301 	mov.w	r3, #1
 800a5ac:	6103      	str	r3, [r0, #16]
 800a5ae:	dd16      	ble.n	800a5de <__s2b+0x72>
 800a5b0:	f104 0909 	add.w	r9, r4, #9
 800a5b4:	46c8      	mov	r8, r9
 800a5b6:	442c      	add	r4, r5
 800a5b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a5bc:	4601      	mov	r1, r0
 800a5be:	3b30      	subs	r3, #48	; 0x30
 800a5c0:	220a      	movs	r2, #10
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ff8c 	bl	800a4e0 <__multadd>
 800a5c8:	45a0      	cmp	r8, r4
 800a5ca:	d1f5      	bne.n	800a5b8 <__s2b+0x4c>
 800a5cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a5d0:	444c      	add	r4, r9
 800a5d2:	1b2d      	subs	r5, r5, r4
 800a5d4:	1963      	adds	r3, r4, r5
 800a5d6:	42bb      	cmp	r3, r7
 800a5d8:	db04      	blt.n	800a5e4 <__s2b+0x78>
 800a5da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5de:	340a      	adds	r4, #10
 800a5e0:	2509      	movs	r5, #9
 800a5e2:	e7f6      	b.n	800a5d2 <__s2b+0x66>
 800a5e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5e8:	4601      	mov	r1, r0
 800a5ea:	3b30      	subs	r3, #48	; 0x30
 800a5ec:	220a      	movs	r2, #10
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f7ff ff76 	bl	800a4e0 <__multadd>
 800a5f4:	e7ee      	b.n	800a5d4 <__s2b+0x68>
 800a5f6:	bf00      	nop
 800a5f8:	0800d4e5 	.word	0x0800d4e5
 800a5fc:	0800d567 	.word	0x0800d567

0800a600 <__hi0bits>:
 800a600:	0c03      	lsrs	r3, r0, #16
 800a602:	041b      	lsls	r3, r3, #16
 800a604:	b9d3      	cbnz	r3, 800a63c <__hi0bits+0x3c>
 800a606:	0400      	lsls	r0, r0, #16
 800a608:	2310      	movs	r3, #16
 800a60a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a60e:	bf04      	itt	eq
 800a610:	0200      	lsleq	r0, r0, #8
 800a612:	3308      	addeq	r3, #8
 800a614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a618:	bf04      	itt	eq
 800a61a:	0100      	lsleq	r0, r0, #4
 800a61c:	3304      	addeq	r3, #4
 800a61e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a622:	bf04      	itt	eq
 800a624:	0080      	lsleq	r0, r0, #2
 800a626:	3302      	addeq	r3, #2
 800a628:	2800      	cmp	r0, #0
 800a62a:	db05      	blt.n	800a638 <__hi0bits+0x38>
 800a62c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a630:	f103 0301 	add.w	r3, r3, #1
 800a634:	bf08      	it	eq
 800a636:	2320      	moveq	r3, #32
 800a638:	4618      	mov	r0, r3
 800a63a:	4770      	bx	lr
 800a63c:	2300      	movs	r3, #0
 800a63e:	e7e4      	b.n	800a60a <__hi0bits+0xa>

0800a640 <__lo0bits>:
 800a640:	6803      	ldr	r3, [r0, #0]
 800a642:	f013 0207 	ands.w	r2, r3, #7
 800a646:	d00c      	beq.n	800a662 <__lo0bits+0x22>
 800a648:	07d9      	lsls	r1, r3, #31
 800a64a:	d422      	bmi.n	800a692 <__lo0bits+0x52>
 800a64c:	079a      	lsls	r2, r3, #30
 800a64e:	bf49      	itett	mi
 800a650:	085b      	lsrmi	r3, r3, #1
 800a652:	089b      	lsrpl	r3, r3, #2
 800a654:	6003      	strmi	r3, [r0, #0]
 800a656:	2201      	movmi	r2, #1
 800a658:	bf5c      	itt	pl
 800a65a:	6003      	strpl	r3, [r0, #0]
 800a65c:	2202      	movpl	r2, #2
 800a65e:	4610      	mov	r0, r2
 800a660:	4770      	bx	lr
 800a662:	b299      	uxth	r1, r3
 800a664:	b909      	cbnz	r1, 800a66a <__lo0bits+0x2a>
 800a666:	0c1b      	lsrs	r3, r3, #16
 800a668:	2210      	movs	r2, #16
 800a66a:	b2d9      	uxtb	r1, r3
 800a66c:	b909      	cbnz	r1, 800a672 <__lo0bits+0x32>
 800a66e:	3208      	adds	r2, #8
 800a670:	0a1b      	lsrs	r3, r3, #8
 800a672:	0719      	lsls	r1, r3, #28
 800a674:	bf04      	itt	eq
 800a676:	091b      	lsreq	r3, r3, #4
 800a678:	3204      	addeq	r2, #4
 800a67a:	0799      	lsls	r1, r3, #30
 800a67c:	bf04      	itt	eq
 800a67e:	089b      	lsreq	r3, r3, #2
 800a680:	3202      	addeq	r2, #2
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	d403      	bmi.n	800a68e <__lo0bits+0x4e>
 800a686:	085b      	lsrs	r3, r3, #1
 800a688:	f102 0201 	add.w	r2, r2, #1
 800a68c:	d003      	beq.n	800a696 <__lo0bits+0x56>
 800a68e:	6003      	str	r3, [r0, #0]
 800a690:	e7e5      	b.n	800a65e <__lo0bits+0x1e>
 800a692:	2200      	movs	r2, #0
 800a694:	e7e3      	b.n	800a65e <__lo0bits+0x1e>
 800a696:	2220      	movs	r2, #32
 800a698:	e7e1      	b.n	800a65e <__lo0bits+0x1e>
	...

0800a69c <__i2b>:
 800a69c:	b510      	push	{r4, lr}
 800a69e:	460c      	mov	r4, r1
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	f7ff febb 	bl	800a41c <_Balloc>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	b928      	cbnz	r0, 800a6b6 <__i2b+0x1a>
 800a6aa:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <__i2b+0x24>)
 800a6ac:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <__i2b+0x28>)
 800a6ae:	f240 1145 	movw	r1, #325	; 0x145
 800a6b2:	f000 fd69 	bl	800b188 <__assert_func>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	6144      	str	r4, [r0, #20]
 800a6ba:	6103      	str	r3, [r0, #16]
 800a6bc:	bd10      	pop	{r4, pc}
 800a6be:	bf00      	nop
 800a6c0:	0800d4e5 	.word	0x0800d4e5
 800a6c4:	0800d567 	.word	0x0800d567

0800a6c8 <__multiply>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	4691      	mov	r9, r2
 800a6ce:	690a      	ldr	r2, [r1, #16]
 800a6d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	bfb8      	it	lt
 800a6d8:	460b      	movlt	r3, r1
 800a6da:	460c      	mov	r4, r1
 800a6dc:	bfbc      	itt	lt
 800a6de:	464c      	movlt	r4, r9
 800a6e0:	4699      	movlt	r9, r3
 800a6e2:	6927      	ldr	r7, [r4, #16]
 800a6e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6e8:	68a3      	ldr	r3, [r4, #8]
 800a6ea:	6861      	ldr	r1, [r4, #4]
 800a6ec:	eb07 060a 	add.w	r6, r7, sl
 800a6f0:	42b3      	cmp	r3, r6
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	bfb8      	it	lt
 800a6f6:	3101      	addlt	r1, #1
 800a6f8:	f7ff fe90 	bl	800a41c <_Balloc>
 800a6fc:	b930      	cbnz	r0, 800a70c <__multiply+0x44>
 800a6fe:	4602      	mov	r2, r0
 800a700:	4b44      	ldr	r3, [pc, #272]	; (800a814 <__multiply+0x14c>)
 800a702:	4845      	ldr	r0, [pc, #276]	; (800a818 <__multiply+0x150>)
 800a704:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a708:	f000 fd3e 	bl	800b188 <__assert_func>
 800a70c:	f100 0514 	add.w	r5, r0, #20
 800a710:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a714:	462b      	mov	r3, r5
 800a716:	2200      	movs	r2, #0
 800a718:	4543      	cmp	r3, r8
 800a71a:	d321      	bcc.n	800a760 <__multiply+0x98>
 800a71c:	f104 0314 	add.w	r3, r4, #20
 800a720:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a724:	f109 0314 	add.w	r3, r9, #20
 800a728:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a72c:	9202      	str	r2, [sp, #8]
 800a72e:	1b3a      	subs	r2, r7, r4
 800a730:	3a15      	subs	r2, #21
 800a732:	f022 0203 	bic.w	r2, r2, #3
 800a736:	3204      	adds	r2, #4
 800a738:	f104 0115 	add.w	r1, r4, #21
 800a73c:	428f      	cmp	r7, r1
 800a73e:	bf38      	it	cc
 800a740:	2204      	movcc	r2, #4
 800a742:	9201      	str	r2, [sp, #4]
 800a744:	9a02      	ldr	r2, [sp, #8]
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d80c      	bhi.n	800a766 <__multiply+0x9e>
 800a74c:	2e00      	cmp	r6, #0
 800a74e:	dd03      	ble.n	800a758 <__multiply+0x90>
 800a750:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a754:	2b00      	cmp	r3, #0
 800a756:	d05b      	beq.n	800a810 <__multiply+0x148>
 800a758:	6106      	str	r6, [r0, #16]
 800a75a:	b005      	add	sp, #20
 800a75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a760:	f843 2b04 	str.w	r2, [r3], #4
 800a764:	e7d8      	b.n	800a718 <__multiply+0x50>
 800a766:	f8b3 a000 	ldrh.w	sl, [r3]
 800a76a:	f1ba 0f00 	cmp.w	sl, #0
 800a76e:	d024      	beq.n	800a7ba <__multiply+0xf2>
 800a770:	f104 0e14 	add.w	lr, r4, #20
 800a774:	46a9      	mov	r9, r5
 800a776:	f04f 0c00 	mov.w	ip, #0
 800a77a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a77e:	f8d9 1000 	ldr.w	r1, [r9]
 800a782:	fa1f fb82 	uxth.w	fp, r2
 800a786:	b289      	uxth	r1, r1
 800a788:	fb0a 110b 	mla	r1, sl, fp, r1
 800a78c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a790:	f8d9 2000 	ldr.w	r2, [r9]
 800a794:	4461      	add	r1, ip
 800a796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a79a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a79e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7a2:	b289      	uxth	r1, r1
 800a7a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7a8:	4577      	cmp	r7, lr
 800a7aa:	f849 1b04 	str.w	r1, [r9], #4
 800a7ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7b2:	d8e2      	bhi.n	800a77a <__multiply+0xb2>
 800a7b4:	9a01      	ldr	r2, [sp, #4]
 800a7b6:	f845 c002 	str.w	ip, [r5, r2]
 800a7ba:	9a03      	ldr	r2, [sp, #12]
 800a7bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	f1b9 0f00 	cmp.w	r9, #0
 800a7c6:	d021      	beq.n	800a80c <__multiply+0x144>
 800a7c8:	6829      	ldr	r1, [r5, #0]
 800a7ca:	f104 0c14 	add.w	ip, r4, #20
 800a7ce:	46ae      	mov	lr, r5
 800a7d0:	f04f 0a00 	mov.w	sl, #0
 800a7d4:	f8bc b000 	ldrh.w	fp, [ip]
 800a7d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7dc:	fb09 220b 	mla	r2, r9, fp, r2
 800a7e0:	4452      	add	r2, sl
 800a7e2:	b289      	uxth	r1, r1
 800a7e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7e8:	f84e 1b04 	str.w	r1, [lr], #4
 800a7ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a7f4:	f8be 1000 	ldrh.w	r1, [lr]
 800a7f8:	fb09 110a 	mla	r1, r9, sl, r1
 800a7fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a800:	4567      	cmp	r7, ip
 800a802:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a806:	d8e5      	bhi.n	800a7d4 <__multiply+0x10c>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	50a9      	str	r1, [r5, r2]
 800a80c:	3504      	adds	r5, #4
 800a80e:	e799      	b.n	800a744 <__multiply+0x7c>
 800a810:	3e01      	subs	r6, #1
 800a812:	e79b      	b.n	800a74c <__multiply+0x84>
 800a814:	0800d4e5 	.word	0x0800d4e5
 800a818:	0800d567 	.word	0x0800d567

0800a81c <__pow5mult>:
 800a81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a820:	4615      	mov	r5, r2
 800a822:	f012 0203 	ands.w	r2, r2, #3
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	d007      	beq.n	800a83c <__pow5mult+0x20>
 800a82c:	4c25      	ldr	r4, [pc, #148]	; (800a8c4 <__pow5mult+0xa8>)
 800a82e:	3a01      	subs	r2, #1
 800a830:	2300      	movs	r3, #0
 800a832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a836:	f7ff fe53 	bl	800a4e0 <__multadd>
 800a83a:	4607      	mov	r7, r0
 800a83c:	10ad      	asrs	r5, r5, #2
 800a83e:	d03d      	beq.n	800a8bc <__pow5mult+0xa0>
 800a840:	69f4      	ldr	r4, [r6, #28]
 800a842:	b97c      	cbnz	r4, 800a864 <__pow5mult+0x48>
 800a844:	2010      	movs	r0, #16
 800a846:	f7ff fc75 	bl	800a134 <malloc>
 800a84a:	4602      	mov	r2, r0
 800a84c:	61f0      	str	r0, [r6, #28]
 800a84e:	b928      	cbnz	r0, 800a85c <__pow5mult+0x40>
 800a850:	4b1d      	ldr	r3, [pc, #116]	; (800a8c8 <__pow5mult+0xac>)
 800a852:	481e      	ldr	r0, [pc, #120]	; (800a8cc <__pow5mult+0xb0>)
 800a854:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a858:	f000 fc96 	bl	800b188 <__assert_func>
 800a85c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a860:	6004      	str	r4, [r0, #0]
 800a862:	60c4      	str	r4, [r0, #12]
 800a864:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a86c:	b94c      	cbnz	r4, 800a882 <__pow5mult+0x66>
 800a86e:	f240 2171 	movw	r1, #625	; 0x271
 800a872:	4630      	mov	r0, r6
 800a874:	f7ff ff12 	bl	800a69c <__i2b>
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a87e:	4604      	mov	r4, r0
 800a880:	6003      	str	r3, [r0, #0]
 800a882:	f04f 0900 	mov.w	r9, #0
 800a886:	07eb      	lsls	r3, r5, #31
 800a888:	d50a      	bpl.n	800a8a0 <__pow5mult+0x84>
 800a88a:	4639      	mov	r1, r7
 800a88c:	4622      	mov	r2, r4
 800a88e:	4630      	mov	r0, r6
 800a890:	f7ff ff1a 	bl	800a6c8 <__multiply>
 800a894:	4639      	mov	r1, r7
 800a896:	4680      	mov	r8, r0
 800a898:	4630      	mov	r0, r6
 800a89a:	f7ff fdff 	bl	800a49c <_Bfree>
 800a89e:	4647      	mov	r7, r8
 800a8a0:	106d      	asrs	r5, r5, #1
 800a8a2:	d00b      	beq.n	800a8bc <__pow5mult+0xa0>
 800a8a4:	6820      	ldr	r0, [r4, #0]
 800a8a6:	b938      	cbnz	r0, 800a8b8 <__pow5mult+0x9c>
 800a8a8:	4622      	mov	r2, r4
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f7ff ff0b 	bl	800a6c8 <__multiply>
 800a8b2:	6020      	str	r0, [r4, #0]
 800a8b4:	f8c0 9000 	str.w	r9, [r0]
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	e7e4      	b.n	800a886 <__pow5mult+0x6a>
 800a8bc:	4638      	mov	r0, r7
 800a8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8c2:	bf00      	nop
 800a8c4:	0800d6b0 	.word	0x0800d6b0
 800a8c8:	0800d476 	.word	0x0800d476
 800a8cc:	0800d567 	.word	0x0800d567

0800a8d0 <__lshift>:
 800a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	6849      	ldr	r1, [r1, #4]
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8de:	68a3      	ldr	r3, [r4, #8]
 800a8e0:	4607      	mov	r7, r0
 800a8e2:	4691      	mov	r9, r2
 800a8e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8e8:	f108 0601 	add.w	r6, r8, #1
 800a8ec:	42b3      	cmp	r3, r6
 800a8ee:	db0b      	blt.n	800a908 <__lshift+0x38>
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff fd93 	bl	800a41c <_Balloc>
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	b948      	cbnz	r0, 800a90e <__lshift+0x3e>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	4b28      	ldr	r3, [pc, #160]	; (800a9a0 <__lshift+0xd0>)
 800a8fe:	4829      	ldr	r0, [pc, #164]	; (800a9a4 <__lshift+0xd4>)
 800a900:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a904:	f000 fc40 	bl	800b188 <__assert_func>
 800a908:	3101      	adds	r1, #1
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	e7ee      	b.n	800a8ec <__lshift+0x1c>
 800a90e:	2300      	movs	r3, #0
 800a910:	f100 0114 	add.w	r1, r0, #20
 800a914:	f100 0210 	add.w	r2, r0, #16
 800a918:	4618      	mov	r0, r3
 800a91a:	4553      	cmp	r3, sl
 800a91c:	db33      	blt.n	800a986 <__lshift+0xb6>
 800a91e:	6920      	ldr	r0, [r4, #16]
 800a920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a924:	f104 0314 	add.w	r3, r4, #20
 800a928:	f019 091f 	ands.w	r9, r9, #31
 800a92c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a930:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a934:	d02b      	beq.n	800a98e <__lshift+0xbe>
 800a936:	f1c9 0e20 	rsb	lr, r9, #32
 800a93a:	468a      	mov	sl, r1
 800a93c:	2200      	movs	r2, #0
 800a93e:	6818      	ldr	r0, [r3, #0]
 800a940:	fa00 f009 	lsl.w	r0, r0, r9
 800a944:	4310      	orrs	r0, r2
 800a946:	f84a 0b04 	str.w	r0, [sl], #4
 800a94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94e:	459c      	cmp	ip, r3
 800a950:	fa22 f20e 	lsr.w	r2, r2, lr
 800a954:	d8f3      	bhi.n	800a93e <__lshift+0x6e>
 800a956:	ebac 0304 	sub.w	r3, ip, r4
 800a95a:	3b15      	subs	r3, #21
 800a95c:	f023 0303 	bic.w	r3, r3, #3
 800a960:	3304      	adds	r3, #4
 800a962:	f104 0015 	add.w	r0, r4, #21
 800a966:	4584      	cmp	ip, r0
 800a968:	bf38      	it	cc
 800a96a:	2304      	movcc	r3, #4
 800a96c:	50ca      	str	r2, [r1, r3]
 800a96e:	b10a      	cbz	r2, 800a974 <__lshift+0xa4>
 800a970:	f108 0602 	add.w	r6, r8, #2
 800a974:	3e01      	subs	r6, #1
 800a976:	4638      	mov	r0, r7
 800a978:	612e      	str	r6, [r5, #16]
 800a97a:	4621      	mov	r1, r4
 800a97c:	f7ff fd8e 	bl	800a49c <_Bfree>
 800a980:	4628      	mov	r0, r5
 800a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a986:	f842 0f04 	str.w	r0, [r2, #4]!
 800a98a:	3301      	adds	r3, #1
 800a98c:	e7c5      	b.n	800a91a <__lshift+0x4a>
 800a98e:	3904      	subs	r1, #4
 800a990:	f853 2b04 	ldr.w	r2, [r3], #4
 800a994:	f841 2f04 	str.w	r2, [r1, #4]!
 800a998:	459c      	cmp	ip, r3
 800a99a:	d8f9      	bhi.n	800a990 <__lshift+0xc0>
 800a99c:	e7ea      	b.n	800a974 <__lshift+0xa4>
 800a99e:	bf00      	nop
 800a9a0:	0800d4e5 	.word	0x0800d4e5
 800a9a4:	0800d567 	.word	0x0800d567

0800a9a8 <__mcmp>:
 800a9a8:	b530      	push	{r4, r5, lr}
 800a9aa:	6902      	ldr	r2, [r0, #16]
 800a9ac:	690c      	ldr	r4, [r1, #16]
 800a9ae:	1b12      	subs	r2, r2, r4
 800a9b0:	d10e      	bne.n	800a9d0 <__mcmp+0x28>
 800a9b2:	f100 0314 	add.w	r3, r0, #20
 800a9b6:	3114      	adds	r1, #20
 800a9b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9c8:	42a5      	cmp	r5, r4
 800a9ca:	d003      	beq.n	800a9d4 <__mcmp+0x2c>
 800a9cc:	d305      	bcc.n	800a9da <__mcmp+0x32>
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	4610      	mov	r0, r2
 800a9d2:	bd30      	pop	{r4, r5, pc}
 800a9d4:	4283      	cmp	r3, r0
 800a9d6:	d3f3      	bcc.n	800a9c0 <__mcmp+0x18>
 800a9d8:	e7fa      	b.n	800a9d0 <__mcmp+0x28>
 800a9da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9de:	e7f7      	b.n	800a9d0 <__mcmp+0x28>

0800a9e0 <__mdiff>:
 800a9e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	f7ff ffdb 	bl	800a9a8 <__mcmp>
 800a9f2:	1e05      	subs	r5, r0, #0
 800a9f4:	d110      	bne.n	800aa18 <__mdiff+0x38>
 800a9f6:	4629      	mov	r1, r5
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	f7ff fd0f 	bl	800a41c <_Balloc>
 800a9fe:	b930      	cbnz	r0, 800aa0e <__mdiff+0x2e>
 800aa00:	4b3a      	ldr	r3, [pc, #232]	; (800aaec <__mdiff+0x10c>)
 800aa02:	4602      	mov	r2, r0
 800aa04:	f240 2137 	movw	r1, #567	; 0x237
 800aa08:	4839      	ldr	r0, [pc, #228]	; (800aaf0 <__mdiff+0x110>)
 800aa0a:	f000 fbbd 	bl	800b188 <__assert_func>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	bfa4      	itt	ge
 800aa1a:	4643      	movge	r3, r8
 800aa1c:	46a0      	movge	r8, r4
 800aa1e:	4630      	mov	r0, r6
 800aa20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa24:	bfa6      	itte	ge
 800aa26:	461c      	movge	r4, r3
 800aa28:	2500      	movge	r5, #0
 800aa2a:	2501      	movlt	r5, #1
 800aa2c:	f7ff fcf6 	bl	800a41c <_Balloc>
 800aa30:	b920      	cbnz	r0, 800aa3c <__mdiff+0x5c>
 800aa32:	4b2e      	ldr	r3, [pc, #184]	; (800aaec <__mdiff+0x10c>)
 800aa34:	4602      	mov	r2, r0
 800aa36:	f240 2145 	movw	r1, #581	; 0x245
 800aa3a:	e7e5      	b.n	800aa08 <__mdiff+0x28>
 800aa3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa40:	6926      	ldr	r6, [r4, #16]
 800aa42:	60c5      	str	r5, [r0, #12]
 800aa44:	f104 0914 	add.w	r9, r4, #20
 800aa48:	f108 0514 	add.w	r5, r8, #20
 800aa4c:	f100 0e14 	add.w	lr, r0, #20
 800aa50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa58:	f108 0210 	add.w	r2, r8, #16
 800aa5c:	46f2      	mov	sl, lr
 800aa5e:	2100      	movs	r1, #0
 800aa60:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa68:	fa11 f88b 	uxtah	r8, r1, fp
 800aa6c:	b299      	uxth	r1, r3
 800aa6e:	0c1b      	lsrs	r3, r3, #16
 800aa70:	eba8 0801 	sub.w	r8, r8, r1
 800aa74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa7c:	fa1f f888 	uxth.w	r8, r8
 800aa80:	1419      	asrs	r1, r3, #16
 800aa82:	454e      	cmp	r6, r9
 800aa84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa88:	f84a 3b04 	str.w	r3, [sl], #4
 800aa8c:	d8e8      	bhi.n	800aa60 <__mdiff+0x80>
 800aa8e:	1b33      	subs	r3, r6, r4
 800aa90:	3b15      	subs	r3, #21
 800aa92:	f023 0303 	bic.w	r3, r3, #3
 800aa96:	3304      	adds	r3, #4
 800aa98:	3415      	adds	r4, #21
 800aa9a:	42a6      	cmp	r6, r4
 800aa9c:	bf38      	it	cc
 800aa9e:	2304      	movcc	r3, #4
 800aaa0:	441d      	add	r5, r3
 800aaa2:	4473      	add	r3, lr
 800aaa4:	469e      	mov	lr, r3
 800aaa6:	462e      	mov	r6, r5
 800aaa8:	4566      	cmp	r6, ip
 800aaaa:	d30e      	bcc.n	800aaca <__mdiff+0xea>
 800aaac:	f10c 0203 	add.w	r2, ip, #3
 800aab0:	1b52      	subs	r2, r2, r5
 800aab2:	f022 0203 	bic.w	r2, r2, #3
 800aab6:	3d03      	subs	r5, #3
 800aab8:	45ac      	cmp	ip, r5
 800aaba:	bf38      	it	cc
 800aabc:	2200      	movcc	r2, #0
 800aabe:	4413      	add	r3, r2
 800aac0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aac4:	b17a      	cbz	r2, 800aae6 <__mdiff+0x106>
 800aac6:	6107      	str	r7, [r0, #16]
 800aac8:	e7a4      	b.n	800aa14 <__mdiff+0x34>
 800aaca:	f856 8b04 	ldr.w	r8, [r6], #4
 800aace:	fa11 f288 	uxtah	r2, r1, r8
 800aad2:	1414      	asrs	r4, r2, #16
 800aad4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aad8:	b292      	uxth	r2, r2
 800aada:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aade:	f84e 2b04 	str.w	r2, [lr], #4
 800aae2:	1421      	asrs	r1, r4, #16
 800aae4:	e7e0      	b.n	800aaa8 <__mdiff+0xc8>
 800aae6:	3f01      	subs	r7, #1
 800aae8:	e7ea      	b.n	800aac0 <__mdiff+0xe0>
 800aaea:	bf00      	nop
 800aaec:	0800d4e5 	.word	0x0800d4e5
 800aaf0:	0800d567 	.word	0x0800d567

0800aaf4 <__ulp>:
 800aaf4:	b082      	sub	sp, #8
 800aaf6:	ed8d 0b00 	vstr	d0, [sp]
 800aafa:	9a01      	ldr	r2, [sp, #4]
 800aafc:	4b0f      	ldr	r3, [pc, #60]	; (800ab3c <__ulp+0x48>)
 800aafe:	4013      	ands	r3, r2
 800ab00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dc08      	bgt.n	800ab1a <__ulp+0x26>
 800ab08:	425b      	negs	r3, r3
 800ab0a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ab0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab12:	da04      	bge.n	800ab1e <__ulp+0x2a>
 800ab14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab18:	4113      	asrs	r3, r2
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	e008      	b.n	800ab30 <__ulp+0x3c>
 800ab1e:	f1a2 0314 	sub.w	r3, r2, #20
 800ab22:	2b1e      	cmp	r3, #30
 800ab24:	bfda      	itte	le
 800ab26:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ab2a:	40da      	lsrle	r2, r3
 800ab2c:	2201      	movgt	r2, #1
 800ab2e:	2300      	movs	r3, #0
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	ec41 0b10 	vmov	d0, r0, r1
 800ab38:	b002      	add	sp, #8
 800ab3a:	4770      	bx	lr
 800ab3c:	7ff00000 	.word	0x7ff00000

0800ab40 <__b2d>:
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	6906      	ldr	r6, [r0, #16]
 800ab46:	f100 0814 	add.w	r8, r0, #20
 800ab4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab4e:	1f37      	subs	r7, r6, #4
 800ab50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab54:	4610      	mov	r0, r2
 800ab56:	f7ff fd53 	bl	800a600 <__hi0bits>
 800ab5a:	f1c0 0320 	rsb	r3, r0, #32
 800ab5e:	280a      	cmp	r0, #10
 800ab60:	600b      	str	r3, [r1, #0]
 800ab62:	491b      	ldr	r1, [pc, #108]	; (800abd0 <__b2d+0x90>)
 800ab64:	dc15      	bgt.n	800ab92 <__b2d+0x52>
 800ab66:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab6a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab6e:	45b8      	cmp	r8, r7
 800ab70:	ea43 0501 	orr.w	r5, r3, r1
 800ab74:	bf34      	ite	cc
 800ab76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab7a:	2300      	movcs	r3, #0
 800ab7c:	3015      	adds	r0, #21
 800ab7e:	fa02 f000 	lsl.w	r0, r2, r0
 800ab82:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab86:	4303      	orrs	r3, r0
 800ab88:	461c      	mov	r4, r3
 800ab8a:	ec45 4b10 	vmov	d0, r4, r5
 800ab8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab92:	45b8      	cmp	r8, r7
 800ab94:	bf3a      	itte	cc
 800ab96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab9a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab9e:	2300      	movcs	r3, #0
 800aba0:	380b      	subs	r0, #11
 800aba2:	d012      	beq.n	800abca <__b2d+0x8a>
 800aba4:	f1c0 0120 	rsb	r1, r0, #32
 800aba8:	fa23 f401 	lsr.w	r4, r3, r1
 800abac:	4082      	lsls	r2, r0
 800abae:	4322      	orrs	r2, r4
 800abb0:	4547      	cmp	r7, r8
 800abb2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800abb6:	bf8c      	ite	hi
 800abb8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800abbc:	2200      	movls	r2, #0
 800abbe:	4083      	lsls	r3, r0
 800abc0:	40ca      	lsrs	r2, r1
 800abc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800abc6:	4313      	orrs	r3, r2
 800abc8:	e7de      	b.n	800ab88 <__b2d+0x48>
 800abca:	ea42 0501 	orr.w	r5, r2, r1
 800abce:	e7db      	b.n	800ab88 <__b2d+0x48>
 800abd0:	3ff00000 	.word	0x3ff00000

0800abd4 <__d2b>:
 800abd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abd8:	460f      	mov	r7, r1
 800abda:	2101      	movs	r1, #1
 800abdc:	ec59 8b10 	vmov	r8, r9, d0
 800abe0:	4616      	mov	r6, r2
 800abe2:	f7ff fc1b 	bl	800a41c <_Balloc>
 800abe6:	4604      	mov	r4, r0
 800abe8:	b930      	cbnz	r0, 800abf8 <__d2b+0x24>
 800abea:	4602      	mov	r2, r0
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__d2b+0xac>)
 800abee:	4825      	ldr	r0, [pc, #148]	; (800ac84 <__d2b+0xb0>)
 800abf0:	f240 310f 	movw	r1, #783	; 0x30f
 800abf4:	f000 fac8 	bl	800b188 <__assert_func>
 800abf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac00:	bb2d      	cbnz	r5, 800ac4e <__d2b+0x7a>
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	f1b8 0300 	subs.w	r3, r8, #0
 800ac08:	d026      	beq.n	800ac58 <__d2b+0x84>
 800ac0a:	4668      	mov	r0, sp
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f7ff fd17 	bl	800a640 <__lo0bits>
 800ac12:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac16:	b1e8      	cbz	r0, 800ac54 <__d2b+0x80>
 800ac18:	f1c0 0320 	rsb	r3, r0, #32
 800ac1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac20:	430b      	orrs	r3, r1
 800ac22:	40c2      	lsrs	r2, r0
 800ac24:	6163      	str	r3, [r4, #20]
 800ac26:	9201      	str	r2, [sp, #4]
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	61a3      	str	r3, [r4, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	bf14      	ite	ne
 800ac30:	2202      	movne	r2, #2
 800ac32:	2201      	moveq	r2, #1
 800ac34:	6122      	str	r2, [r4, #16]
 800ac36:	b1bd      	cbz	r5, 800ac68 <__d2b+0x94>
 800ac38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac3c:	4405      	add	r5, r0
 800ac3e:	603d      	str	r5, [r7, #0]
 800ac40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac44:	6030      	str	r0, [r6, #0]
 800ac46:	4620      	mov	r0, r4
 800ac48:	b003      	add	sp, #12
 800ac4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac52:	e7d6      	b.n	800ac02 <__d2b+0x2e>
 800ac54:	6161      	str	r1, [r4, #20]
 800ac56:	e7e7      	b.n	800ac28 <__d2b+0x54>
 800ac58:	a801      	add	r0, sp, #4
 800ac5a:	f7ff fcf1 	bl	800a640 <__lo0bits>
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	6163      	str	r3, [r4, #20]
 800ac62:	3020      	adds	r0, #32
 800ac64:	2201      	movs	r2, #1
 800ac66:	e7e5      	b.n	800ac34 <__d2b+0x60>
 800ac68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac70:	6038      	str	r0, [r7, #0]
 800ac72:	6918      	ldr	r0, [r3, #16]
 800ac74:	f7ff fcc4 	bl	800a600 <__hi0bits>
 800ac78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac7c:	e7e2      	b.n	800ac44 <__d2b+0x70>
 800ac7e:	bf00      	nop
 800ac80:	0800d4e5 	.word	0x0800d4e5
 800ac84:	0800d567 	.word	0x0800d567

0800ac88 <__ratio>:
 800ac88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	4688      	mov	r8, r1
 800ac8e:	4669      	mov	r1, sp
 800ac90:	4681      	mov	r9, r0
 800ac92:	f7ff ff55 	bl	800ab40 <__b2d>
 800ac96:	a901      	add	r1, sp, #4
 800ac98:	4640      	mov	r0, r8
 800ac9a:	ec55 4b10 	vmov	r4, r5, d0
 800ac9e:	f7ff ff4f 	bl	800ab40 <__b2d>
 800aca2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aca6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800acaa:	eba3 0c02 	sub.w	ip, r3, r2
 800acae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800acb2:	1a9b      	subs	r3, r3, r2
 800acb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800acb8:	ec51 0b10 	vmov	r0, r1, d0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfd6      	itet	le
 800acc0:	460a      	movle	r2, r1
 800acc2:	462a      	movgt	r2, r5
 800acc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800acc8:	468b      	mov	fp, r1
 800acca:	462f      	mov	r7, r5
 800accc:	bfd4      	ite	le
 800acce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800acd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800acd6:	4620      	mov	r0, r4
 800acd8:	ee10 2a10 	vmov	r2, s0
 800acdc:	465b      	mov	r3, fp
 800acde:	4639      	mov	r1, r7
 800ace0:	f7f5 fdd4 	bl	800088c <__aeabi_ddiv>
 800ace4:	ec41 0b10 	vmov	d0, r0, r1
 800ace8:	b003      	add	sp, #12
 800acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acee <__copybits>:
 800acee:	3901      	subs	r1, #1
 800acf0:	b570      	push	{r4, r5, r6, lr}
 800acf2:	1149      	asrs	r1, r1, #5
 800acf4:	6914      	ldr	r4, [r2, #16]
 800acf6:	3101      	adds	r1, #1
 800acf8:	f102 0314 	add.w	r3, r2, #20
 800acfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad04:	1f05      	subs	r5, r0, #4
 800ad06:	42a3      	cmp	r3, r4
 800ad08:	d30c      	bcc.n	800ad24 <__copybits+0x36>
 800ad0a:	1aa3      	subs	r3, r4, r2
 800ad0c:	3b11      	subs	r3, #17
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	3211      	adds	r2, #17
 800ad14:	42a2      	cmp	r2, r4
 800ad16:	bf88      	it	hi
 800ad18:	2300      	movhi	r3, #0
 800ad1a:	4418      	add	r0, r3
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4288      	cmp	r0, r1
 800ad20:	d305      	bcc.n	800ad2e <__copybits+0x40>
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad28:	f845 6f04 	str.w	r6, [r5, #4]!
 800ad2c:	e7eb      	b.n	800ad06 <__copybits+0x18>
 800ad2e:	f840 3b04 	str.w	r3, [r0], #4
 800ad32:	e7f4      	b.n	800ad1e <__copybits+0x30>

0800ad34 <__any_on>:
 800ad34:	f100 0214 	add.w	r2, r0, #20
 800ad38:	6900      	ldr	r0, [r0, #16]
 800ad3a:	114b      	asrs	r3, r1, #5
 800ad3c:	4298      	cmp	r0, r3
 800ad3e:	b510      	push	{r4, lr}
 800ad40:	db11      	blt.n	800ad66 <__any_on+0x32>
 800ad42:	dd0a      	ble.n	800ad5a <__any_on+0x26>
 800ad44:	f011 011f 	ands.w	r1, r1, #31
 800ad48:	d007      	beq.n	800ad5a <__any_on+0x26>
 800ad4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad4e:	fa24 f001 	lsr.w	r0, r4, r1
 800ad52:	fa00 f101 	lsl.w	r1, r0, r1
 800ad56:	428c      	cmp	r4, r1
 800ad58:	d10b      	bne.n	800ad72 <__any_on+0x3e>
 800ad5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d803      	bhi.n	800ad6a <__any_on+0x36>
 800ad62:	2000      	movs	r0, #0
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	4603      	mov	r3, r0
 800ad68:	e7f7      	b.n	800ad5a <__any_on+0x26>
 800ad6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad6e:	2900      	cmp	r1, #0
 800ad70:	d0f5      	beq.n	800ad5e <__any_on+0x2a>
 800ad72:	2001      	movs	r0, #1
 800ad74:	e7f6      	b.n	800ad64 <__any_on+0x30>

0800ad76 <__sread>:
 800ad76:	b510      	push	{r4, lr}
 800ad78:	460c      	mov	r4, r1
 800ad7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7e:	f000 f9cf 	bl	800b120 <_read_r>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	bfab      	itete	ge
 800ad86:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad88:	89a3      	ldrhlt	r3, [r4, #12]
 800ad8a:	181b      	addge	r3, r3, r0
 800ad8c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad90:	bfac      	ite	ge
 800ad92:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad94:	81a3      	strhlt	r3, [r4, #12]
 800ad96:	bd10      	pop	{r4, pc}

0800ad98 <__swrite>:
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	461f      	mov	r7, r3
 800ad9e:	898b      	ldrh	r3, [r1, #12]
 800ada0:	05db      	lsls	r3, r3, #23
 800ada2:	4605      	mov	r5, r0
 800ada4:	460c      	mov	r4, r1
 800ada6:	4616      	mov	r6, r2
 800ada8:	d505      	bpl.n	800adb6 <__swrite+0x1e>
 800adaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adae:	2302      	movs	r3, #2
 800adb0:	2200      	movs	r2, #0
 800adb2:	f000 f9a3 	bl	800b0fc <_lseek_r>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	4632      	mov	r2, r6
 800adc4:	463b      	mov	r3, r7
 800adc6:	4628      	mov	r0, r5
 800adc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adcc:	f000 b9ca 	b.w	800b164 <_write_r>

0800add0 <__sseek>:
 800add0:	b510      	push	{r4, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	f000 f990 	bl	800b0fc <_lseek_r>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	bf15      	itete	ne
 800ade2:	6560      	strne	r0, [r4, #84]	; 0x54
 800ade4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ade8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adec:	81a3      	strheq	r3, [r4, #12]
 800adee:	bf18      	it	ne
 800adf0:	81a3      	strhne	r3, [r4, #12]
 800adf2:	bd10      	pop	{r4, pc}

0800adf4 <__sclose>:
 800adf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf8:	f000 b94e 	b.w	800b098 <_close_r>

0800adfc <_realloc_r>:
 800adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae00:	4680      	mov	r8, r0
 800ae02:	4614      	mov	r4, r2
 800ae04:	460e      	mov	r6, r1
 800ae06:	b921      	cbnz	r1, 800ae12 <_realloc_r+0x16>
 800ae08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	f7ff b9b9 	b.w	800a184 <_malloc_r>
 800ae12:	b92a      	cbnz	r2, 800ae20 <_realloc_r+0x24>
 800ae14:	f000 f9ec 	bl	800b1f0 <_free_r>
 800ae18:	4625      	mov	r5, r4
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae20:	f000 fa32 	bl	800b288 <_malloc_usable_size_r>
 800ae24:	4284      	cmp	r4, r0
 800ae26:	4607      	mov	r7, r0
 800ae28:	d802      	bhi.n	800ae30 <_realloc_r+0x34>
 800ae2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae2e:	d812      	bhi.n	800ae56 <_realloc_r+0x5a>
 800ae30:	4621      	mov	r1, r4
 800ae32:	4640      	mov	r0, r8
 800ae34:	f7ff f9a6 	bl	800a184 <_malloc_r>
 800ae38:	4605      	mov	r5, r0
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d0ed      	beq.n	800ae1a <_realloc_r+0x1e>
 800ae3e:	42bc      	cmp	r4, r7
 800ae40:	4622      	mov	r2, r4
 800ae42:	4631      	mov	r1, r6
 800ae44:	bf28      	it	cs
 800ae46:	463a      	movcs	r2, r7
 800ae48:	f7fd fe2b 	bl	8008aa2 <memcpy>
 800ae4c:	4631      	mov	r1, r6
 800ae4e:	4640      	mov	r0, r8
 800ae50:	f000 f9ce 	bl	800b1f0 <_free_r>
 800ae54:	e7e1      	b.n	800ae1a <_realloc_r+0x1e>
 800ae56:	4635      	mov	r5, r6
 800ae58:	e7df      	b.n	800ae1a <_realloc_r+0x1e>

0800ae5a <__swbuf_r>:
 800ae5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5c:	460e      	mov	r6, r1
 800ae5e:	4614      	mov	r4, r2
 800ae60:	4605      	mov	r5, r0
 800ae62:	b118      	cbz	r0, 800ae6c <__swbuf_r+0x12>
 800ae64:	6a03      	ldr	r3, [r0, #32]
 800ae66:	b90b      	cbnz	r3, 800ae6c <__swbuf_r+0x12>
 800ae68:	f7fc fe60 	bl	8007b2c <__sinit>
 800ae6c:	69a3      	ldr	r3, [r4, #24]
 800ae6e:	60a3      	str	r3, [r4, #8]
 800ae70:	89a3      	ldrh	r3, [r4, #12]
 800ae72:	071a      	lsls	r2, r3, #28
 800ae74:	d525      	bpl.n	800aec2 <__swbuf_r+0x68>
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	b31b      	cbz	r3, 800aec2 <__swbuf_r+0x68>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	6922      	ldr	r2, [r4, #16]
 800ae7e:	1a98      	subs	r0, r3, r2
 800ae80:	6963      	ldr	r3, [r4, #20]
 800ae82:	b2f6      	uxtb	r6, r6
 800ae84:	4283      	cmp	r3, r0
 800ae86:	4637      	mov	r7, r6
 800ae88:	dc04      	bgt.n	800ae94 <__swbuf_r+0x3a>
 800ae8a:	4621      	mov	r1, r4
 800ae8c:	4628      	mov	r0, r5
 800ae8e:	f7ff fa91 	bl	800a3b4 <_fflush_r>
 800ae92:	b9e0      	cbnz	r0, 800aece <__swbuf_r+0x74>
 800ae94:	68a3      	ldr	r3, [r4, #8]
 800ae96:	3b01      	subs	r3, #1
 800ae98:	60a3      	str	r3, [r4, #8]
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	6022      	str	r2, [r4, #0]
 800aea0:	701e      	strb	r6, [r3, #0]
 800aea2:	6962      	ldr	r2, [r4, #20]
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d004      	beq.n	800aeb4 <__swbuf_r+0x5a>
 800aeaa:	89a3      	ldrh	r3, [r4, #12]
 800aeac:	07db      	lsls	r3, r3, #31
 800aeae:	d506      	bpl.n	800aebe <__swbuf_r+0x64>
 800aeb0:	2e0a      	cmp	r6, #10
 800aeb2:	d104      	bne.n	800aebe <__swbuf_r+0x64>
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f7ff fa7c 	bl	800a3b4 <_fflush_r>
 800aebc:	b938      	cbnz	r0, 800aece <__swbuf_r+0x74>
 800aebe:	4638      	mov	r0, r7
 800aec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec2:	4621      	mov	r1, r4
 800aec4:	4628      	mov	r0, r5
 800aec6:	f000 f805 	bl	800aed4 <__swsetup_r>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d0d5      	beq.n	800ae7a <__swbuf_r+0x20>
 800aece:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aed2:	e7f4      	b.n	800aebe <__swbuf_r+0x64>

0800aed4 <__swsetup_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4b2a      	ldr	r3, [pc, #168]	; (800af80 <__swsetup_r+0xac>)
 800aed8:	4605      	mov	r5, r0
 800aeda:	6818      	ldr	r0, [r3, #0]
 800aedc:	460c      	mov	r4, r1
 800aede:	b118      	cbz	r0, 800aee8 <__swsetup_r+0x14>
 800aee0:	6a03      	ldr	r3, [r0, #32]
 800aee2:	b90b      	cbnz	r3, 800aee8 <__swsetup_r+0x14>
 800aee4:	f7fc fe22 	bl	8007b2c <__sinit>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeee:	0718      	lsls	r0, r3, #28
 800aef0:	d422      	bmi.n	800af38 <__swsetup_r+0x64>
 800aef2:	06d9      	lsls	r1, r3, #27
 800aef4:	d407      	bmi.n	800af06 <__swsetup_r+0x32>
 800aef6:	2309      	movs	r3, #9
 800aef8:	602b      	str	r3, [r5, #0]
 800aefa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af04:	e034      	b.n	800af70 <__swsetup_r+0x9c>
 800af06:	0758      	lsls	r0, r3, #29
 800af08:	d512      	bpl.n	800af30 <__swsetup_r+0x5c>
 800af0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af0c:	b141      	cbz	r1, 800af20 <__swsetup_r+0x4c>
 800af0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af12:	4299      	cmp	r1, r3
 800af14:	d002      	beq.n	800af1c <__swsetup_r+0x48>
 800af16:	4628      	mov	r0, r5
 800af18:	f000 f96a 	bl	800b1f0 <_free_r>
 800af1c:	2300      	movs	r3, #0
 800af1e:	6363      	str	r3, [r4, #52]	; 0x34
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af26:	81a3      	strh	r3, [r4, #12]
 800af28:	2300      	movs	r3, #0
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	6023      	str	r3, [r4, #0]
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f043 0308 	orr.w	r3, r3, #8
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	b94b      	cbnz	r3, 800af50 <__swsetup_r+0x7c>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af46:	d003      	beq.n	800af50 <__swsetup_r+0x7c>
 800af48:	4621      	mov	r1, r4
 800af4a:	4628      	mov	r0, r5
 800af4c:	f000 f84d 	bl	800afea <__smakebuf_r>
 800af50:	89a0      	ldrh	r0, [r4, #12]
 800af52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af56:	f010 0301 	ands.w	r3, r0, #1
 800af5a:	d00a      	beq.n	800af72 <__swsetup_r+0x9e>
 800af5c:	2300      	movs	r3, #0
 800af5e:	60a3      	str	r3, [r4, #8]
 800af60:	6963      	ldr	r3, [r4, #20]
 800af62:	425b      	negs	r3, r3
 800af64:	61a3      	str	r3, [r4, #24]
 800af66:	6923      	ldr	r3, [r4, #16]
 800af68:	b943      	cbnz	r3, 800af7c <__swsetup_r+0xa8>
 800af6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af6e:	d1c4      	bne.n	800aefa <__swsetup_r+0x26>
 800af70:	bd38      	pop	{r3, r4, r5, pc}
 800af72:	0781      	lsls	r1, r0, #30
 800af74:	bf58      	it	pl
 800af76:	6963      	ldrpl	r3, [r4, #20]
 800af78:	60a3      	str	r3, [r4, #8]
 800af7a:	e7f4      	b.n	800af66 <__swsetup_r+0x92>
 800af7c:	2000      	movs	r0, #0
 800af7e:	e7f7      	b.n	800af70 <__swsetup_r+0x9c>
 800af80:	200001fc 	.word	0x200001fc

0800af84 <__ascii_wctomb>:
 800af84:	b149      	cbz	r1, 800af9a <__ascii_wctomb+0x16>
 800af86:	2aff      	cmp	r2, #255	; 0xff
 800af88:	bf85      	ittet	hi
 800af8a:	238a      	movhi	r3, #138	; 0x8a
 800af8c:	6003      	strhi	r3, [r0, #0]
 800af8e:	700a      	strbls	r2, [r1, #0]
 800af90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af94:	bf98      	it	ls
 800af96:	2001      	movls	r0, #1
 800af98:	4770      	bx	lr
 800af9a:	4608      	mov	r0, r1
 800af9c:	4770      	bx	lr

0800af9e <__swhatbuf_r>:
 800af9e:	b570      	push	{r4, r5, r6, lr}
 800afa0:	460c      	mov	r4, r1
 800afa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa6:	2900      	cmp	r1, #0
 800afa8:	b096      	sub	sp, #88	; 0x58
 800afaa:	4615      	mov	r5, r2
 800afac:	461e      	mov	r6, r3
 800afae:	da0d      	bge.n	800afcc <__swhatbuf_r+0x2e>
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800afb6:	f04f 0100 	mov.w	r1, #0
 800afba:	bf0c      	ite	eq
 800afbc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afc0:	2340      	movne	r3, #64	; 0x40
 800afc2:	2000      	movs	r0, #0
 800afc4:	6031      	str	r1, [r6, #0]
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	b016      	add	sp, #88	; 0x58
 800afca:	bd70      	pop	{r4, r5, r6, pc}
 800afcc:	466a      	mov	r2, sp
 800afce:	f000 f873 	bl	800b0b8 <_fstat_r>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	dbec      	blt.n	800afb0 <__swhatbuf_r+0x12>
 800afd6:	9901      	ldr	r1, [sp, #4]
 800afd8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800afdc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800afe0:	4259      	negs	r1, r3
 800afe2:	4159      	adcs	r1, r3
 800afe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe8:	e7eb      	b.n	800afc2 <__swhatbuf_r+0x24>

0800afea <__smakebuf_r>:
 800afea:	898b      	ldrh	r3, [r1, #12]
 800afec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afee:	079d      	lsls	r5, r3, #30
 800aff0:	4606      	mov	r6, r0
 800aff2:	460c      	mov	r4, r1
 800aff4:	d507      	bpl.n	800b006 <__smakebuf_r+0x1c>
 800aff6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800affa:	6023      	str	r3, [r4, #0]
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	2301      	movs	r3, #1
 800b000:	6163      	str	r3, [r4, #20]
 800b002:	b002      	add	sp, #8
 800b004:	bd70      	pop	{r4, r5, r6, pc}
 800b006:	ab01      	add	r3, sp, #4
 800b008:	466a      	mov	r2, sp
 800b00a:	f7ff ffc8 	bl	800af9e <__swhatbuf_r>
 800b00e:	9900      	ldr	r1, [sp, #0]
 800b010:	4605      	mov	r5, r0
 800b012:	4630      	mov	r0, r6
 800b014:	f7ff f8b6 	bl	800a184 <_malloc_r>
 800b018:	b948      	cbnz	r0, 800b02e <__smakebuf_r+0x44>
 800b01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01e:	059a      	lsls	r2, r3, #22
 800b020:	d4ef      	bmi.n	800b002 <__smakebuf_r+0x18>
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	f043 0302 	orr.w	r3, r3, #2
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	e7e3      	b.n	800aff6 <__smakebuf_r+0xc>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	6020      	str	r0, [r4, #0]
 800b032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	6163      	str	r3, [r4, #20]
 800b03c:	9b01      	ldr	r3, [sp, #4]
 800b03e:	6120      	str	r0, [r4, #16]
 800b040:	b15b      	cbz	r3, 800b05a <__smakebuf_r+0x70>
 800b042:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b046:	4630      	mov	r0, r6
 800b048:	f000 f848 	bl	800b0dc <_isatty_r>
 800b04c:	b128      	cbz	r0, 800b05a <__smakebuf_r+0x70>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	f023 0303 	bic.w	r3, r3, #3
 800b054:	f043 0301 	orr.w	r3, r3, #1
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	431d      	orrs	r5, r3
 800b05e:	81a5      	strh	r5, [r4, #12]
 800b060:	e7cf      	b.n	800b002 <__smakebuf_r+0x18>

0800b062 <memmove>:
 800b062:	4288      	cmp	r0, r1
 800b064:	b510      	push	{r4, lr}
 800b066:	eb01 0402 	add.w	r4, r1, r2
 800b06a:	d902      	bls.n	800b072 <memmove+0x10>
 800b06c:	4284      	cmp	r4, r0
 800b06e:	4623      	mov	r3, r4
 800b070:	d807      	bhi.n	800b082 <memmove+0x20>
 800b072:	1e43      	subs	r3, r0, #1
 800b074:	42a1      	cmp	r1, r4
 800b076:	d008      	beq.n	800b08a <memmove+0x28>
 800b078:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b07c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b080:	e7f8      	b.n	800b074 <memmove+0x12>
 800b082:	4402      	add	r2, r0
 800b084:	4601      	mov	r1, r0
 800b086:	428a      	cmp	r2, r1
 800b088:	d100      	bne.n	800b08c <memmove+0x2a>
 800b08a:	bd10      	pop	{r4, pc}
 800b08c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b090:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b094:	e7f7      	b.n	800b086 <memmove+0x24>
	...

0800b098 <_close_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d06      	ldr	r5, [pc, #24]	; (800b0b4 <_close_r+0x1c>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7f7 ff23 	bl	8002eee <_close>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_close_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_close_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	2000aaa8 	.word	0x2000aaa8

0800b0b8 <_fstat_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	4d07      	ldr	r5, [pc, #28]	; (800b0d8 <_fstat_r+0x20>)
 800b0bc:	2300      	movs	r3, #0
 800b0be:	4604      	mov	r4, r0
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	4611      	mov	r1, r2
 800b0c4:	602b      	str	r3, [r5, #0]
 800b0c6:	f7f7 ff1e 	bl	8002f06 <_fstat>
 800b0ca:	1c43      	adds	r3, r0, #1
 800b0cc:	d102      	bne.n	800b0d4 <_fstat_r+0x1c>
 800b0ce:	682b      	ldr	r3, [r5, #0]
 800b0d0:	b103      	cbz	r3, 800b0d4 <_fstat_r+0x1c>
 800b0d2:	6023      	str	r3, [r4, #0]
 800b0d4:	bd38      	pop	{r3, r4, r5, pc}
 800b0d6:	bf00      	nop
 800b0d8:	2000aaa8 	.word	0x2000aaa8

0800b0dc <_isatty_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d06      	ldr	r5, [pc, #24]	; (800b0f8 <_isatty_r+0x1c>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	f7f7 ff1d 	bl	8002f26 <_isatty>
 800b0ec:	1c43      	adds	r3, r0, #1
 800b0ee:	d102      	bne.n	800b0f6 <_isatty_r+0x1a>
 800b0f0:	682b      	ldr	r3, [r5, #0]
 800b0f2:	b103      	cbz	r3, 800b0f6 <_isatty_r+0x1a>
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	bd38      	pop	{r3, r4, r5, pc}
 800b0f8:	2000aaa8 	.word	0x2000aaa8

0800b0fc <_lseek_r>:
 800b0fc:	b538      	push	{r3, r4, r5, lr}
 800b0fe:	4d07      	ldr	r5, [pc, #28]	; (800b11c <_lseek_r+0x20>)
 800b100:	4604      	mov	r4, r0
 800b102:	4608      	mov	r0, r1
 800b104:	4611      	mov	r1, r2
 800b106:	2200      	movs	r2, #0
 800b108:	602a      	str	r2, [r5, #0]
 800b10a:	461a      	mov	r2, r3
 800b10c:	f7f7 ff16 	bl	8002f3c <_lseek>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_lseek_r+0x1e>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_lseek_r+0x1e>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	2000aaa8 	.word	0x2000aaa8

0800b120 <_read_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	; (800b140 <_read_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7f7 fea4 	bl	8002e7c <_read>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_read_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_read_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	2000aaa8 	.word	0x2000aaa8

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d06      	ldr	r5, [pc, #24]	; (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f7 ff02 	bl	8002f58 <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	2000aaa8 	.word	0x2000aaa8

0800b164 <_write_r>:
 800b164:	b538      	push	{r3, r4, r5, lr}
 800b166:	4d07      	ldr	r5, [pc, #28]	; (800b184 <_write_r+0x20>)
 800b168:	4604      	mov	r4, r0
 800b16a:	4608      	mov	r0, r1
 800b16c:	4611      	mov	r1, r2
 800b16e:	2200      	movs	r2, #0
 800b170:	602a      	str	r2, [r5, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	f7f7 fe9f 	bl	8002eb6 <_write>
 800b178:	1c43      	adds	r3, r0, #1
 800b17a:	d102      	bne.n	800b182 <_write_r+0x1e>
 800b17c:	682b      	ldr	r3, [r5, #0]
 800b17e:	b103      	cbz	r3, 800b182 <_write_r+0x1e>
 800b180:	6023      	str	r3, [r4, #0]
 800b182:	bd38      	pop	{r3, r4, r5, pc}
 800b184:	2000aaa8 	.word	0x2000aaa8

0800b188 <__assert_func>:
 800b188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b18a:	4614      	mov	r4, r2
 800b18c:	461a      	mov	r2, r3
 800b18e:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <__assert_func+0x2c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4605      	mov	r5, r0
 800b194:	68d8      	ldr	r0, [r3, #12]
 800b196:	b14c      	cbz	r4, 800b1ac <__assert_func+0x24>
 800b198:	4b07      	ldr	r3, [pc, #28]	; (800b1b8 <__assert_func+0x30>)
 800b19a:	9100      	str	r1, [sp, #0]
 800b19c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1a0:	4906      	ldr	r1, [pc, #24]	; (800b1bc <__assert_func+0x34>)
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	f000 f878 	bl	800b298 <fiprintf>
 800b1a8:	f000 f888 	bl	800b2bc <abort>
 800b1ac:	4b04      	ldr	r3, [pc, #16]	; (800b1c0 <__assert_func+0x38>)
 800b1ae:	461c      	mov	r4, r3
 800b1b0:	e7f3      	b.n	800b19a <__assert_func+0x12>
 800b1b2:	bf00      	nop
 800b1b4:	200001fc 	.word	0x200001fc
 800b1b8:	0800d6bc 	.word	0x0800d6bc
 800b1bc:	0800d6c9 	.word	0x0800d6c9
 800b1c0:	0800d6f7 	.word	0x0800d6f7

0800b1c4 <_calloc_r>:
 800b1c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1c6:	fba1 2402 	umull	r2, r4, r1, r2
 800b1ca:	b94c      	cbnz	r4, 800b1e0 <_calloc_r+0x1c>
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	f7fe ffd8 	bl	800a184 <_malloc_r>
 800b1d4:	9a01      	ldr	r2, [sp, #4]
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	b930      	cbnz	r0, 800b1e8 <_calloc_r+0x24>
 800b1da:	4628      	mov	r0, r5
 800b1dc:	b003      	add	sp, #12
 800b1de:	bd30      	pop	{r4, r5, pc}
 800b1e0:	220c      	movs	r2, #12
 800b1e2:	6002      	str	r2, [r0, #0]
 800b1e4:	2500      	movs	r5, #0
 800b1e6:	e7f8      	b.n	800b1da <_calloc_r+0x16>
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	f7fd fc21 	bl	8008a30 <memset>
 800b1ee:	e7f4      	b.n	800b1da <_calloc_r+0x16>

0800b1f0 <_free_r>:
 800b1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1f2:	2900      	cmp	r1, #0
 800b1f4:	d044      	beq.n	800b280 <_free_r+0x90>
 800b1f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1fa:	9001      	str	r0, [sp, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f1a1 0404 	sub.w	r4, r1, #4
 800b202:	bfb8      	it	lt
 800b204:	18e4      	addlt	r4, r4, r3
 800b206:	f7ff f8fd 	bl	800a404 <__malloc_lock>
 800b20a:	4a1e      	ldr	r2, [pc, #120]	; (800b284 <_free_r+0x94>)
 800b20c:	9801      	ldr	r0, [sp, #4]
 800b20e:	6813      	ldr	r3, [r2, #0]
 800b210:	b933      	cbnz	r3, 800b220 <_free_r+0x30>
 800b212:	6063      	str	r3, [r4, #4]
 800b214:	6014      	str	r4, [r2, #0]
 800b216:	b003      	add	sp, #12
 800b218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b21c:	f7ff b8f8 	b.w	800a410 <__malloc_unlock>
 800b220:	42a3      	cmp	r3, r4
 800b222:	d908      	bls.n	800b236 <_free_r+0x46>
 800b224:	6825      	ldr	r5, [r4, #0]
 800b226:	1961      	adds	r1, r4, r5
 800b228:	428b      	cmp	r3, r1
 800b22a:	bf01      	itttt	eq
 800b22c:	6819      	ldreq	r1, [r3, #0]
 800b22e:	685b      	ldreq	r3, [r3, #4]
 800b230:	1949      	addeq	r1, r1, r5
 800b232:	6021      	streq	r1, [r4, #0]
 800b234:	e7ed      	b.n	800b212 <_free_r+0x22>
 800b236:	461a      	mov	r2, r3
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	b10b      	cbz	r3, 800b240 <_free_r+0x50>
 800b23c:	42a3      	cmp	r3, r4
 800b23e:	d9fa      	bls.n	800b236 <_free_r+0x46>
 800b240:	6811      	ldr	r1, [r2, #0]
 800b242:	1855      	adds	r5, r2, r1
 800b244:	42a5      	cmp	r5, r4
 800b246:	d10b      	bne.n	800b260 <_free_r+0x70>
 800b248:	6824      	ldr	r4, [r4, #0]
 800b24a:	4421      	add	r1, r4
 800b24c:	1854      	adds	r4, r2, r1
 800b24e:	42a3      	cmp	r3, r4
 800b250:	6011      	str	r1, [r2, #0]
 800b252:	d1e0      	bne.n	800b216 <_free_r+0x26>
 800b254:	681c      	ldr	r4, [r3, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	6053      	str	r3, [r2, #4]
 800b25a:	440c      	add	r4, r1
 800b25c:	6014      	str	r4, [r2, #0]
 800b25e:	e7da      	b.n	800b216 <_free_r+0x26>
 800b260:	d902      	bls.n	800b268 <_free_r+0x78>
 800b262:	230c      	movs	r3, #12
 800b264:	6003      	str	r3, [r0, #0]
 800b266:	e7d6      	b.n	800b216 <_free_r+0x26>
 800b268:	6825      	ldr	r5, [r4, #0]
 800b26a:	1961      	adds	r1, r4, r5
 800b26c:	428b      	cmp	r3, r1
 800b26e:	bf04      	itt	eq
 800b270:	6819      	ldreq	r1, [r3, #0]
 800b272:	685b      	ldreq	r3, [r3, #4]
 800b274:	6063      	str	r3, [r4, #4]
 800b276:	bf04      	itt	eq
 800b278:	1949      	addeq	r1, r1, r5
 800b27a:	6021      	streq	r1, [r4, #0]
 800b27c:	6054      	str	r4, [r2, #4]
 800b27e:	e7ca      	b.n	800b216 <_free_r+0x26>
 800b280:	b003      	add	sp, #12
 800b282:	bd30      	pop	{r4, r5, pc}
 800b284:	2000aaa0 	.word	0x2000aaa0

0800b288 <_malloc_usable_size_r>:
 800b288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b28c:	1f18      	subs	r0, r3, #4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	bfbc      	itt	lt
 800b292:	580b      	ldrlt	r3, [r1, r0]
 800b294:	18c0      	addlt	r0, r0, r3
 800b296:	4770      	bx	lr

0800b298 <fiprintf>:
 800b298:	b40e      	push	{r1, r2, r3}
 800b29a:	b503      	push	{r0, r1, lr}
 800b29c:	4601      	mov	r1, r0
 800b29e:	ab03      	add	r3, sp, #12
 800b2a0:	4805      	ldr	r0, [pc, #20]	; (800b2b8 <fiprintf+0x20>)
 800b2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2a6:	6800      	ldr	r0, [r0, #0]
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	f000 f837 	bl	800b31c <_vfiprintf_r>
 800b2ae:	b002      	add	sp, #8
 800b2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2b4:	b003      	add	sp, #12
 800b2b6:	4770      	bx	lr
 800b2b8:	200001fc 	.word	0x200001fc

0800b2bc <abort>:
 800b2bc:	b508      	push	{r3, lr}
 800b2be:	2006      	movs	r0, #6
 800b2c0:	f000 f96e 	bl	800b5a0 <raise>
 800b2c4:	2001      	movs	r0, #1
 800b2c6:	f7f7 fdcf 	bl	8002e68 <_exit>

0800b2ca <__sfputc_r>:
 800b2ca:	6893      	ldr	r3, [r2, #8]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	b410      	push	{r4}
 800b2d2:	6093      	str	r3, [r2, #8]
 800b2d4:	da08      	bge.n	800b2e8 <__sfputc_r+0x1e>
 800b2d6:	6994      	ldr	r4, [r2, #24]
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	db01      	blt.n	800b2e0 <__sfputc_r+0x16>
 800b2dc:	290a      	cmp	r1, #10
 800b2de:	d103      	bne.n	800b2e8 <__sfputc_r+0x1e>
 800b2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2e4:	f7ff bdb9 	b.w	800ae5a <__swbuf_r>
 800b2e8:	6813      	ldr	r3, [r2, #0]
 800b2ea:	1c58      	adds	r0, r3, #1
 800b2ec:	6010      	str	r0, [r2, #0]
 800b2ee:	7019      	strb	r1, [r3, #0]
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <__sfputs_r>:
 800b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fa:	4606      	mov	r6, r0
 800b2fc:	460f      	mov	r7, r1
 800b2fe:	4614      	mov	r4, r2
 800b300:	18d5      	adds	r5, r2, r3
 800b302:	42ac      	cmp	r4, r5
 800b304:	d101      	bne.n	800b30a <__sfputs_r+0x12>
 800b306:	2000      	movs	r0, #0
 800b308:	e007      	b.n	800b31a <__sfputs_r+0x22>
 800b30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30e:	463a      	mov	r2, r7
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff ffda 	bl	800b2ca <__sfputc_r>
 800b316:	1c43      	adds	r3, r0, #1
 800b318:	d1f3      	bne.n	800b302 <__sfputs_r+0xa>
 800b31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b31c <_vfiprintf_r>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	460d      	mov	r5, r1
 800b322:	b09d      	sub	sp, #116	; 0x74
 800b324:	4614      	mov	r4, r2
 800b326:	4698      	mov	r8, r3
 800b328:	4606      	mov	r6, r0
 800b32a:	b118      	cbz	r0, 800b334 <_vfiprintf_r+0x18>
 800b32c:	6a03      	ldr	r3, [r0, #32]
 800b32e:	b90b      	cbnz	r3, 800b334 <_vfiprintf_r+0x18>
 800b330:	f7fc fbfc 	bl	8007b2c <__sinit>
 800b334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b336:	07d9      	lsls	r1, r3, #31
 800b338:	d405      	bmi.n	800b346 <_vfiprintf_r+0x2a>
 800b33a:	89ab      	ldrh	r3, [r5, #12]
 800b33c:	059a      	lsls	r2, r3, #22
 800b33e:	d402      	bmi.n	800b346 <_vfiprintf_r+0x2a>
 800b340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b342:	f7fd fbac 	bl	8008a9e <__retarget_lock_acquire_recursive>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	071b      	lsls	r3, r3, #28
 800b34a:	d501      	bpl.n	800b350 <_vfiprintf_r+0x34>
 800b34c:	692b      	ldr	r3, [r5, #16]
 800b34e:	b99b      	cbnz	r3, 800b378 <_vfiprintf_r+0x5c>
 800b350:	4629      	mov	r1, r5
 800b352:	4630      	mov	r0, r6
 800b354:	f7ff fdbe 	bl	800aed4 <__swsetup_r>
 800b358:	b170      	cbz	r0, 800b378 <_vfiprintf_r+0x5c>
 800b35a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b35c:	07dc      	lsls	r4, r3, #31
 800b35e:	d504      	bpl.n	800b36a <_vfiprintf_r+0x4e>
 800b360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b364:	b01d      	add	sp, #116	; 0x74
 800b366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b36a:	89ab      	ldrh	r3, [r5, #12]
 800b36c:	0598      	lsls	r0, r3, #22
 800b36e:	d4f7      	bmi.n	800b360 <_vfiprintf_r+0x44>
 800b370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b372:	f7fd fb95 	bl	8008aa0 <__retarget_lock_release_recursive>
 800b376:	e7f3      	b.n	800b360 <_vfiprintf_r+0x44>
 800b378:	2300      	movs	r3, #0
 800b37a:	9309      	str	r3, [sp, #36]	; 0x24
 800b37c:	2320      	movs	r3, #32
 800b37e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b382:	f8cd 800c 	str.w	r8, [sp, #12]
 800b386:	2330      	movs	r3, #48	; 0x30
 800b388:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b53c <_vfiprintf_r+0x220>
 800b38c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b390:	f04f 0901 	mov.w	r9, #1
 800b394:	4623      	mov	r3, r4
 800b396:	469a      	mov	sl, r3
 800b398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b39c:	b10a      	cbz	r2, 800b3a2 <_vfiprintf_r+0x86>
 800b39e:	2a25      	cmp	r2, #37	; 0x25
 800b3a0:	d1f9      	bne.n	800b396 <_vfiprintf_r+0x7a>
 800b3a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b3a6:	d00b      	beq.n	800b3c0 <_vfiprintf_r+0xa4>
 800b3a8:	465b      	mov	r3, fp
 800b3aa:	4622      	mov	r2, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7ff ffa2 	bl	800b2f8 <__sfputs_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	f000 80a9 	beq.w	800b50c <_vfiprintf_r+0x1f0>
 800b3ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3bc:	445a      	add	r2, fp
 800b3be:	9209      	str	r2, [sp, #36]	; 0x24
 800b3c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	f000 80a1 	beq.w	800b50c <_vfiprintf_r+0x1f0>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3d4:	f10a 0a01 	add.w	sl, sl, #1
 800b3d8:	9304      	str	r3, [sp, #16]
 800b3da:	9307      	str	r3, [sp, #28]
 800b3dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3e0:	931a      	str	r3, [sp, #104]	; 0x68
 800b3e2:	4654      	mov	r4, sl
 800b3e4:	2205      	movs	r2, #5
 800b3e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ea:	4854      	ldr	r0, [pc, #336]	; (800b53c <_vfiprintf_r+0x220>)
 800b3ec:	f7f4 ff10 	bl	8000210 <memchr>
 800b3f0:	9a04      	ldr	r2, [sp, #16]
 800b3f2:	b9d8      	cbnz	r0, 800b42c <_vfiprintf_r+0x110>
 800b3f4:	06d1      	lsls	r1, r2, #27
 800b3f6:	bf44      	itt	mi
 800b3f8:	2320      	movmi	r3, #32
 800b3fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3fe:	0713      	lsls	r3, r2, #28
 800b400:	bf44      	itt	mi
 800b402:	232b      	movmi	r3, #43	; 0x2b
 800b404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b408:	f89a 3000 	ldrb.w	r3, [sl]
 800b40c:	2b2a      	cmp	r3, #42	; 0x2a
 800b40e:	d015      	beq.n	800b43c <_vfiprintf_r+0x120>
 800b410:	9a07      	ldr	r2, [sp, #28]
 800b412:	4654      	mov	r4, sl
 800b414:	2000      	movs	r0, #0
 800b416:	f04f 0c0a 	mov.w	ip, #10
 800b41a:	4621      	mov	r1, r4
 800b41c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b420:	3b30      	subs	r3, #48	; 0x30
 800b422:	2b09      	cmp	r3, #9
 800b424:	d94d      	bls.n	800b4c2 <_vfiprintf_r+0x1a6>
 800b426:	b1b0      	cbz	r0, 800b456 <_vfiprintf_r+0x13a>
 800b428:	9207      	str	r2, [sp, #28]
 800b42a:	e014      	b.n	800b456 <_vfiprintf_r+0x13a>
 800b42c:	eba0 0308 	sub.w	r3, r0, r8
 800b430:	fa09 f303 	lsl.w	r3, r9, r3
 800b434:	4313      	orrs	r3, r2
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	46a2      	mov	sl, r4
 800b43a:	e7d2      	b.n	800b3e2 <_vfiprintf_r+0xc6>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	1d19      	adds	r1, r3, #4
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	9103      	str	r1, [sp, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	bfbb      	ittet	lt
 800b448:	425b      	neglt	r3, r3
 800b44a:	f042 0202 	orrlt.w	r2, r2, #2
 800b44e:	9307      	strge	r3, [sp, #28]
 800b450:	9307      	strlt	r3, [sp, #28]
 800b452:	bfb8      	it	lt
 800b454:	9204      	strlt	r2, [sp, #16]
 800b456:	7823      	ldrb	r3, [r4, #0]
 800b458:	2b2e      	cmp	r3, #46	; 0x2e
 800b45a:	d10c      	bne.n	800b476 <_vfiprintf_r+0x15a>
 800b45c:	7863      	ldrb	r3, [r4, #1]
 800b45e:	2b2a      	cmp	r3, #42	; 0x2a
 800b460:	d134      	bne.n	800b4cc <_vfiprintf_r+0x1b0>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	1d1a      	adds	r2, r3, #4
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	9203      	str	r2, [sp, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bfb8      	it	lt
 800b46e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b472:	3402      	adds	r4, #2
 800b474:	9305      	str	r3, [sp, #20]
 800b476:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b54c <_vfiprintf_r+0x230>
 800b47a:	7821      	ldrb	r1, [r4, #0]
 800b47c:	2203      	movs	r2, #3
 800b47e:	4650      	mov	r0, sl
 800b480:	f7f4 fec6 	bl	8000210 <memchr>
 800b484:	b138      	cbz	r0, 800b496 <_vfiprintf_r+0x17a>
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	eba0 000a 	sub.w	r0, r0, sl
 800b48c:	2240      	movs	r2, #64	; 0x40
 800b48e:	4082      	lsls	r2, r0
 800b490:	4313      	orrs	r3, r2
 800b492:	3401      	adds	r4, #1
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b49a:	4829      	ldr	r0, [pc, #164]	; (800b540 <_vfiprintf_r+0x224>)
 800b49c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4a0:	2206      	movs	r2, #6
 800b4a2:	f7f4 feb5 	bl	8000210 <memchr>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d03f      	beq.n	800b52a <_vfiprintf_r+0x20e>
 800b4aa:	4b26      	ldr	r3, [pc, #152]	; (800b544 <_vfiprintf_r+0x228>)
 800b4ac:	bb1b      	cbnz	r3, 800b4f6 <_vfiprintf_r+0x1da>
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	3307      	adds	r3, #7
 800b4b2:	f023 0307 	bic.w	r3, r3, #7
 800b4b6:	3308      	adds	r3, #8
 800b4b8:	9303      	str	r3, [sp, #12]
 800b4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4bc:	443b      	add	r3, r7
 800b4be:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c0:	e768      	b.n	800b394 <_vfiprintf_r+0x78>
 800b4c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	2001      	movs	r0, #1
 800b4ca:	e7a6      	b.n	800b41a <_vfiprintf_r+0xfe>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	3401      	adds	r4, #1
 800b4d0:	9305      	str	r3, [sp, #20]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	f04f 0c0a 	mov.w	ip, #10
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4de:	3a30      	subs	r2, #48	; 0x30
 800b4e0:	2a09      	cmp	r2, #9
 800b4e2:	d903      	bls.n	800b4ec <_vfiprintf_r+0x1d0>
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d0c6      	beq.n	800b476 <_vfiprintf_r+0x15a>
 800b4e8:	9105      	str	r1, [sp, #20]
 800b4ea:	e7c4      	b.n	800b476 <_vfiprintf_r+0x15a>
 800b4ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	e7f0      	b.n	800b4d8 <_vfiprintf_r+0x1bc>
 800b4f6:	ab03      	add	r3, sp, #12
 800b4f8:	9300      	str	r3, [sp, #0]
 800b4fa:	462a      	mov	r2, r5
 800b4fc:	4b12      	ldr	r3, [pc, #72]	; (800b548 <_vfiprintf_r+0x22c>)
 800b4fe:	a904      	add	r1, sp, #16
 800b500:	4630      	mov	r0, r6
 800b502:	f7fb fc91 	bl	8006e28 <_printf_float>
 800b506:	4607      	mov	r7, r0
 800b508:	1c78      	adds	r0, r7, #1
 800b50a:	d1d6      	bne.n	800b4ba <_vfiprintf_r+0x19e>
 800b50c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b50e:	07d9      	lsls	r1, r3, #31
 800b510:	d405      	bmi.n	800b51e <_vfiprintf_r+0x202>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	059a      	lsls	r2, r3, #22
 800b516:	d402      	bmi.n	800b51e <_vfiprintf_r+0x202>
 800b518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b51a:	f7fd fac1 	bl	8008aa0 <__retarget_lock_release_recursive>
 800b51e:	89ab      	ldrh	r3, [r5, #12]
 800b520:	065b      	lsls	r3, r3, #25
 800b522:	f53f af1d 	bmi.w	800b360 <_vfiprintf_r+0x44>
 800b526:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b528:	e71c      	b.n	800b364 <_vfiprintf_r+0x48>
 800b52a:	ab03      	add	r3, sp, #12
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	462a      	mov	r2, r5
 800b530:	4b05      	ldr	r3, [pc, #20]	; (800b548 <_vfiprintf_r+0x22c>)
 800b532:	a904      	add	r1, sp, #16
 800b534:	4630      	mov	r0, r6
 800b536:	f7fb ff1b 	bl	8007370 <_printf_i>
 800b53a:	e7e4      	b.n	800b506 <_vfiprintf_r+0x1ea>
 800b53c:	0800d556 	.word	0x0800d556
 800b540:	0800d560 	.word	0x0800d560
 800b544:	08006e29 	.word	0x08006e29
 800b548:	0800b2f9 	.word	0x0800b2f9
 800b54c:	0800d55c 	.word	0x0800d55c

0800b550 <_raise_r>:
 800b550:	291f      	cmp	r1, #31
 800b552:	b538      	push	{r3, r4, r5, lr}
 800b554:	4604      	mov	r4, r0
 800b556:	460d      	mov	r5, r1
 800b558:	d904      	bls.n	800b564 <_raise_r+0x14>
 800b55a:	2316      	movs	r3, #22
 800b55c:	6003      	str	r3, [r0, #0]
 800b55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b566:	b112      	cbz	r2, 800b56e <_raise_r+0x1e>
 800b568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b56c:	b94b      	cbnz	r3, 800b582 <_raise_r+0x32>
 800b56e:	4620      	mov	r0, r4
 800b570:	f000 f830 	bl	800b5d4 <_getpid_r>
 800b574:	462a      	mov	r2, r5
 800b576:	4601      	mov	r1, r0
 800b578:	4620      	mov	r0, r4
 800b57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b57e:	f000 b817 	b.w	800b5b0 <_kill_r>
 800b582:	2b01      	cmp	r3, #1
 800b584:	d00a      	beq.n	800b59c <_raise_r+0x4c>
 800b586:	1c59      	adds	r1, r3, #1
 800b588:	d103      	bne.n	800b592 <_raise_r+0x42>
 800b58a:	2316      	movs	r3, #22
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	2001      	movs	r0, #1
 800b590:	e7e7      	b.n	800b562 <_raise_r+0x12>
 800b592:	2400      	movs	r4, #0
 800b594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b598:	4628      	mov	r0, r5
 800b59a:	4798      	blx	r3
 800b59c:	2000      	movs	r0, #0
 800b59e:	e7e0      	b.n	800b562 <_raise_r+0x12>

0800b5a0 <raise>:
 800b5a0:	4b02      	ldr	r3, [pc, #8]	; (800b5ac <raise+0xc>)
 800b5a2:	4601      	mov	r1, r0
 800b5a4:	6818      	ldr	r0, [r3, #0]
 800b5a6:	f7ff bfd3 	b.w	800b550 <_raise_r>
 800b5aa:	bf00      	nop
 800b5ac:	200001fc 	.word	0x200001fc

0800b5b0 <_kill_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4d07      	ldr	r5, [pc, #28]	; (800b5d0 <_kill_r+0x20>)
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	4608      	mov	r0, r1
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	602b      	str	r3, [r5, #0]
 800b5be:	f7f7 fc43 	bl	8002e48 <_kill>
 800b5c2:	1c43      	adds	r3, r0, #1
 800b5c4:	d102      	bne.n	800b5cc <_kill_r+0x1c>
 800b5c6:	682b      	ldr	r3, [r5, #0]
 800b5c8:	b103      	cbz	r3, 800b5cc <_kill_r+0x1c>
 800b5ca:	6023      	str	r3, [r4, #0]
 800b5cc:	bd38      	pop	{r3, r4, r5, pc}
 800b5ce:	bf00      	nop
 800b5d0:	2000aaa8 	.word	0x2000aaa8

0800b5d4 <_getpid_r>:
 800b5d4:	f7f7 bc30 	b.w	8002e38 <_getpid>

0800b5d8 <pow>:
 800b5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5da:	ed2d 8b02 	vpush	{d8}
 800b5de:	eeb0 8a40 	vmov.f32	s16, s0
 800b5e2:	eef0 8a60 	vmov.f32	s17, s1
 800b5e6:	ec55 4b11 	vmov	r4, r5, d1
 800b5ea:	f000 f871 	bl	800b6d0 <__ieee754_pow>
 800b5ee:	4622      	mov	r2, r4
 800b5f0:	462b      	mov	r3, r5
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	ec57 6b10 	vmov	r6, r7, d0
 800b5fa:	f7f5 fab7 	bl	8000b6c <__aeabi_dcmpun>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d13b      	bne.n	800b67a <pow+0xa2>
 800b602:	ec51 0b18 	vmov	r0, r1, d8
 800b606:	2200      	movs	r2, #0
 800b608:	2300      	movs	r3, #0
 800b60a:	f7f5 fa7d 	bl	8000b08 <__aeabi_dcmpeq>
 800b60e:	b1b8      	cbz	r0, 800b640 <pow+0x68>
 800b610:	2200      	movs	r2, #0
 800b612:	2300      	movs	r3, #0
 800b614:	4620      	mov	r0, r4
 800b616:	4629      	mov	r1, r5
 800b618:	f7f5 fa76 	bl	8000b08 <__aeabi_dcmpeq>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d146      	bne.n	800b6ae <pow+0xd6>
 800b620:	ec45 4b10 	vmov	d0, r4, r5
 800b624:	f000 f848 	bl	800b6b8 <finite>
 800b628:	b338      	cbz	r0, 800b67a <pow+0xa2>
 800b62a:	2200      	movs	r2, #0
 800b62c:	2300      	movs	r3, #0
 800b62e:	4620      	mov	r0, r4
 800b630:	4629      	mov	r1, r5
 800b632:	f7f5 fa73 	bl	8000b1c <__aeabi_dcmplt>
 800b636:	b300      	cbz	r0, 800b67a <pow+0xa2>
 800b638:	f7fd fa06 	bl	8008a48 <__errno>
 800b63c:	2322      	movs	r3, #34	; 0x22
 800b63e:	e01b      	b.n	800b678 <pow+0xa0>
 800b640:	ec47 6b10 	vmov	d0, r6, r7
 800b644:	f000 f838 	bl	800b6b8 <finite>
 800b648:	b9e0      	cbnz	r0, 800b684 <pow+0xac>
 800b64a:	eeb0 0a48 	vmov.f32	s0, s16
 800b64e:	eef0 0a68 	vmov.f32	s1, s17
 800b652:	f000 f831 	bl	800b6b8 <finite>
 800b656:	b1a8      	cbz	r0, 800b684 <pow+0xac>
 800b658:	ec45 4b10 	vmov	d0, r4, r5
 800b65c:	f000 f82c 	bl	800b6b8 <finite>
 800b660:	b180      	cbz	r0, 800b684 <pow+0xac>
 800b662:	4632      	mov	r2, r6
 800b664:	463b      	mov	r3, r7
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f5 fa7f 	bl	8000b6c <__aeabi_dcmpun>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d0e2      	beq.n	800b638 <pow+0x60>
 800b672:	f7fd f9e9 	bl	8008a48 <__errno>
 800b676:	2321      	movs	r3, #33	; 0x21
 800b678:	6003      	str	r3, [r0, #0]
 800b67a:	ecbd 8b02 	vpop	{d8}
 800b67e:	ec47 6b10 	vmov	d0, r6, r7
 800b682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b684:	2200      	movs	r2, #0
 800b686:	2300      	movs	r3, #0
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f5 fa3c 	bl	8000b08 <__aeabi_dcmpeq>
 800b690:	2800      	cmp	r0, #0
 800b692:	d0f2      	beq.n	800b67a <pow+0xa2>
 800b694:	eeb0 0a48 	vmov.f32	s0, s16
 800b698:	eef0 0a68 	vmov.f32	s1, s17
 800b69c:	f000 f80c 	bl	800b6b8 <finite>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d0ea      	beq.n	800b67a <pow+0xa2>
 800b6a4:	ec45 4b10 	vmov	d0, r4, r5
 800b6a8:	f000 f806 	bl	800b6b8 <finite>
 800b6ac:	e7c3      	b.n	800b636 <pow+0x5e>
 800b6ae:	4f01      	ldr	r7, [pc, #4]	; (800b6b4 <pow+0xdc>)
 800b6b0:	2600      	movs	r6, #0
 800b6b2:	e7e2      	b.n	800b67a <pow+0xa2>
 800b6b4:	3ff00000 	.word	0x3ff00000

0800b6b8 <finite>:
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	ed8d 0b00 	vstr	d0, [sp]
 800b6be:	9801      	ldr	r0, [sp, #4]
 800b6c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b6c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b6c8:	0fc0      	lsrs	r0, r0, #31
 800b6ca:	b002      	add	sp, #8
 800b6cc:	4770      	bx	lr
	...

0800b6d0 <__ieee754_pow>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b06 	vpush	{d8-d10}
 800b6d8:	b089      	sub	sp, #36	; 0x24
 800b6da:	ed8d 1b00 	vstr	d1, [sp]
 800b6de:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b6e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b6e6:	ea58 0102 	orrs.w	r1, r8, r2
 800b6ea:	ec57 6b10 	vmov	r6, r7, d0
 800b6ee:	d115      	bne.n	800b71c <__ieee754_pow+0x4c>
 800b6f0:	19b3      	adds	r3, r6, r6
 800b6f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b6f6:	4152      	adcs	r2, r2
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	4b89      	ldr	r3, [pc, #548]	; (800b920 <__ieee754_pow+0x250>)
 800b6fc:	4193      	sbcs	r3, r2
 800b6fe:	f080 84d1 	bcs.w	800c0a4 <__ieee754_pow+0x9d4>
 800b702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b706:	4630      	mov	r0, r6
 800b708:	4639      	mov	r1, r7
 800b70a:	f7f4 fddf 	bl	80002cc <__adddf3>
 800b70e:	ec41 0b10 	vmov	d0, r0, r1
 800b712:	b009      	add	sp, #36	; 0x24
 800b714:	ecbd 8b06 	vpop	{d8-d10}
 800b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71c:	4b81      	ldr	r3, [pc, #516]	; (800b924 <__ieee754_pow+0x254>)
 800b71e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b722:	429c      	cmp	r4, r3
 800b724:	ee10 aa10 	vmov	sl, s0
 800b728:	463d      	mov	r5, r7
 800b72a:	dc06      	bgt.n	800b73a <__ieee754_pow+0x6a>
 800b72c:	d101      	bne.n	800b732 <__ieee754_pow+0x62>
 800b72e:	2e00      	cmp	r6, #0
 800b730:	d1e7      	bne.n	800b702 <__ieee754_pow+0x32>
 800b732:	4598      	cmp	r8, r3
 800b734:	dc01      	bgt.n	800b73a <__ieee754_pow+0x6a>
 800b736:	d10f      	bne.n	800b758 <__ieee754_pow+0x88>
 800b738:	b172      	cbz	r2, 800b758 <__ieee754_pow+0x88>
 800b73a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b73e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b742:	ea55 050a 	orrs.w	r5, r5, sl
 800b746:	d1dc      	bne.n	800b702 <__ieee754_pow+0x32>
 800b748:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b74c:	18db      	adds	r3, r3, r3
 800b74e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b752:	4152      	adcs	r2, r2
 800b754:	429d      	cmp	r5, r3
 800b756:	e7d0      	b.n	800b6fa <__ieee754_pow+0x2a>
 800b758:	2d00      	cmp	r5, #0
 800b75a:	da3b      	bge.n	800b7d4 <__ieee754_pow+0x104>
 800b75c:	4b72      	ldr	r3, [pc, #456]	; (800b928 <__ieee754_pow+0x258>)
 800b75e:	4598      	cmp	r8, r3
 800b760:	dc51      	bgt.n	800b806 <__ieee754_pow+0x136>
 800b762:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b766:	4598      	cmp	r8, r3
 800b768:	f340 84ab 	ble.w	800c0c2 <__ieee754_pow+0x9f2>
 800b76c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b770:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b774:	2b14      	cmp	r3, #20
 800b776:	dd0f      	ble.n	800b798 <__ieee754_pow+0xc8>
 800b778:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b77c:	fa22 f103 	lsr.w	r1, r2, r3
 800b780:	fa01 f303 	lsl.w	r3, r1, r3
 800b784:	4293      	cmp	r3, r2
 800b786:	f040 849c 	bne.w	800c0c2 <__ieee754_pow+0x9f2>
 800b78a:	f001 0101 	and.w	r1, r1, #1
 800b78e:	f1c1 0302 	rsb	r3, r1, #2
 800b792:	9304      	str	r3, [sp, #16]
 800b794:	b182      	cbz	r2, 800b7b8 <__ieee754_pow+0xe8>
 800b796:	e05f      	b.n	800b858 <__ieee754_pow+0x188>
 800b798:	2a00      	cmp	r2, #0
 800b79a:	d15b      	bne.n	800b854 <__ieee754_pow+0x184>
 800b79c:	f1c3 0314 	rsb	r3, r3, #20
 800b7a0:	fa48 f103 	asr.w	r1, r8, r3
 800b7a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a8:	4543      	cmp	r3, r8
 800b7aa:	f040 8487 	bne.w	800c0bc <__ieee754_pow+0x9ec>
 800b7ae:	f001 0101 	and.w	r1, r1, #1
 800b7b2:	f1c1 0302 	rsb	r3, r1, #2
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	4b5c      	ldr	r3, [pc, #368]	; (800b92c <__ieee754_pow+0x25c>)
 800b7ba:	4598      	cmp	r8, r3
 800b7bc:	d132      	bne.n	800b824 <__ieee754_pow+0x154>
 800b7be:	f1b9 0f00 	cmp.w	r9, #0
 800b7c2:	f280 8477 	bge.w	800c0b4 <__ieee754_pow+0x9e4>
 800b7c6:	4959      	ldr	r1, [pc, #356]	; (800b92c <__ieee754_pow+0x25c>)
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	463b      	mov	r3, r7
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f7f5 f85d 	bl	800088c <__aeabi_ddiv>
 800b7d2:	e79c      	b.n	800b70e <__ieee754_pow+0x3e>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	2a00      	cmp	r2, #0
 800b7da:	d13d      	bne.n	800b858 <__ieee754_pow+0x188>
 800b7dc:	4b51      	ldr	r3, [pc, #324]	; (800b924 <__ieee754_pow+0x254>)
 800b7de:	4598      	cmp	r8, r3
 800b7e0:	d1ea      	bne.n	800b7b8 <__ieee754_pow+0xe8>
 800b7e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b7e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b7ea:	ea53 030a 	orrs.w	r3, r3, sl
 800b7ee:	f000 8459 	beq.w	800c0a4 <__ieee754_pow+0x9d4>
 800b7f2:	4b4f      	ldr	r3, [pc, #316]	; (800b930 <__ieee754_pow+0x260>)
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	dd08      	ble.n	800b80a <__ieee754_pow+0x13a>
 800b7f8:	f1b9 0f00 	cmp.w	r9, #0
 800b7fc:	f2c0 8456 	blt.w	800c0ac <__ieee754_pow+0x9dc>
 800b800:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b804:	e783      	b.n	800b70e <__ieee754_pow+0x3e>
 800b806:	2302      	movs	r3, #2
 800b808:	e7e5      	b.n	800b7d6 <__ieee754_pow+0x106>
 800b80a:	f1b9 0f00 	cmp.w	r9, #0
 800b80e:	f04f 0000 	mov.w	r0, #0
 800b812:	f04f 0100 	mov.w	r1, #0
 800b816:	f6bf af7a 	bge.w	800b70e <__ieee754_pow+0x3e>
 800b81a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b81e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b822:	e774      	b.n	800b70e <__ieee754_pow+0x3e>
 800b824:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b828:	d106      	bne.n	800b838 <__ieee754_pow+0x168>
 800b82a:	4632      	mov	r2, r6
 800b82c:	463b      	mov	r3, r7
 800b82e:	4630      	mov	r0, r6
 800b830:	4639      	mov	r1, r7
 800b832:	f7f4 ff01 	bl	8000638 <__aeabi_dmul>
 800b836:	e76a      	b.n	800b70e <__ieee754_pow+0x3e>
 800b838:	4b3e      	ldr	r3, [pc, #248]	; (800b934 <__ieee754_pow+0x264>)
 800b83a:	4599      	cmp	r9, r3
 800b83c:	d10c      	bne.n	800b858 <__ieee754_pow+0x188>
 800b83e:	2d00      	cmp	r5, #0
 800b840:	db0a      	blt.n	800b858 <__ieee754_pow+0x188>
 800b842:	ec47 6b10 	vmov	d0, r6, r7
 800b846:	b009      	add	sp, #36	; 0x24
 800b848:	ecbd 8b06 	vpop	{d8-d10}
 800b84c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	f000 bd20 	b.w	800c294 <__ieee754_sqrt>
 800b854:	2300      	movs	r3, #0
 800b856:	9304      	str	r3, [sp, #16]
 800b858:	ec47 6b10 	vmov	d0, r6, r7
 800b85c:	f000 fc92 	bl	800c184 <fabs>
 800b860:	ec51 0b10 	vmov	r0, r1, d0
 800b864:	f1ba 0f00 	cmp.w	sl, #0
 800b868:	d129      	bne.n	800b8be <__ieee754_pow+0x1ee>
 800b86a:	b124      	cbz	r4, 800b876 <__ieee754_pow+0x1a6>
 800b86c:	4b2f      	ldr	r3, [pc, #188]	; (800b92c <__ieee754_pow+0x25c>)
 800b86e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b872:	429a      	cmp	r2, r3
 800b874:	d123      	bne.n	800b8be <__ieee754_pow+0x1ee>
 800b876:	f1b9 0f00 	cmp.w	r9, #0
 800b87a:	da05      	bge.n	800b888 <__ieee754_pow+0x1b8>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	2000      	movs	r0, #0
 800b882:	492a      	ldr	r1, [pc, #168]	; (800b92c <__ieee754_pow+0x25c>)
 800b884:	f7f5 f802 	bl	800088c <__aeabi_ddiv>
 800b888:	2d00      	cmp	r5, #0
 800b88a:	f6bf af40 	bge.w	800b70e <__ieee754_pow+0x3e>
 800b88e:	9b04      	ldr	r3, [sp, #16]
 800b890:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b894:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b898:	431c      	orrs	r4, r3
 800b89a:	d108      	bne.n	800b8ae <__ieee754_pow+0x1de>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	f7f4 fd10 	bl	80002c8 <__aeabi_dsub>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	e78f      	b.n	800b7ce <__ieee754_pow+0xfe>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	f47f af2c 	bne.w	800b70e <__ieee754_pow+0x3e>
 800b8b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	e727      	b.n	800b70e <__ieee754_pow+0x3e>
 800b8be:	0feb      	lsrs	r3, r5, #31
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	9a06      	ldr	r2, [sp, #24]
 800b8c6:	9b04      	ldr	r3, [sp, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	d102      	bne.n	800b8d2 <__ieee754_pow+0x202>
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	e7e6      	b.n	800b8a0 <__ieee754_pow+0x1d0>
 800b8d2:	4b19      	ldr	r3, [pc, #100]	; (800b938 <__ieee754_pow+0x268>)
 800b8d4:	4598      	cmp	r8, r3
 800b8d6:	f340 80fb 	ble.w	800bad0 <__ieee754_pow+0x400>
 800b8da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8de:	4598      	cmp	r8, r3
 800b8e0:	4b13      	ldr	r3, [pc, #76]	; (800b930 <__ieee754_pow+0x260>)
 800b8e2:	dd0c      	ble.n	800b8fe <__ieee754_pow+0x22e>
 800b8e4:	429c      	cmp	r4, r3
 800b8e6:	dc0f      	bgt.n	800b908 <__ieee754_pow+0x238>
 800b8e8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ec:	da0f      	bge.n	800b90e <__ieee754_pow+0x23e>
 800b8ee:	2000      	movs	r0, #0
 800b8f0:	b009      	add	sp, #36	; 0x24
 800b8f2:	ecbd 8b06 	vpop	{d8-d10}
 800b8f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8fa:	f000 bc3a 	b.w	800c172 <__math_oflow>
 800b8fe:	429c      	cmp	r4, r3
 800b900:	dbf2      	blt.n	800b8e8 <__ieee754_pow+0x218>
 800b902:	4b0a      	ldr	r3, [pc, #40]	; (800b92c <__ieee754_pow+0x25c>)
 800b904:	429c      	cmp	r4, r3
 800b906:	dd19      	ble.n	800b93c <__ieee754_pow+0x26c>
 800b908:	f1b9 0f00 	cmp.w	r9, #0
 800b90c:	dcef      	bgt.n	800b8ee <__ieee754_pow+0x21e>
 800b90e:	2000      	movs	r0, #0
 800b910:	b009      	add	sp, #36	; 0x24
 800b912:	ecbd 8b06 	vpop	{d8-d10}
 800b916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	f000 bc21 	b.w	800c160 <__math_uflow>
 800b91e:	bf00      	nop
 800b920:	fff00000 	.word	0xfff00000
 800b924:	7ff00000 	.word	0x7ff00000
 800b928:	433fffff 	.word	0x433fffff
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	3fefffff 	.word	0x3fefffff
 800b934:	3fe00000 	.word	0x3fe00000
 800b938:	41e00000 	.word	0x41e00000
 800b93c:	4b60      	ldr	r3, [pc, #384]	; (800bac0 <__ieee754_pow+0x3f0>)
 800b93e:	2200      	movs	r2, #0
 800b940:	f7f4 fcc2 	bl	80002c8 <__aeabi_dsub>
 800b944:	a354      	add	r3, pc, #336	; (adr r3, 800ba98 <__ieee754_pow+0x3c8>)
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	4604      	mov	r4, r0
 800b94c:	460d      	mov	r5, r1
 800b94e:	f7f4 fe73 	bl	8000638 <__aeabi_dmul>
 800b952:	a353      	add	r3, pc, #332	; (adr r3, 800baa0 <__ieee754_pow+0x3d0>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	4606      	mov	r6, r0
 800b95a:	460f      	mov	r7, r1
 800b95c:	4620      	mov	r0, r4
 800b95e:	4629      	mov	r1, r5
 800b960:	f7f4 fe6a 	bl	8000638 <__aeabi_dmul>
 800b964:	4b57      	ldr	r3, [pc, #348]	; (800bac4 <__ieee754_pow+0x3f4>)
 800b966:	4682      	mov	sl, r0
 800b968:	468b      	mov	fp, r1
 800b96a:	2200      	movs	r2, #0
 800b96c:	4620      	mov	r0, r4
 800b96e:	4629      	mov	r1, r5
 800b970:	f7f4 fe62 	bl	8000638 <__aeabi_dmul>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	a14b      	add	r1, pc, #300	; (adr r1, 800baa8 <__ieee754_pow+0x3d8>)
 800b97a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b97e:	f7f4 fca3 	bl	80002c8 <__aeabi_dsub>
 800b982:	4622      	mov	r2, r4
 800b984:	462b      	mov	r3, r5
 800b986:	f7f4 fe57 	bl	8000638 <__aeabi_dmul>
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	2000      	movs	r0, #0
 800b990:	494d      	ldr	r1, [pc, #308]	; (800bac8 <__ieee754_pow+0x3f8>)
 800b992:	f7f4 fc99 	bl	80002c8 <__aeabi_dsub>
 800b996:	4622      	mov	r2, r4
 800b998:	4680      	mov	r8, r0
 800b99a:	4689      	mov	r9, r1
 800b99c:	462b      	mov	r3, r5
 800b99e:	4620      	mov	r0, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	f7f4 fe49 	bl	8000638 <__aeabi_dmul>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4640      	mov	r0, r8
 800b9ac:	4649      	mov	r1, r9
 800b9ae:	f7f4 fe43 	bl	8000638 <__aeabi_dmul>
 800b9b2:	a33f      	add	r3, pc, #252	; (adr r3, 800bab0 <__ieee754_pow+0x3e0>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fe3e 	bl	8000638 <__aeabi_dmul>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	460b      	mov	r3, r1
 800b9c0:	4650      	mov	r0, sl
 800b9c2:	4659      	mov	r1, fp
 800b9c4:	f7f4 fc80 	bl	80002c8 <__aeabi_dsub>
 800b9c8:	4602      	mov	r2, r0
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4680      	mov	r8, r0
 800b9ce:	4689      	mov	r9, r1
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 fc7a 	bl	80002cc <__adddf3>
 800b9d8:	2000      	movs	r0, #0
 800b9da:	4632      	mov	r2, r6
 800b9dc:	463b      	mov	r3, r7
 800b9de:	4604      	mov	r4, r0
 800b9e0:	460d      	mov	r5, r1
 800b9e2:	f7f4 fc71 	bl	80002c8 <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	f7f4 fc6b 	bl	80002c8 <__aeabi_dsub>
 800b9f2:	9b04      	ldr	r3, [sp, #16]
 800b9f4:	9a06      	ldr	r2, [sp, #24]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	4682      	mov	sl, r0
 800b9fc:	468b      	mov	fp, r1
 800b9fe:	f040 81e7 	bne.w	800bdd0 <__ieee754_pow+0x700>
 800ba02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bab8 <__ieee754_pow+0x3e8>
 800ba06:	eeb0 8a47 	vmov.f32	s16, s14
 800ba0a:	eef0 8a67 	vmov.f32	s17, s15
 800ba0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba12:	2600      	movs	r6, #0
 800ba14:	4632      	mov	r2, r6
 800ba16:	463b      	mov	r3, r7
 800ba18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba1c:	f7f4 fc54 	bl	80002c8 <__aeabi_dsub>
 800ba20:	4622      	mov	r2, r4
 800ba22:	462b      	mov	r3, r5
 800ba24:	f7f4 fe08 	bl	8000638 <__aeabi_dmul>
 800ba28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	4689      	mov	r9, r1
 800ba30:	4650      	mov	r0, sl
 800ba32:	4659      	mov	r1, fp
 800ba34:	f7f4 fe00 	bl	8000638 <__aeabi_dmul>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4640      	mov	r0, r8
 800ba3e:	4649      	mov	r1, r9
 800ba40:	f7f4 fc44 	bl	80002cc <__adddf3>
 800ba44:	4632      	mov	r2, r6
 800ba46:	463b      	mov	r3, r7
 800ba48:	4680      	mov	r8, r0
 800ba4a:	4689      	mov	r9, r1
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	4629      	mov	r1, r5
 800ba50:	f7f4 fdf2 	bl	8000638 <__aeabi_dmul>
 800ba54:	460b      	mov	r3, r1
 800ba56:	4604      	mov	r4, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4649      	mov	r1, r9
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7f4 fc34 	bl	80002cc <__adddf3>
 800ba64:	4b19      	ldr	r3, [pc, #100]	; (800bacc <__ieee754_pow+0x3fc>)
 800ba66:	4299      	cmp	r1, r3
 800ba68:	ec45 4b19 	vmov	d9, r4, r5
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	460f      	mov	r7, r1
 800ba70:	468b      	mov	fp, r1
 800ba72:	f340 82f0 	ble.w	800c056 <__ieee754_pow+0x986>
 800ba76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba7e:	4303      	orrs	r3, r0
 800ba80:	f000 81e4 	beq.w	800be4c <__ieee754_pow+0x77c>
 800ba84:	ec51 0b18 	vmov	r0, r1, d8
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f7f5 f846 	bl	8000b1c <__aeabi_dcmplt>
 800ba90:	3800      	subs	r0, #0
 800ba92:	bf18      	it	ne
 800ba94:	2001      	movne	r0, #1
 800ba96:	e72b      	b.n	800b8f0 <__ieee754_pow+0x220>
 800ba98:	60000000 	.word	0x60000000
 800ba9c:	3ff71547 	.word	0x3ff71547
 800baa0:	f85ddf44 	.word	0xf85ddf44
 800baa4:	3e54ae0b 	.word	0x3e54ae0b
 800baa8:	55555555 	.word	0x55555555
 800baac:	3fd55555 	.word	0x3fd55555
 800bab0:	652b82fe 	.word	0x652b82fe
 800bab4:	3ff71547 	.word	0x3ff71547
 800bab8:	00000000 	.word	0x00000000
 800babc:	bff00000 	.word	0xbff00000
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	3fd00000 	.word	0x3fd00000
 800bac8:	3fe00000 	.word	0x3fe00000
 800bacc:	408fffff 	.word	0x408fffff
 800bad0:	4bd5      	ldr	r3, [pc, #852]	; (800be28 <__ieee754_pow+0x758>)
 800bad2:	402b      	ands	r3, r5
 800bad4:	2200      	movs	r2, #0
 800bad6:	b92b      	cbnz	r3, 800bae4 <__ieee754_pow+0x414>
 800bad8:	4bd4      	ldr	r3, [pc, #848]	; (800be2c <__ieee754_pow+0x75c>)
 800bada:	f7f4 fdad 	bl	8000638 <__aeabi_dmul>
 800bade:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bae2:	460c      	mov	r4, r1
 800bae4:	1523      	asrs	r3, r4, #20
 800bae6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800baea:	4413      	add	r3, r2
 800baec:	9305      	str	r3, [sp, #20]
 800baee:	4bd0      	ldr	r3, [pc, #832]	; (800be30 <__ieee754_pow+0x760>)
 800baf0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800baf4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800baf8:	429c      	cmp	r4, r3
 800bafa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bafe:	dd08      	ble.n	800bb12 <__ieee754_pow+0x442>
 800bb00:	4bcc      	ldr	r3, [pc, #816]	; (800be34 <__ieee754_pow+0x764>)
 800bb02:	429c      	cmp	r4, r3
 800bb04:	f340 8162 	ble.w	800bdcc <__ieee754_pow+0x6fc>
 800bb08:	9b05      	ldr	r3, [sp, #20]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb12:	2400      	movs	r4, #0
 800bb14:	00e3      	lsls	r3, r4, #3
 800bb16:	9307      	str	r3, [sp, #28]
 800bb18:	4bc7      	ldr	r3, [pc, #796]	; (800be38 <__ieee754_pow+0x768>)
 800bb1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb1e:	ed93 7b00 	vldr	d7, [r3]
 800bb22:	4629      	mov	r1, r5
 800bb24:	ec53 2b17 	vmov	r2, r3, d7
 800bb28:	eeb0 9a47 	vmov.f32	s18, s14
 800bb2c:	eef0 9a67 	vmov.f32	s19, s15
 800bb30:	4682      	mov	sl, r0
 800bb32:	f7f4 fbc9 	bl	80002c8 <__aeabi_dsub>
 800bb36:	4652      	mov	r2, sl
 800bb38:	4606      	mov	r6, r0
 800bb3a:	460f      	mov	r7, r1
 800bb3c:	462b      	mov	r3, r5
 800bb3e:	ec51 0b19 	vmov	r0, r1, d9
 800bb42:	f7f4 fbc3 	bl	80002cc <__adddf3>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	49bb      	ldr	r1, [pc, #748]	; (800be3c <__ieee754_pow+0x76c>)
 800bb4e:	f7f4 fe9d 	bl	800088c <__aeabi_ddiv>
 800bb52:	ec41 0b1a 	vmov	d10, r0, r1
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4630      	mov	r0, r6
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	f7f4 fd6b 	bl	8000638 <__aeabi_dmul>
 800bb62:	2300      	movs	r3, #0
 800bb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb68:	9302      	str	r3, [sp, #8]
 800bb6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb6e:	46ab      	mov	fp, r5
 800bb70:	106d      	asrs	r5, r5, #1
 800bb72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb7a:	ec41 0b18 	vmov	d8, r0, r1
 800bb7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bb82:	2200      	movs	r2, #0
 800bb84:	4640      	mov	r0, r8
 800bb86:	4649      	mov	r1, r9
 800bb88:	4614      	mov	r4, r2
 800bb8a:	461d      	mov	r5, r3
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4630      	mov	r0, r6
 800bb96:	4639      	mov	r1, r7
 800bb98:	f7f4 fb96 	bl	80002c8 <__aeabi_dsub>
 800bb9c:	ec53 2b19 	vmov	r2, r3, d9
 800bba0:	4606      	mov	r6, r0
 800bba2:	460f      	mov	r7, r1
 800bba4:	4620      	mov	r0, r4
 800bba6:	4629      	mov	r1, r5
 800bba8:	f7f4 fb8e 	bl	80002c8 <__aeabi_dsub>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4650      	mov	r0, sl
 800bbb2:	4659      	mov	r1, fp
 800bbb4:	f7f4 fb88 	bl	80002c8 <__aeabi_dsub>
 800bbb8:	4642      	mov	r2, r8
 800bbba:	464b      	mov	r3, r9
 800bbbc:	f7f4 fd3c 	bl	8000638 <__aeabi_dmul>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	4639      	mov	r1, r7
 800bbc8:	f7f4 fb7e 	bl	80002c8 <__aeabi_dsub>
 800bbcc:	ec53 2b1a 	vmov	r2, r3, d10
 800bbd0:	f7f4 fd32 	bl	8000638 <__aeabi_dmul>
 800bbd4:	ec53 2b18 	vmov	r2, r3, d8
 800bbd8:	ec41 0b19 	vmov	d9, r0, r1
 800bbdc:	ec51 0b18 	vmov	r0, r1, d8
 800bbe0:	f7f4 fd2a 	bl	8000638 <__aeabi_dmul>
 800bbe4:	a37c      	add	r3, pc, #496	; (adr r3, 800bdd8 <__ieee754_pow+0x708>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	4604      	mov	r4, r0
 800bbec:	460d      	mov	r5, r1
 800bbee:	f7f4 fd23 	bl	8000638 <__aeabi_dmul>
 800bbf2:	a37b      	add	r3, pc, #492	; (adr r3, 800bde0 <__ieee754_pow+0x710>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb68 	bl	80002cc <__adddf3>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	462b      	mov	r3, r5
 800bc00:	f7f4 fd1a 	bl	8000638 <__aeabi_dmul>
 800bc04:	a378      	add	r3, pc, #480	; (adr r3, 800bde8 <__ieee754_pow+0x718>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fb5f 	bl	80002cc <__adddf3>
 800bc0e:	4622      	mov	r2, r4
 800bc10:	462b      	mov	r3, r5
 800bc12:	f7f4 fd11 	bl	8000638 <__aeabi_dmul>
 800bc16:	a376      	add	r3, pc, #472	; (adr r3, 800bdf0 <__ieee754_pow+0x720>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f7f4 fb56 	bl	80002cc <__adddf3>
 800bc20:	4622      	mov	r2, r4
 800bc22:	462b      	mov	r3, r5
 800bc24:	f7f4 fd08 	bl	8000638 <__aeabi_dmul>
 800bc28:	a373      	add	r3, pc, #460	; (adr r3, 800bdf8 <__ieee754_pow+0x728>)
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f7f4 fb4d 	bl	80002cc <__adddf3>
 800bc32:	4622      	mov	r2, r4
 800bc34:	462b      	mov	r3, r5
 800bc36:	f7f4 fcff 	bl	8000638 <__aeabi_dmul>
 800bc3a:	a371      	add	r3, pc, #452	; (adr r3, 800be00 <__ieee754_pow+0x730>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	f7f4 fb44 	bl	80002cc <__adddf3>
 800bc44:	4622      	mov	r2, r4
 800bc46:	4606      	mov	r6, r0
 800bc48:	460f      	mov	r7, r1
 800bc4a:	462b      	mov	r3, r5
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	f7f4 fcf2 	bl	8000638 <__aeabi_dmul>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	f7f4 fcec 	bl	8000638 <__aeabi_dmul>
 800bc60:	4642      	mov	r2, r8
 800bc62:	4604      	mov	r4, r0
 800bc64:	460d      	mov	r5, r1
 800bc66:	464b      	mov	r3, r9
 800bc68:	ec51 0b18 	vmov	r0, r1, d8
 800bc6c:	f7f4 fb2e 	bl	80002cc <__adddf3>
 800bc70:	ec53 2b19 	vmov	r2, r3, d9
 800bc74:	f7f4 fce0 	bl	8000638 <__aeabi_dmul>
 800bc78:	4622      	mov	r2, r4
 800bc7a:	462b      	mov	r3, r5
 800bc7c:	f7f4 fb26 	bl	80002cc <__adddf3>
 800bc80:	4642      	mov	r2, r8
 800bc82:	4682      	mov	sl, r0
 800bc84:	468b      	mov	fp, r1
 800bc86:	464b      	mov	r3, r9
 800bc88:	4640      	mov	r0, r8
 800bc8a:	4649      	mov	r1, r9
 800bc8c:	f7f4 fcd4 	bl	8000638 <__aeabi_dmul>
 800bc90:	4b6b      	ldr	r3, [pc, #428]	; (800be40 <__ieee754_pow+0x770>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	4606      	mov	r6, r0
 800bc96:	460f      	mov	r7, r1
 800bc98:	f7f4 fb18 	bl	80002cc <__adddf3>
 800bc9c:	4652      	mov	r2, sl
 800bc9e:	465b      	mov	r3, fp
 800bca0:	f7f4 fb14 	bl	80002cc <__adddf3>
 800bca4:	2000      	movs	r0, #0
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4640      	mov	r0, r8
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	f7f4 fcc1 	bl	8000638 <__aeabi_dmul>
 800bcb6:	4b62      	ldr	r3, [pc, #392]	; (800be40 <__ieee754_pow+0x770>)
 800bcb8:	4680      	mov	r8, r0
 800bcba:	4689      	mov	r9, r1
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	f7f4 fb01 	bl	80002c8 <__aeabi_dsub>
 800bcc6:	4632      	mov	r2, r6
 800bcc8:	463b      	mov	r3, r7
 800bcca:	f7f4 fafd 	bl	80002c8 <__aeabi_dsub>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4650      	mov	r0, sl
 800bcd4:	4659      	mov	r1, fp
 800bcd6:	f7f4 faf7 	bl	80002c8 <__aeabi_dsub>
 800bcda:	ec53 2b18 	vmov	r2, r3, d8
 800bcde:	f7f4 fcab 	bl	8000638 <__aeabi_dmul>
 800bce2:	4622      	mov	r2, r4
 800bce4:	4606      	mov	r6, r0
 800bce6:	460f      	mov	r7, r1
 800bce8:	462b      	mov	r3, r5
 800bcea:	ec51 0b19 	vmov	r0, r1, d9
 800bcee:	f7f4 fca3 	bl	8000638 <__aeabi_dmul>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	4639      	mov	r1, r7
 800bcfa:	f7f4 fae7 	bl	80002cc <__adddf3>
 800bcfe:	4606      	mov	r6, r0
 800bd00:	460f      	mov	r7, r1
 800bd02:	4602      	mov	r2, r0
 800bd04:	460b      	mov	r3, r1
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	f7f4 fadf 	bl	80002cc <__adddf3>
 800bd0e:	a33e      	add	r3, pc, #248	; (adr r3, 800be08 <__ieee754_pow+0x738>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	2000      	movs	r0, #0
 800bd16:	4604      	mov	r4, r0
 800bd18:	460d      	mov	r5, r1
 800bd1a:	f7f4 fc8d 	bl	8000638 <__aeabi_dmul>
 800bd1e:	4642      	mov	r2, r8
 800bd20:	ec41 0b18 	vmov	d8, r0, r1
 800bd24:	464b      	mov	r3, r9
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 facd 	bl	80002c8 <__aeabi_dsub>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 fac7 	bl	80002c8 <__aeabi_dsub>
 800bd3a:	a335      	add	r3, pc, #212	; (adr r3, 800be10 <__ieee754_pow+0x740>)
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f7f4 fc7a 	bl	8000638 <__aeabi_dmul>
 800bd44:	a334      	add	r3, pc, #208	; (adr r3, 800be18 <__ieee754_pow+0x748>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	4620      	mov	r0, r4
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7f4 fc71 	bl	8000638 <__aeabi_dmul>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	4639      	mov	r1, r7
 800bd5e:	f7f4 fab5 	bl	80002cc <__adddf3>
 800bd62:	9a07      	ldr	r2, [sp, #28]
 800bd64:	4b37      	ldr	r3, [pc, #220]	; (800be44 <__ieee754_pow+0x774>)
 800bd66:	4413      	add	r3, r2
 800bd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6c:	f7f4 faae 	bl	80002cc <__adddf3>
 800bd70:	4682      	mov	sl, r0
 800bd72:	9805      	ldr	r0, [sp, #20]
 800bd74:	468b      	mov	fp, r1
 800bd76:	f7f4 fbf5 	bl	8000564 <__aeabi_i2d>
 800bd7a:	9a07      	ldr	r2, [sp, #28]
 800bd7c:	4b32      	ldr	r3, [pc, #200]	; (800be48 <__ieee754_pow+0x778>)
 800bd7e:	4413      	add	r3, r2
 800bd80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd84:	4606      	mov	r6, r0
 800bd86:	460f      	mov	r7, r1
 800bd88:	4652      	mov	r2, sl
 800bd8a:	465b      	mov	r3, fp
 800bd8c:	ec51 0b18 	vmov	r0, r1, d8
 800bd90:	f7f4 fa9c 	bl	80002cc <__adddf3>
 800bd94:	4642      	mov	r2, r8
 800bd96:	464b      	mov	r3, r9
 800bd98:	f7f4 fa98 	bl	80002cc <__adddf3>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	f7f4 fa94 	bl	80002cc <__adddf3>
 800bda4:	2000      	movs	r0, #0
 800bda6:	4632      	mov	r2, r6
 800bda8:	463b      	mov	r3, r7
 800bdaa:	4604      	mov	r4, r0
 800bdac:	460d      	mov	r5, r1
 800bdae:	f7f4 fa8b 	bl	80002c8 <__aeabi_dsub>
 800bdb2:	4642      	mov	r2, r8
 800bdb4:	464b      	mov	r3, r9
 800bdb6:	f7f4 fa87 	bl	80002c8 <__aeabi_dsub>
 800bdba:	ec53 2b18 	vmov	r2, r3, d8
 800bdbe:	f7f4 fa83 	bl	80002c8 <__aeabi_dsub>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	4659      	mov	r1, fp
 800bdca:	e610      	b.n	800b9ee <__ieee754_pow+0x31e>
 800bdcc:	2401      	movs	r4, #1
 800bdce:	e6a1      	b.n	800bb14 <__ieee754_pow+0x444>
 800bdd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800be20 <__ieee754_pow+0x750>
 800bdd4:	e617      	b.n	800ba06 <__ieee754_pow+0x336>
 800bdd6:	bf00      	nop
 800bdd8:	4a454eef 	.word	0x4a454eef
 800bddc:	3fca7e28 	.word	0x3fca7e28
 800bde0:	93c9db65 	.word	0x93c9db65
 800bde4:	3fcd864a 	.word	0x3fcd864a
 800bde8:	a91d4101 	.word	0xa91d4101
 800bdec:	3fd17460 	.word	0x3fd17460
 800bdf0:	518f264d 	.word	0x518f264d
 800bdf4:	3fd55555 	.word	0x3fd55555
 800bdf8:	db6fabff 	.word	0xdb6fabff
 800bdfc:	3fdb6db6 	.word	0x3fdb6db6
 800be00:	33333303 	.word	0x33333303
 800be04:	3fe33333 	.word	0x3fe33333
 800be08:	e0000000 	.word	0xe0000000
 800be0c:	3feec709 	.word	0x3feec709
 800be10:	dc3a03fd 	.word	0xdc3a03fd
 800be14:	3feec709 	.word	0x3feec709
 800be18:	145b01f5 	.word	0x145b01f5
 800be1c:	be3e2fe0 	.word	0xbe3e2fe0
 800be20:	00000000 	.word	0x00000000
 800be24:	3ff00000 	.word	0x3ff00000
 800be28:	7ff00000 	.word	0x7ff00000
 800be2c:	43400000 	.word	0x43400000
 800be30:	0003988e 	.word	0x0003988e
 800be34:	000bb679 	.word	0x000bb679
 800be38:	0800d6f8 	.word	0x0800d6f8
 800be3c:	3ff00000 	.word	0x3ff00000
 800be40:	40080000 	.word	0x40080000
 800be44:	0800d718 	.word	0x0800d718
 800be48:	0800d708 	.word	0x0800d708
 800be4c:	a3b3      	add	r3, pc, #716	; (adr r3, 800c11c <__ieee754_pow+0xa4c>)
 800be4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be52:	4640      	mov	r0, r8
 800be54:	4649      	mov	r1, r9
 800be56:	f7f4 fa39 	bl	80002cc <__adddf3>
 800be5a:	4622      	mov	r2, r4
 800be5c:	ec41 0b1a 	vmov	d10, r0, r1
 800be60:	462b      	mov	r3, r5
 800be62:	4630      	mov	r0, r6
 800be64:	4639      	mov	r1, r7
 800be66:	f7f4 fa2f 	bl	80002c8 <__aeabi_dsub>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	ec51 0b1a 	vmov	r0, r1, d10
 800be72:	f7f4 fe71 	bl	8000b58 <__aeabi_dcmpgt>
 800be76:	2800      	cmp	r0, #0
 800be78:	f47f ae04 	bne.w	800ba84 <__ieee754_pow+0x3b4>
 800be7c:	4aa2      	ldr	r2, [pc, #648]	; (800c108 <__ieee754_pow+0xa38>)
 800be7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be82:	4293      	cmp	r3, r2
 800be84:	f340 8107 	ble.w	800c096 <__ieee754_pow+0x9c6>
 800be88:	151b      	asrs	r3, r3, #20
 800be8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800be8e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800be92:	fa4a fa03 	asr.w	sl, sl, r3
 800be96:	44da      	add	sl, fp
 800be98:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800be9c:	489b      	ldr	r0, [pc, #620]	; (800c10c <__ieee754_pow+0xa3c>)
 800be9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bea2:	4108      	asrs	r0, r1
 800bea4:	ea00 030a 	and.w	r3, r0, sl
 800bea8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800beac:	f1c1 0114 	rsb	r1, r1, #20
 800beb0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800beb4:	fa4a fa01 	asr.w	sl, sl, r1
 800beb8:	f1bb 0f00 	cmp.w	fp, #0
 800bebc:	f04f 0200 	mov.w	r2, #0
 800bec0:	4620      	mov	r0, r4
 800bec2:	4629      	mov	r1, r5
 800bec4:	bfb8      	it	lt
 800bec6:	f1ca 0a00 	rsblt	sl, sl, #0
 800beca:	f7f4 f9fd 	bl	80002c8 <__aeabi_dsub>
 800bece:	ec41 0b19 	vmov	d9, r0, r1
 800bed2:	4642      	mov	r2, r8
 800bed4:	464b      	mov	r3, r9
 800bed6:	ec51 0b19 	vmov	r0, r1, d9
 800beda:	f7f4 f9f7 	bl	80002cc <__adddf3>
 800bede:	a37a      	add	r3, pc, #488	; (adr r3, 800c0c8 <__ieee754_pow+0x9f8>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	2000      	movs	r0, #0
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	f7f4 fba5 	bl	8000638 <__aeabi_dmul>
 800beee:	ec53 2b19 	vmov	r2, r3, d9
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	4620      	mov	r0, r4
 800bef8:	4629      	mov	r1, r5
 800befa:	f7f4 f9e5 	bl	80002c8 <__aeabi_dsub>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	4640      	mov	r0, r8
 800bf04:	4649      	mov	r1, r9
 800bf06:	f7f4 f9df 	bl	80002c8 <__aeabi_dsub>
 800bf0a:	a371      	add	r3, pc, #452	; (adr r3, 800c0d0 <__ieee754_pow+0xa00>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f7f4 fb92 	bl	8000638 <__aeabi_dmul>
 800bf14:	a370      	add	r3, pc, #448	; (adr r3, 800c0d8 <__ieee754_pow+0xa08>)
 800bf16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1a:	4680      	mov	r8, r0
 800bf1c:	4689      	mov	r9, r1
 800bf1e:	4620      	mov	r0, r4
 800bf20:	4629      	mov	r1, r5
 800bf22:	f7f4 fb89 	bl	8000638 <__aeabi_dmul>
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	f7f4 f9cd 	bl	80002cc <__adddf3>
 800bf32:	4604      	mov	r4, r0
 800bf34:	460d      	mov	r5, r1
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	f7f4 f9c5 	bl	80002cc <__adddf3>
 800bf42:	4632      	mov	r2, r6
 800bf44:	463b      	mov	r3, r7
 800bf46:	4680      	mov	r8, r0
 800bf48:	4689      	mov	r9, r1
 800bf4a:	f7f4 f9bd 	bl	80002c8 <__aeabi_dsub>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	4620      	mov	r0, r4
 800bf54:	4629      	mov	r1, r5
 800bf56:	f7f4 f9b7 	bl	80002c8 <__aeabi_dsub>
 800bf5a:	4642      	mov	r2, r8
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	460f      	mov	r7, r1
 800bf60:	464b      	mov	r3, r9
 800bf62:	4640      	mov	r0, r8
 800bf64:	4649      	mov	r1, r9
 800bf66:	f7f4 fb67 	bl	8000638 <__aeabi_dmul>
 800bf6a:	a35d      	add	r3, pc, #372	; (adr r3, 800c0e0 <__ieee754_pow+0xa10>)
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	f7f4 fb60 	bl	8000638 <__aeabi_dmul>
 800bf78:	a35b      	add	r3, pc, #364	; (adr r3, 800c0e8 <__ieee754_pow+0xa18>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f7f4 f9a3 	bl	80002c8 <__aeabi_dsub>
 800bf82:	4622      	mov	r2, r4
 800bf84:	462b      	mov	r3, r5
 800bf86:	f7f4 fb57 	bl	8000638 <__aeabi_dmul>
 800bf8a:	a359      	add	r3, pc, #356	; (adr r3, 800c0f0 <__ieee754_pow+0xa20>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 f99c 	bl	80002cc <__adddf3>
 800bf94:	4622      	mov	r2, r4
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fb4e 	bl	8000638 <__aeabi_dmul>
 800bf9c:	a356      	add	r3, pc, #344	; (adr r3, 800c0f8 <__ieee754_pow+0xa28>)
 800bf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa2:	f7f4 f991 	bl	80002c8 <__aeabi_dsub>
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	f7f4 fb45 	bl	8000638 <__aeabi_dmul>
 800bfae:	a354      	add	r3, pc, #336	; (adr r3, 800c100 <__ieee754_pow+0xa30>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f98a 	bl	80002cc <__adddf3>
 800bfb8:	4622      	mov	r2, r4
 800bfba:	462b      	mov	r3, r5
 800bfbc:	f7f4 fb3c 	bl	8000638 <__aeabi_dmul>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	4649      	mov	r1, r9
 800bfc8:	f7f4 f97e 	bl	80002c8 <__aeabi_dsub>
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	460b      	mov	r3, r1
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	f7f4 fb2e 	bl	8000638 <__aeabi_dmul>
 800bfdc:	2200      	movs	r2, #0
 800bfde:	ec41 0b19 	vmov	d9, r0, r1
 800bfe2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	f7f4 f96d 	bl	80002c8 <__aeabi_dsub>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	ec51 0b19 	vmov	r0, r1, d9
 800bff6:	f7f4 fc49 	bl	800088c <__aeabi_ddiv>
 800bffa:	4632      	mov	r2, r6
 800bffc:	4604      	mov	r4, r0
 800bffe:	460d      	mov	r5, r1
 800c000:	463b      	mov	r3, r7
 800c002:	4640      	mov	r0, r8
 800c004:	4649      	mov	r1, r9
 800c006:	f7f4 fb17 	bl	8000638 <__aeabi_dmul>
 800c00a:	4632      	mov	r2, r6
 800c00c:	463b      	mov	r3, r7
 800c00e:	f7f4 f95d 	bl	80002cc <__adddf3>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 f955 	bl	80002c8 <__aeabi_dsub>
 800c01e:	4642      	mov	r2, r8
 800c020:	464b      	mov	r3, r9
 800c022:	f7f4 f951 	bl	80002c8 <__aeabi_dsub>
 800c026:	460b      	mov	r3, r1
 800c028:	4602      	mov	r2, r0
 800c02a:	4939      	ldr	r1, [pc, #228]	; (800c110 <__ieee754_pow+0xa40>)
 800c02c:	2000      	movs	r0, #0
 800c02e:	f7f4 f94b 	bl	80002c8 <__aeabi_dsub>
 800c032:	ec41 0b10 	vmov	d0, r0, r1
 800c036:	ee10 3a90 	vmov	r3, s1
 800c03a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c042:	da2b      	bge.n	800c09c <__ieee754_pow+0x9cc>
 800c044:	4650      	mov	r0, sl
 800c046:	f000 f8a7 	bl	800c198 <scalbn>
 800c04a:	ec51 0b10 	vmov	r0, r1, d0
 800c04e:	ec53 2b18 	vmov	r2, r3, d8
 800c052:	f7ff bbee 	b.w	800b832 <__ieee754_pow+0x162>
 800c056:	4b2f      	ldr	r3, [pc, #188]	; (800c114 <__ieee754_pow+0xa44>)
 800c058:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c05c:	429e      	cmp	r6, r3
 800c05e:	f77f af0d 	ble.w	800be7c <__ieee754_pow+0x7ac>
 800c062:	4b2d      	ldr	r3, [pc, #180]	; (800c118 <__ieee754_pow+0xa48>)
 800c064:	440b      	add	r3, r1
 800c066:	4303      	orrs	r3, r0
 800c068:	d009      	beq.n	800c07e <__ieee754_pow+0x9ae>
 800c06a:	ec51 0b18 	vmov	r0, r1, d8
 800c06e:	2200      	movs	r2, #0
 800c070:	2300      	movs	r3, #0
 800c072:	f7f4 fd53 	bl	8000b1c <__aeabi_dcmplt>
 800c076:	3800      	subs	r0, #0
 800c078:	bf18      	it	ne
 800c07a:	2001      	movne	r0, #1
 800c07c:	e448      	b.n	800b910 <__ieee754_pow+0x240>
 800c07e:	4622      	mov	r2, r4
 800c080:	462b      	mov	r3, r5
 800c082:	f7f4 f921 	bl	80002c8 <__aeabi_dsub>
 800c086:	4642      	mov	r2, r8
 800c088:	464b      	mov	r3, r9
 800c08a:	f7f4 fd5b 	bl	8000b44 <__aeabi_dcmpge>
 800c08e:	2800      	cmp	r0, #0
 800c090:	f43f aef4 	beq.w	800be7c <__ieee754_pow+0x7ac>
 800c094:	e7e9      	b.n	800c06a <__ieee754_pow+0x99a>
 800c096:	f04f 0a00 	mov.w	sl, #0
 800c09a:	e71a      	b.n	800bed2 <__ieee754_pow+0x802>
 800c09c:	ec51 0b10 	vmov	r0, r1, d0
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	e7d4      	b.n	800c04e <__ieee754_pow+0x97e>
 800c0a4:	491a      	ldr	r1, [pc, #104]	; (800c110 <__ieee754_pow+0xa40>)
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	f7ff bb31 	b.w	800b70e <__ieee754_pow+0x3e>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	f7ff bb2d 	b.w	800b70e <__ieee754_pow+0x3e>
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	4639      	mov	r1, r7
 800c0b8:	f7ff bb29 	b.w	800b70e <__ieee754_pow+0x3e>
 800c0bc:	9204      	str	r2, [sp, #16]
 800c0be:	f7ff bb7b 	b.w	800b7b8 <__ieee754_pow+0xe8>
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	f7ff bb65 	b.w	800b792 <__ieee754_pow+0xc2>
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	3fe62e43 	.word	0x3fe62e43
 800c0d0:	fefa39ef 	.word	0xfefa39ef
 800c0d4:	3fe62e42 	.word	0x3fe62e42
 800c0d8:	0ca86c39 	.word	0x0ca86c39
 800c0dc:	be205c61 	.word	0xbe205c61
 800c0e0:	72bea4d0 	.word	0x72bea4d0
 800c0e4:	3e663769 	.word	0x3e663769
 800c0e8:	c5d26bf1 	.word	0xc5d26bf1
 800c0ec:	3ebbbd41 	.word	0x3ebbbd41
 800c0f0:	af25de2c 	.word	0xaf25de2c
 800c0f4:	3f11566a 	.word	0x3f11566a
 800c0f8:	16bebd93 	.word	0x16bebd93
 800c0fc:	3f66c16c 	.word	0x3f66c16c
 800c100:	5555553e 	.word	0x5555553e
 800c104:	3fc55555 	.word	0x3fc55555
 800c108:	3fe00000 	.word	0x3fe00000
 800c10c:	fff00000 	.word	0xfff00000
 800c110:	3ff00000 	.word	0x3ff00000
 800c114:	4090cbff 	.word	0x4090cbff
 800c118:	3f6f3400 	.word	0x3f6f3400
 800c11c:	652b82fe 	.word	0x652b82fe
 800c120:	3c971547 	.word	0x3c971547

0800c124 <with_errno>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4604      	mov	r4, r0
 800c128:	460d      	mov	r5, r1
 800c12a:	4616      	mov	r6, r2
 800c12c:	f7fc fc8c 	bl	8008a48 <__errno>
 800c130:	4629      	mov	r1, r5
 800c132:	6006      	str	r6, [r0, #0]
 800c134:	4620      	mov	r0, r4
 800c136:	bd70      	pop	{r4, r5, r6, pc}

0800c138 <xflow>:
 800c138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c13a:	4614      	mov	r4, r2
 800c13c:	461d      	mov	r5, r3
 800c13e:	b108      	cbz	r0, 800c144 <xflow+0xc>
 800c140:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c144:	e9cd 2300 	strd	r2, r3, [sp]
 800c148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c14c:	4620      	mov	r0, r4
 800c14e:	4629      	mov	r1, r5
 800c150:	f7f4 fa72 	bl	8000638 <__aeabi_dmul>
 800c154:	2222      	movs	r2, #34	; 0x22
 800c156:	b003      	add	sp, #12
 800c158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c15c:	f7ff bfe2 	b.w	800c124 <with_errno>

0800c160 <__math_uflow>:
 800c160:	b508      	push	{r3, lr}
 800c162:	2200      	movs	r2, #0
 800c164:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c168:	f7ff ffe6 	bl	800c138 <xflow>
 800c16c:	ec41 0b10 	vmov	d0, r0, r1
 800c170:	bd08      	pop	{r3, pc}

0800c172 <__math_oflow>:
 800c172:	b508      	push	{r3, lr}
 800c174:	2200      	movs	r2, #0
 800c176:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c17a:	f7ff ffdd 	bl	800c138 <xflow>
 800c17e:	ec41 0b10 	vmov	d0, r0, r1
 800c182:	bd08      	pop	{r3, pc}

0800c184 <fabs>:
 800c184:	ec51 0b10 	vmov	r0, r1, d0
 800c188:	ee10 2a10 	vmov	r2, s0
 800c18c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c190:	ec43 2b10 	vmov	d0, r2, r3
 800c194:	4770      	bx	lr
	...

0800c198 <scalbn>:
 800c198:	b570      	push	{r4, r5, r6, lr}
 800c19a:	ec55 4b10 	vmov	r4, r5, d0
 800c19e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	462b      	mov	r3, r5
 800c1a6:	b999      	cbnz	r1, 800c1d0 <scalbn+0x38>
 800c1a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c1ac:	4323      	orrs	r3, r4
 800c1ae:	d03f      	beq.n	800c230 <scalbn+0x98>
 800c1b0:	4b35      	ldr	r3, [pc, #212]	; (800c288 <scalbn+0xf0>)
 800c1b2:	4629      	mov	r1, r5
 800c1b4:	ee10 0a10 	vmov	r0, s0
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f7f4 fa3d 	bl	8000638 <__aeabi_dmul>
 800c1be:	4b33      	ldr	r3, [pc, #204]	; (800c28c <scalbn+0xf4>)
 800c1c0:	429e      	cmp	r6, r3
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	da10      	bge.n	800c1ea <scalbn+0x52>
 800c1c8:	a327      	add	r3, pc, #156	; (adr r3, 800c268 <scalbn+0xd0>)
 800c1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ce:	e01f      	b.n	800c210 <scalbn+0x78>
 800c1d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c1d4:	4291      	cmp	r1, r2
 800c1d6:	d10c      	bne.n	800c1f2 <scalbn+0x5a>
 800c1d8:	ee10 2a10 	vmov	r2, s0
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 f874 	bl	80002cc <__adddf3>
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	e022      	b.n	800c230 <scalbn+0x98>
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c1f0:	3936      	subs	r1, #54	; 0x36
 800c1f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c1f6:	4296      	cmp	r6, r2
 800c1f8:	dd0d      	ble.n	800c216 <scalbn+0x7e>
 800c1fa:	2d00      	cmp	r5, #0
 800c1fc:	a11c      	add	r1, pc, #112	; (adr r1, 800c270 <scalbn+0xd8>)
 800c1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c202:	da02      	bge.n	800c20a <scalbn+0x72>
 800c204:	a11c      	add	r1, pc, #112	; (adr r1, 800c278 <scalbn+0xe0>)
 800c206:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c20a:	a319      	add	r3, pc, #100	; (adr r3, 800c270 <scalbn+0xd8>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 fa12 	bl	8000638 <__aeabi_dmul>
 800c214:	e7e6      	b.n	800c1e4 <scalbn+0x4c>
 800c216:	1872      	adds	r2, r6, r1
 800c218:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c21c:	428a      	cmp	r2, r1
 800c21e:	dcec      	bgt.n	800c1fa <scalbn+0x62>
 800c220:	2a00      	cmp	r2, #0
 800c222:	dd08      	ble.n	800c236 <scalbn+0x9e>
 800c224:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c228:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c22c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c230:	ec45 4b10 	vmov	d0, r4, r5
 800c234:	bd70      	pop	{r4, r5, r6, pc}
 800c236:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c23a:	da08      	bge.n	800c24e <scalbn+0xb6>
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	a10a      	add	r1, pc, #40	; (adr r1, 800c268 <scalbn+0xd0>)
 800c240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c244:	dac0      	bge.n	800c1c8 <scalbn+0x30>
 800c246:	a10e      	add	r1, pc, #56	; (adr r1, 800c280 <scalbn+0xe8>)
 800c248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c24c:	e7bc      	b.n	800c1c8 <scalbn+0x30>
 800c24e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c252:	3236      	adds	r2, #54	; 0x36
 800c254:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c258:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c25c:	4620      	mov	r0, r4
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <scalbn+0xf8>)
 800c260:	2200      	movs	r2, #0
 800c262:	e7d5      	b.n	800c210 <scalbn+0x78>
 800c264:	f3af 8000 	nop.w
 800c268:	c2f8f359 	.word	0xc2f8f359
 800c26c:	01a56e1f 	.word	0x01a56e1f
 800c270:	8800759c 	.word	0x8800759c
 800c274:	7e37e43c 	.word	0x7e37e43c
 800c278:	8800759c 	.word	0x8800759c
 800c27c:	fe37e43c 	.word	0xfe37e43c
 800c280:	c2f8f359 	.word	0xc2f8f359
 800c284:	81a56e1f 	.word	0x81a56e1f
 800c288:	43500000 	.word	0x43500000
 800c28c:	ffff3cb0 	.word	0xffff3cb0
 800c290:	3c900000 	.word	0x3c900000

0800c294 <__ieee754_sqrt>:
 800c294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c298:	ec55 4b10 	vmov	r4, r5, d0
 800c29c:	4e67      	ldr	r6, [pc, #412]	; (800c43c <__ieee754_sqrt+0x1a8>)
 800c29e:	43ae      	bics	r6, r5
 800c2a0:	ee10 0a10 	vmov	r0, s0
 800c2a4:	ee10 2a10 	vmov	r2, s0
 800c2a8:	4629      	mov	r1, r5
 800c2aa:	462b      	mov	r3, r5
 800c2ac:	d10d      	bne.n	800c2ca <__ieee754_sqrt+0x36>
 800c2ae:	f7f4 f9c3 	bl	8000638 <__aeabi_dmul>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7f4 f807 	bl	80002cc <__adddf3>
 800c2be:	4604      	mov	r4, r0
 800c2c0:	460d      	mov	r5, r1
 800c2c2:	ec45 4b10 	vmov	d0, r4, r5
 800c2c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	2d00      	cmp	r5, #0
 800c2cc:	dc0b      	bgt.n	800c2e6 <__ieee754_sqrt+0x52>
 800c2ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c2d2:	4326      	orrs	r6, r4
 800c2d4:	d0f5      	beq.n	800c2c2 <__ieee754_sqrt+0x2e>
 800c2d6:	b135      	cbz	r5, 800c2e6 <__ieee754_sqrt+0x52>
 800c2d8:	f7f3 fff6 	bl	80002c8 <__aeabi_dsub>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	f7f4 fad4 	bl	800088c <__aeabi_ddiv>
 800c2e4:	e7eb      	b.n	800c2be <__ieee754_sqrt+0x2a>
 800c2e6:	1509      	asrs	r1, r1, #20
 800c2e8:	f000 808d 	beq.w	800c406 <__ieee754_sqrt+0x172>
 800c2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c2f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2f8:	07c9      	lsls	r1, r1, #31
 800c2fa:	bf5c      	itt	pl
 800c2fc:	005b      	lslpl	r3, r3, #1
 800c2fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c302:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c306:	bf58      	it	pl
 800c308:	0052      	lslpl	r2, r2, #1
 800c30a:	2500      	movs	r5, #0
 800c30c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c310:	1076      	asrs	r6, r6, #1
 800c312:	0052      	lsls	r2, r2, #1
 800c314:	f04f 0e16 	mov.w	lr, #22
 800c318:	46ac      	mov	ip, r5
 800c31a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c31e:	eb0c 0001 	add.w	r0, ip, r1
 800c322:	4298      	cmp	r0, r3
 800c324:	bfde      	ittt	le
 800c326:	1a1b      	suble	r3, r3, r0
 800c328:	eb00 0c01 	addle.w	ip, r0, r1
 800c32c:	186d      	addle	r5, r5, r1
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	f1be 0e01 	subs.w	lr, lr, #1
 800c334:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c338:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c33c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c340:	d1ed      	bne.n	800c31e <__ieee754_sqrt+0x8a>
 800c342:	4674      	mov	r4, lr
 800c344:	2720      	movs	r7, #32
 800c346:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c34a:	4563      	cmp	r3, ip
 800c34c:	eb01 000e 	add.w	r0, r1, lr
 800c350:	dc02      	bgt.n	800c358 <__ieee754_sqrt+0xc4>
 800c352:	d113      	bne.n	800c37c <__ieee754_sqrt+0xe8>
 800c354:	4290      	cmp	r0, r2
 800c356:	d811      	bhi.n	800c37c <__ieee754_sqrt+0xe8>
 800c358:	2800      	cmp	r0, #0
 800c35a:	eb00 0e01 	add.w	lr, r0, r1
 800c35e:	da57      	bge.n	800c410 <__ieee754_sqrt+0x17c>
 800c360:	f1be 0f00 	cmp.w	lr, #0
 800c364:	db54      	blt.n	800c410 <__ieee754_sqrt+0x17c>
 800c366:	f10c 0801 	add.w	r8, ip, #1
 800c36a:	eba3 030c 	sub.w	r3, r3, ip
 800c36e:	4290      	cmp	r0, r2
 800c370:	bf88      	it	hi
 800c372:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800c376:	1a12      	subs	r2, r2, r0
 800c378:	440c      	add	r4, r1
 800c37a:	46c4      	mov	ip, r8
 800c37c:	005b      	lsls	r3, r3, #1
 800c37e:	3f01      	subs	r7, #1
 800c380:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c384:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c388:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c38c:	d1dd      	bne.n	800c34a <__ieee754_sqrt+0xb6>
 800c38e:	4313      	orrs	r3, r2
 800c390:	d01b      	beq.n	800c3ca <__ieee754_sqrt+0x136>
 800c392:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c440 <__ieee754_sqrt+0x1ac>
 800c396:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c444 <__ieee754_sqrt+0x1b0>
 800c39a:	e9da 0100 	ldrd	r0, r1, [sl]
 800c39e:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3a2:	f7f3 ff91 	bl	80002c8 <__aeabi_dsub>
 800c3a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	f7f4 fbbd 	bl	8000b30 <__aeabi_dcmple>
 800c3b6:	b140      	cbz	r0, 800c3ca <__ieee754_sqrt+0x136>
 800c3b8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800c3bc:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3c0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3c4:	d126      	bne.n	800c414 <__ieee754_sqrt+0x180>
 800c3c6:	3501      	adds	r5, #1
 800c3c8:	463c      	mov	r4, r7
 800c3ca:	106a      	asrs	r2, r5, #1
 800c3cc:	0863      	lsrs	r3, r4, #1
 800c3ce:	07e9      	lsls	r1, r5, #31
 800c3d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c3d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c3d8:	bf48      	it	mi
 800c3da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c3de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c3e2:	461c      	mov	r4, r3
 800c3e4:	e76d      	b.n	800c2c2 <__ieee754_sqrt+0x2e>
 800c3e6:	0ad3      	lsrs	r3, r2, #11
 800c3e8:	3815      	subs	r0, #21
 800c3ea:	0552      	lsls	r2, r2, #21
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0fa      	beq.n	800c3e6 <__ieee754_sqrt+0x152>
 800c3f0:	02dc      	lsls	r4, r3, #11
 800c3f2:	d50a      	bpl.n	800c40a <__ieee754_sqrt+0x176>
 800c3f4:	f1c1 0420 	rsb	r4, r1, #32
 800c3f8:	fa22 f404 	lsr.w	r4, r2, r4
 800c3fc:	1e4d      	subs	r5, r1, #1
 800c3fe:	408a      	lsls	r2, r1
 800c400:	4323      	orrs	r3, r4
 800c402:	1b41      	subs	r1, r0, r5
 800c404:	e772      	b.n	800c2ec <__ieee754_sqrt+0x58>
 800c406:	4608      	mov	r0, r1
 800c408:	e7f0      	b.n	800c3ec <__ieee754_sqrt+0x158>
 800c40a:	005b      	lsls	r3, r3, #1
 800c40c:	3101      	adds	r1, #1
 800c40e:	e7ef      	b.n	800c3f0 <__ieee754_sqrt+0x15c>
 800c410:	46e0      	mov	r8, ip
 800c412:	e7aa      	b.n	800c36a <__ieee754_sqrt+0xd6>
 800c414:	f7f3 ff5a 	bl	80002cc <__adddf3>
 800c418:	e9da 8900 	ldrd	r8, r9, [sl]
 800c41c:	4602      	mov	r2, r0
 800c41e:	460b      	mov	r3, r1
 800c420:	4640      	mov	r0, r8
 800c422:	4649      	mov	r1, r9
 800c424:	f7f4 fb7a 	bl	8000b1c <__aeabi_dcmplt>
 800c428:	b120      	cbz	r0, 800c434 <__ieee754_sqrt+0x1a0>
 800c42a:	1ca0      	adds	r0, r4, #2
 800c42c:	bf08      	it	eq
 800c42e:	3501      	addeq	r5, #1
 800c430:	3402      	adds	r4, #2
 800c432:	e7ca      	b.n	800c3ca <__ieee754_sqrt+0x136>
 800c434:	3401      	adds	r4, #1
 800c436:	f024 0401 	bic.w	r4, r4, #1
 800c43a:	e7c6      	b.n	800c3ca <__ieee754_sqrt+0x136>
 800c43c:	7ff00000 	.word	0x7ff00000
 800c440:	20000200 	.word	0x20000200
 800c444:	20000208 	.word	0x20000208

0800c448 <_init>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	bf00      	nop
 800c44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44e:	bc08      	pop	{r3}
 800c450:	469e      	mov	lr, r3
 800c452:	4770      	bx	lr

0800c454 <_fini>:
 800c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c456:	bf00      	nop
 800c458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45a:	bc08      	pop	{r3}
 800c45c:	469e      	mov	lr, r3
 800c45e:	4770      	bx	lr
