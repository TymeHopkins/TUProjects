
Hopkins_Project2_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b1c  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b4  080076b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076bc  080076bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076c0  080076c0  000176c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080076c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a7c4  20000070  08007734  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a834  08007734  0002a834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113df  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002915  00000000  00000000  000314c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002693f  00000000  00000000  00034bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bc3  00000000  00000000  0005b50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb90f  00000000  00000000  0006d0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000aab  00000000  00000000  001589e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f08  00000000  00000000  0015948c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0015d394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b80 	.word	0x08005b80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005b80 	.word	0x08005b80

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <ILI9163_writeCommand+0x44>)
 80005be:	f001 ff23 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <ILI9163_writeCommand+0x44>)
 80005ca:	f001 ff1d 	bl	8002408 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005ce:	1df9      	adds	r1, r7, #7
 80005d0:	2300      	movs	r3, #0
 80005d2:	2201      	movs	r2, #1
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <ILI9163_writeCommand+0x48>)
 80005d6:	f003 f9ee 	bl	80039b6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <ILI9163_writeCommand+0x44>)
 80005e2:	f001 ff11 	bl	8002408 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40020400 	.word	0x40020400
 80005f4:	2000a08c 	.word	0x2000a08c

080005f8 <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <ILI9163_writeData+0x44>)
 800060a:	f001 fefd 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <ILI9163_writeData+0x44>)
 8000616:	f001 fef7 	bl	8002408 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	2300      	movs	r3, #0
 800061e:	2201      	movs	r2, #1
 8000620:	4807      	ldr	r0, [pc, #28]	; (8000640 <ILI9163_writeData+0x48>)
 8000622:	f003 f9c8 	bl	80039b6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000626:	2201      	movs	r2, #1
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <ILI9163_writeData+0x44>)
 800062e:	f001 feeb 	bl	8002408 <HAL_GPIO_WritePin>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40020400 	.word	0x40020400
 8000640:	2000a08c 	.word	0x2000a08c

08000644 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <ILI9163_writeData16+0x54>)
 8000656:	f001 fed7 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <ILI9163_writeData16+0x54>)
 8000662:	f001 fed1 	bl	8002408 <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	0a1b      	lsrs	r3, r3, #8
 800066a:	b29b      	uxth	r3, r3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	733b      	strb	r3, [r7, #12]
 8000670:	88fb      	ldrh	r3, [r7, #6]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 8000676:	f107 010c 	add.w	r1, r7, #12
 800067a:	2300      	movs	r3, #0
 800067c:	2202      	movs	r2, #2
 800067e:	4807      	ldr	r0, [pc, #28]	; (800069c <ILI9163_writeData16+0x58>)
 8000680:	f003 f999 	bl	80039b6 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4803      	ldr	r0, [pc, #12]	; (8000698 <ILI9163_writeData16+0x54>)
 800068c:	f001 febc 	bl	8002408 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020400 	.word	0x40020400
 800069c:	2000a08c 	.word	0x2000a08c

080006a0 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4604      	mov	r4, r0
 80006a8:	4608      	mov	r0, r1
 80006aa:	4611      	mov	r1, r2
 80006ac:	461a      	mov	r2, r3
 80006ae:	4623      	mov	r3, r4
 80006b0:	80fb      	strh	r3, [r7, #6]
 80006b2:	4603      	mov	r3, r0
 80006b4:	80bb      	strh	r3, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	807b      	strh	r3, [r7, #2]
 80006ba:	4613      	mov	r3, r2
 80006bc:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80006be:	202a      	movs	r0, #42	; 0x2a
 80006c0:	f7ff ff74 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffbc 	bl	8000644 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80006cc:	887b      	ldrh	r3, [r7, #2]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffb8 	bl	8000644 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80006d4:	202b      	movs	r0, #43	; 0x2b
 80006d6:	f7ff ff69 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80006da:	88bb      	ldrh	r3, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ffb1 	bl	8000644 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80006e2:	883b      	ldrh	r3, [r7, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff ffad 	bl	8000644 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80006ea:	202c      	movs	r0, #44	; 0x2c
 80006ec:	f7ff ff5e 	bl	80005ac <ILI9163_writeCommand>
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd90      	pop	{r4, r7, pc}

080006f8 <ILI9163_reset>:

void ILI9163_reset(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <ILI9163_reset+0x2c>)
 8000704:	f001 fe80 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000708:	2032      	movs	r0, #50	; 0x32
 800070a:	f000 ffb3 	bl	8001674 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <ILI9163_reset+0x2c>)
 8000716:	f001 fe77 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800071a:	2064      	movs	r0, #100	; 0x64
 800071c:	f000 ffaa 	bl	8001674 <HAL_Delay>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020c00 	.word	0x40020c00

08000728 <ILI9163_init>:

void ILI9163_init(int rotation) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	486e      	ldr	r0, [pc, #440]	; (80008f0 <ILI9163_init+0x1c8>)
 8000738:	f001 fe66 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000742:	486c      	ldr	r0, [pc, #432]	; (80008f4 <ILI9163_init+0x1cc>)
 8000744:	f001 fe60 	bl	8002408 <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 8000748:	f7ff ffd6 	bl	80006f8 <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 800074c:	2011      	movs	r0, #17
 800074e:	f7ff ff2d 	bl	80005ac <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000752:	2005      	movs	r0, #5
 8000754:	f000 ff8e 	bl	8001674 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 8000758:	203a      	movs	r0, #58	; 0x3a
 800075a:	f7ff ff27 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 800075e:	2005      	movs	r0, #5
 8000760:	f7ff ff4a 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000764:	2026      	movs	r0, #38	; 0x26
 8000766:	f7ff ff21 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800076a:	2004      	movs	r0, #4
 800076c:	f7ff ff44 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000770:	20f2      	movs	r0, #242	; 0xf2
 8000772:	f7ff ff1b 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff ff3e 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 800077c:	20e0      	movs	r0, #224	; 0xe0
 800077e:	f7ff ff15 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000782:	203f      	movs	r0, #63	; 0x3f
 8000784:	f7ff ff38 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8000788:	2025      	movs	r0, #37	; 0x25
 800078a:	f7ff ff35 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 800078e:	201c      	movs	r0, #28
 8000790:	f7ff ff32 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000794:	201e      	movs	r0, #30
 8000796:	f7ff ff2f 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800079a:	2020      	movs	r0, #32
 800079c:	f7ff ff2c 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x12);
 80007a0:	2012      	movs	r0, #18
 80007a2:	f7ff ff29 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 80007a6:	202a      	movs	r0, #42	; 0x2a
 80007a8:	f7ff ff26 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80007ac:	2090      	movs	r0, #144	; 0x90
 80007ae:	f7ff ff23 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80007b2:	2024      	movs	r0, #36	; 0x24
 80007b4:	f7ff ff20 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80007b8:	2011      	movs	r0, #17
 80007ba:	f7ff ff1d 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff1a 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff ff17 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff14 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007d0:	2000      	movs	r0, #0
 80007d2:	f7ff ff11 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff0e 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80007dc:	20e1      	movs	r0, #225	; 0xe1
 80007de:	f7ff fee5 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80007e2:	2020      	movs	r0, #32
 80007e4:	f7ff ff08 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007e8:	2020      	movs	r0, #32
 80007ea:	f7ff ff05 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007ee:	2020      	movs	r0, #32
 80007f0:	f7ff ff02 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007f4:	2020      	movs	r0, #32
 80007f6:	f7ff feff 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80007fa:	2005      	movs	r0, #5
 80007fc:	f7ff fefc 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff fef9 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x15);
 8000806:	2015      	movs	r0, #21
 8000808:	f7ff fef6 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 800080c:	20a7      	movs	r0, #167	; 0xa7
 800080e:	f7ff fef3 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8000812:	203d      	movs	r0, #61	; 0x3d
 8000814:	f7ff fef0 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x18);
 8000818:	2018      	movs	r0, #24
 800081a:	f7ff feed 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800081e:	2025      	movs	r0, #37	; 0x25
 8000820:	f7ff feea 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000824:	202a      	movs	r0, #42	; 0x2a
 8000826:	f7ff fee7 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800082a:	202b      	movs	r0, #43	; 0x2b
 800082c:	f7ff fee4 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000830:	202b      	movs	r0, #43	; 0x2b
 8000832:	f7ff fee1 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 8000836:	203a      	movs	r0, #58	; 0x3a
 8000838:	f7ff fede 	bl	80005f8 <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 800083c:	20b1      	movs	r0, #177	; 0xb1
 800083e:	f7ff feb5 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000842:	2008      	movs	r0, #8
 8000844:	f7ff fed8 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000848:	2002      	movs	r0, #2
 800084a:	f7ff fed5 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 800084e:	20b2      	movs	r0, #178	; 0xb2
 8000850:	f7ff feac 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000854:	2008      	movs	r0, #8
 8000856:	f7ff fecf 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800085a:	2002      	movs	r0, #2
 800085c:	f7ff fecc 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000860:	20b3      	movs	r0, #179	; 0xb3
 8000862:	f7ff fea3 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000866:	2008      	movs	r0, #8
 8000868:	f7ff fec6 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff fec3 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000872:	20b4      	movs	r0, #180	; 0xb4
 8000874:	f7ff fe9a 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 8000878:	2007      	movs	r0, #7
 800087a:	f7ff febd 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 800087e:	202a      	movs	r0, #42	; 0x2a
 8000880:	f7ff fe94 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff feb7 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff feb4 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff feb1 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 8000896:	207f      	movs	r0, #127	; 0x7f
 8000898:	f7ff feae 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 800089c:	202b      	movs	r0, #43	; 0x2b
 800089e:	f7ff fe85 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fea8 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fea5 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fea2 	bl	80005f8 <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80008b4:	209f      	movs	r0, #159	; 0x9f
 80008b6:	f7ff fe9f 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80008ba:	2036      	movs	r0, #54	; 0x36
 80008bc:	f7ff fe76 	bl	80005ac <ILI9163_writeCommand>
	if(rotation)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d003      	beq.n	80008ce <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80008c6:	20a8      	movs	r0, #168	; 0xa8
 80008c8:	f7ff fe96 	bl	80005f8 <ILI9163_writeData>
 80008cc:	e002      	b.n	80008d4 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80008ce:	2068      	movs	r0, #104	; 0x68
 80008d0:	f7ff fe92 	bl	80005f8 <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80008d4:	2013      	movs	r0, #19
 80008d6:	f7ff fe69 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80008da:	2029      	movs	r0, #41	; 0x29
 80008dc:	f7ff fe66 	bl	80005ac <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80008e0:	202c      	movs	r0, #44	; 0x2c
 80008e2:	f7ff fe63 	bl	80005ac <ILI9163_writeCommand>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40020400 	.word	0x40020400
 80008f4:	40020c00 	.word	0x40020c00

080008f8 <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	e008      	b.n	8000916 <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <ILI9163_newFrame+0x34>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800090c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800091c:	d3f2      	bcc.n	8000904 <ILI9163_newFrame+0xc>

}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	2000008c 	.word	0x2000008c

08000930 <ILI9163_render>:

void ILI9163_render()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	22a0      	movs	r2, #160	; 0xa0
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff feb0 	bl	80006a0 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <ILI9163_render+0x4c>)
 8000948:	f001 fd5e 	bl	8002408 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <ILI9163_render+0x4c>)
 8000954:	f001 fd58 	bl	8002408 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 8000958:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800095c:	4908      	ldr	r1, [pc, #32]	; (8000980 <ILI9163_render+0x50>)
 800095e:	4809      	ldr	r0, [pc, #36]	; (8000984 <ILI9163_render+0x54>)
 8000960:	f003 f998 	bl	8003c94 <HAL_SPI_Transmit_DMA>

	SPI_DMA_FL=0;
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <ILI9163_render+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800096a:	bf00      	nop
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <ILI9163_render+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d0fb      	beq.n	800096c <ILI9163_render+0x3c>
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40020400 	.word	0x40020400
 8000980:	2000008c 	.word	0x2000008c
 8000984:	2000a08c 	.word	0x2000a08c
 8000988:	2000a6e0 	.word	0x2000a6e0

0800098c <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	460b      	mov	r3, r1
 8000998:	71bb      	strb	r3, [r7, #6]
 800099a:	4613      	mov	r3, r2
 800099c:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	2b9f      	cmp	r3, #159	; 0x9f
 80009a2:	d80f      	bhi.n	80009c4 <ILI9163_drawPixel+0x38>
 80009a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	db0b      	blt.n	80009c4 <ILI9163_drawPixel+0x38>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80009ac:	79f9      	ldrb	r1, [r7, #7]
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	015b      	lsls	r3, r3, #5
 80009b8:	440b      	add	r3, r1
 80009ba:	4905      	ldr	r1, [pc, #20]	; (80009d0 <ILI9163_drawPixel+0x44>)
 80009bc:	88ba      	ldrh	r2, [r7, #4]
 80009be:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80009c2:	e000      	b.n	80009c6 <ILI9163_drawPixel+0x3a>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009c4:	bf00      	nop
}
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	2000008c 	.word	0x2000008c

080009d4 <ILI9163_fillRect>:

void ILI9163_fillRect(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint16_t color)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4604      	mov	r4, r0
 80009dc:	4608      	mov	r0, r1
 80009de:	4611      	mov	r1, r2
 80009e0:	461a      	mov	r2, r3
 80009e2:	4623      	mov	r3, r4
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	4603      	mov	r3, r0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	460b      	mov	r3, r1
 80009ec:	717b      	strb	r3, [r7, #5]
 80009ee:	4613      	mov	r3, r2
 80009f0:	713b      	strb	r3, [r7, #4]
	for(uint8_t x = x1; x < x2; x++)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e012      	b.n	8000a1e <ILI9163_fillRect+0x4a>
		for(uint8_t y = y1; y < y2; y++)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	73bb      	strb	r3, [r7, #14]
 80009fc:	e008      	b.n	8000a10 <ILI9163_fillRect+0x3c>
			ILI9163_drawPixel(x, y, color);
 80009fe:	8c3a      	ldrh	r2, [r7, #32]
 8000a00:	7bb9      	ldrb	r1, [r7, #14]
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffc1 	bl	800098c <ILI9163_drawPixel>
		for(uint8_t y = y1; y < y2; y++)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	73bb      	strb	r3, [r7, #14]
 8000a10:	7bba      	ldrb	r2, [r7, #14]
 8000a12:	793b      	ldrb	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3f2      	bcc.n	80009fe <ILI9163_fillRect+0x2a>
	for(uint8_t x = x1; x < x2; x++)
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	73fb      	strb	r3, [r7, #15]
 8000a1e:	7bfa      	ldrb	r2, [r7, #15]
 8000a20:	797b      	ldrb	r3, [r7, #5]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3e8      	bcc.n	80009f8 <ILI9163_fillRect+0x24>
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd90      	pop	{r4, r7, pc}

08000a30 <ILI9163_drawRect>:

void ILI9163_drawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint8_t thickness, uint16_t color) {
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4604      	mov	r4, r0
 8000a38:	4608      	mov	r0, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4623      	mov	r3, r4
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	4603      	mov	r3, r0
 8000a44:	71bb      	strb	r3, [r7, #6]
 8000a46:	460b      	mov	r3, r1
 8000a48:	717b      	strb	r3, [r7, #5]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	713b      	strb	r3, [r7, #4]
	ILI9163_fillRect(x1, y1, x2, y1+thickness, color);
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	7e3b      	ldrb	r3, [r7, #24]
 8000a52:	4413      	add	r3, r2
 8000a54:	b2dc      	uxtb	r4, r3
 8000a56:	797a      	ldrb	r2, [r7, #5]
 8000a58:	79b9      	ldrb	r1, [r7, #6]
 8000a5a:	79f8      	ldrb	r0, [r7, #7]
 8000a5c:	8bbb      	ldrh	r3, [r7, #28]
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	4623      	mov	r3, r4
 8000a62:	f7ff ffb7 	bl	80009d4 <ILI9163_fillRect>
	ILI9163_fillRect(x1, y2-thickness, x2, y2, color);
 8000a66:	793a      	ldrb	r2, [r7, #4]
 8000a68:	7e3b      	ldrb	r3, [r7, #24]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b2d9      	uxtb	r1, r3
 8000a6e:	793c      	ldrb	r4, [r7, #4]
 8000a70:	797a      	ldrb	r2, [r7, #5]
 8000a72:	79f8      	ldrb	r0, [r7, #7]
 8000a74:	8bbb      	ldrh	r3, [r7, #28]
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	4623      	mov	r3, r4
 8000a7a:	f7ff ffab 	bl	80009d4 <ILI9163_fillRect>

	ILI9163_fillRect(x1, y1, x1+thickness, y2, color);
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	7e3b      	ldrb	r3, [r7, #24]
 8000a82:	4413      	add	r3, r2
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	793c      	ldrb	r4, [r7, #4]
 8000a88:	79b9      	ldrb	r1, [r7, #6]
 8000a8a:	79f8      	ldrb	r0, [r7, #7]
 8000a8c:	8bbb      	ldrh	r3, [r7, #28]
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	4623      	mov	r3, r4
 8000a92:	f7ff ff9f 	bl	80009d4 <ILI9163_fillRect>
	ILI9163_fillRect(x2-thickness, y1, x2, y2, color);
 8000a96:	797a      	ldrb	r2, [r7, #5]
 8000a98:	7e3b      	ldrb	r3, [r7, #24]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	793c      	ldrb	r4, [r7, #4]
 8000aa0:	797a      	ldrb	r2, [r7, #5]
 8000aa2:	79b9      	ldrb	r1, [r7, #6]
 8000aa4:	8bbb      	ldrh	r3, [r7, #28]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	f7ff ff93 	bl	80009d4 <ILI9163_fillRect>
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd90      	pop	{r4, r7, pc}

08000ab6 <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	71bb      	strb	r3, [r7, #6]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
 8000ad0:	e02f      	b.n	8000b32 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8000ad2:	6a3a      	ldr	r2, [r7, #32]
 8000ad4:	797b      	ldrb	r3, [r7, #5]
 8000ad6:	3b20      	subs	r3, #32
 8000ad8:	7f79      	ldrb	r1, [r7, #29]
 8000ada:	fb03 f101 	mul.w	r1, r3, r1
 8000ade:	89fb      	ldrh	r3, [r7, #14]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	881b      	ldrh	r3, [r3, #0]
 8000ae8:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	81bb      	strh	r3, [r7, #12]
 8000aee:	e018      	b.n	8000b22 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8000af0:	897a      	ldrh	r2, [r7, #10]
 8000af2:	89bb      	ldrh	r3, [r7, #12]
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d00d      	beq.n	8000b1c <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4413      	add	r3, r2
 8000b08:	b2d8      	uxtb	r0, r3
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	79bb      	ldrb	r3, [r7, #6]
 8000b10:	4413      	add	r3, r2
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	f7ff ff38 	bl	800098c <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8000b1c:	89bb      	ldrh	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	81bb      	strh	r3, [r7, #12]
 8000b22:	7f3b      	ldrb	r3, [r7, #28]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	89ba      	ldrh	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3e1      	bcc.n	8000af0 <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8000b2c:	89fb      	ldrh	r3, [r7, #14]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	81fb      	strh	r3, [r7, #14]
 8000b32:	7f7b      	ldrb	r3, [r7, #29]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	89fa      	ldrh	r2, [r7, #14]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d3ca      	bcc.n	8000ad2 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b48:	b002      	add	sp, #8
 8000b4a:	4770      	bx	lr

08000b4c <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4604      	mov	r4, r0
 8000b54:	4608      	mov	r0, r1
 8000b56:	1d39      	adds	r1, r7, #4
 8000b58:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	4603      	mov	r3, r0
 8000b62:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8000b64:	e029      	b.n	8000bba <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8000b66:	7bfb      	ldrb	r3, [r7, #15]
 8000b68:	793a      	ldrb	r2, [r7, #4]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	2b9f      	cmp	r3, #159	; 0x9f
 8000b6e:	dd12      	ble.n	8000b96 <ILI9163_drawString+0x4a>
			x = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8000b74:	797a      	ldrb	r2, [r7, #5]
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	4413      	add	r3, r2
 8000b7a:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8000b7c:	7bbb      	ldrb	r3, [r7, #14]
 8000b7e:	797a      	ldrb	r2, [r7, #5]
 8000b80:	4413      	add	r3, r2
 8000b82:	2b7f      	cmp	r3, #127	; 0x7f
 8000b84:	dc1e      	bgt.n	8000bc4 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8000b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b20      	cmp	r3, #32
 8000b8c:	d103      	bne.n	8000b96 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	3301      	adds	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8000b94:	e011      	b.n	8000bba <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	7bb9      	ldrb	r1, [r7, #14]
 8000b9c:	7bf8      	ldrb	r0, [r7, #15]
 8000b9e:	8c3b      	ldrh	r3, [r7, #32]
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f7ff ff85 	bl	8000ab6 <ILI9163_drawChar>

		x += font.width;
 8000bac:	793a      	ldrb	r2, [r7, #4]
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	73fb      	strb	r3, [r7, #15]
		string++;
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
	while(*string) {
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1d1      	bne.n	8000b66 <ILI9163_drawString+0x1a>
	}
}
 8000bc2:	e000      	b.n	8000bc6 <ILI9163_drawString+0x7a>
				break;
 8000bc4:	bf00      	nop
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd90      	pop	{r4, r7, pc}

08000bce <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8000bce:	b590      	push	{r4, r7, lr}
 8000bd0:	b099      	sub	sp, #100	; 0x64
 8000bd2:	af02      	add	r7, sp, #8
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	1d39      	adds	r1, r7, #4
 8000bda:	e881 000c 	stmia.w	r1, {r2, r3}
 8000bde:	4623      	mov	r3, r4
 8000be0:	73fb      	strb	r3, [r7, #15]
 8000be2:	4603      	mov	r3, r0
 8000be4:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8000be6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000bea:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000bec:	f107 0018 	add.w	r0, r7, #24
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000bf4:	213f      	movs	r1, #63	; 0x3f
 8000bf6:	f004 fb31 	bl	800525c <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8000bfa:	7bb9      	ldrb	r1, [r7, #14]
 8000bfc:	7bf8      	ldrb	r0, [r7, #15]
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	cb0c      	ldmia	r3, {r2, r3}
 8000c0e:	f7ff ff9d 	bl	8000b4c <ILI9163_drawString>
}
 8000c12:	bf00      	nop
 8000c14:	375c      	adds	r7, #92	; 0x5c
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
	...

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c22:	f000 fcca 	bl	80015ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c26:	f000 f859 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c2a:	f000 f979 	bl	8000f20 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c2e:	f000 f959 	bl	8000ee4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c32:	f000 f8f9 	bl	8000e28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c36:	f000 f927 	bl	8000e88 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000c3a:	f000 f8b7 	bl	8000dac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  char writeString[32];


        ILI9163_init(0);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fd72 	bl	8000728 <ILI9163_init>
        HAL_Delay(1000);
 8000c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c48:	f000 fd14 	bl	8001674 <HAL_Delay>
        ILI9163_newFrame();
 8000c4c:	f7ff fe54 	bl	80008f8 <ILI9163_newFrame>
        ILI9163_drawStringF(5, 5, Font_7x10, BLUE, "Hello");
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <main+0xb0>)
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <main+0xb4>)
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	cb0c      	ldmia	r3, {r2, r3}
 8000c5e:	2105      	movs	r1, #5
 8000c60:	2005      	movs	r0, #5
 8000c62:	f7ff ffb4 	bl	8000bce <ILI9163_drawStringF>
        ILI9163_fillRect(30, 20, 60, 60, BLUE);
 8000c66:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	233c      	movs	r3, #60	; 0x3c
 8000c6e:	223c      	movs	r2, #60	; 0x3c
 8000c70:	2114      	movs	r1, #20
 8000c72:	201e      	movs	r0, #30
 8000c74:	f7ff feae 	bl	80009d4 <ILI9163_fillRect>
        ILI9163_drawRect(50, 50, 75, 75, 3, RED);
 8000c78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	2303      	movs	r3, #3
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	234b      	movs	r3, #75	; 0x4b
 8000c84:	224b      	movs	r2, #75	; 0x4b
 8000c86:	2132      	movs	r1, #50	; 0x32
 8000c88:	2032      	movs	r0, #50	; 0x32
 8000c8a:	f7ff fed1 	bl	8000a30 <ILI9163_drawRect>
        HAL_Delay(100);
 8000c8e:	2064      	movs	r0, #100	; 0x64
 8000c90:	f000 fcf0 	bl	8001674 <HAL_Delay>
        ILI9163_render();
 8000c94:	f7ff fe4c 	bl	8000930 <ILI9163_render>
        HAL_Delay(1000);
 8000c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c9c:	f000 fcea 	bl	8001674 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
    while (1)
    {

        if(1){
            ILI9163_newFrame();
 8000ca0:	f7ff fe2a 	bl	80008f8 <ILI9163_newFrame>
            sprintf(writeString, "var = 1");
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <main+0xb8>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 fa8b 	bl	80051c4 <siprintf>
            ILI9163_drawStringF(5, 5, Font_16x26, BLUE, writeString);
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <main+0xbc>)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	ca0c      	ldmia	r2, {r2, r3}
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2005      	movs	r0, #5
 8000cc0:	f7ff ff85 	bl	8000bce <ILI9163_drawStringF>
            ILI9163_render();
 8000cc4:	f7ff fe34 	bl	8000930 <ILI9163_render>
        if(1){
 8000cc8:	e7ea      	b.n	8000ca0 <main+0x84>
 8000cca:	bf00      	nop
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	08005b98 	.word	0x08005b98
 8000cd4:	08005ba0 	.word	0x08005ba0
 8000cd8:	20000008 	.word	0x20000008

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	; 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	; 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 fac4 	bl	8005278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d00:	f001 fce4 	bl	80026cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <SystemClock_Config+0xc8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <SystemClock_Config+0xc8>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <SystemClock_Config+0xc8>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <SystemClock_Config+0xcc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d50:	2348      	movs	r3, #72	; 0x48
 8000d52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fcc3 	bl	80026ec <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d6c:	f000 f9de 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 ff51 	bl	8002c34 <HAL_RCC_ClockConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d98:	f000 f9c8 	bl	800112c <Error_Handler>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	; 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000db2:	4a1c      	ldr	r2, [pc, #112]	; (8000e24 <MX_SPI1_Init+0x78>)
 8000db4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000db8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000de2:	2208      	movs	r2, #8
 8000de4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df2:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_SPI1_Init+0x74>)
 8000e0c:	f002 fd28 	bl	8003860 <HAL_SPI_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e16:	f000 f989 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000a08c 	.word	0x2000a08c
 8000e24:	40013000 	.word	0x40013000

08000e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_USART3_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e6c:	f003 fa64 	bl	8004338 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 f959 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000a150 	.word	0x2000a150
 8000e84:	40004800 	.word	0x40004800

08000e88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	2206      	movs	r2, #6
 8000e98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ecc:	f001 fab5 	bl	800243a <HAL_PCD_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 f929 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000a1d8 	.word	0x2000a1d8

08000ee4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_DMA_Init+0x38>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a0b      	ldr	r2, [pc, #44]	; (8000f1c <MX_DMA_Init+0x38>)
 8000ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_DMA_Init+0x38>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	203b      	movs	r0, #59	; 0x3b
 8000f08:	f000 fcb3 	bl	8001872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f0c:	203b      	movs	r0, #59	; 0x3b
 8000f0e:	f000 fccc 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800

08000f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a67      	ldr	r2, [pc, #412]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b65      	ldr	r3, [pc, #404]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4e:	4b62      	ldr	r3, [pc, #392]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a61      	ldr	r2, [pc, #388]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b5f      	ldr	r3, [pc, #380]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b5c      	ldr	r3, [pc, #368]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a5b      	ldr	r2, [pc, #364]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b59      	ldr	r3, [pc, #356]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b56      	ldr	r3, [pc, #344]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a55      	ldr	r2, [pc, #340]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b4a      	ldr	r3, [pc, #296]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a49      	ldr	r2, [pc, #292]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <MX_GPIO_Init+0x1b8>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f244 3181 	movw	r1, #17281	; 0x4381
 8000fcc:	4843      	ldr	r0, [pc, #268]	; (80010dc <MX_GPIO_Init+0x1bc>)
 8000fce:	f001 fa1b 	bl	8002408 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4842      	ldr	r0, [pc, #264]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 8000fd8:	f001 fa16 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	483c      	ldr	r0, [pc, #240]	; (80010e4 <MX_GPIO_Init+0x1c4>)
 8000ff4:	f001 f85c 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ff8:	2332      	movs	r3, #50	; 0x32
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001004:	2303      	movs	r3, #3
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	230b      	movs	r3, #11
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 031c 	add.w	r3, r7, #28
 8001010:	4619      	mov	r1, r3
 8001012:	4834      	ldr	r0, [pc, #208]	; (80010e4 <MX_GPIO_Init+0x1c4>)
 8001014:	f001 f84c 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001018:	2386      	movs	r3, #134	; 0x86
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001028:	230b      	movs	r3, #11
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	482d      	ldr	r0, [pc, #180]	; (80010e8 <MX_GPIO_Init+0x1c8>)
 8001034:	f001 f83c 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8001038:	f244 3381 	movw	r3, #17281	; 0x4381
 800103c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2301      	movs	r3, #1
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	4822      	ldr	r0, [pc, #136]	; (80010dc <MX_GPIO_Init+0x1bc>)
 8001052:	f001 f82d 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001056:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001068:	230b      	movs	r3, #11
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 031c 	add.w	r3, r7, #28
 8001070:	4619      	mov	r1, r3
 8001072:	481a      	ldr	r0, [pc, #104]	; (80010dc <MX_GPIO_Init+0x1bc>)
 8001074:	f001 f81c 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001078:	2340      	movs	r3, #64	; 0x40
 800107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107c:	2301      	movs	r3, #1
 800107e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001088:	f107 031c 	add.w	r3, r7, #28
 800108c:	4619      	mov	r1, r3
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 8001090:	f001 f80e 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	480e      	ldr	r0, [pc, #56]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 80010a8:	f001 f802 	bl	80020b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010be:	230b      	movs	r3, #11
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_GPIO_Init+0x1c0>)
 80010ca:	f000 fff1 	bl	80020b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ce:	bf00      	nop
 80010d0:	3730      	adds	r7, #48	; 0x30
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40021800 	.word	0x40021800
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t SPI_DMA_FL = 0;
  uint32_t SPI_DMA_CNT=1;
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)  {     SPI_DMA_CNT--;     if(SPI_DMA_CNT==0)     {         HAL_SPI_DMAStop(&hspi1);         SPI_DMA_CNT=1;         SPI_DMA_FL=1;     } }
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_SPI_TxCpltCallback+0x34>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	4a09      	ldr	r2, [pc, #36]	; (8001120 <HAL_SPI_TxCpltCallback+0x34>)
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <HAL_SPI_TxCpltCallback+0x34>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <HAL_SPI_TxCpltCallback+0x2c>
 8001106:	4807      	ldr	r0, [pc, #28]	; (8001124 <HAL_SPI_TxCpltCallback+0x38>)
 8001108:	f002 feb8 	bl	8003e7c <HAL_SPI_DMAStop>
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <HAL_SPI_TxCpltCallback+0x34>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_SPI_TxCpltCallback+0x3c>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000010 	.word	0x20000010
 8001124:	2000a08c 	.word	0x2000a08c
 8001128:	2000a6e0 	.word	0x2000a6e0

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_MspInit+0x44>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_MspInit+0x44>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_MspInit+0x44>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_MspInit+0x44>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_MspInit+0x44>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_MspInit+0x44>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a41      	ldr	r2, [pc, #260]	; (80012a4 <HAL_SPI_MspInit+0x124>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d17c      	bne.n	800129c <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011a2:	4b41      	ldr	r3, [pc, #260]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a40      	ldr	r2, [pc, #256]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b38      	ldr	r3, [pc, #224]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b32      	ldr	r3, [pc, #200]	; (80012a8 <HAL_SPI_MspInit+0x128>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011fa:	2305      	movs	r3, #5
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	4829      	ldr	r0, [pc, #164]	; (80012ac <HAL_SPI_MspInit+0x12c>)
 8001206:	f000 ff53 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800120a:	2320      	movs	r3, #32
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120e:	2302      	movs	r3, #2
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121a:	2305      	movs	r3, #5
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4822      	ldr	r0, [pc, #136]	; (80012b0 <HAL_SPI_MspInit+0x130>)
 8001226:	f000 ff43 	bl	80020b0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <HAL_SPI_MspInit+0x138>)
 800122e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001232:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001236:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001238:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 800123a:	2240      	movs	r2, #64	; 0x40
 800123c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 800124e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001252:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001254:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001256:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 800126a:	2204      	movs	r2, #4
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001270:	2201      	movs	r2, #1
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001276:	2200      	movs	r2, #0
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 800127c:	2200      	movs	r2, #0
 800127e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001282:	f000 fb2d 	bl	80018e0 <HAL_DMA_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 800128c:	f7ff ff4e 	bl	800112c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_SPI_MspInit+0x134>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	2000a0f0 	.word	0x2000a0f0
 80012b8:	40026458 	.word	0x40026458

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0aa      	sub	sp, #168	; 0xa8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2284      	movs	r2, #132	; 0x84
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 ffcb 	bl	8005278 <memset>
  if(huart->Instance==USART3)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_UART_MspInit+0xb4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d13c      	bne.n	8001366 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 fec0 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001306:	f7ff ff11 	bl	800112c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_UART_MspInit+0xb8>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_UART_MspInit+0xb8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800133a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001354:	2307      	movs	r3, #7
 8001356:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <HAL_UART_MspInit+0xbc>)
 8001362:	f000 fea5 	bl	80020b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	37a8      	adds	r7, #168	; 0xa8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40004800 	.word	0x40004800
 8001374:	40023800 	.word	0x40023800
 8001378:	40020c00 	.word	0x40020c00

0800137c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0ac      	sub	sp, #176	; 0xb0
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2284      	movs	r2, #132	; 0x84
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f003 ff6b 	bl	8005278 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013aa:	d159      	bne.n	8001460 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	4618      	mov	r0, r3
 80013be:	f001 fe5f 	bl	8003080 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80013c8:	f7ff feb0 	bl	800112c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013cc:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_PCD_MspInit+0xec>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	4a25      	ldr	r2, [pc, #148]	; (8001468 <HAL_PCD_MspInit+0xec>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <HAL_PCD_MspInit+0xec>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80013e4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013fe:	230a      	movs	r3, #10
 8001400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001408:	4619      	mov	r1, r3
 800140a:	4818      	ldr	r0, [pc, #96]	; (800146c <HAL_PCD_MspInit+0xf0>)
 800140c:	f000 fe50 	bl	80020b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001414:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001424:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001428:	4619      	mov	r1, r3
 800142a:	4810      	ldr	r0, [pc, #64]	; (800146c <HAL_PCD_MspInit+0xf0>)
 800142c:	f000 fe40 	bl	80020b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <HAL_PCD_MspInit+0xec>)
 8001432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001434:	4a0c      	ldr	r2, [pc, #48]	; (8001468 <HAL_PCD_MspInit+0xec>)
 8001436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143a:	6353      	str	r3, [r2, #52]	; 0x34
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_PCD_MspInit+0xec>)
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_PCD_MspInit+0xec>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	4a06      	ldr	r2, [pc, #24]	; (8001468 <HAL_PCD_MspInit+0xec>)
 800144e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001452:	6453      	str	r3, [r2, #68]	; 0x44
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_PCD_MspInit+0xec>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001460:	bf00      	nop
 8001462:	37b0      	adds	r7, #176	; 0xb0
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f8ba 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA2_Stream3_IRQHandler+0x10>)
 80014ca:	f000 fb87 	bl	8001bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000a0f0 	.word	0x2000a0f0

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f003 febe 	bl	8005288 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20050000 	.word	0x20050000
 8001538:	00000400 	.word	0x00000400
 800153c:	2000a6e4 	.word	0x2000a6e4
 8001540:	2000a838 	.word	0x2000a838

08001544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001584:	4c0b      	ldr	r4, [pc, #44]	; (80015b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001592:	f7ff ffd7 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f003 fe7d 	bl	8005294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff fb3f 	bl	8000c1c <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015ac:	080076c4 	.word	0x080076c4
  ldr r2, =_sbss
 80015b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015b4:	2000a834 	.word	0x2000a834

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>

080015ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f000 f94c 	bl	800185c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 f805 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ca:	f7ff fdb5 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f967 	bl	80018c6 <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001610:	f000 f92f 	bl	8001872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000014 	.word	0x20000014
 800162c:	2000001c 	.word	0x2000001c
 8001630:	20000018 	.word	0x20000018

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	2000001c 	.word	0x2000001c
 8001658:	2000a6e8 	.word	0x2000a6e8

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	2000a6e8 	.word	0x2000a6e8

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ffee 	bl	800165c <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffde 	bl	800165c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000001c 	.word	0x2000001c

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <__NVIC_SetPriorityGrouping+0x40>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x40>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00
 8001700:	05fa0000 	.word	0x05fa0000

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	db0b      	blt.n	800174a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	4907      	ldr	r1, [pc, #28]	; (8001758 <__NVIC_EnableIRQ+0x38>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2001      	movs	r0, #1
 8001742:	fa00 f202 	lsl.w	r2, r0, r2
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176c:	2b00      	cmp	r3, #0
 800176e:	db0a      	blt.n	8001786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	b2da      	uxtb	r2, r3
 8001774:	490c      	ldr	r1, [pc, #48]	; (80017a8 <__NVIC_SetPriority+0x4c>)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	b2d2      	uxtb	r2, r2
 800177e:	440b      	add	r3, r1
 8001780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001784:	e00a      	b.n	800179c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4908      	ldr	r1, [pc, #32]	; (80017ac <__NVIC_SetPriority+0x50>)
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3b04      	subs	r3, #4
 8001794:	0112      	lsls	r2, r2, #4
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	440b      	add	r3, r1
 800179a:	761a      	strb	r2, [r3, #24]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000e100 	.word	0xe000e100
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f1c3 0307 	rsb	r3, r3, #7
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	bf28      	it	cs
 80017ce:	2304      	movcs	r3, #4
 80017d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3304      	adds	r3, #4
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d902      	bls.n	80017e0 <NVIC_EncodePriority+0x30>
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3b03      	subs	r3, #3
 80017de:	e000      	b.n	80017e2 <NVIC_EncodePriority+0x32>
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43da      	mvns	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	401a      	ands	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	43d9      	mvns	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	4313      	orrs	r3, r2
         );
}
 800180a:	4618      	mov	r0, r3
 800180c:	3724      	adds	r7, #36	; 0x24
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001828:	d301      	bcc.n	800182e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182a:	2301      	movs	r3, #1
 800182c:	e00f      	b.n	800184e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <SysTick_Config+0x40>)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001836:	210f      	movs	r1, #15
 8001838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800183c:	f7ff ff8e 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <SysTick_Config+0x40>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <SysTick_Config+0x40>)
 8001848:	2207      	movs	r2, #7
 800184a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	e000e010 	.word	0xe000e010

0800185c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff ff29 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001872:	b580      	push	{r7, lr}
 8001874:	b086      	sub	sp, #24
 8001876:	af00      	add	r7, sp, #0
 8001878:	4603      	mov	r3, r0
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
 800187e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001884:	f7ff ff3e 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68b9      	ldr	r1, [r7, #8]
 800188e:	6978      	ldr	r0, [r7, #20]
 8001890:	f7ff ff8e 	bl	80017b0 <NVIC_EncodePriority>
 8001894:	4602      	mov	r2, r0
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff5d 	bl	800175c <__NVIC_SetPriority>
}
 80018a2:	bf00      	nop
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	4603      	mov	r3, r0
 80018b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff31 	bl	8001720 <__NVIC_EnableIRQ>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ffa2 	bl	8001818 <SysTick_Config>
 80018d4:	4603      	mov	r3, r0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff feb6 	bl	800165c <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e099      	b.n	8001a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0201 	bic.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800191c:	e00f      	b.n	800193e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191e:	f7ff fe9d 	bl	800165c <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b05      	cmp	r3, #5
 800192a:	d908      	bls.n	800193e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2220      	movs	r2, #32
 8001930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e078      	b.n	8001a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e8      	bne.n	800191e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <HAL_DMA_Init+0x158>)
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800196a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	2b04      	cmp	r3, #4
 8001996:	d107      	bne.n	80019a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4313      	orrs	r3, r2
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f023 0307 	bic.w	r3, r3, #7
 80019be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d117      	bne.n	8001a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fae7 	bl	8001fb8 <DMA_CheckFifoParam>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2240      	movs	r2, #64	; 0x40
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019fe:	2301      	movs	r3, #1
 8001a00:	e016      	b.n	8001a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 fa9e 	bl	8001f4c <DMA_CalcBaseAndBitshift>
 8001a10:	4603      	mov	r3, r0
 8001a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	223f      	movs	r2, #63	; 0x3f
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	f010803f 	.word	0xf010803f

08001a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_DMA_Start_IT+0x26>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e048      	b.n	8001af4 <HAL_DMA_Start_IT+0xb8>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d137      	bne.n	8001ae6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fa30 	bl	8001ef0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	223f      	movs	r2, #63	; 0x3f
 8001a96:	409a      	lsls	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0216 	orr.w	r2, r2, #22
 8001aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d007      	beq.n	8001ad4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0208 	orr.w	r2, r2, #8
 8001ad2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e005      	b.n	8001af2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aee:	2302      	movs	r3, #2
 8001af0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b0a:	f7ff fda7 	bl	800165c <HAL_GetTick>
 8001b0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e052      	b.n	8001bd4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0216 	bic.w	r2, r2, #22
 8001b3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <HAL_DMA_Abort+0x62>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0208 	bic.w	r2, r2, #8
 8001b6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 0201 	bic.w	r2, r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b7e:	e013      	b.n	8001ba8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b80:	f7ff fd6c 	bl	800165c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d90c      	bls.n	8001ba8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2220      	movs	r2, #32
 8001b92:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2203      	movs	r2, #3
 8001b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e015      	b.n	8001bd4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1e4      	bne.n	8001b80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	223f      	movs	r2, #63	; 0x3f
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001be8:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <HAL_DMA_IRQHandler+0x248>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a8e      	ldr	r2, [pc, #568]	; (8001e28 <HAL_DMA_IRQHandler+0x24c>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	2208      	movs	r2, #8
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01a      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0204 	bic.w	r2, r2, #4
 8001c2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	2208      	movs	r2, #8
 8001c36:	409a      	lsls	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d012      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	409a      	lsls	r2, r3
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2204      	movs	r2, #4
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cac:	f043 0204 	orr.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2210      	movs	r2, #16
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d043      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d03c      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	2210      	movs	r2, #16
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d018      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d024      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	4798      	blx	r3
 8001d0a:	e01f      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d01b      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
 8001d1c:	e016      	b.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0208 	bic.w	r2, r2, #8
 8001d3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d50:	2220      	movs	r2, #32
 8001d52:	409a      	lsls	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 808f 	beq.w	8001e7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8087 	beq.w	8001e7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2220      	movs	r2, #32
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b05      	cmp	r3, #5
 8001d84:	d136      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0216 	bic.w	r2, r2, #22
 8001d94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001da4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d103      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x1da>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d007      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0208 	bic.w	r2, r2, #8
 8001dc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	223f      	movs	r2, #63	; 0x3f
 8001dcc:	409a      	lsls	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d07e      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
        }
        return;
 8001df2:	e079      	b.n	8001ee8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01d      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10d      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d031      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e02c      	b.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
 8001e22:	bf00      	nop
 8001e24:	20000014 	.word	0x20000014
 8001e28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e01e      	b.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10f      	bne.n	8001e6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0210 	bic.w	r2, r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d032      	beq.n	8001eea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d307      	bcc.n	8001ec4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f2      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x2cc>
 8001ec2:	e000      	b.n	8001ec6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ec4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d005      	beq.n	8001eea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	4798      	blx	r3
 8001ee6:	e000      	b.n	8001eea <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ee8:	bf00      	nop
    }
  }
}
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
 8001efc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b40      	cmp	r3, #64	; 0x40
 8001f1c:	d108      	bne.n	8001f30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f2e:	e007      	b.n	8001f40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	3b10      	subs	r3, #16
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <DMA_CalcBaseAndBitshift+0x60>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f66:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <DMA_CalcBaseAndBitshift+0x64>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d908      	bls.n	8001f8c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	1d1a      	adds	r2, r3, #4
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	659a      	str	r2, [r3, #88]	; 0x58
 8001f8a:	e006      	b.n	8001f9a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	aaaaaaab 	.word	0xaaaaaaab
 8001fb0:	08007678 	.word	0x08007678
 8001fb4:	fffffc00 	.word	0xfffffc00

08001fb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d11f      	bne.n	8002012 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d856      	bhi.n	8002086 <DMA_CheckFifoParam+0xce>
 8001fd8:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <DMA_CheckFifoParam+0x28>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08001ff1 	.word	0x08001ff1
 8001fe4:	08002003 	.word	0x08002003
 8001fe8:	08001ff1 	.word	0x08001ff1
 8001fec:	08002087 	.word	0x08002087
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d046      	beq.n	800208a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002000:	e043      	b.n	800208a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800200a:	d140      	bne.n	800208e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002010:	e03d      	b.n	800208e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800201a:	d121      	bne.n	8002060 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2b03      	cmp	r3, #3
 8002020:	d837      	bhi.n	8002092 <DMA_CheckFifoParam+0xda>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <DMA_CheckFifoParam+0x70>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002039 	.word	0x08002039
 800202c:	0800203f 	.word	0x0800203f
 8002030:	08002039 	.word	0x08002039
 8002034:	08002051 	.word	0x08002051
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      break;
 800203c:	e030      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d025      	beq.n	8002096 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204e:	e022      	b.n	8002096 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002058:	d11f      	bne.n	800209a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800205e:	e01c      	b.n	800209a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d903      	bls.n	800206e <DMA_CheckFifoParam+0xb6>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d003      	beq.n	8002074 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800206c:	e018      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
      break;
 8002072:	e015      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	73fb      	strb	r3, [r7, #15]
      break;
 8002084:	e00b      	b.n	800209e <DMA_CheckFifoParam+0xe6>
      break;
 8002086:	bf00      	nop
 8002088:	e00a      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800208a:	bf00      	nop
 800208c:	e008      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800208e:	bf00      	nop
 8002090:	e006      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002092:	bf00      	nop
 8002094:	e004      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002096:	bf00      	nop
 8002098:	e002      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800209a:	bf00      	nop
 800209c:	e000      	b.n	80020a0 <DMA_CheckFifoParam+0xe8>
      break;
 800209e:	bf00      	nop
    }
  } 
  
  return status; 
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020c2:	2300      	movs	r3, #0
 80020c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	e175      	b.n	80023bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020d0:	2201      	movs	r2, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	f040 8164 	bne.w	80023b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d005      	beq.n	8002106 <HAL_GPIO_Init+0x56>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d130      	bne.n	8002168 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	2203      	movs	r2, #3
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4013      	ands	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800213c:	2201      	movs	r2, #1
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0201 	and.w	r2, r3, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d017      	beq.n	80021a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d123      	bne.n	80021f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0307 	and.w	r3, r3, #7
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	220f      	movs	r2, #15
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	69b9      	ldr	r1, [r7, #24]
 80021f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0203 	and.w	r2, r3, #3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80be 	beq.w	80023b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b66      	ldr	r3, [pc, #408]	; (80023d4 <HAL_GPIO_Init+0x324>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a65      	ldr	r2, [pc, #404]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b63      	ldr	r3, [pc, #396]	; (80023d4 <HAL_GPIO_Init+0x324>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002252:	4a61      	ldr	r2, [pc, #388]	; (80023d8 <HAL_GPIO_Init+0x328>)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	220f      	movs	r2, #15
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4013      	ands	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_GPIO_Init+0x32c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d037      	beq.n	80022ee <HAL_GPIO_Init+0x23e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_GPIO_Init+0x330>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d031      	beq.n	80022ea <HAL_GPIO_Init+0x23a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a56      	ldr	r2, [pc, #344]	; (80023e4 <HAL_GPIO_Init+0x334>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d02b      	beq.n	80022e6 <HAL_GPIO_Init+0x236>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a55      	ldr	r2, [pc, #340]	; (80023e8 <HAL_GPIO_Init+0x338>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d025      	beq.n	80022e2 <HAL_GPIO_Init+0x232>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a54      	ldr	r2, [pc, #336]	; (80023ec <HAL_GPIO_Init+0x33c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d01f      	beq.n	80022de <HAL_GPIO_Init+0x22e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a53      	ldr	r2, [pc, #332]	; (80023f0 <HAL_GPIO_Init+0x340>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d019      	beq.n	80022da <HAL_GPIO_Init+0x22a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_GPIO_Init+0x344>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0x226>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a51      	ldr	r2, [pc, #324]	; (80023f8 <HAL_GPIO_Init+0x348>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00d      	beq.n	80022d2 <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a50      	ldr	r2, [pc, #320]	; (80023fc <HAL_GPIO_Init+0x34c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d007      	beq.n	80022ce <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	; (8002400 <HAL_GPIO_Init+0x350>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_GPIO_Init+0x21a>
 80022c6:	2309      	movs	r3, #9
 80022c8:	e012      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ca:	230a      	movs	r3, #10
 80022cc:	e010      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ce:	2308      	movs	r3, #8
 80022d0:	e00e      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022d2:	2307      	movs	r3, #7
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x240>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x328>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b3d      	ldr	r3, [pc, #244]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a34      	ldr	r2, [pc, #208]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_GPIO_Init+0x354>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a29      	ldr	r2, [pc, #164]	; (8002404 <HAL_GPIO_Init+0x354>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b28      	ldr	r3, [pc, #160]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_GPIO_Init+0x354>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_GPIO_Init+0x354>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_GPIO_Init+0x354>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f ae86 	bls.w	80020d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40021c00 	.word	0x40021c00
 80023fc:	40022000 	.word	0x40022000
 8002400:	40022400 	.word	0x40022400
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800243a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243c:	b08f      	sub	sp, #60	; 0x3c
 800243e:	af0a      	add	r7, sp, #40	; 0x28
 8002440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e116      	b.n	800267a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe ff88 	bl	800137c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2203      	movs	r2, #3
 8002470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d102      	bne.n	8002486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 fbfe 	bl	8004c8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	603b      	str	r3, [r7, #0]
 8002496:	687e      	ldr	r6, [r7, #4]
 8002498:	466d      	mov	r5, sp
 800249a:	f106 0410 	add.w	r4, r6, #16
 800249e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ae:	1d33      	adds	r3, r6, #4
 80024b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b2:	6838      	ldr	r0, [r7, #0]
 80024b4:	f002 fb92 	bl	8004bdc <USB_CoreInit>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2202      	movs	r2, #2
 80024c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0d7      	b.n	800267a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fbec 	bl	8004cae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	73fb      	strb	r3, [r7, #15]
 80024da:	e04a      	b.n	8002572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	333d      	adds	r3, #61	; 0x3d
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	4413      	add	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	333c      	adds	r3, #60	; 0x3c
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	b298      	uxth	r0, r3
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3344      	adds	r3, #68	; 0x44
 8002518:	4602      	mov	r2, r0
 800251a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	4413      	add	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3340      	adds	r3, #64	; 0x40
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3348      	adds	r3, #72	; 0x48
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	334c      	adds	r3, #76	; 0x4c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3354      	adds	r3, #84	; 0x54
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	7bfa      	ldrb	r2, [r7, #15]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	d3af      	bcc.n	80024dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	73fb      	strb	r3, [r7, #15]
 8002580:	e044      	b.n	800260c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	4413      	add	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f0:	7bfa      	ldrb	r2, [r7, #15]
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	3301      	adds	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3b5      	bcc.n	8002582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	687e      	ldr	r6, [r7, #4]
 800261e:	466d      	mov	r5, sp
 8002620:	f106 0410 	add.w	r4, r6, #16
 8002624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002630:	e885 0003 	stmia.w	r5, {r0, r1}
 8002634:	1d33      	adds	r3, r6, #4
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	6838      	ldr	r0, [r7, #0]
 800263a:	f002 fb85 	bl	8004d48 <USB_DevInit>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e014      	b.n	800267a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2b01      	cmp	r3, #1
 8002666:	d102      	bne.n	800266e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f80b 	bl	8002684 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f002 fd43 	bl	80050fe <USB_DevDisconnect>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002684 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026b2:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	10000003 	.word	0x10000003

080026cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80026d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026da:	6013      	str	r3, [r2, #0]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40007000 	.word	0x40007000

080026ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e291      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8087 	beq.w	800281e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002710:	4b96      	ldr	r3, [pc, #600]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b04      	cmp	r3, #4
 800271a:	d00c      	beq.n	8002736 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271c:	4b93      	ldr	r3, [pc, #588]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d112      	bne.n	800274e <HAL_RCC_OscConfig+0x62>
 8002728:	4b90      	ldr	r3, [pc, #576]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002734:	d10b      	bne.n	800274e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002736:	4b8d      	ldr	r3, [pc, #564]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d06c      	beq.n	800281c <HAL_RCC_OscConfig+0x130>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d168      	bne.n	800281c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e26b      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x7a>
 8002758:	4b84      	ldr	r3, [pc, #528]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a83      	ldr	r2, [pc, #524]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800275e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	e02e      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10c      	bne.n	8002788 <HAL_RCC_OscConfig+0x9c>
 800276e:	4b7f      	ldr	r3, [pc, #508]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7e      	ldr	r2, [pc, #504]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b7c      	ldr	r3, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7b      	ldr	r2, [pc, #492]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	e01d      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0xc0>
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a75      	ldr	r2, [pc, #468]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b73      	ldr	r3, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a72      	ldr	r2, [pc, #456]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xd8>
 80027ac:	4b6f      	ldr	r3, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	4b6c      	ldr	r3, [pc, #432]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6b      	ldr	r2, [pc, #428]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d013      	beq.n	80027f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe ff46 	bl	800165c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe ff42 	bl	800165c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e21f      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e6:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0xe8>
 80027f2:	e014      	b.n	800281e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe ff32 	bl	800165c <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7fe ff2e 	bl	800165c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b64      	cmp	r3, #100	; 0x64
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e20b      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800280e:	4b57      	ldr	r3, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x110>
 800281a:	e000      	b.n	800281e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d069      	beq.n	80028fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800282a:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002836:	4b4d      	ldr	r3, [pc, #308]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d11c      	bne.n	800287c <HAL_RCC_OscConfig+0x190>
 8002842:	4b4a      	ldr	r3, [pc, #296]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d116      	bne.n	800287c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_RCC_OscConfig+0x17a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d001      	beq.n	8002866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e1df      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	493d      	ldr	r1, [pc, #244]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287a:	e040      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d023      	beq.n	80028cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002884:	4b39      	ldr	r3, [pc, #228]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a38      	ldr	r2, [pc, #224]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fee4 	bl	800165c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002898:	f7fe fee0 	bl	800165c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1bd      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b30      	ldr	r3, [pc, #192]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b2d      	ldr	r3, [pc, #180]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4929      	ldr	r1, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
 80028ca:	e018      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a26      	ldr	r2, [pc, #152]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fec0 	bl	800165c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7fe febc 	bl	800165c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e199      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCC_OscConfig+0x280>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d038      	beq.n	800297c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d019      	beq.n	8002946 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b16      	ldr	r3, [pc, #88]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fe9d 	bl	800165c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002926:	f7fe fe99 	bl	800165c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e176      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800293a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x23a>
 8002944:	e01a      	b.n	800297c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_RCC_OscConfig+0x280>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_RCC_OscConfig+0x280>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7fe fe83 	bl	800165c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe fe7f 	bl	800165c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d903      	bls.n	8002970 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e15c      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
 800296c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	4b91      	ldr	r3, [pc, #580]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1ee      	bne.n	800295a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80a4 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b8b      	ldr	r3, [pc, #556]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b88      	ldr	r3, [pc, #544]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a87      	ldr	r2, [pc, #540]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b85      	ldr	r3, [pc, #532]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b2:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029be:	4b7f      	ldr	r3, [pc, #508]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a7e      	ldr	r2, [pc, #504]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe fe47 	bl	800165c <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe fe43 	bl	800165c <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e120      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e4:	4b75      	ldr	r3, [pc, #468]	; (8002bbc <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x31a>
 80029f8:	4b6f      	ldr	r3, [pc, #444]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a6e      	ldr	r2, [pc, #440]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6713      	str	r3, [r2, #112]	; 0x70
 8002a04:	e02d      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x33c>
 8002a0e:	4b6a      	ldr	r3, [pc, #424]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a69      	ldr	r2, [pc, #420]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1a:	4b67      	ldr	r3, [pc, #412]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a66      	ldr	r2, [pc, #408]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
 8002a26:	e01c      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x35e>
 8002a30:	4b61      	ldr	r3, [pc, #388]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a34:	4a60      	ldr	r2, [pc, #384]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	4b5e      	ldr	r3, [pc, #376]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a5d      	ldr	r2, [pc, #372]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	e00b      	b.n	8002a62 <HAL_RCC_OscConfig+0x376>
 8002a4a:	4b5b      	ldr	r3, [pc, #364]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4e:	4a5a      	ldr	r2, [pc, #360]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
 8002a56:	4b58      	ldr	r3, [pc, #352]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a57      	ldr	r2, [pc, #348]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d015      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a6a:	f7fe fdf7 	bl	800165c <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fdf3 	bl	800165c <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0ce      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	4b4b      	ldr	r3, [pc, #300]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ee      	beq.n	8002a72 <HAL_RCC_OscConfig+0x386>
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fde1 	bl	800165c <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe fddd 	bl	800165c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0b8      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b3c      	ldr	r3, [pc, #240]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	4a3b      	ldr	r2, [pc, #236]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80a4 	beq.w	8002c24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d06b      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d149      	bne.n	8002b84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b31      	ldr	r3, [pc, #196]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fdae 	bl	800165c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fdaa 	bl	800165c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e087      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	4313      	orrs	r3, r2
 8002b48:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fd7e 	bl	800165c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fd7a 	bl	800165c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e057      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x478>
 8002b82:	e04f      	b.n	8002c24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f7fe fd64 	bl	800165c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe fd60 	bl	800165c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e03d      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <HAL_RCC_OscConfig+0x4cc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x4ac>
 8002bb6:	e035      	b.n	8002c24 <HAL_RCC_OscConfig+0x538>
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x544>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d121      	bne.n	8002c20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d11a      	bne.n	8002c20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bf6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d107      	bne.n	8002c20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d001      	beq.n	8002c24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0d0      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d910      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b67      	ldr	r3, [pc, #412]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 020f 	bic.w	r2, r3, #15
 8002c62:	4965      	ldr	r1, [pc, #404]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0b8      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c94:	4b59      	ldr	r3, [pc, #356]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	4a58      	ldr	r2, [pc, #352]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cac:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a52      	ldr	r2, [pc, #328]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb8:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	494d      	ldr	r1, [pc, #308]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d040      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d115      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e07f      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d107      	bne.n	8002d06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf6:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e073      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e06b      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d16:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 0203 	bic.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	4936      	ldr	r1, [pc, #216]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d28:	f7fe fc98 	bl	800165c <HAL_GetTick>
 8002d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d30:	f7fe fc94 	bl	800165c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e053      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 020c 	and.w	r2, r3, #12
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d1eb      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d210      	bcs.n	8002d88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 020f 	bic.w	r2, r3, #15
 8002d6e:	4922      	ldr	r1, [pc, #136]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b20      	ldr	r3, [pc, #128]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e032      	b.n	8002dee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4916      	ldr	r1, [pc, #88]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002db2:	4b12      	ldr	r3, [pc, #72]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	490e      	ldr	r1, [pc, #56]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dc6:	f000 f821 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	490a      	ldr	r1, [pc, #40]	; (8002e00 <HAL_RCC_ClockConfig+0x1cc>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	fa22 f303 	lsr.w	r3, r2, r3
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1d0>)
 8002de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <HAL_RCC_ClockConfig+0x1d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fbf4 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023c00 	.word	0x40023c00
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08007660 	.word	0x08007660
 8002e04:	20000014 	.word	0x20000014
 8002e08:	20000018 	.word	0x20000018

08002e0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e10:	b094      	sub	sp, #80	; 0x50
 8002e12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	647b      	str	r3, [r7, #68]	; 0x44
 8002e18:	2300      	movs	r3, #0
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e24:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 030c 	and.w	r3, r3, #12
 8002e2c:	2b08      	cmp	r3, #8
 8002e2e:	d00d      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x40>
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	f200 80e1 	bhi.w	8002ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x34>
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e3e:	e0db      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b73      	ldr	r3, [pc, #460]	; (8003010 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e44:	e0db      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e4a:	e0d8      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e54:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d063      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e62:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	099b      	lsrs	r3, r3, #6
 8002e68:	2200      	movs	r2, #0
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e74:	633b      	str	r3, [r7, #48]	; 0x30
 8002e76:	2300      	movs	r3, #0
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	f04f 0000 	mov.w	r0, #0
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	0159      	lsls	r1, r3, #5
 8002e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e90:	0150      	lsls	r0, r2, #5
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4621      	mov	r1, r4
 8002e98:	1a51      	subs	r1, r2, r1
 8002e9a:	6139      	str	r1, [r7, #16]
 8002e9c:	4629      	mov	r1, r5
 8002e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	018b      	lsls	r3, r1, #6
 8002eb4:	4651      	mov	r1, sl
 8002eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eba:	4651      	mov	r1, sl
 8002ebc:	018a      	lsls	r2, r1, #6
 8002ebe:	4651      	mov	r1, sl
 8002ec0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ed6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ede:	4690      	mov	r8, r2
 8002ee0:	4699      	mov	r9, r3
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	eb18 0303 	adds.w	r3, r8, r3
 8002ee8:	60bb      	str	r3, [r7, #8]
 8002eea:	462b      	mov	r3, r5
 8002eec:	eb49 0303 	adc.w	r3, r9, r3
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 0300 	mov.w	r3, #0
 8002efa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002efe:	4629      	mov	r1, r5
 8002f00:	024b      	lsls	r3, r1, #9
 8002f02:	4621      	mov	r1, r4
 8002f04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f08:	4621      	mov	r1, r4
 8002f0a:	024a      	lsls	r2, r1, #9
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f12:	2200      	movs	r2, #0
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f1c:	f7fd f9c8 	bl	80002b0 <__aeabi_uldivmod>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4613      	mov	r3, r2
 8002f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f28:	e058      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2a:	4b38      	ldr	r3, [pc, #224]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	099b      	lsrs	r3, r3, #6
 8002f30:	2200      	movs	r2, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	4611      	mov	r1, r2
 8002f36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f3a:	623b      	str	r3, [r7, #32]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	0159      	lsls	r1, r3, #5
 8002f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f56:	0150      	lsls	r0, r2, #5
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f62:	4649      	mov	r1, r9
 8002f64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f80:	eb63 050b 	sbc.w	r5, r3, fp
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	00eb      	lsls	r3, r5, #3
 8002f8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f92:	00e2      	lsls	r2, r4, #3
 8002f94:	4614      	mov	r4, r2
 8002f96:	461d      	mov	r5, r3
 8002f98:	4643      	mov	r3, r8
 8002f9a:	18e3      	adds	r3, r4, r3
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	464b      	mov	r3, r9
 8002fa0:	eb45 0303 	adc.w	r3, r5, r3
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	028b      	lsls	r3, r1, #10
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	028a      	lsls	r2, r1, #10
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	61fa      	str	r2, [r7, #28]
 8002fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd0:	f7fd f96e 	bl	80002b0 <__aeabi_uldivmod>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4613      	mov	r3, r2
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002fec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ff6:	e002      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003000:	4618      	mov	r0, r3
 8003002:	3750      	adds	r7, #80	; 0x50
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	00f42400 	.word	0x00f42400
 8003014:	007a1200 	.word	0x007a1200

08003018 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_RCC_GetHCLKFreq+0x14>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000014 	.word	0x20000014

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003034:	f7ff fff0 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0a9b      	lsrs	r3, r3, #10
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4903      	ldr	r1, [pc, #12]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08007670 	.word	0x08007670

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800305c:	f7ff ffdc 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	0b5b      	lsrs	r3, r3, #13
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <HAL_RCC_GetPCLK2Freq+0x24>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	08007670 	.word	0x08007670

08003080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800308c:	2300      	movs	r3, #0
 800308e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003098:	2300      	movs	r3, #0
 800309a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d012      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030a8:	4b69      	ldr	r3, [pc, #420]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a68      	ldr	r2, [pc, #416]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030b2:	6093      	str	r3, [r2, #8]
 80030b4:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	4964      	ldr	r1, [pc, #400]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030ca:	2301      	movs	r3, #1
 80030cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030da:	4b5d      	ldr	r3, [pc, #372]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	4959      	ldr	r1, [pc, #356]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030f8:	d101      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003106:	2301      	movs	r3, #1
 8003108:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d017      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003116:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	494a      	ldr	r1, [pc, #296]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003134:	d101      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003136:	2301      	movs	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003142:	2301      	movs	r3, #1
 8003144:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	f000 808b 	beq.w	800327a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003164:	4b3a      	ldr	r3, [pc, #232]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4a39      	ldr	r2, [pc, #228]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316e:	6413      	str	r3, [r2, #64]	; 0x40
 8003170:	4b37      	ldr	r3, [pc, #220]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a34      	ldr	r2, [pc, #208]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fe fa68 	bl	800165c <HAL_GetTick>
 800318c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003190:	f7fe fa64 	bl	800165c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e357      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031a2:	4b2c      	ldr	r3, [pc, #176]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d035      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d02e      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031cc:	4b20      	ldr	r3, [pc, #128]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80031ee:	4a18      	ldr	r2, [pc, #96]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031f4:	4b16      	ldr	r3, [pc, #88]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d114      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fa2c 	bl	800165c <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003206:	e00a      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7fe fa28 	bl	800165c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e319      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0ee      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003236:	d111      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003246:	400b      	ands	r3, r1
 8003248:	4901      	ldr	r1, [pc, #4]	; (8003250 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	608b      	str	r3, [r1, #8]
 800324e:	e00b      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003250:	40023800 	.word	0x40023800
 8003254:	40007000 	.word	0x40007000
 8003258:	0ffffcff 	.word	0x0ffffcff
 800325c:	4baa      	ldr	r3, [pc, #680]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4aa9      	ldr	r2, [pc, #676]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003262:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	4ba7      	ldr	r3, [pc, #668]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003274:	49a4      	ldr	r1, [pc, #656]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003276:	4313      	orrs	r3, r2
 8003278:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d010      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003286:	4ba0      	ldr	r3, [pc, #640]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328c:	4a9e      	ldr	r2, [pc, #632]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003292:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003296:	4b9c      	ldr	r3, [pc, #624]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003298:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	4999      	ldr	r1, [pc, #612]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032b4:	4b94      	ldr	r3, [pc, #592]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c2:	4991      	ldr	r1, [pc, #580]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032d6:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e4:	4988      	ldr	r1, [pc, #544]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003306:	4980      	ldr	r1, [pc, #512]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800331a:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	4977      	ldr	r1, [pc, #476]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800333c:	4b72      	ldr	r3, [pc, #456]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	496f      	ldr	r1, [pc, #444]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800335e:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f023 020c 	bic.w	r2, r3, #12
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336c:	4966      	ldr	r1, [pc, #408]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338e:	495e      	ldr	r1, [pc, #376]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a2:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033b0:	4955      	ldr	r1, [pc, #340]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	494d      	ldr	r1, [pc, #308]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80033e6:	4b48      	ldr	r3, [pc, #288]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4944      	ldr	r1, [pc, #272]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00a      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003416:	493c      	ldr	r1, [pc, #240]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003418:	4313      	orrs	r3, r2
 800341a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00a      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003438:	4933      	ldr	r1, [pc, #204]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800344c:	4b2e      	ldr	r3, [pc, #184]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345a:	492b      	ldr	r1, [pc, #172]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d011      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003474:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347c:	4922      	ldr	r1, [pc, #136]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800348c:	d101      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800348e:	2301      	movs	r3, #1
 8003490:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800349e:	2301      	movs	r3, #1
 80034a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	4912      	ldr	r1, [pc, #72]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e0:	4909      	ldr	r1, [pc, #36]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d006      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 80d9 	beq.w	80036ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a01      	ldr	r2, [pc, #4]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003506:	e001      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003508:	40023800 	.word	0x40023800
 800350c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350e:	f7fe f8a5 	bl	800165c <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003516:	f7fe f8a1 	bl	800165c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b64      	cmp	r3, #100	; 0x64
 8003522:	d901      	bls.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e194      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d021      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003544:	2b00      	cmp	r3, #0
 8003546:	d11d      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003548:	4b64      	ldr	r3, [pc, #400]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354e:	0c1b      	lsrs	r3, r3, #16
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003556:	4b61      	ldr	r3, [pc, #388]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355c:	0e1b      	lsrs	r3, r3, #24
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	019a      	lsls	r2, r3, #6
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	041b      	lsls	r3, r3, #16
 800356e:	431a      	orrs	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	071b      	lsls	r3, r3, #28
 800357c:	4957      	ldr	r1, [pc, #348]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d004      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02e      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ae:	d129      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035b0:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035be:	4b47      	ldr	r3, [pc, #284]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c4:	0f1b      	lsrs	r3, r3, #28
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	019a      	lsls	r2, r3, #6
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	061b      	lsls	r3, r3, #24
 80035de:	431a      	orrs	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	071b      	lsls	r3, r3, #28
 80035e4:	493d      	ldr	r1, [pc, #244]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035f2:	f023 021f 	bic.w	r2, r3, #31
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	3b01      	subs	r3, #1
 80035fc:	4937      	ldr	r1, [pc, #220]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003610:	4b32      	ldr	r3, [pc, #200]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003612:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003616:	0e1b      	lsrs	r3, r3, #24
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800361e:	4b2f      	ldr	r3, [pc, #188]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003624:	0f1b      	lsrs	r3, r3, #28
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	019a      	lsls	r2, r3, #6
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	431a      	orrs	r2, r3
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	061b      	lsls	r3, r3, #24
 800363e:	431a      	orrs	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	071b      	lsls	r3, r3, #28
 8003644:	4925      	ldr	r1, [pc, #148]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003646:	4313      	orrs	r3, r2
 8003648:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d011      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	019a      	lsls	r2, r3, #6
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	071b      	lsls	r3, r3, #28
 8003674:	4919      	ldr	r1, [pc, #100]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003682:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003688:	f7fd ffe8 	bl	800165c <HAL_GetTick>
 800368c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003690:	f7fd ffe4 	bl	800165c <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0d7      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 80cd 	bne.w	8003850 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c2:	f7fd ffcb 	bl	800165c <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036ca:	f7fd ffc7 	bl	800165c <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b64      	cmp	r3, #100	; 0x64
 80036d6:	d903      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0ba      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80036dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ec:	d0ed      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800370a:	2b00      	cmp	r3, #0
 800370c:	d02e      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d12a      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003716:	4b51      	ldr	r3, [pc, #324]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003724:	4b4d      	ldr	r3, [pc, #308]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372a:	0f1b      	lsrs	r3, r3, #28
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	019a      	lsls	r2, r3, #6
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	061b      	lsls	r3, r3, #24
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	071b      	lsls	r3, r3, #28
 800374a:	4944      	ldr	r1, [pc, #272]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003758:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	493d      	ldr	r1, [pc, #244]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d022      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003780:	d11d      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003782:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	0e1b      	lsrs	r3, r3, #24
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003790:	4b32      	ldr	r3, [pc, #200]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	0f1b      	lsrs	r3, r3, #28
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	019a      	lsls	r2, r3, #6
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	041b      	lsls	r3, r3, #16
 80037aa:	431a      	orrs	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	071b      	lsls	r3, r3, #28
 80037b6:	4929      	ldr	r1, [pc, #164]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d028      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	0e1b      	lsrs	r3, r3, #24
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037d8:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	019a      	lsls	r2, r3, #6
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	431a      	orrs	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	4917      	ldr	r1, [pc, #92]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800380c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	4911      	ldr	r1, [pc, #68]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0e      	ldr	r2, [pc, #56]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003828:	f7fd ff18 	bl	800165c <HAL_GetTick>
 800382c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003830:	f7fd ff14 	bl	800165c <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	; 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e007      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800384a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800384e:	d1ef      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e09d      	b.n	80039ae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003882:	d009      	beq.n	8003898 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
 800388a:	e005      	b.n	8003898 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fd fc64 	bl	8001180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d8:	d902      	bls.n	80038e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e002      	b.n	80038e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038ee:	d007      	beq.n	8003900 <HAL_SPI_Init+0xa0>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f8:	d002      	beq.n	8003900 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003942:	ea42 0103 	orr.w	r1, r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	f003 0204 	and.w	r2, r3, #4
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	431a      	orrs	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800397c:	ea42 0103 	orr.w	r1, r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69da      	ldr	r2, [r3, #28]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800399c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b088      	sub	sp, #32
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	4613      	mov	r3, r2
 80039c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_SPI_Transmit+0x22>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e158      	b.n	8003c8a <HAL_SPI_Transmit+0x2d4>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039e0:	f7fd fe3c 	bl	800165c <HAL_GetTick>
 80039e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d002      	beq.n	80039fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039f6:	2302      	movs	r3, #2
 80039f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039fa:	e13d      	b.n	8003c78 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0x52>
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a0c:	e134      	b.n	8003c78 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a58:	d10f      	bne.n	8003a7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d007      	beq.n	8003a98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aa0:	d94b      	bls.n	8003b3a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_SPI_Transmit+0xfa>
 8003aaa:	8afb      	ldrh	r3, [r7, #22]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d13e      	bne.n	8003b2e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ad4:	e02b      	b.n	8003b2e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d112      	bne.n	8003b0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	1c9a      	adds	r2, r3, #2
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b08:	e011      	b.n	8003b2e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0a:	f7fd fda7 	bl	800165c <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d803      	bhi.n	8003b22 <HAL_SPI_Transmit+0x16c>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b20:	d102      	bne.n	8003b28 <HAL_SPI_Transmit+0x172>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d102      	bne.n	8003b2e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b2c:	e0a4      	b.n	8003c78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1ce      	bne.n	8003ad6 <HAL_SPI_Transmit+0x120>
 8003b38:	e07c      	b.n	8003c34 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_SPI_Transmit+0x192>
 8003b42:	8afb      	ldrh	r3, [r7, #22]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d170      	bne.n	8003c2a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d912      	bls.n	8003b78 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b62:	1c9a      	adds	r2, r3, #2
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b02      	subs	r3, #2
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b76:	e058      	b.n	8003c2a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b9e:	e044      	b.n	8003c2a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d12b      	bne.n	8003c06 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d912      	bls.n	8003bde <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	881a      	ldrh	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	1c9a      	adds	r2, r3, #2
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b02      	subs	r3, #2
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bdc:	e025      	b.n	8003c2a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	7812      	ldrb	r2, [r2, #0]
 8003bea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c04:	e011      	b.n	8003c2a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c06:	f7fd fd29 	bl	800165c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d803      	bhi.n	8003c1e <HAL_SPI_Transmit+0x268>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c1c:	d102      	bne.n	8003c24 <HAL_SPI_Transmit+0x26e>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c28:	e026      	b.n	8003c78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1b5      	bne.n	8003ba0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	6839      	ldr	r1, [r7, #0]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fb13 	bl	8004264 <SPI_EndRxTxTransaction>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	77fb      	strb	r3, [r7, #31]
 8003c74:	e000      	b.n	8003c78 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003c76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_SPI_Transmit_DMA+0x20>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0d8      	b.n	8003e66 <HAL_SPI_Transmit_DMA+0x1d2>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d002      	beq.n	8003cce <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ccc:	e0c6      	b.n	8003e5c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <HAL_SPI_Transmit_DMA+0x46>
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cde:	e0bd      	b.n	8003e5c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d2a:	d10f      	bne.n	8003d4c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	4a47      	ldr	r2, [pc, #284]	; (8003e70 <HAL_SPI_Transmit_DMA+0x1dc>)
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	4a46      	ldr	r2, [pc, #280]	; (8003e74 <HAL_SPI_Transmit_DMA+0x1e0>)
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d60:	4a45      	ldr	r2, [pc, #276]	; (8003e78 <HAL_SPI_Transmit_DMA+0x1e4>)
 8003d62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	2200      	movs	r2, #0
 8003d6a:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d7a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d84:	d82d      	bhi.n	8003de2 <HAL_SPI_Transmit_DMA+0x14e>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d90:	d127      	bne.n	8003de2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dae:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dbe:	e010      	b.n	8003de2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dce:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	085b      	lsrs	r3, r3, #1
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	4619      	mov	r1, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	330c      	adds	r3, #12
 8003df2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dfa:	f7fd fe1f 	bl	8001a3c <HAL_DMA_Start_IT>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e08:	f043 0210 	orr.w	r2, r3, #16
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003e1c:	e01e      	b.n	8003e5c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d007      	beq.n	8003e3c <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0220 	orr.w	r2, r2, #32
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	08003fcb 	.word	0x08003fcb
 8003e74:	08003f23 	.word	0x08003f23
 8003e78:	08003fe7 	.word	0x08003fe7

08003e7c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00f      	beq.n	8003eb0 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7fd fe31 	bl	8001afc <HAL_DMA_Abort>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea4:	f043 0210 	orr.w	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00f      	beq.n	8003ed8 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd fe1d 	bl	8001afc <HAL_DMA_Abort>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	f043 0210 	orr.w	r2, r3, #16
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0203 	bic.w	r2, r2, #3
 8003ee6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b083      	sub	sp, #12
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b086      	sub	sp, #24
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f30:	f7fd fb94 	bl	800165c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f44:	d03b      	beq.n	8003fbe <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0220 	bic.w	r2, r2, #32
 8003f54:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0202 	bic.w	r2, r2, #2
 8003f64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	2164      	movs	r1, #100	; 0x64
 8003f6a:	6978      	ldr	r0, [r7, #20]
 8003f6c:	f000 f97a 	bl	8004264 <SPI_EndRxTxTransaction>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7a:	f043 0220 	orr.w	r2, r3, #32
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f7ff ffa9 	bl	8003f0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fbc:	e002      	b.n	8003fc4 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f7fd f894 	bl	80010ec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff ff8e 	bl	8003efa <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0203 	bic.w	r2, r2, #3
 8004002:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff ff78 	bl	8003f0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004038:	f7fd fb10 	bl	800165c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	4413      	add	r3, r2
 8004046:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004048:	f7fd fb08 	bl	800165c <HAL_GetTick>
 800404c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	015b      	lsls	r3, r3, #5
 8004054:	0d1b      	lsrs	r3, r3, #20
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405e:	e054      	b.n	800410a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004066:	d050      	beq.n	800410a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004068:	f7fd faf8 	bl	800165c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	429a      	cmp	r2, r3
 8004076:	d902      	bls.n	800407e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d13d      	bne.n	80040fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800408c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004096:	d111      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a0:	d004      	beq.n	80040ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d107      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d10f      	bne.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e017      	b.n	800412a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3b01      	subs	r3, #1
 8004108:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	429a      	cmp	r2, r3
 8004118:	bf0c      	ite	eq
 800411a:	2301      	moveq	r3, #1
 800411c:	2300      	movne	r3, #0
 800411e:	b2db      	uxtb	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	429a      	cmp	r2, r3
 8004126:	d19b      	bne.n	8004060 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000014 	.word	0x20000014

08004138 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800414a:	f7fd fa87 	bl	800165c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	4413      	add	r3, r2
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800415a:	f7fd fa7f 	bl	800165c <HAL_GetTick>
 800415e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004168:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00da      	lsls	r2, r3, #3
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	0d1b      	lsrs	r3, r3, #20
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	fb02 f303 	mul.w	r3, r2, r3
 800417e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004180:	e060      	b.n	8004244 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004188:	d107      	bne.n	800419a <SPI_WaitFifoStateUntilTimeout+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d104      	bne.n	800419a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004198:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a0:	d050      	beq.n	8004244 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a2:	f7fd fa5b 	bl	800165c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d902      	bls.n	80041b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d13d      	bne.n	8004234 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041d0:	d111      	bne.n	80041f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041da:	d004      	beq.n	80041e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	d107      	bne.n	80041f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041fe:	d10f      	bne.n	8004220 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800421e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e010      	b.n	8004256 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3b01      	subs	r3, #1
 8004242:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d196      	bne.n	8004182 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3728      	adds	r7, #40	; 0x28
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000014 	.word	0x20000014

08004264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2200      	movs	r2, #0
 8004278:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f7ff ff5b 	bl	8004138 <SPI_WaitFifoStateUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d007      	beq.n	8004298 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428c:	f043 0220 	orr.w	r2, r3, #32
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e046      	b.n	8004326 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004298:	4b25      	ldr	r3, [pc, #148]	; (8004330 <SPI_EndRxTxTransaction+0xcc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <SPI_EndRxTxTransaction+0xd0>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0d5b      	lsrs	r3, r3, #21
 80042a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042a8:	fb02 f303 	mul.w	r3, r2, r3
 80042ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b6:	d112      	bne.n	80042de <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff feb0 	bl	8004028 <SPI_WaitFlagStateUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e023      	b.n	8004326 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f4:	2b80      	cmp	r3, #128	; 0x80
 80042f6:	d0f2      	beq.n	80042de <SPI_EndRxTxTransaction+0x7a>
 80042f8:	e000      	b.n	80042fc <SPI_EndRxTxTransaction+0x98>
        break;
 80042fa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2200      	movs	r2, #0
 8004304:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f7ff ff15 	bl	8004138 <SPI_WaitFifoStateUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e000      	b.n	8004326 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000014 	.word	0x20000014
 8004334:	165e9f81 	.word	0x165e9f81

08004338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e040      	b.n	80043cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc ffae 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0201 	bic.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f82c 	bl	80043d4 <UART_SetConfig>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e022      	b.n	80043cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa84 	bl	800489c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fb0b 	bl	80049e0 <UART_CheckIdleState>
 80043ca:	4603      	mov	r3, r0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4ba6      	ldr	r3, [pc, #664]	; (8004698 <UART_SetConfig+0x2c4>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	430b      	orrs	r3, r1
 800440a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a94      	ldr	r2, [pc, #592]	; (800469c <UART_SetConfig+0x2c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d120      	bne.n	8004492 <UART_SetConfig+0xbe>
 8004450:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <UART_SetConfig+0x2cc>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d816      	bhi.n	800448c <UART_SetConfig+0xb8>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x90>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004475 	.word	0x08004475
 8004468:	08004481 	.word	0x08004481
 800446c:	0800447b 	.word	0x0800447b
 8004470:	08004487 	.word	0x08004487
 8004474:	2301      	movs	r3, #1
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e150      	b.n	800471c <UART_SetConfig+0x348>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e14d      	b.n	800471c <UART_SetConfig+0x348>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e14a      	b.n	800471c <UART_SetConfig+0x348>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e147      	b.n	800471c <UART_SetConfig+0x348>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e144      	b.n	800471c <UART_SetConfig+0x348>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a83      	ldr	r2, [pc, #524]	; (80046a4 <UART_SetConfig+0x2d0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d132      	bne.n	8004502 <UART_SetConfig+0x12e>
 800449c:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <UART_SetConfig+0x2cc>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d828      	bhi.n	80044fc <UART_SetConfig+0x128>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0xdc>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044fd 	.word	0x080044fd
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044fd 	.word	0x080044fd
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	080044eb 	.word	0x080044eb
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	080044f7 	.word	0x080044f7
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e118      	b.n	800471c <UART_SetConfig+0x348>
 80044ea:	2302      	movs	r3, #2
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e115      	b.n	800471c <UART_SetConfig+0x348>
 80044f0:	2304      	movs	r3, #4
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e112      	b.n	800471c <UART_SetConfig+0x348>
 80044f6:	2308      	movs	r3, #8
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e10f      	b.n	800471c <UART_SetConfig+0x348>
 80044fc:	2310      	movs	r3, #16
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e10c      	b.n	800471c <UART_SetConfig+0x348>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a68      	ldr	r2, [pc, #416]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d120      	bne.n	800454e <UART_SetConfig+0x17a>
 800450c:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <UART_SetConfig+0x2cc>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	d013      	beq.n	8004542 <UART_SetConfig+0x16e>
 800451a:	2b30      	cmp	r3, #48	; 0x30
 800451c:	d814      	bhi.n	8004548 <UART_SetConfig+0x174>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d009      	beq.n	8004536 <UART_SetConfig+0x162>
 8004522:	2b20      	cmp	r3, #32
 8004524:	d810      	bhi.n	8004548 <UART_SetConfig+0x174>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <UART_SetConfig+0x15c>
 800452a:	2b10      	cmp	r3, #16
 800452c:	d006      	beq.n	800453c <UART_SetConfig+0x168>
 800452e:	e00b      	b.n	8004548 <UART_SetConfig+0x174>
 8004530:	2300      	movs	r3, #0
 8004532:	77fb      	strb	r3, [r7, #31]
 8004534:	e0f2      	b.n	800471c <UART_SetConfig+0x348>
 8004536:	2302      	movs	r3, #2
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e0ef      	b.n	800471c <UART_SetConfig+0x348>
 800453c:	2304      	movs	r3, #4
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e0ec      	b.n	800471c <UART_SetConfig+0x348>
 8004542:	2308      	movs	r3, #8
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e0e9      	b.n	800471c <UART_SetConfig+0x348>
 8004548:	2310      	movs	r3, #16
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e0e6      	b.n	800471c <UART_SetConfig+0x348>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a56      	ldr	r2, [pc, #344]	; (80046ac <UART_SetConfig+0x2d8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d120      	bne.n	800459a <UART_SetConfig+0x1c6>
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <UART_SetConfig+0x2cc>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004562:	2bc0      	cmp	r3, #192	; 0xc0
 8004564:	d013      	beq.n	800458e <UART_SetConfig+0x1ba>
 8004566:	2bc0      	cmp	r3, #192	; 0xc0
 8004568:	d814      	bhi.n	8004594 <UART_SetConfig+0x1c0>
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d009      	beq.n	8004582 <UART_SetConfig+0x1ae>
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d810      	bhi.n	8004594 <UART_SetConfig+0x1c0>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <UART_SetConfig+0x1a8>
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d006      	beq.n	8004588 <UART_SetConfig+0x1b4>
 800457a:	e00b      	b.n	8004594 <UART_SetConfig+0x1c0>
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e0cc      	b.n	800471c <UART_SetConfig+0x348>
 8004582:	2302      	movs	r3, #2
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e0c9      	b.n	800471c <UART_SetConfig+0x348>
 8004588:	2304      	movs	r3, #4
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e0c6      	b.n	800471c <UART_SetConfig+0x348>
 800458e:	2308      	movs	r3, #8
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e0c3      	b.n	800471c <UART_SetConfig+0x348>
 8004594:	2310      	movs	r3, #16
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e0c0      	b.n	800471c <UART_SetConfig+0x348>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a44      	ldr	r2, [pc, #272]	; (80046b0 <UART_SetConfig+0x2dc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d125      	bne.n	80045f0 <UART_SetConfig+0x21c>
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <UART_SetConfig+0x2cc>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b2:	d017      	beq.n	80045e4 <UART_SetConfig+0x210>
 80045b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b8:	d817      	bhi.n	80045ea <UART_SetConfig+0x216>
 80045ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045be:	d00b      	beq.n	80045d8 <UART_SetConfig+0x204>
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	d811      	bhi.n	80045ea <UART_SetConfig+0x216>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <UART_SetConfig+0x1fe>
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d006      	beq.n	80045de <UART_SetConfig+0x20a>
 80045d0:	e00b      	b.n	80045ea <UART_SetConfig+0x216>
 80045d2:	2300      	movs	r3, #0
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0a1      	b.n	800471c <UART_SetConfig+0x348>
 80045d8:	2302      	movs	r3, #2
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e09e      	b.n	800471c <UART_SetConfig+0x348>
 80045de:	2304      	movs	r3, #4
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e09b      	b.n	800471c <UART_SetConfig+0x348>
 80045e4:	2308      	movs	r3, #8
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e098      	b.n	800471c <UART_SetConfig+0x348>
 80045ea:	2310      	movs	r3, #16
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e095      	b.n	800471c <UART_SetConfig+0x348>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <UART_SetConfig+0x2e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d125      	bne.n	8004646 <UART_SetConfig+0x272>
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <UART_SetConfig+0x2cc>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004608:	d017      	beq.n	800463a <UART_SetConfig+0x266>
 800460a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800460e:	d817      	bhi.n	8004640 <UART_SetConfig+0x26c>
 8004610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004614:	d00b      	beq.n	800462e <UART_SetConfig+0x25a>
 8004616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461a:	d811      	bhi.n	8004640 <UART_SetConfig+0x26c>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <UART_SetConfig+0x254>
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d006      	beq.n	8004634 <UART_SetConfig+0x260>
 8004626:	e00b      	b.n	8004640 <UART_SetConfig+0x26c>
 8004628:	2301      	movs	r3, #1
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e076      	b.n	800471c <UART_SetConfig+0x348>
 800462e:	2302      	movs	r3, #2
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e073      	b.n	800471c <UART_SetConfig+0x348>
 8004634:	2304      	movs	r3, #4
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e070      	b.n	800471c <UART_SetConfig+0x348>
 800463a:	2308      	movs	r3, #8
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e06d      	b.n	800471c <UART_SetConfig+0x348>
 8004640:	2310      	movs	r3, #16
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e06a      	b.n	800471c <UART_SetConfig+0x348>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <UART_SetConfig+0x2e4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d138      	bne.n	80046c2 <UART_SetConfig+0x2ee>
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <UART_SetConfig+0x2cc>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800465a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800465e:	d017      	beq.n	8004690 <UART_SetConfig+0x2bc>
 8004660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004664:	d82a      	bhi.n	80046bc <UART_SetConfig+0x2e8>
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466a:	d00b      	beq.n	8004684 <UART_SetConfig+0x2b0>
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d824      	bhi.n	80046bc <UART_SetConfig+0x2e8>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <UART_SetConfig+0x2aa>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d006      	beq.n	800468a <UART_SetConfig+0x2b6>
 800467c:	e01e      	b.n	80046bc <UART_SetConfig+0x2e8>
 800467e:	2300      	movs	r3, #0
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e04b      	b.n	800471c <UART_SetConfig+0x348>
 8004684:	2302      	movs	r3, #2
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e048      	b.n	800471c <UART_SetConfig+0x348>
 800468a:	2304      	movs	r3, #4
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e045      	b.n	800471c <UART_SetConfig+0x348>
 8004690:	2308      	movs	r3, #8
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e042      	b.n	800471c <UART_SetConfig+0x348>
 8004696:	bf00      	nop
 8004698:	efff69f3 	.word	0xefff69f3
 800469c:	40011000 	.word	0x40011000
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40004400 	.word	0x40004400
 80046a8:	40004800 	.word	0x40004800
 80046ac:	40004c00 	.word	0x40004c00
 80046b0:	40005000 	.word	0x40005000
 80046b4:	40011400 	.word	0x40011400
 80046b8:	40007800 	.word	0x40007800
 80046bc:	2310      	movs	r3, #16
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e02c      	b.n	800471c <UART_SetConfig+0x348>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a72      	ldr	r2, [pc, #456]	; (8004890 <UART_SetConfig+0x4bc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d125      	bne.n	8004718 <UART_SetConfig+0x344>
 80046cc:	4b71      	ldr	r3, [pc, #452]	; (8004894 <UART_SetConfig+0x4c0>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046da:	d017      	beq.n	800470c <UART_SetConfig+0x338>
 80046dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046e0:	d817      	bhi.n	8004712 <UART_SetConfig+0x33e>
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d00b      	beq.n	8004700 <UART_SetConfig+0x32c>
 80046e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ec:	d811      	bhi.n	8004712 <UART_SetConfig+0x33e>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <UART_SetConfig+0x326>
 80046f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f6:	d006      	beq.n	8004706 <UART_SetConfig+0x332>
 80046f8:	e00b      	b.n	8004712 <UART_SetConfig+0x33e>
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e00d      	b.n	800471c <UART_SetConfig+0x348>
 8004700:	2302      	movs	r3, #2
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e00a      	b.n	800471c <UART_SetConfig+0x348>
 8004706:	2304      	movs	r3, #4
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e007      	b.n	800471c <UART_SetConfig+0x348>
 800470c:	2308      	movs	r3, #8
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e004      	b.n	800471c <UART_SetConfig+0x348>
 8004712:	2310      	movs	r3, #16
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x348>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d15b      	bne.n	80047de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d828      	bhi.n	800477e <UART_SetConfig+0x3aa>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x360>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fe fc6a 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 800475c:	61b8      	str	r0, [r7, #24]
        break;
 800475e:	e013      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fe fc7a 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8004764:	61b8      	str	r0, [r7, #24]
        break;
 8004766:	e00f      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <UART_SetConfig+0x4c4>)
 800476a:	61bb      	str	r3, [r7, #24]
        break;
 800476c:	e00c      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fe fb4d 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8004772:	61b8      	str	r0, [r7, #24]
        break;
 8004774:	e008      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	61bb      	str	r3, [r7, #24]
        break;
 800477c:	e004      	b.n	8004788 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	77bb      	strb	r3, [r7, #30]
        break;
 8004786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d074      	beq.n	8004878 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	005a      	lsls	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d916      	bls.n	80047d8 <UART_SetConfig+0x404>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d212      	bcs.n	80047d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f023 030f 	bic.w	r3, r3, #15
 80047ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	89fb      	ldrh	r3, [r7, #14]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	89fa      	ldrh	r2, [r7, #14]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e04f      	b.n	8004878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77bb      	strb	r3, [r7, #30]
 80047dc:	e04c      	b.n	8004878 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047de:	7ffb      	ldrb	r3, [r7, #31]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d828      	bhi.n	8004836 <UART_SetConfig+0x462>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x418>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004837 	.word	0x08004837
 80047fc:	08004827 	.word	0x08004827
 8004800:	08004837 	.word	0x08004837
 8004804:	08004837 	.word	0x08004837
 8004808:	08004837 	.word	0x08004837
 800480c:	0800482f 	.word	0x0800482f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe fc0e 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8004814:	61b8      	str	r0, [r7, #24]
        break;
 8004816:	e013      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fe fc1e 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 800481c:	61b8      	str	r0, [r7, #24]
        break;
 800481e:	e00f      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004820:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <UART_SetConfig+0x4c4>)
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e00c      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004826:	f7fe faf1 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 800482a:	61b8      	str	r0, [r7, #24]
        break;
 800482c:	e008      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004832:	61bb      	str	r3, [r7, #24]
        break;
 8004834:	e004      	b.n	8004840 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	77bb      	strb	r3, [r7, #30]
        break;
 800483e:	bf00      	nop
    }

    if (pclk != 0U)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	085a      	lsrs	r2, r3, #1
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	441a      	add	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d909      	bls.n	8004874 <UART_SetConfig+0x4a0>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004866:	d205      	bcs.n	8004874 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	e001      	b.n	8004878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004884:	7fbb      	ldrb	r3, [r7, #30]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40007c00 	.word	0x40007c00
 8004894:	40023800 	.word	0x40023800
 8004898:	00f42400 	.word	0x00f42400

0800489c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499a:	d10a      	bne.n	80049b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049f0:	f7fc fe34 	bl	800165c <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10e      	bne.n	8004a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f81b 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e011      	b.n	8004a46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b09c      	sub	sp, #112	; 0x70
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	e0a7      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	f000 80a3 	beq.w	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fc fdf7 	bl	800165c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13f      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a94:	667b      	str	r3, [r7, #100]	; 0x64
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e6      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ad2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e068      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d050      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d148      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b7a:	623a      	str	r2, [r7, #32]
 8004b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	69f9      	ldr	r1, [r7, #28]
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e010      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f43f af48 	beq.w	8004a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3770      	adds	r7, #112	; 0x70
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bdc:	b084      	sub	sp, #16
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	f107 001c 	add.w	r0, r7, #28
 8004bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d120      	bne.n	8004c36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <USB_CoreInit+0xac>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa96 	bl	800515c <USB_CoreReset>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e010      	b.n	8004c58 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa8a 	bl	800515c <USB_CoreReset>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10b      	bne.n	8004c76 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f043 0206 	orr.w	r2, r3, #6
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c82:	b004      	add	sp, #16
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	ffbdffbf 	.word	0xffbdffbf

08004c8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 0201 	bic.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d115      	bne.n	8004cfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7fc fcc9 	bl	8001674 <HAL_Delay>
      ms++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa29 	bl	8005140 <USB_GetMode>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d01e      	beq.n	8004d32 <USB_SetCurrentMode+0x84>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b31      	cmp	r3, #49	; 0x31
 8004cf8:	d9f0      	bls.n	8004cdc <USB_SetCurrentMode+0x2e>
 8004cfa:	e01a      	b.n	8004d32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d115      	bne.n	8004d2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f7fc fcb0 	bl	8001674 <HAL_Delay>
      ms++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa10 	bl	8005140 <USB_GetMode>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <USB_SetCurrentMode+0x84>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b31      	cmp	r3, #49	; 0x31
 8004d2a:	d9f0      	bls.n	8004d0e <USB_SetCurrentMode+0x60>
 8004d2c:	e001      	b.n	8004d32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e005      	b.n	8004d3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b32      	cmp	r3, #50	; 0x32
 8004d36:	d101      	bne.n	8004d3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d48:	b084      	sub	sp, #16
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e009      	b.n	8004d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	3340      	adds	r3, #64	; 0x40
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	2200      	movs	r2, #0
 8004d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0e      	cmp	r3, #14
 8004d80:	d9f2      	bls.n	8004d68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11c      	bne.n	8004dc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d96:	f043 0302 	orr.w	r3, r3, #2
 8004d9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e005      	b.n	8004dce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	4619      	mov	r1, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	461a      	mov	r2, r3
 8004dea:	680b      	ldr	r3, [r1, #0]
 8004dec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d10c      	bne.n	8004e0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f965 	bl	80050cc <USB_SetDevSpeed>
 8004e02:	e008      	b.n	8004e16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e04:	2101      	movs	r1, #1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f960 	bl	80050cc <USB_SetDevSpeed>
 8004e0c:	e003      	b.n	8004e16 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e0e:	2103      	movs	r1, #3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f95b 	bl	80050cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e16:	2110      	movs	r1, #16
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8f3 	bl	8005004 <USB_FlushTxFifo>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f91f 	bl	800506c <USB_FlushRxFifo>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	461a      	mov	r2, r3
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e043      	b.n	8004eea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e78:	d118      	bne.n	8004eac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e013      	b.n	8004ebe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e008      	b.n	8004ebe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b7      	bcc.n	8004e62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e043      	b.n	8004f80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0e:	d118      	bne.n	8004f42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	461a      	mov	r2, r3
 8004f24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e013      	b.n	8004f54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	e008      	b.n	8004f54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2300      	movs	r3, #0
 8004f52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b7      	bcc.n	8004ef8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f043 0210 	orr.w	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <USB_DevInit+0x2b4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f043 0208 	orr.w	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <USB_DevInit+0x2b8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff8:	b004      	add	sp, #16
 8004ffa:	4770      	bx	lr
 8004ffc:	803c3800 	.word	0x803c3800
 8005000:	40000004 	.word	0x40000004

08005004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <USB_FlushTxFifo+0x64>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e01b      	b.n	800505c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	daf2      	bge.n	8005012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	019b      	lsls	r3, r3, #6
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a08      	ldr	r2, [pc, #32]	; (8005068 <USB_FlushTxFifo+0x64>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e006      	b.n	800505c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b20      	cmp	r3, #32
 8005058:	d0f0      	beq.n	800503c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	00030d40 	.word	0x00030d40

0800506c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <USB_FlushRxFifo+0x5c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e018      	b.n	80050bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	daf2      	bge.n	8005078 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2210      	movs	r2, #16
 800509a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <USB_FlushRxFifo+0x5c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e006      	b.n	80050bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d0f0      	beq.n	800509c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	00030d40 	.word	0x00030d40

080050cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005118:	f023 0303 	bic.w	r3, r3, #3
 800511c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0301 	and.w	r3, r3, #1
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <USB_CoreReset+0x64>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e01b      	b.n	80051b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	daf2      	bge.n	8005168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f043 0201 	orr.w	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <USB_CoreReset+0x64>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e006      	b.n	80051b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d0f0      	beq.n	8005192 <USB_CoreReset+0x36>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	00030d40 	.word	0x00030d40

080051c4 <siprintf>:
 80051c4:	b40e      	push	{r1, r2, r3}
 80051c6:	b500      	push	{lr}
 80051c8:	b09c      	sub	sp, #112	; 0x70
 80051ca:	ab1d      	add	r3, sp, #116	; 0x74
 80051cc:	9002      	str	r0, [sp, #8]
 80051ce:	9006      	str	r0, [sp, #24]
 80051d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051d4:	4809      	ldr	r0, [pc, #36]	; (80051fc <siprintf+0x38>)
 80051d6:	9107      	str	r1, [sp, #28]
 80051d8:	9104      	str	r1, [sp, #16]
 80051da:	4909      	ldr	r1, [pc, #36]	; (8005200 <siprintf+0x3c>)
 80051dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e0:	9105      	str	r1, [sp, #20]
 80051e2:	6800      	ldr	r0, [r0, #0]
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	a902      	add	r1, sp, #8
 80051e8:	f000 f8d4 	bl	8005394 <_svfiprintf_r>
 80051ec:	9b02      	ldr	r3, [sp, #8]
 80051ee:	2200      	movs	r2, #0
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	b01c      	add	sp, #112	; 0x70
 80051f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80051f8:	b003      	add	sp, #12
 80051fa:	4770      	bx	lr
 80051fc:	2000006c 	.word	0x2000006c
 8005200:	ffff0208 	.word	0xffff0208

08005204 <_vsniprintf_r>:
 8005204:	b530      	push	{r4, r5, lr}
 8005206:	4614      	mov	r4, r2
 8005208:	2c00      	cmp	r4, #0
 800520a:	b09b      	sub	sp, #108	; 0x6c
 800520c:	4605      	mov	r5, r0
 800520e:	461a      	mov	r2, r3
 8005210:	da05      	bge.n	800521e <_vsniprintf_r+0x1a>
 8005212:	238b      	movs	r3, #139	; 0x8b
 8005214:	6003      	str	r3, [r0, #0]
 8005216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800521a:	b01b      	add	sp, #108	; 0x6c
 800521c:	bd30      	pop	{r4, r5, pc}
 800521e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005222:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005226:	bf14      	ite	ne
 8005228:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800522c:	4623      	moveq	r3, r4
 800522e:	9302      	str	r3, [sp, #8]
 8005230:	9305      	str	r3, [sp, #20]
 8005232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005236:	9100      	str	r1, [sp, #0]
 8005238:	9104      	str	r1, [sp, #16]
 800523a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800523e:	4669      	mov	r1, sp
 8005240:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005242:	f000 f8a7 	bl	8005394 <_svfiprintf_r>
 8005246:	1c43      	adds	r3, r0, #1
 8005248:	bfbc      	itt	lt
 800524a:	238b      	movlt	r3, #139	; 0x8b
 800524c:	602b      	strlt	r3, [r5, #0]
 800524e:	2c00      	cmp	r4, #0
 8005250:	d0e3      	beq.n	800521a <_vsniprintf_r+0x16>
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e7df      	b.n	800521a <_vsniprintf_r+0x16>
	...

0800525c <vsniprintf>:
 800525c:	b507      	push	{r0, r1, r2, lr}
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	460a      	mov	r2, r1
 8005264:	4601      	mov	r1, r0
 8005266:	4803      	ldr	r0, [pc, #12]	; (8005274 <vsniprintf+0x18>)
 8005268:	6800      	ldr	r0, [r0, #0]
 800526a:	f7ff ffcb 	bl	8005204 <_vsniprintf_r>
 800526e:	b003      	add	sp, #12
 8005270:	f85d fb04 	ldr.w	pc, [sp], #4
 8005274:	2000006c 	.word	0x2000006c

08005278 <memset>:
 8005278:	4402      	add	r2, r0
 800527a:	4603      	mov	r3, r0
 800527c:	4293      	cmp	r3, r2
 800527e:	d100      	bne.n	8005282 <memset+0xa>
 8005280:	4770      	bx	lr
 8005282:	f803 1b01 	strb.w	r1, [r3], #1
 8005286:	e7f9      	b.n	800527c <memset+0x4>

08005288 <__errno>:
 8005288:	4b01      	ldr	r3, [pc, #4]	; (8005290 <__errno+0x8>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	2000006c 	.word	0x2000006c

08005294 <__libc_init_array>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4d0d      	ldr	r5, [pc, #52]	; (80052cc <__libc_init_array+0x38>)
 8005298:	4c0d      	ldr	r4, [pc, #52]	; (80052d0 <__libc_init_array+0x3c>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	2600      	movs	r6, #0
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	d109      	bne.n	80052b8 <__libc_init_array+0x24>
 80052a4:	4d0b      	ldr	r5, [pc, #44]	; (80052d4 <__libc_init_array+0x40>)
 80052a6:	4c0c      	ldr	r4, [pc, #48]	; (80052d8 <__libc_init_array+0x44>)
 80052a8:	f000 fc6a 	bl	8005b80 <_init>
 80052ac:	1b64      	subs	r4, r4, r5
 80052ae:	10a4      	asrs	r4, r4, #2
 80052b0:	2600      	movs	r6, #0
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d105      	bne.n	80052c2 <__libc_init_array+0x2e>
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052bc:	4798      	blx	r3
 80052be:	3601      	adds	r6, #1
 80052c0:	e7ee      	b.n	80052a0 <__libc_init_array+0xc>
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c6:	4798      	blx	r3
 80052c8:	3601      	adds	r6, #1
 80052ca:	e7f2      	b.n	80052b2 <__libc_init_array+0x1e>
 80052cc:	080076bc 	.word	0x080076bc
 80052d0:	080076bc 	.word	0x080076bc
 80052d4:	080076bc 	.word	0x080076bc
 80052d8:	080076c0 	.word	0x080076c0

080052dc <__retarget_lock_acquire_recursive>:
 80052dc:	4770      	bx	lr

080052de <__retarget_lock_release_recursive>:
 80052de:	4770      	bx	lr

080052e0 <__ssputs_r>:
 80052e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052e4:	688e      	ldr	r6, [r1, #8]
 80052e6:	461f      	mov	r7, r3
 80052e8:	42be      	cmp	r6, r7
 80052ea:	680b      	ldr	r3, [r1, #0]
 80052ec:	4682      	mov	sl, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	4690      	mov	r8, r2
 80052f2:	d82c      	bhi.n	800534e <__ssputs_r+0x6e>
 80052f4:	898a      	ldrh	r2, [r1, #12]
 80052f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052fa:	d026      	beq.n	800534a <__ssputs_r+0x6a>
 80052fc:	6965      	ldr	r5, [r4, #20]
 80052fe:	6909      	ldr	r1, [r1, #16]
 8005300:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005304:	eba3 0901 	sub.w	r9, r3, r1
 8005308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800530c:	1c7b      	adds	r3, r7, #1
 800530e:	444b      	add	r3, r9
 8005310:	106d      	asrs	r5, r5, #1
 8005312:	429d      	cmp	r5, r3
 8005314:	bf38      	it	cc
 8005316:	461d      	movcc	r5, r3
 8005318:	0553      	lsls	r3, r2, #21
 800531a:	d527      	bpl.n	800536c <__ssputs_r+0x8c>
 800531c:	4629      	mov	r1, r5
 800531e:	f000 f957 	bl	80055d0 <_malloc_r>
 8005322:	4606      	mov	r6, r0
 8005324:	b360      	cbz	r0, 8005380 <__ssputs_r+0xa0>
 8005326:	6921      	ldr	r1, [r4, #16]
 8005328:	464a      	mov	r2, r9
 800532a:	f000 fbc7 	bl	8005abc <memcpy>
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	81a3      	strh	r3, [r4, #12]
 800533a:	6126      	str	r6, [r4, #16]
 800533c:	6165      	str	r5, [r4, #20]
 800533e:	444e      	add	r6, r9
 8005340:	eba5 0509 	sub.w	r5, r5, r9
 8005344:	6026      	str	r6, [r4, #0]
 8005346:	60a5      	str	r5, [r4, #8]
 8005348:	463e      	mov	r6, r7
 800534a:	42be      	cmp	r6, r7
 800534c:	d900      	bls.n	8005350 <__ssputs_r+0x70>
 800534e:	463e      	mov	r6, r7
 8005350:	6820      	ldr	r0, [r4, #0]
 8005352:	4632      	mov	r2, r6
 8005354:	4641      	mov	r1, r8
 8005356:	f000 fb86 	bl	8005a66 <memmove>
 800535a:	68a3      	ldr	r3, [r4, #8]
 800535c:	1b9b      	subs	r3, r3, r6
 800535e:	60a3      	str	r3, [r4, #8]
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	4433      	add	r3, r6
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	2000      	movs	r0, #0
 8005368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536c:	462a      	mov	r2, r5
 800536e:	f000 fb4b 	bl	8005a08 <_realloc_r>
 8005372:	4606      	mov	r6, r0
 8005374:	2800      	cmp	r0, #0
 8005376:	d1e0      	bne.n	800533a <__ssputs_r+0x5a>
 8005378:	6921      	ldr	r1, [r4, #16]
 800537a:	4650      	mov	r0, sl
 800537c:	f000 fbac 	bl	8005ad8 <_free_r>
 8005380:	230c      	movs	r3, #12
 8005382:	f8ca 3000 	str.w	r3, [sl]
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005392:	e7e9      	b.n	8005368 <__ssputs_r+0x88>

08005394 <_svfiprintf_r>:
 8005394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005398:	4698      	mov	r8, r3
 800539a:	898b      	ldrh	r3, [r1, #12]
 800539c:	061b      	lsls	r3, r3, #24
 800539e:	b09d      	sub	sp, #116	; 0x74
 80053a0:	4607      	mov	r7, r0
 80053a2:	460d      	mov	r5, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	d50e      	bpl.n	80053c6 <_svfiprintf_r+0x32>
 80053a8:	690b      	ldr	r3, [r1, #16]
 80053aa:	b963      	cbnz	r3, 80053c6 <_svfiprintf_r+0x32>
 80053ac:	2140      	movs	r1, #64	; 0x40
 80053ae:	f000 f90f 	bl	80055d0 <_malloc_r>
 80053b2:	6028      	str	r0, [r5, #0]
 80053b4:	6128      	str	r0, [r5, #16]
 80053b6:	b920      	cbnz	r0, 80053c2 <_svfiprintf_r+0x2e>
 80053b8:	230c      	movs	r3, #12
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053c0:	e0d0      	b.n	8005564 <_svfiprintf_r+0x1d0>
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	616b      	str	r3, [r5, #20]
 80053c6:	2300      	movs	r3, #0
 80053c8:	9309      	str	r3, [sp, #36]	; 0x24
 80053ca:	2320      	movs	r3, #32
 80053cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053d4:	2330      	movs	r3, #48	; 0x30
 80053d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800557c <_svfiprintf_r+0x1e8>
 80053da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053de:	f04f 0901 	mov.w	r9, #1
 80053e2:	4623      	mov	r3, r4
 80053e4:	469a      	mov	sl, r3
 80053e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ea:	b10a      	cbz	r2, 80053f0 <_svfiprintf_r+0x5c>
 80053ec:	2a25      	cmp	r2, #37	; 0x25
 80053ee:	d1f9      	bne.n	80053e4 <_svfiprintf_r+0x50>
 80053f0:	ebba 0b04 	subs.w	fp, sl, r4
 80053f4:	d00b      	beq.n	800540e <_svfiprintf_r+0x7a>
 80053f6:	465b      	mov	r3, fp
 80053f8:	4622      	mov	r2, r4
 80053fa:	4629      	mov	r1, r5
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff ff6f 	bl	80052e0 <__ssputs_r>
 8005402:	3001      	adds	r0, #1
 8005404:	f000 80a9 	beq.w	800555a <_svfiprintf_r+0x1c6>
 8005408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800540a:	445a      	add	r2, fp
 800540c:	9209      	str	r2, [sp, #36]	; 0x24
 800540e:	f89a 3000 	ldrb.w	r3, [sl]
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 80a1 	beq.w	800555a <_svfiprintf_r+0x1c6>
 8005418:	2300      	movs	r3, #0
 800541a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800541e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005422:	f10a 0a01 	add.w	sl, sl, #1
 8005426:	9304      	str	r3, [sp, #16]
 8005428:	9307      	str	r3, [sp, #28]
 800542a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800542e:	931a      	str	r3, [sp, #104]	; 0x68
 8005430:	4654      	mov	r4, sl
 8005432:	2205      	movs	r2, #5
 8005434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005438:	4850      	ldr	r0, [pc, #320]	; (800557c <_svfiprintf_r+0x1e8>)
 800543a:	f7fa fee9 	bl	8000210 <memchr>
 800543e:	9a04      	ldr	r2, [sp, #16]
 8005440:	b9d8      	cbnz	r0, 800547a <_svfiprintf_r+0xe6>
 8005442:	06d0      	lsls	r0, r2, #27
 8005444:	bf44      	itt	mi
 8005446:	2320      	movmi	r3, #32
 8005448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800544c:	0711      	lsls	r1, r2, #28
 800544e:	bf44      	itt	mi
 8005450:	232b      	movmi	r3, #43	; 0x2b
 8005452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005456:	f89a 3000 	ldrb.w	r3, [sl]
 800545a:	2b2a      	cmp	r3, #42	; 0x2a
 800545c:	d015      	beq.n	800548a <_svfiprintf_r+0xf6>
 800545e:	9a07      	ldr	r2, [sp, #28]
 8005460:	4654      	mov	r4, sl
 8005462:	2000      	movs	r0, #0
 8005464:	f04f 0c0a 	mov.w	ip, #10
 8005468:	4621      	mov	r1, r4
 800546a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800546e:	3b30      	subs	r3, #48	; 0x30
 8005470:	2b09      	cmp	r3, #9
 8005472:	d94d      	bls.n	8005510 <_svfiprintf_r+0x17c>
 8005474:	b1b0      	cbz	r0, 80054a4 <_svfiprintf_r+0x110>
 8005476:	9207      	str	r2, [sp, #28]
 8005478:	e014      	b.n	80054a4 <_svfiprintf_r+0x110>
 800547a:	eba0 0308 	sub.w	r3, r0, r8
 800547e:	fa09 f303 	lsl.w	r3, r9, r3
 8005482:	4313      	orrs	r3, r2
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	46a2      	mov	sl, r4
 8005488:	e7d2      	b.n	8005430 <_svfiprintf_r+0x9c>
 800548a:	9b03      	ldr	r3, [sp, #12]
 800548c:	1d19      	adds	r1, r3, #4
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	9103      	str	r1, [sp, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	bfbb      	ittet	lt
 8005496:	425b      	neglt	r3, r3
 8005498:	f042 0202 	orrlt.w	r2, r2, #2
 800549c:	9307      	strge	r3, [sp, #28]
 800549e:	9307      	strlt	r3, [sp, #28]
 80054a0:	bfb8      	it	lt
 80054a2:	9204      	strlt	r2, [sp, #16]
 80054a4:	7823      	ldrb	r3, [r4, #0]
 80054a6:	2b2e      	cmp	r3, #46	; 0x2e
 80054a8:	d10c      	bne.n	80054c4 <_svfiprintf_r+0x130>
 80054aa:	7863      	ldrb	r3, [r4, #1]
 80054ac:	2b2a      	cmp	r3, #42	; 0x2a
 80054ae:	d134      	bne.n	800551a <_svfiprintf_r+0x186>
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	9203      	str	r2, [sp, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	bfb8      	it	lt
 80054bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80054c0:	3402      	adds	r4, #2
 80054c2:	9305      	str	r3, [sp, #20]
 80054c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800558c <_svfiprintf_r+0x1f8>
 80054c8:	7821      	ldrb	r1, [r4, #0]
 80054ca:	2203      	movs	r2, #3
 80054cc:	4650      	mov	r0, sl
 80054ce:	f7fa fe9f 	bl	8000210 <memchr>
 80054d2:	b138      	cbz	r0, 80054e4 <_svfiprintf_r+0x150>
 80054d4:	9b04      	ldr	r3, [sp, #16]
 80054d6:	eba0 000a 	sub.w	r0, r0, sl
 80054da:	2240      	movs	r2, #64	; 0x40
 80054dc:	4082      	lsls	r2, r0
 80054de:	4313      	orrs	r3, r2
 80054e0:	3401      	adds	r4, #1
 80054e2:	9304      	str	r3, [sp, #16]
 80054e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e8:	4825      	ldr	r0, [pc, #148]	; (8005580 <_svfiprintf_r+0x1ec>)
 80054ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054ee:	2206      	movs	r2, #6
 80054f0:	f7fa fe8e 	bl	8000210 <memchr>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d038      	beq.n	800556a <_svfiprintf_r+0x1d6>
 80054f8:	4b22      	ldr	r3, [pc, #136]	; (8005584 <_svfiprintf_r+0x1f0>)
 80054fa:	bb1b      	cbnz	r3, 8005544 <_svfiprintf_r+0x1b0>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	3307      	adds	r3, #7
 8005500:	f023 0307 	bic.w	r3, r3, #7
 8005504:	3308      	adds	r3, #8
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	4433      	add	r3, r6
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
 800550e:	e768      	b.n	80053e2 <_svfiprintf_r+0x4e>
 8005510:	fb0c 3202 	mla	r2, ip, r2, r3
 8005514:	460c      	mov	r4, r1
 8005516:	2001      	movs	r0, #1
 8005518:	e7a6      	b.n	8005468 <_svfiprintf_r+0xd4>
 800551a:	2300      	movs	r3, #0
 800551c:	3401      	adds	r4, #1
 800551e:	9305      	str	r3, [sp, #20]
 8005520:	4619      	mov	r1, r3
 8005522:	f04f 0c0a 	mov.w	ip, #10
 8005526:	4620      	mov	r0, r4
 8005528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800552c:	3a30      	subs	r2, #48	; 0x30
 800552e:	2a09      	cmp	r2, #9
 8005530:	d903      	bls.n	800553a <_svfiprintf_r+0x1a6>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0c6      	beq.n	80054c4 <_svfiprintf_r+0x130>
 8005536:	9105      	str	r1, [sp, #20]
 8005538:	e7c4      	b.n	80054c4 <_svfiprintf_r+0x130>
 800553a:	fb0c 2101 	mla	r1, ip, r1, r2
 800553e:	4604      	mov	r4, r0
 8005540:	2301      	movs	r3, #1
 8005542:	e7f0      	b.n	8005526 <_svfiprintf_r+0x192>
 8005544:	ab03      	add	r3, sp, #12
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	462a      	mov	r2, r5
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <_svfiprintf_r+0x1f4>)
 800554c:	a904      	add	r1, sp, #16
 800554e:	4638      	mov	r0, r7
 8005550:	f3af 8000 	nop.w
 8005554:	1c42      	adds	r2, r0, #1
 8005556:	4606      	mov	r6, r0
 8005558:	d1d6      	bne.n	8005508 <_svfiprintf_r+0x174>
 800555a:	89ab      	ldrh	r3, [r5, #12]
 800555c:	065b      	lsls	r3, r3, #25
 800555e:	f53f af2d 	bmi.w	80053bc <_svfiprintf_r+0x28>
 8005562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005564:	b01d      	add	sp, #116	; 0x74
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556a:	ab03      	add	r3, sp, #12
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	462a      	mov	r2, r5
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <_svfiprintf_r+0x1f4>)
 8005572:	a904      	add	r1, sp, #16
 8005574:	4638      	mov	r0, r7
 8005576:	f000 f919 	bl	80057ac <_printf_i>
 800557a:	e7eb      	b.n	8005554 <_svfiprintf_r+0x1c0>
 800557c:	08007680 	.word	0x08007680
 8005580:	0800768a 	.word	0x0800768a
 8005584:	00000000 	.word	0x00000000
 8005588:	080052e1 	.word	0x080052e1
 800558c:	08007686 	.word	0x08007686

08005590 <sbrk_aligned>:
 8005590:	b570      	push	{r4, r5, r6, lr}
 8005592:	4e0e      	ldr	r6, [pc, #56]	; (80055cc <sbrk_aligned+0x3c>)
 8005594:	460c      	mov	r4, r1
 8005596:	6831      	ldr	r1, [r6, #0]
 8005598:	4605      	mov	r5, r0
 800559a:	b911      	cbnz	r1, 80055a2 <sbrk_aligned+0x12>
 800559c:	f000 fa7e 	bl	8005a9c <_sbrk_r>
 80055a0:	6030      	str	r0, [r6, #0]
 80055a2:	4621      	mov	r1, r4
 80055a4:	4628      	mov	r0, r5
 80055a6:	f000 fa79 	bl	8005a9c <_sbrk_r>
 80055aa:	1c43      	adds	r3, r0, #1
 80055ac:	d00a      	beq.n	80055c4 <sbrk_aligned+0x34>
 80055ae:	1cc4      	adds	r4, r0, #3
 80055b0:	f024 0403 	bic.w	r4, r4, #3
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d007      	beq.n	80055c8 <sbrk_aligned+0x38>
 80055b8:	1a21      	subs	r1, r4, r0
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 fa6e 	bl	8005a9c <_sbrk_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d101      	bne.n	80055c8 <sbrk_aligned+0x38>
 80055c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80055c8:	4620      	mov	r0, r4
 80055ca:	bd70      	pop	{r4, r5, r6, pc}
 80055cc:	2000a82c 	.word	0x2000a82c

080055d0 <_malloc_r>:
 80055d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d4:	1ccd      	adds	r5, r1, #3
 80055d6:	f025 0503 	bic.w	r5, r5, #3
 80055da:	3508      	adds	r5, #8
 80055dc:	2d0c      	cmp	r5, #12
 80055de:	bf38      	it	cc
 80055e0:	250c      	movcc	r5, #12
 80055e2:	2d00      	cmp	r5, #0
 80055e4:	4607      	mov	r7, r0
 80055e6:	db01      	blt.n	80055ec <_malloc_r+0x1c>
 80055e8:	42a9      	cmp	r1, r5
 80055ea:	d905      	bls.n	80055f8 <_malloc_r+0x28>
 80055ec:	230c      	movs	r3, #12
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	2600      	movs	r6, #0
 80055f2:	4630      	mov	r0, r6
 80055f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056cc <_malloc_r+0xfc>
 80055fc:	f000 f9f8 	bl	80059f0 <__malloc_lock>
 8005600:	f8d8 3000 	ldr.w	r3, [r8]
 8005604:	461c      	mov	r4, r3
 8005606:	bb5c      	cbnz	r4, 8005660 <_malloc_r+0x90>
 8005608:	4629      	mov	r1, r5
 800560a:	4638      	mov	r0, r7
 800560c:	f7ff ffc0 	bl	8005590 <sbrk_aligned>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	4604      	mov	r4, r0
 8005614:	d155      	bne.n	80056c2 <_malloc_r+0xf2>
 8005616:	f8d8 4000 	ldr.w	r4, [r8]
 800561a:	4626      	mov	r6, r4
 800561c:	2e00      	cmp	r6, #0
 800561e:	d145      	bne.n	80056ac <_malloc_r+0xdc>
 8005620:	2c00      	cmp	r4, #0
 8005622:	d048      	beq.n	80056b6 <_malloc_r+0xe6>
 8005624:	6823      	ldr	r3, [r4, #0]
 8005626:	4631      	mov	r1, r6
 8005628:	4638      	mov	r0, r7
 800562a:	eb04 0903 	add.w	r9, r4, r3
 800562e:	f000 fa35 	bl	8005a9c <_sbrk_r>
 8005632:	4581      	cmp	r9, r0
 8005634:	d13f      	bne.n	80056b6 <_malloc_r+0xe6>
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	1a6d      	subs	r5, r5, r1
 800563a:	4629      	mov	r1, r5
 800563c:	4638      	mov	r0, r7
 800563e:	f7ff ffa7 	bl	8005590 <sbrk_aligned>
 8005642:	3001      	adds	r0, #1
 8005644:	d037      	beq.n	80056b6 <_malloc_r+0xe6>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	442b      	add	r3, r5
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	f8d8 3000 	ldr.w	r3, [r8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d038      	beq.n	80056c6 <_malloc_r+0xf6>
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	42a2      	cmp	r2, r4
 8005658:	d12b      	bne.n	80056b2 <_malloc_r+0xe2>
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	e00f      	b.n	8005680 <_malloc_r+0xb0>
 8005660:	6822      	ldr	r2, [r4, #0]
 8005662:	1b52      	subs	r2, r2, r5
 8005664:	d41f      	bmi.n	80056a6 <_malloc_r+0xd6>
 8005666:	2a0b      	cmp	r2, #11
 8005668:	d917      	bls.n	800569a <_malloc_r+0xca>
 800566a:	1961      	adds	r1, r4, r5
 800566c:	42a3      	cmp	r3, r4
 800566e:	6025      	str	r5, [r4, #0]
 8005670:	bf18      	it	ne
 8005672:	6059      	strne	r1, [r3, #4]
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	bf08      	it	eq
 8005678:	f8c8 1000 	streq.w	r1, [r8]
 800567c:	5162      	str	r2, [r4, r5]
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	4638      	mov	r0, r7
 8005682:	f104 060b 	add.w	r6, r4, #11
 8005686:	f000 f9b9 	bl	80059fc <__malloc_unlock>
 800568a:	f026 0607 	bic.w	r6, r6, #7
 800568e:	1d23      	adds	r3, r4, #4
 8005690:	1af2      	subs	r2, r6, r3
 8005692:	d0ae      	beq.n	80055f2 <_malloc_r+0x22>
 8005694:	1b9b      	subs	r3, r3, r6
 8005696:	50a3      	str	r3, [r4, r2]
 8005698:	e7ab      	b.n	80055f2 <_malloc_r+0x22>
 800569a:	42a3      	cmp	r3, r4
 800569c:	6862      	ldr	r2, [r4, #4]
 800569e:	d1dd      	bne.n	800565c <_malloc_r+0x8c>
 80056a0:	f8c8 2000 	str.w	r2, [r8]
 80056a4:	e7ec      	b.n	8005680 <_malloc_r+0xb0>
 80056a6:	4623      	mov	r3, r4
 80056a8:	6864      	ldr	r4, [r4, #4]
 80056aa:	e7ac      	b.n	8005606 <_malloc_r+0x36>
 80056ac:	4634      	mov	r4, r6
 80056ae:	6876      	ldr	r6, [r6, #4]
 80056b0:	e7b4      	b.n	800561c <_malloc_r+0x4c>
 80056b2:	4613      	mov	r3, r2
 80056b4:	e7cc      	b.n	8005650 <_malloc_r+0x80>
 80056b6:	230c      	movs	r3, #12
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4638      	mov	r0, r7
 80056bc:	f000 f99e 	bl	80059fc <__malloc_unlock>
 80056c0:	e797      	b.n	80055f2 <_malloc_r+0x22>
 80056c2:	6025      	str	r5, [r4, #0]
 80056c4:	e7dc      	b.n	8005680 <_malloc_r+0xb0>
 80056c6:	605b      	str	r3, [r3, #4]
 80056c8:	deff      	udf	#255	; 0xff
 80056ca:	bf00      	nop
 80056cc:	2000a828 	.word	0x2000a828

080056d0 <_printf_common>:
 80056d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d4:	4616      	mov	r6, r2
 80056d6:	4699      	mov	r9, r3
 80056d8:	688a      	ldr	r2, [r1, #8]
 80056da:	690b      	ldr	r3, [r1, #16]
 80056dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e0:	4293      	cmp	r3, r2
 80056e2:	bfb8      	it	lt
 80056e4:	4613      	movlt	r3, r2
 80056e6:	6033      	str	r3, [r6, #0]
 80056e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ec:	4607      	mov	r7, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	b10a      	cbz	r2, 80056f6 <_printf_common+0x26>
 80056f2:	3301      	adds	r3, #1
 80056f4:	6033      	str	r3, [r6, #0]
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	0699      	lsls	r1, r3, #26
 80056fa:	bf42      	ittt	mi
 80056fc:	6833      	ldrmi	r3, [r6, #0]
 80056fe:	3302      	addmi	r3, #2
 8005700:	6033      	strmi	r3, [r6, #0]
 8005702:	6825      	ldr	r5, [r4, #0]
 8005704:	f015 0506 	ands.w	r5, r5, #6
 8005708:	d106      	bne.n	8005718 <_printf_common+0x48>
 800570a:	f104 0a19 	add.w	sl, r4, #25
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	6832      	ldr	r2, [r6, #0]
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	42ab      	cmp	r3, r5
 8005716:	dc26      	bgt.n	8005766 <_printf_common+0x96>
 8005718:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800571c:	1e13      	subs	r3, r2, #0
 800571e:	6822      	ldr	r2, [r4, #0]
 8005720:	bf18      	it	ne
 8005722:	2301      	movne	r3, #1
 8005724:	0692      	lsls	r2, r2, #26
 8005726:	d42b      	bmi.n	8005780 <_printf_common+0xb0>
 8005728:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800572c:	4649      	mov	r1, r9
 800572e:	4638      	mov	r0, r7
 8005730:	47c0      	blx	r8
 8005732:	3001      	adds	r0, #1
 8005734:	d01e      	beq.n	8005774 <_printf_common+0xa4>
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	6922      	ldr	r2, [r4, #16]
 800573a:	f003 0306 	and.w	r3, r3, #6
 800573e:	2b04      	cmp	r3, #4
 8005740:	bf02      	ittt	eq
 8005742:	68e5      	ldreq	r5, [r4, #12]
 8005744:	6833      	ldreq	r3, [r6, #0]
 8005746:	1aed      	subeq	r5, r5, r3
 8005748:	68a3      	ldr	r3, [r4, #8]
 800574a:	bf0c      	ite	eq
 800574c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005750:	2500      	movne	r5, #0
 8005752:	4293      	cmp	r3, r2
 8005754:	bfc4      	itt	gt
 8005756:	1a9b      	subgt	r3, r3, r2
 8005758:	18ed      	addgt	r5, r5, r3
 800575a:	2600      	movs	r6, #0
 800575c:	341a      	adds	r4, #26
 800575e:	42b5      	cmp	r5, r6
 8005760:	d11a      	bne.n	8005798 <_printf_common+0xc8>
 8005762:	2000      	movs	r0, #0
 8005764:	e008      	b.n	8005778 <_printf_common+0xa8>
 8005766:	2301      	movs	r3, #1
 8005768:	4652      	mov	r2, sl
 800576a:	4649      	mov	r1, r9
 800576c:	4638      	mov	r0, r7
 800576e:	47c0      	blx	r8
 8005770:	3001      	adds	r0, #1
 8005772:	d103      	bne.n	800577c <_printf_common+0xac>
 8005774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577c:	3501      	adds	r5, #1
 800577e:	e7c6      	b.n	800570e <_printf_common+0x3e>
 8005780:	18e1      	adds	r1, r4, r3
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	2030      	movs	r0, #48	; 0x30
 8005786:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800578a:	4422      	add	r2, r4
 800578c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005790:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005794:	3302      	adds	r3, #2
 8005796:	e7c7      	b.n	8005728 <_printf_common+0x58>
 8005798:	2301      	movs	r3, #1
 800579a:	4622      	mov	r2, r4
 800579c:	4649      	mov	r1, r9
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	3001      	adds	r0, #1
 80057a4:	d0e6      	beq.n	8005774 <_printf_common+0xa4>
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7d9      	b.n	800575e <_printf_common+0x8e>
	...

080057ac <_printf_i>:
 80057ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b0:	7e0f      	ldrb	r7, [r1, #24]
 80057b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b4:	2f78      	cmp	r7, #120	; 0x78
 80057b6:	4691      	mov	r9, r2
 80057b8:	4680      	mov	r8, r0
 80057ba:	460c      	mov	r4, r1
 80057bc:	469a      	mov	sl, r3
 80057be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057c2:	d807      	bhi.n	80057d4 <_printf_i+0x28>
 80057c4:	2f62      	cmp	r7, #98	; 0x62
 80057c6:	d80a      	bhi.n	80057de <_printf_i+0x32>
 80057c8:	2f00      	cmp	r7, #0
 80057ca:	f000 80d4 	beq.w	8005976 <_printf_i+0x1ca>
 80057ce:	2f58      	cmp	r7, #88	; 0x58
 80057d0:	f000 80c0 	beq.w	8005954 <_printf_i+0x1a8>
 80057d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057dc:	e03a      	b.n	8005854 <_printf_i+0xa8>
 80057de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057e2:	2b15      	cmp	r3, #21
 80057e4:	d8f6      	bhi.n	80057d4 <_printf_i+0x28>
 80057e6:	a101      	add	r1, pc, #4	; (adr r1, 80057ec <_printf_i+0x40>)
 80057e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ec:	08005845 	.word	0x08005845
 80057f0:	08005859 	.word	0x08005859
 80057f4:	080057d5 	.word	0x080057d5
 80057f8:	080057d5 	.word	0x080057d5
 80057fc:	080057d5 	.word	0x080057d5
 8005800:	080057d5 	.word	0x080057d5
 8005804:	08005859 	.word	0x08005859
 8005808:	080057d5 	.word	0x080057d5
 800580c:	080057d5 	.word	0x080057d5
 8005810:	080057d5 	.word	0x080057d5
 8005814:	080057d5 	.word	0x080057d5
 8005818:	0800595d 	.word	0x0800595d
 800581c:	08005885 	.word	0x08005885
 8005820:	08005917 	.word	0x08005917
 8005824:	080057d5 	.word	0x080057d5
 8005828:	080057d5 	.word	0x080057d5
 800582c:	0800597f 	.word	0x0800597f
 8005830:	080057d5 	.word	0x080057d5
 8005834:	08005885 	.word	0x08005885
 8005838:	080057d5 	.word	0x080057d5
 800583c:	080057d5 	.word	0x080057d5
 8005840:	0800591f 	.word	0x0800591f
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	602a      	str	r2, [r5, #0]
 800584c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005854:	2301      	movs	r3, #1
 8005856:	e09f      	b.n	8005998 <_printf_i+0x1ec>
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	0607      	lsls	r7, r0, #24
 800585e:	f103 0104 	add.w	r1, r3, #4
 8005862:	6029      	str	r1, [r5, #0]
 8005864:	d501      	bpl.n	800586a <_printf_i+0xbe>
 8005866:	681e      	ldr	r6, [r3, #0]
 8005868:	e003      	b.n	8005872 <_printf_i+0xc6>
 800586a:	0646      	lsls	r6, r0, #25
 800586c:	d5fb      	bpl.n	8005866 <_printf_i+0xba>
 800586e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005872:	2e00      	cmp	r6, #0
 8005874:	da03      	bge.n	800587e <_printf_i+0xd2>
 8005876:	232d      	movs	r3, #45	; 0x2d
 8005878:	4276      	negs	r6, r6
 800587a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587e:	485a      	ldr	r0, [pc, #360]	; (80059e8 <_printf_i+0x23c>)
 8005880:	230a      	movs	r3, #10
 8005882:	e012      	b.n	80058aa <_printf_i+0xfe>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	6820      	ldr	r0, [r4, #0]
 8005888:	1d19      	adds	r1, r3, #4
 800588a:	6029      	str	r1, [r5, #0]
 800588c:	0605      	lsls	r5, r0, #24
 800588e:	d501      	bpl.n	8005894 <_printf_i+0xe8>
 8005890:	681e      	ldr	r6, [r3, #0]
 8005892:	e002      	b.n	800589a <_printf_i+0xee>
 8005894:	0641      	lsls	r1, r0, #25
 8005896:	d5fb      	bpl.n	8005890 <_printf_i+0xe4>
 8005898:	881e      	ldrh	r6, [r3, #0]
 800589a:	4853      	ldr	r0, [pc, #332]	; (80059e8 <_printf_i+0x23c>)
 800589c:	2f6f      	cmp	r7, #111	; 0x6f
 800589e:	bf0c      	ite	eq
 80058a0:	2308      	moveq	r3, #8
 80058a2:	230a      	movne	r3, #10
 80058a4:	2100      	movs	r1, #0
 80058a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058aa:	6865      	ldr	r5, [r4, #4]
 80058ac:	60a5      	str	r5, [r4, #8]
 80058ae:	2d00      	cmp	r5, #0
 80058b0:	bfa2      	ittt	ge
 80058b2:	6821      	ldrge	r1, [r4, #0]
 80058b4:	f021 0104 	bicge.w	r1, r1, #4
 80058b8:	6021      	strge	r1, [r4, #0]
 80058ba:	b90e      	cbnz	r6, 80058c0 <_printf_i+0x114>
 80058bc:	2d00      	cmp	r5, #0
 80058be:	d04b      	beq.n	8005958 <_printf_i+0x1ac>
 80058c0:	4615      	mov	r5, r2
 80058c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058c6:	fb03 6711 	mls	r7, r3, r1, r6
 80058ca:	5dc7      	ldrb	r7, [r0, r7]
 80058cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058d0:	4637      	mov	r7, r6
 80058d2:	42bb      	cmp	r3, r7
 80058d4:	460e      	mov	r6, r1
 80058d6:	d9f4      	bls.n	80058c2 <_printf_i+0x116>
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d10b      	bne.n	80058f4 <_printf_i+0x148>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	07de      	lsls	r6, r3, #31
 80058e0:	d508      	bpl.n	80058f4 <_printf_i+0x148>
 80058e2:	6923      	ldr	r3, [r4, #16]
 80058e4:	6861      	ldr	r1, [r4, #4]
 80058e6:	4299      	cmp	r1, r3
 80058e8:	bfde      	ittt	le
 80058ea:	2330      	movle	r3, #48	; 0x30
 80058ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80058f4:	1b52      	subs	r2, r2, r5
 80058f6:	6122      	str	r2, [r4, #16]
 80058f8:	f8cd a000 	str.w	sl, [sp]
 80058fc:	464b      	mov	r3, r9
 80058fe:	aa03      	add	r2, sp, #12
 8005900:	4621      	mov	r1, r4
 8005902:	4640      	mov	r0, r8
 8005904:	f7ff fee4 	bl	80056d0 <_printf_common>
 8005908:	3001      	adds	r0, #1
 800590a:	d14a      	bne.n	80059a2 <_printf_i+0x1f6>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005910:	b004      	add	sp, #16
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	f043 0320 	orr.w	r3, r3, #32
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	4833      	ldr	r0, [pc, #204]	; (80059ec <_printf_i+0x240>)
 8005920:	2778      	movs	r7, #120	; 0x78
 8005922:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	6829      	ldr	r1, [r5, #0]
 800592a:	061f      	lsls	r7, r3, #24
 800592c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005930:	d402      	bmi.n	8005938 <_printf_i+0x18c>
 8005932:	065f      	lsls	r7, r3, #25
 8005934:	bf48      	it	mi
 8005936:	b2b6      	uxthmi	r6, r6
 8005938:	07df      	lsls	r7, r3, #31
 800593a:	bf48      	it	mi
 800593c:	f043 0320 	orrmi.w	r3, r3, #32
 8005940:	6029      	str	r1, [r5, #0]
 8005942:	bf48      	it	mi
 8005944:	6023      	strmi	r3, [r4, #0]
 8005946:	b91e      	cbnz	r6, 8005950 <_printf_i+0x1a4>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	f023 0320 	bic.w	r3, r3, #32
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	2310      	movs	r3, #16
 8005952:	e7a7      	b.n	80058a4 <_printf_i+0xf8>
 8005954:	4824      	ldr	r0, [pc, #144]	; (80059e8 <_printf_i+0x23c>)
 8005956:	e7e4      	b.n	8005922 <_printf_i+0x176>
 8005958:	4615      	mov	r5, r2
 800595a:	e7bd      	b.n	80058d8 <_printf_i+0x12c>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	6826      	ldr	r6, [r4, #0]
 8005960:	6961      	ldr	r1, [r4, #20]
 8005962:	1d18      	adds	r0, r3, #4
 8005964:	6028      	str	r0, [r5, #0]
 8005966:	0635      	lsls	r5, r6, #24
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	d501      	bpl.n	8005970 <_printf_i+0x1c4>
 800596c:	6019      	str	r1, [r3, #0]
 800596e:	e002      	b.n	8005976 <_printf_i+0x1ca>
 8005970:	0670      	lsls	r0, r6, #25
 8005972:	d5fb      	bpl.n	800596c <_printf_i+0x1c0>
 8005974:	8019      	strh	r1, [r3, #0]
 8005976:	2300      	movs	r3, #0
 8005978:	6123      	str	r3, [r4, #16]
 800597a:	4615      	mov	r5, r2
 800597c:	e7bc      	b.n	80058f8 <_printf_i+0x14c>
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	1d1a      	adds	r2, r3, #4
 8005982:	602a      	str	r2, [r5, #0]
 8005984:	681d      	ldr	r5, [r3, #0]
 8005986:	6862      	ldr	r2, [r4, #4]
 8005988:	2100      	movs	r1, #0
 800598a:	4628      	mov	r0, r5
 800598c:	f7fa fc40 	bl	8000210 <memchr>
 8005990:	b108      	cbz	r0, 8005996 <_printf_i+0x1ea>
 8005992:	1b40      	subs	r0, r0, r5
 8005994:	6060      	str	r0, [r4, #4]
 8005996:	6863      	ldr	r3, [r4, #4]
 8005998:	6123      	str	r3, [r4, #16]
 800599a:	2300      	movs	r3, #0
 800599c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a0:	e7aa      	b.n	80058f8 <_printf_i+0x14c>
 80059a2:	6923      	ldr	r3, [r4, #16]
 80059a4:	462a      	mov	r2, r5
 80059a6:	4649      	mov	r1, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	47d0      	blx	sl
 80059ac:	3001      	adds	r0, #1
 80059ae:	d0ad      	beq.n	800590c <_printf_i+0x160>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	079b      	lsls	r3, r3, #30
 80059b4:	d413      	bmi.n	80059de <_printf_i+0x232>
 80059b6:	68e0      	ldr	r0, [r4, #12]
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	4298      	cmp	r0, r3
 80059bc:	bfb8      	it	lt
 80059be:	4618      	movlt	r0, r3
 80059c0:	e7a6      	b.n	8005910 <_printf_i+0x164>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4632      	mov	r2, r6
 80059c6:	4649      	mov	r1, r9
 80059c8:	4640      	mov	r0, r8
 80059ca:	47d0      	blx	sl
 80059cc:	3001      	adds	r0, #1
 80059ce:	d09d      	beq.n	800590c <_printf_i+0x160>
 80059d0:	3501      	adds	r5, #1
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	9903      	ldr	r1, [sp, #12]
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	42ab      	cmp	r3, r5
 80059da:	dcf2      	bgt.n	80059c2 <_printf_i+0x216>
 80059dc:	e7eb      	b.n	80059b6 <_printf_i+0x20a>
 80059de:	2500      	movs	r5, #0
 80059e0:	f104 0619 	add.w	r6, r4, #25
 80059e4:	e7f5      	b.n	80059d2 <_printf_i+0x226>
 80059e6:	bf00      	nop
 80059e8:	08007691 	.word	0x08007691
 80059ec:	080076a2 	.word	0x080076a2

080059f0 <__malloc_lock>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__malloc_lock+0x8>)
 80059f2:	f7ff bc73 	b.w	80052dc <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	2000a824 	.word	0x2000a824

080059fc <__malloc_unlock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__malloc_unlock+0x8>)
 80059fe:	f7ff bc6e 	b.w	80052de <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	2000a824 	.word	0x2000a824

08005a08 <_realloc_r>:
 8005a08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0c:	4680      	mov	r8, r0
 8005a0e:	4614      	mov	r4, r2
 8005a10:	460e      	mov	r6, r1
 8005a12:	b921      	cbnz	r1, 8005a1e <_realloc_r+0x16>
 8005a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a18:	4611      	mov	r1, r2
 8005a1a:	f7ff bdd9 	b.w	80055d0 <_malloc_r>
 8005a1e:	b92a      	cbnz	r2, 8005a2c <_realloc_r+0x24>
 8005a20:	f000 f85a 	bl	8005ad8 <_free_r>
 8005a24:	4625      	mov	r5, r4
 8005a26:	4628      	mov	r0, r5
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2c:	f000 f8a0 	bl	8005b70 <_malloc_usable_size_r>
 8005a30:	4284      	cmp	r4, r0
 8005a32:	4607      	mov	r7, r0
 8005a34:	d802      	bhi.n	8005a3c <_realloc_r+0x34>
 8005a36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a3a:	d812      	bhi.n	8005a62 <_realloc_r+0x5a>
 8005a3c:	4621      	mov	r1, r4
 8005a3e:	4640      	mov	r0, r8
 8005a40:	f7ff fdc6 	bl	80055d0 <_malloc_r>
 8005a44:	4605      	mov	r5, r0
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d0ed      	beq.n	8005a26 <_realloc_r+0x1e>
 8005a4a:	42bc      	cmp	r4, r7
 8005a4c:	4622      	mov	r2, r4
 8005a4e:	4631      	mov	r1, r6
 8005a50:	bf28      	it	cs
 8005a52:	463a      	movcs	r2, r7
 8005a54:	f000 f832 	bl	8005abc <memcpy>
 8005a58:	4631      	mov	r1, r6
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	f000 f83c 	bl	8005ad8 <_free_r>
 8005a60:	e7e1      	b.n	8005a26 <_realloc_r+0x1e>
 8005a62:	4635      	mov	r5, r6
 8005a64:	e7df      	b.n	8005a26 <_realloc_r+0x1e>

08005a66 <memmove>:
 8005a66:	4288      	cmp	r0, r1
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	eb01 0402 	add.w	r4, r1, r2
 8005a6e:	d902      	bls.n	8005a76 <memmove+0x10>
 8005a70:	4284      	cmp	r4, r0
 8005a72:	4623      	mov	r3, r4
 8005a74:	d807      	bhi.n	8005a86 <memmove+0x20>
 8005a76:	1e43      	subs	r3, r0, #1
 8005a78:	42a1      	cmp	r1, r4
 8005a7a:	d008      	beq.n	8005a8e <memmove+0x28>
 8005a7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a80:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a84:	e7f8      	b.n	8005a78 <memmove+0x12>
 8005a86:	4402      	add	r2, r0
 8005a88:	4601      	mov	r1, r0
 8005a8a:	428a      	cmp	r2, r1
 8005a8c:	d100      	bne.n	8005a90 <memmove+0x2a>
 8005a8e:	bd10      	pop	{r4, pc}
 8005a90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a94:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a98:	e7f7      	b.n	8005a8a <memmove+0x24>
	...

08005a9c <_sbrk_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d06      	ldr	r5, [pc, #24]	; (8005ab8 <_sbrk_r+0x1c>)
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	4604      	mov	r4, r0
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	602b      	str	r3, [r5, #0]
 8005aa8:	f7fb fd16 	bl	80014d8 <_sbrk>
 8005aac:	1c43      	adds	r3, r0, #1
 8005aae:	d102      	bne.n	8005ab6 <_sbrk_r+0x1a>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	b103      	cbz	r3, 8005ab6 <_sbrk_r+0x1a>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	bd38      	pop	{r3, r4, r5, pc}
 8005ab8:	2000a830 	.word	0x2000a830

08005abc <memcpy>:
 8005abc:	440a      	add	r2, r1
 8005abe:	4291      	cmp	r1, r2
 8005ac0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ac4:	d100      	bne.n	8005ac8 <memcpy+0xc>
 8005ac6:	4770      	bx	lr
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ace:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ad2:	4291      	cmp	r1, r2
 8005ad4:	d1f9      	bne.n	8005aca <memcpy+0xe>
 8005ad6:	bd10      	pop	{r4, pc}

08005ad8 <_free_r>:
 8005ad8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ada:	2900      	cmp	r1, #0
 8005adc:	d044      	beq.n	8005b68 <_free_r+0x90>
 8005ade:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae2:	9001      	str	r0, [sp, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f1a1 0404 	sub.w	r4, r1, #4
 8005aea:	bfb8      	it	lt
 8005aec:	18e4      	addlt	r4, r4, r3
 8005aee:	f7ff ff7f 	bl	80059f0 <__malloc_lock>
 8005af2:	4a1e      	ldr	r2, [pc, #120]	; (8005b6c <_free_r+0x94>)
 8005af4:	9801      	ldr	r0, [sp, #4]
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	b933      	cbnz	r3, 8005b08 <_free_r+0x30>
 8005afa:	6063      	str	r3, [r4, #4]
 8005afc:	6014      	str	r4, [r2, #0]
 8005afe:	b003      	add	sp, #12
 8005b00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b04:	f7ff bf7a 	b.w	80059fc <__malloc_unlock>
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d908      	bls.n	8005b1e <_free_r+0x46>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	1961      	adds	r1, r4, r5
 8005b10:	428b      	cmp	r3, r1
 8005b12:	bf01      	itttt	eq
 8005b14:	6819      	ldreq	r1, [r3, #0]
 8005b16:	685b      	ldreq	r3, [r3, #4]
 8005b18:	1949      	addeq	r1, r1, r5
 8005b1a:	6021      	streq	r1, [r4, #0]
 8005b1c:	e7ed      	b.n	8005afa <_free_r+0x22>
 8005b1e:	461a      	mov	r2, r3
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	b10b      	cbz	r3, 8005b28 <_free_r+0x50>
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	d9fa      	bls.n	8005b1e <_free_r+0x46>
 8005b28:	6811      	ldr	r1, [r2, #0]
 8005b2a:	1855      	adds	r5, r2, r1
 8005b2c:	42a5      	cmp	r5, r4
 8005b2e:	d10b      	bne.n	8005b48 <_free_r+0x70>
 8005b30:	6824      	ldr	r4, [r4, #0]
 8005b32:	4421      	add	r1, r4
 8005b34:	1854      	adds	r4, r2, r1
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	d1e0      	bne.n	8005afe <_free_r+0x26>
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	6053      	str	r3, [r2, #4]
 8005b42:	440c      	add	r4, r1
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	e7da      	b.n	8005afe <_free_r+0x26>
 8005b48:	d902      	bls.n	8005b50 <_free_r+0x78>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	6003      	str	r3, [r0, #0]
 8005b4e:	e7d6      	b.n	8005afe <_free_r+0x26>
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf04      	itt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	6063      	str	r3, [r4, #4]
 8005b5e:	bf04      	itt	eq
 8005b60:	1949      	addeq	r1, r1, r5
 8005b62:	6021      	streq	r1, [r4, #0]
 8005b64:	6054      	str	r4, [r2, #4]
 8005b66:	e7ca      	b.n	8005afe <_free_r+0x26>
 8005b68:	b003      	add	sp, #12
 8005b6a:	bd30      	pop	{r4, r5, pc}
 8005b6c:	2000a828 	.word	0x2000a828

08005b70 <_malloc_usable_size_r>:
 8005b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b74:	1f18      	subs	r0, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfbc      	itt	lt
 8005b7a:	580b      	ldrlt	r3, [r1, r0]
 8005b7c:	18c0      	addlt	r0, r0, r3
 8005b7e:	4770      	bx	lr

08005b80 <_init>:
 8005b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b82:	bf00      	nop
 8005b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b86:	bc08      	pop	{r3}
 8005b88:	469e      	mov	lr, r3
 8005b8a:	4770      	bx	lr

08005b8c <_fini>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr
